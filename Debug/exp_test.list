
exp_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043b0  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  08004538  08004538  00005538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a38  08004a38  000061b4  2**0
                  CONTENTS
  4 .ARM          00000008  08004a38  08004a38  00005a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a40  08004a40  000061b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a40  08004a40  00005a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a44  08004a44  00005a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001b4  20000000  08004a48  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000061b4  2**0
                  CONTENTS
 10 .bss          00000484  200001b4  200001b4  000061b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000638  20000638  000061b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000061b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009360  00000000  00000000  000061e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000253e  00000000  00000000  0000f544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af8  00000000  00000000  00011a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007fa  00000000  00000000  00012580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d963  00000000  00000000  00012d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ada1  00000000  00000000  000306dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009eb79  00000000  00000000  0003b47e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d9ff7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d80  00000000  00000000  000da03c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  000dcdbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001b4 	.word	0x200001b4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004520 	.word	0x08004520

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001b8 	.word	0x200001b8
 80001c4:	08004520 	.word	0x08004520

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_ldivmod>:
 80001ec:	b97b      	cbnz	r3, 800020e <__aeabi_ldivmod+0x22>
 80001ee:	b972      	cbnz	r2, 800020e <__aeabi_ldivmod+0x22>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bfbe      	ittt	lt
 80001f4:	2000      	movlt	r0, #0
 80001f6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80001fa:	e006      	blt.n	800020a <__aeabi_ldivmod+0x1e>
 80001fc:	bf08      	it	eq
 80001fe:	2800      	cmpeq	r0, #0
 8000200:	bf1c      	itt	ne
 8000202:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000206:	f04f 30ff 	movne.w	r0, #4294967295
 800020a:	f000 b9b5 	b.w	8000578 <__aeabi_idiv0>
 800020e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000212:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000216:	2900      	cmp	r1, #0
 8000218:	db09      	blt.n	800022e <__aeabi_ldivmod+0x42>
 800021a:	2b00      	cmp	r3, #0
 800021c:	db1a      	blt.n	8000254 <__aeabi_ldivmod+0x68>
 800021e:	f000 f84d 	bl	80002bc <__udivmoddi4>
 8000222:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000226:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022a:	b004      	add	sp, #16
 800022c:	4770      	bx	lr
 800022e:	4240      	negs	r0, r0
 8000230:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000234:	2b00      	cmp	r3, #0
 8000236:	db1b      	blt.n	8000270 <__aeabi_ldivmod+0x84>
 8000238:	f000 f840 	bl	80002bc <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	4252      	negs	r2, r2
 800024e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000252:	4770      	bx	lr
 8000254:	4252      	negs	r2, r2
 8000256:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800025a:	f000 f82f 	bl	80002bc <__udivmoddi4>
 800025e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000262:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000266:	b004      	add	sp, #16
 8000268:	4240      	negs	r0, r0
 800026a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026e:	4770      	bx	lr
 8000270:	4252      	negs	r2, r2
 8000272:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000276:	f000 f821 	bl	80002bc <__udivmoddi4>
 800027a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800027e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000282:	b004      	add	sp, #16
 8000284:	4252      	negs	r2, r2
 8000286:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028a:	4770      	bx	lr

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b96a 	b.w	8000578 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c0:	9d08      	ldr	r5, [sp, #32]
 80002c2:	460c      	mov	r4, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14e      	bne.n	8000366 <__udivmoddi4+0xaa>
 80002c8:	4694      	mov	ip, r2
 80002ca:	458c      	cmp	ip, r1
 80002cc:	4686      	mov	lr, r0
 80002ce:	fab2 f282 	clz	r2, r2
 80002d2:	d962      	bls.n	800039a <__udivmoddi4+0xde>
 80002d4:	b14a      	cbz	r2, 80002ea <__udivmoddi4+0x2e>
 80002d6:	f1c2 0320 	rsb	r3, r2, #32
 80002da:	4091      	lsls	r1, r2
 80002dc:	fa20 f303 	lsr.w	r3, r0, r3
 80002e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e4:	4319      	orrs	r1, r3
 80002e6:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f f68c 	uxth.w	r6, ip
 80002f2:	fbb1 f4f7 	udiv	r4, r1, r7
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb07 1114 	mls	r1, r7, r4, r1
 80002fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000302:	fb04 f106 	mul.w	r1, r4, r6
 8000306:	4299      	cmp	r1, r3
 8000308:	d90a      	bls.n	8000320 <__udivmoddi4+0x64>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000312:	f080 8112 	bcs.w	800053a <__udivmoddi4+0x27e>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 810f 	bls.w	800053a <__udivmoddi4+0x27e>
 800031c:	3c02      	subs	r4, #2
 800031e:	4463      	add	r3, ip
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb1 f0f7 	udiv	r0, r1, r7
 800032a:	fb07 1110 	mls	r1, r7, r0, r1
 800032e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000332:	fb00 f606 	mul.w	r6, r0, r6
 8000336:	429e      	cmp	r6, r3
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x94>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000342:	f080 80fc 	bcs.w	800053e <__udivmoddi4+0x282>
 8000346:	429e      	cmp	r6, r3
 8000348:	f240 80f9 	bls.w	800053e <__udivmoddi4+0x282>
 800034c:	4463      	add	r3, ip
 800034e:	3802      	subs	r0, #2
 8000350:	1b9b      	subs	r3, r3, r6
 8000352:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa6>
 800035a:	40d3      	lsrs	r3, r2
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xba>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb4>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa6>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x150>
 800037e:	42a3      	cmp	r3, r4
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xcc>
 8000382:	4290      	cmp	r0, r2
 8000384:	f0c0 80f0 	bcc.w	8000568 <__udivmoddi4+0x2ac>
 8000388:	1a86      	subs	r6, r0, r2
 800038a:	eb64 0303 	sbc.w	r3, r4, r3
 800038e:	2001      	movs	r0, #1
 8000390:	2d00      	cmp	r5, #0
 8000392:	d0e6      	beq.n	8000362 <__udivmoddi4+0xa6>
 8000394:	e9c5 6300 	strd	r6, r3, [r5]
 8000398:	e7e3      	b.n	8000362 <__udivmoddi4+0xa6>
 800039a:	2a00      	cmp	r2, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x204>
 80003a0:	eba1 040c 	sub.w	r4, r1, ip
 80003a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003a8:	fa1f f78c 	uxth.w	r7, ip
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003b6:	fb08 4416 	mls	r4, r8, r6, r4
 80003ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003be:	fb07 f006 	mul.w	r0, r7, r6
 80003c2:	4298      	cmp	r0, r3
 80003c4:	d908      	bls.n	80003d8 <__udivmoddi4+0x11c>
 80003c6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ca:	f106 34ff 	add.w	r4, r6, #4294967295
 80003ce:	d202      	bcs.n	80003d6 <__udivmoddi4+0x11a>
 80003d0:	4298      	cmp	r0, r3
 80003d2:	f200 80cd 	bhi.w	8000570 <__udivmoddi4+0x2b4>
 80003d6:	4626      	mov	r6, r4
 80003d8:	1a1c      	subs	r4, r3, r0
 80003da:	fa1f f38e 	uxth.w	r3, lr
 80003de:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e2:	fb08 4410 	mls	r4, r8, r0, r4
 80003e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ea:	fb00 f707 	mul.w	r7, r0, r7
 80003ee:	429f      	cmp	r7, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x148>
 80003f2:	eb1c 0303 	adds.w	r3, ip, r3
 80003f6:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x146>
 80003fc:	429f      	cmp	r7, r3
 80003fe:	f200 80b0 	bhi.w	8000562 <__udivmoddi4+0x2a6>
 8000402:	4620      	mov	r0, r4
 8000404:	1bdb      	subs	r3, r3, r7
 8000406:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x9c>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa20 fc06 	lsr.w	ip, r0, r6
 800041c:	fa04 f301 	lsl.w	r3, r4, r1
 8000420:	ea43 030c 	orr.w	r3, r3, ip
 8000424:	40f4      	lsrs	r4, r6
 8000426:	fa00 f801 	lsl.w	r8, r0, r1
 800042a:	0c38      	lsrs	r0, r7, #16
 800042c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000430:	fbb4 fef0 	udiv	lr, r4, r0
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	fb00 441e 	mls	r4, r0, lr, r4
 800043c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000440:	fb0e f90c 	mul.w	r9, lr, ip
 8000444:	45a1      	cmp	r9, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x1a6>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000452:	f080 8084 	bcs.w	800055e <__udivmoddi4+0x2a2>
 8000456:	45a1      	cmp	r9, r4
 8000458:	f240 8081 	bls.w	800055e <__udivmoddi4+0x2a2>
 800045c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000460:	443c      	add	r4, r7
 8000462:	eba4 0409 	sub.w	r4, r4, r9
 8000466:	fa1f f983 	uxth.w	r9, r3
 800046a:	fbb4 f3f0 	udiv	r3, r4, r0
 800046e:	fb00 4413 	mls	r4, r0, r3, r4
 8000472:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000476:	fb03 fc0c 	mul.w	ip, r3, ip
 800047a:	45a4      	cmp	ip, r4
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x1d2>
 800047e:	193c      	adds	r4, r7, r4
 8000480:	f103 30ff 	add.w	r0, r3, #4294967295
 8000484:	d267      	bcs.n	8000556 <__udivmoddi4+0x29a>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d965      	bls.n	8000556 <__udivmoddi4+0x29a>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000492:	fba0 9302 	umull	r9, r3, r0, r2
 8000496:	eba4 040c 	sub.w	r4, r4, ip
 800049a:	429c      	cmp	r4, r3
 800049c:	46ce      	mov	lr, r9
 800049e:	469c      	mov	ip, r3
 80004a0:	d351      	bcc.n	8000546 <__udivmoddi4+0x28a>
 80004a2:	d04e      	beq.n	8000542 <__udivmoddi4+0x286>
 80004a4:	b155      	cbz	r5, 80004bc <__udivmoddi4+0x200>
 80004a6:	ebb8 030e 	subs.w	r3, r8, lr
 80004aa:	eb64 040c 	sbc.w	r4, r4, ip
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	40cb      	lsrs	r3, r1
 80004b4:	431e      	orrs	r6, r3
 80004b6:	40cc      	lsrs	r4, r1
 80004b8:	e9c5 6400 	strd	r6, r4, [r5]
 80004bc:	2100      	movs	r1, #0
 80004be:	e750      	b.n	8000362 <__udivmoddi4+0xa6>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f103 	lsr.w	r1, r0, r3
 80004c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80004cc:	fa24 f303 	lsr.w	r3, r4, r3
 80004d0:	4094      	lsls	r4, r2
 80004d2:	430c      	orrs	r4, r1
 80004d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004d8:	fa00 fe02 	lsl.w	lr, r0, r2
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e4:	fb08 3110 	mls	r1, r8, r0, r3
 80004e8:	0c23      	lsrs	r3, r4, #16
 80004ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ee:	fb00 f107 	mul.w	r1, r0, r7
 80004f2:	4299      	cmp	r1, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x24c>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 36ff 	add.w	r6, r0, #4294967295
 80004fe:	d22c      	bcs.n	800055a <__udivmoddi4+0x29e>
 8000500:	4299      	cmp	r1, r3
 8000502:	d92a      	bls.n	800055a <__udivmoddi4+0x29e>
 8000504:	3802      	subs	r0, #2
 8000506:	4463      	add	r3, ip
 8000508:	1a5b      	subs	r3, r3, r1
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000510:	fb08 3311 	mls	r3, r8, r1, r3
 8000514:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000518:	fb01 f307 	mul.w	r3, r1, r7
 800051c:	42a3      	cmp	r3, r4
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x276>
 8000520:	eb1c 0404 	adds.w	r4, ip, r4
 8000524:	f101 36ff 	add.w	r6, r1, #4294967295
 8000528:	d213      	bcs.n	8000552 <__udivmoddi4+0x296>
 800052a:	42a3      	cmp	r3, r4
 800052c:	d911      	bls.n	8000552 <__udivmoddi4+0x296>
 800052e:	3902      	subs	r1, #2
 8000530:	4464      	add	r4, ip
 8000532:	1ae4      	subs	r4, r4, r3
 8000534:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000538:	e739      	b.n	80003ae <__udivmoddi4+0xf2>
 800053a:	4604      	mov	r4, r0
 800053c:	e6f0      	b.n	8000320 <__udivmoddi4+0x64>
 800053e:	4608      	mov	r0, r1
 8000540:	e706      	b.n	8000350 <__udivmoddi4+0x94>
 8000542:	45c8      	cmp	r8, r9
 8000544:	d2ae      	bcs.n	80004a4 <__udivmoddi4+0x1e8>
 8000546:	ebb9 0e02 	subs.w	lr, r9, r2
 800054a:	eb63 0c07 	sbc.w	ip, r3, r7
 800054e:	3801      	subs	r0, #1
 8000550:	e7a8      	b.n	80004a4 <__udivmoddi4+0x1e8>
 8000552:	4631      	mov	r1, r6
 8000554:	e7ed      	b.n	8000532 <__udivmoddi4+0x276>
 8000556:	4603      	mov	r3, r0
 8000558:	e799      	b.n	800048e <__udivmoddi4+0x1d2>
 800055a:	4630      	mov	r0, r6
 800055c:	e7d4      	b.n	8000508 <__udivmoddi4+0x24c>
 800055e:	46d6      	mov	lr, sl
 8000560:	e77f      	b.n	8000462 <__udivmoddi4+0x1a6>
 8000562:	4463      	add	r3, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e74d      	b.n	8000404 <__udivmoddi4+0x148>
 8000568:	4606      	mov	r6, r0
 800056a:	4623      	mov	r3, r4
 800056c:	4608      	mov	r0, r1
 800056e:	e70f      	b.n	8000390 <__udivmoddi4+0xd4>
 8000570:	3e02      	subs	r6, #2
 8000572:	4463      	add	r3, ip
 8000574:	e730      	b.n	80003d8 <__udivmoddi4+0x11c>
 8000576:	bf00      	nop

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8000580:	4b07      	ldr	r3, [pc, #28]	@ (80005a0 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800058c:	bf0c      	ite	eq
 800058e:	2301      	moveq	r3, #1
 8000590:	2300      	movne	r3, #0
 8000592:	b2db      	uxtb	r3, r3
}
 8000594:	4618      	mov	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	e000e010 	.word	0xe000e010

080005a4 <delay_us>:
#include "delay.h"
#include "stm32f4xx_ll_utils.h"
#include "stm32f4xx_ll_cortex.h"

void delay_us(uint8_t micro_seconds)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
    uint32_t ticks = micro_seconds * (SystemCoreClock / 1000000);
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	4a0c      	ldr	r2, [pc, #48]	@ (80005e4 <delay_us+0x40>)
 80005b2:	6812      	ldr	r2, [r2, #0]
 80005b4:	490c      	ldr	r1, [pc, #48]	@ (80005e8 <delay_us+0x44>)
 80005b6:	fba1 1202 	umull	r1, r2, r1, r2
 80005ba:	0c92      	lsrs	r2, r2, #18
 80005bc:	fb02 f303 	mul.w	r3, r2, r3
 80005c0:	60fb      	str	r3, [r7, #12]
    while (ticks > 0)
 80005c2:	e007      	b.n	80005d4 <delay_us+0x30>
    {
        if (LL_SYSTICK_IsActiveCounterFlag())
 80005c4:	f7ff ffda 	bl	800057c <LL_SYSTICK_IsActiveCounterFlag>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d002      	beq.n	80005d4 <delay_us+0x30>
        {
            ticks--;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	3b01      	subs	r3, #1
 80005d2:	60fb      	str	r3, [r7, #12]
    while (ticks > 0)
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d1f4      	bne.n	80005c4 <delay_us+0x20>
        }
    }
}
 80005da:	bf00      	nop
 80005dc:	bf00      	nop
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	2000014c 	.word	0x2000014c
 80005e8:	431bde83 	.word	0x431bde83

080005ec <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	695b      	ldr	r3, [r3, #20]
 80005f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005fc:	2b80      	cmp	r3, #128	@ 0x80
 80005fe:	bf0c      	ite	eq
 8000600:	2301      	moveq	r3, #1
 8000602:	2300      	movne	r3, #0
 8000604:	b2db      	uxtb	r3, r3
}
 8000606:	4618      	mov	r0, r3
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr

08000612 <LL_I2C_IsActiveFlag_BTF>:
  * @rmtoll SR1          BTF           LL_I2C_IsActiveFlag_BTF
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BTF(I2C_TypeDef *I2Cx)
{
 8000612:	b480      	push	{r7}
 8000614:	b083      	sub	sp, #12
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	f003 0304 	and.w	r3, r3, #4
 8000622:	2b04      	cmp	r3, #4
 8000624:	bf0c      	ite	eq
 8000626:	2301      	moveq	r3, #1
 8000628:	2300      	movne	r3, #0
 800062a:	b2db      	uxtb	r3, r3
}
 800062c:	4618      	mov	r0, r3
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <LL_I2C_IsActiveFlag_SB>:
  * @rmtoll SR1          SB            LL_I2C_IsActiveFlag_SB
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_SB(I2C_TypeDef *I2Cx)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	695b      	ldr	r3, [r3, #20]
 8000644:	f003 0301 	and.w	r3, r3, #1
 8000648:	2b01      	cmp	r3, #1
 800064a:	bf0c      	ite	eq
 800064c:	2301      	moveq	r3, #1
 800064e:	2300      	movne	r3, #0
 8000650:	b2db      	uxtb	r3, r3
}
 8000652:	4618      	mov	r0, r3
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr

0800065e <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 800065e:	b480      	push	{r7}
 8000660:	b083      	sub	sp, #12
 8000662:	af00      	add	r7, sp, #0
 8000664:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	f003 0302 	and.w	r3, r3, #2
 800066e:	2b02      	cmp	r3, #2
 8000670:	bf0c      	ite	eq
 8000672:	2301      	moveq	r3, #1
 8000674:	2300      	movne	r3, #0
 8000676:	b2db      	uxtb	r3, r3
}
 8000678:	4618      	mov	r0, r3
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <LL_I2C_IsActiveFlag_BUSY>:
  * @rmtoll SR2          BUSY          LL_I2C_IsActiveFlag_BUSY
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(I2C_TypeDef *I2Cx)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR2, I2C_SR2_BUSY) == (I2C_SR2_BUSY));
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0302 	and.w	r3, r3, #2
 8000694:	2b02      	cmp	r3, #2
 8000696:	bf0c      	ite	eq
 8000698:	2301      	moveq	r3, #1
 800069a:	2300      	movne	r3, #0
 800069c:	b2db      	uxtb	r3, r3
}
 800069e:	4618      	mov	r0, r3
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr

080006aa <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 80006aa:	b480      	push	{r7}
 80006ac:	b083      	sub	sp, #12
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	601a      	str	r2, [r3, #0]
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr

080006ca <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 80006ca:	b480      	push	{r7}
 80006cc:	b083      	sub	sp, #12
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	601a      	str	r2, [r3, #0]
}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr

080006ea <LL_I2C_DisableBitPOS>:
  * @rmtoll CR1          POS           LL_I2C_DisableBitPOS
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableBitPOS(I2C_TypeDef *I2Cx)
{
 80006ea:	b480      	push	{r7}
 80006ec:	b083      	sub	sp, #12
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_POS);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	601a      	str	r2, [r3, #0]
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 800070a:	b480      	push	{r7}
 800070c:	b083      	sub	sp, #12
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
 8000712:	460b      	mov	r3, r1
 8000714:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	691b      	ldr	r3, [r3, #16]
 800071a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800071e:	78fb      	ldrb	r3, [r7, #3]
 8000720:	431a      	orrs	r2, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	611a      	str	r2, [r3, #16]
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
	...

08000734 <I2C_SendData>:
 * @param  Timeout: Thời gian chờ (ms)
 * @retval 0: Thành công, 1: Lỗi
 */

uint8_t I2C_SendData(I2C_TypeDef *I2Cx, uint8_t Addr, uint8_t reg, uint8_t *pData, uint8_t len, uint32_t timeout)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	460b      	mov	r3, r1
 8000740:	72fb      	strb	r3, [r7, #11]
 8000742:	4613      	mov	r3, r2
 8000744:	72bb      	strb	r3, [r7, #10]
  uint32_t count = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
  uint8_t index = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	74fb      	strb	r3, [r7, #19]
  while ((LL_I2C_IsActiveFlag_BUSY(I2Cx)))
 800074e:	e008      	b.n	8000762 <I2C_SendData+0x2e>
  {
    if (++count > timeout)
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	3301      	adds	r3, #1
 8000754:	617b      	str	r3, [r7, #20]
 8000756:	697a      	ldr	r2, [r7, #20]
 8000758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800075a:	429a      	cmp	r2, r3
 800075c:	d901      	bls.n	8000762 <I2C_SendData+0x2e>
      return 1;
 800075e:	2301      	movs	r3, #1
 8000760:	e07f      	b.n	8000862 <I2C_SendData+0x12e>
  while ((LL_I2C_IsActiveFlag_BUSY(I2Cx)))
 8000762:	68f8      	ldr	r0, [r7, #12]
 8000764:	f7ff ff8e 	bl	8000684 <LL_I2C_IsActiveFlag_BUSY>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d1f0      	bne.n	8000750 <I2C_SendData+0x1c>
  }

  // Bit POS được xóa để đảm bảo I2C hoạt động trong chế độ chuẩn (standard mode).
  LL_I2C_DisableBitPOS(I2Cx);
 800076e:	68f8      	ldr	r0, [r7, #12]
 8000770:	f7ff ffbb 	bl	80006ea <LL_I2C_DisableBitPOS>
  // Tạo đi�?u kiện Start
  LL_I2C_GenerateStartCondition(I2Cx);
 8000774:	68f8      	ldr	r0, [r7, #12]
 8000776:	f7ff ff98 	bl	80006aa <LL_I2C_GenerateStartCondition>
  // Ch�? bit start được tạo
  while (!(LL_I2C_IsActiveFlag_SB(I2Cx)))
 800077a:	e008      	b.n	800078e <I2C_SendData+0x5a>
  {
    if (++count > timeout)
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	3301      	adds	r3, #1
 8000780:	617b      	str	r3, [r7, #20]
 8000782:	697a      	ldr	r2, [r7, #20]
 8000784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000786:	429a      	cmp	r2, r3
 8000788:	d901      	bls.n	800078e <I2C_SendData+0x5a>
      return 1;
 800078a:	2301      	movs	r3, #1
 800078c:	e069      	b.n	8000862 <I2C_SendData+0x12e>
  while (!(LL_I2C_IsActiveFlag_SB(I2Cx)))
 800078e:	68f8      	ldr	r0, [r7, #12]
 8000790:	f7ff ff52 	bl	8000638 <LL_I2C_IsActiveFlag_SB>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d0f0      	beq.n	800077c <I2C_SendData+0x48>
  }
  count = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
  // Gửi địa chỉ slave
  LL_I2C_TransmitData8(I2Cx, Addr);
 800079e:	7afb      	ldrb	r3, [r7, #11]
 80007a0:	4619      	mov	r1, r3
 80007a2:	68f8      	ldr	r0, [r7, #12]
 80007a4:	f7ff ffb1 	bl	800070a <LL_I2C_TransmitData8>
//   Ch�? ACK
  while (!(LL_I2C_IsActiveFlag_ADDR(I2Cx)))
 80007a8:	e008      	b.n	80007bc <I2C_SendData+0x88>
  {
    if (++count > timeout)
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	3301      	adds	r3, #1
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	697a      	ldr	r2, [r7, #20]
 80007b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d901      	bls.n	80007bc <I2C_SendData+0x88>
      return 1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	e052      	b.n	8000862 <I2C_SendData+0x12e>
  while (!(LL_I2C_IsActiveFlag_ADDR(I2Cx)))
 80007bc:	68f8      	ldr	r0, [r7, #12]
 80007be:	f7ff ff4e 	bl	800065e <LL_I2C_IsActiveFlag_ADDR>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d0f0      	beq.n	80007aa <I2C_SendData+0x76>
  }
  count = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
  // Xóa c�? Addr
  (void)I2Cx->SR1;
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	695b      	ldr	r3, [r3, #20]
  (void)I2Cx->SR2;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	699b      	ldr	r3, [r3, #24]
  // Gửi thanh ghi thiết bị cần ghi ra
  LL_I2C_TransmitData8(I2Cx, reg);
 80007d4:	7abb      	ldrb	r3, [r7, #10]
 80007d6:	4619      	mov	r1, r3
 80007d8:	68f8      	ldr	r0, [r7, #12]
 80007da:	f7ff ff96 	bl	800070a <LL_I2C_TransmitData8>
  // Truy�?n dữ liệu
  while (len > 0U)
 80007de:	e038      	b.n	8000852 <I2C_SendData+0x11e>
  {
	// Kiểm tra bộ đệm Tx có trống không
	while (!(LL_I2C_IsActiveFlag_TXE(I2Cx)))
	{
	  if (++count > timeout)
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	3301      	adds	r3, #1
 80007e4:	617b      	str	r3, [r7, #20]
 80007e6:	697a      	ldr	r2, [r7, #20]
 80007e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ea:	429a      	cmp	r2, r3
 80007ec:	d901      	bls.n	80007f2 <I2C_SendData+0xbe>
		return 1;
 80007ee:	2301      	movs	r3, #1
 80007f0:	e037      	b.n	8000862 <I2C_SendData+0x12e>
	while (!(LL_I2C_IsActiveFlag_TXE(I2Cx)))
 80007f2:	68f8      	ldr	r0, [r7, #12]
 80007f4:	f7ff fefa 	bl	80005ec <LL_I2C_IsActiveFlag_TXE>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d0f0      	beq.n	80007e0 <I2C_SendData+0xac>
	}
	count = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
	// Gửi dữ liệu ra
	LL_I2C_TransmitData8(I2Cx, pData[index]);
 8000802:	7cfb      	ldrb	r3, [r7, #19]
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	4413      	add	r3, r2
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	4619      	mov	r1, r3
 800080c:	68f8      	ldr	r0, [r7, #12]
 800080e:	f7ff ff7c 	bl	800070a <LL_I2C_TransmitData8>
	len--;
 8000812:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000816:	3b01      	subs	r3, #1
 8000818:	f887 3020 	strb.w	r3, [r7, #32]
	index++;
 800081c:	7cfb      	ldrb	r3, [r7, #19]
 800081e:	3301      	adds	r3, #1
 8000820:	74fb      	strb	r3, [r7, #19]
	// Nếu truy�?n xong BTF=1 và len != 0 thì truy�?n tiếp
	if ((LL_I2C_IsActiveFlag_BTF(I2Cx)) && (len != 0))
 8000822:	68f8      	ldr	r0, [r7, #12]
 8000824:	f7ff fef5 	bl	8000612 <LL_I2C_IsActiveFlag_BTF>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d011      	beq.n	8000852 <I2C_SendData+0x11e>
 800082e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d00d      	beq.n	8000852 <I2C_SendData+0x11e>
	{
	  // Gửi dữ liệu ra
	  I2C1->DR = pData[index];
 8000836:	7cfb      	ldrb	r3, [r7, #19]
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	4413      	add	r3, r2
 800083c:	781a      	ldrb	r2, [r3, #0]
 800083e:	4b0b      	ldr	r3, [pc, #44]	@ (800086c <I2C_SendData+0x138>)
 8000840:	611a      	str	r2, [r3, #16]
	  len--;
 8000842:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000846:	3b01      	subs	r3, #1
 8000848:	f887 3020 	strb.w	r3, [r7, #32]
	  index++;
 800084c:	7cfb      	ldrb	r3, [r7, #19]
 800084e:	3301      	adds	r3, #1
 8000850:	74fb      	strb	r3, [r7, #19]
  while (len > 0U)
 8000852:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d1cb      	bne.n	80007f2 <I2C_SendData+0xbe>
	}
  }
  // Tạo đi�?u kiện dừng
  LL_I2C_GenerateStopCondition(I2Cx);
 800085a:	68f8      	ldr	r0, [r7, #12]
 800085c:	f7ff ff35 	bl	80006ca <LL_I2C_GenerateStopCondition>
  return 0;
 8000860:	2300      	movs	r3, #0
}
 8000862:	4618      	mov	r0, r3
 8000864:	3718      	adds	r7, #24
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40005400 	.word	0x40005400

08000870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	6039      	str	r1, [r7, #0]
 800087a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800087c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000880:	2b00      	cmp	r3, #0
 8000882:	db0a      	blt.n	800089a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	b2da      	uxtb	r2, r3
 8000888:	490c      	ldr	r1, [pc, #48]	@ (80008bc <__NVIC_SetPriority+0x4c>)
 800088a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088e:	0112      	lsls	r2, r2, #4
 8000890:	b2d2      	uxtb	r2, r2
 8000892:	440b      	add	r3, r1
 8000894:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000898:	e00a      	b.n	80008b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	b2da      	uxtb	r2, r3
 800089e:	4908      	ldr	r1, [pc, #32]	@ (80008c0 <__NVIC_SetPriority+0x50>)
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	f003 030f 	and.w	r3, r3, #15
 80008a6:	3b04      	subs	r3, #4
 80008a8:	0112      	lsls	r2, r2, #4
 80008aa:	b2d2      	uxtb	r2, r2
 80008ac:	440b      	add	r3, r1
 80008ae:	761a      	strb	r2, [r3, #24]
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	e000e100 	.word	0xe000e100
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008d4:	d301      	bcc.n	80008da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008d6:	2301      	movs	r3, #1
 80008d8:	e00f      	b.n	80008fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008da:	4a0a      	ldr	r2, [pc, #40]	@ (8000904 <SysTick_Config+0x40>)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3b01      	subs	r3, #1
 80008e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008e2:	210f      	movs	r1, #15
 80008e4:	f04f 30ff 	mov.w	r0, #4294967295
 80008e8:	f7ff ffc2 	bl	8000870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008ec:	4b05      	ldr	r3, [pc, #20]	@ (8000904 <SysTick_Config+0x40>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008f2:	4b04      	ldr	r3, [pc, #16]	@ (8000904 <SysTick_Config+0x40>)
 80008f4:	2207      	movs	r2, #7
 80008f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	e000e010 	.word	0xe000e010

08000908 <systick_timer_start>:

#include "systick.h"
#include "stm32f4xx.h"

void systick_timer_start(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
    // Reset SysTick counter value
   // SysTick->VAL = 0;

    // Enable SysTick counter
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 800090c:	4b05      	ldr	r3, [pc, #20]	@ (8000924 <systick_timer_start+0x1c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a04      	ldr	r2, [pc, #16]	@ (8000924 <systick_timer_start+0x1c>)
 8000912:	f043 0301 	orr.w	r3, r3, #1
 8000916:	6013      	str	r3, [r2, #0]
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000e010 	.word	0xe000e010

08000928 <systick_timer_init>:
    // Disable SysTick counter
   // SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
}

void systick_timer_init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
    // Set SysTick to trigger interrupt every 1ms
    SysTick_Config(SystemCoreClock/1000);
 800092c:	4b05      	ldr	r3, [pc, #20]	@ (8000944 <systick_timer_init+0x1c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a05      	ldr	r2, [pc, #20]	@ (8000948 <systick_timer_init+0x20>)
 8000932:	fba2 2303 	umull	r2, r3, r2, r3
 8000936:	099b      	lsrs	r3, r3, #6
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff ffc3 	bl	80008c4 <SysTick_Config>
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	2000014c 	.word	0x2000014c
 8000948:	10624dd3 	.word	0x10624dd3

0800094c <__NVIC_EnableIRQ>:
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095a:	2b00      	cmp	r3, #0
 800095c:	db0b      	blt.n	8000976 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	f003 021f 	and.w	r2, r3, #31
 8000964:	4907      	ldr	r1, [pc, #28]	@ (8000984 <__NVIC_EnableIRQ+0x38>)
 8000966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096a:	095b      	lsrs	r3, r3, #5
 800096c:	2001      	movs	r0, #1
 800096e:	fa00 f202 	lsl.w	r2, r0, r2
 8000972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	e000e100 	.word	0xe000e100

08000988 <__NVIC_DisableIRQ>:
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000996:	2b00      	cmp	r3, #0
 8000998:	db12      	blt.n	80009c0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	f003 021f 	and.w	r2, r3, #31
 80009a0:	490a      	ldr	r1, [pc, #40]	@ (80009cc <__NVIC_DisableIRQ+0x44>)
 80009a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a6:	095b      	lsrs	r3, r3, #5
 80009a8:	2001      	movs	r0, #1
 80009aa:	fa00 f202 	lsl.w	r2, r0, r2
 80009ae:	3320      	adds	r3, #32
 80009b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009b4:	f3bf 8f4f 	dsb	sy
}
 80009b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009ba:	f3bf 8f6f 	isb	sy
}
 80009be:	bf00      	nop
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	e000e100 	.word	0xe000e100

080009d0 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b089      	sub	sp, #36	@ 0x24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	330c      	adds	r3, #12
 80009dc:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	e853 3f00 	ldrex	r3, [r3]
 80009e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	f043 0320 	orr.w	r3, r3, #32
 80009ec:	61fb      	str	r3, [r7, #28]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	330c      	adds	r3, #12
 80009f2:	69fa      	ldr	r2, [r7, #28]
 80009f4:	61ba      	str	r2, [r7, #24]
 80009f6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80009f8:	6979      	ldr	r1, [r7, #20]
 80009fa:	69ba      	ldr	r2, [r7, #24]
 80009fc:	e841 2300 	strex	r3, r2, [r1]
 8000a00:	613b      	str	r3, [r7, #16]
   return(result);
 8000a02:	693b      	ldr	r3, [r7, #16]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d1e7      	bne.n	80009d8 <LL_USART_EnableIT_RXNE+0x8>
}
 8000a08:	bf00      	nop
 8000a0a:	bf00      	nop
 8000a0c:	3724      	adds	r7, #36	@ 0x24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8000a16:	b480      	push	{r7}
 8000a18:	b089      	sub	sp, #36	@ 0x24
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	330c      	adds	r3, #12
 8000a22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	e853 3f00 	ldrex	r3, [r3]
 8000a2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a32:	61fb      	str	r3, [r7, #28]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	330c      	adds	r3, #12
 8000a38:	69fa      	ldr	r2, [r7, #28]
 8000a3a:	61ba      	str	r2, [r7, #24]
 8000a3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000a3e:	6979      	ldr	r1, [r7, #20]
 8000a40:	69ba      	ldr	r2, [r7, #24]
 8000a42:	e841 2300 	strex	r3, r2, [r1]
 8000a46:	613b      	str	r3, [r7, #16]
   return(result);
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d1e7      	bne.n	8000a1e <LL_USART_EnableIT_TXE+0x8>
}
 8000a4e:	bf00      	nop
 8000a50:	bf00      	nop
 8000a52:	3724      	adds	r7, #36	@ 0x24
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b089      	sub	sp, #36	@ 0x24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	330c      	adds	r3, #12
 8000a68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	e853 3f00 	ldrex	r3, [r3]
 8000a70:	60bb      	str	r3, [r7, #8]
   return(result);
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000a78:	61fb      	str	r3, [r7, #28]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	330c      	adds	r3, #12
 8000a7e:	69fa      	ldr	r2, [r7, #28]
 8000a80:	61ba      	str	r2, [r7, #24]
 8000a82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000a84:	6979      	ldr	r1, [r7, #20]
 8000a86:	69ba      	ldr	r2, [r7, #24]
 8000a88:	e841 2300 	strex	r3, r2, [r1]
 8000a8c:	613b      	str	r3, [r7, #16]
   return(result);
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d1e7      	bne.n	8000a64 <LL_USART_DisableIT_TXE+0x8>
}
 8000a94:	bf00      	nop
 8000a96:	bf00      	nop
 8000a98:	3724      	adds	r7, #36	@ 0x24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	b083      	sub	sp, #12
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	68db      	ldr	r3, [r3, #12]
 8000aae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ab2:	2b80      	cmp	r3, #128	@ 0x80
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2301      	moveq	r3, #1
 8000ab8:	2300      	movne	r3, #0
 8000aba:	b2db      	uxtb	r3, r3
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000ad4:	78fa      	ldrb	r2, [r7, #3]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	605a      	str	r2, [r3, #4]
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <UART_Init>:
 */

void UART_Init( uart_stdio_typedef* p_uart, USART_TypeDef* _handle,
                IRQn_Type _irqn, char* _p_TX_buffer, char* _p_RX_buffer,
                uint16_t _TX_size, uint16_t _RX_size)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b084      	sub	sp, #16
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	60f8      	str	r0, [r7, #12]
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	4613      	mov	r3, r2
 8000af4:	71fb      	strb	r3, [r7, #7]
    p_uart->handle  = _handle;
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	68ba      	ldr	r2, [r7, #8]
 8000afa:	601a      	str	r2, [r3, #0]
    p_uart->irqn    = _irqn;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	79fa      	ldrb	r2, [r7, #7]
 8000b00:	711a      	strb	r2, [r3, #4]
    p_uart->TX_size = _TX_size;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	8bba      	ldrh	r2, [r7, #28]
 8000b06:	80da      	strh	r2, [r3, #6]
    p_uart->RX_size = _RX_size;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	8c3a      	ldrh	r2, [r7, #32]
 8000b0c:	811a      	strh	r2, [r3, #8]

    p_uart->p_TX_buffer = _p_TX_buffer;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	683a      	ldr	r2, [r7, #0]
 8000b12:	60da      	str	r2, [r3, #12]
    p_uart->p_RX_buffer = _p_RX_buffer;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	69ba      	ldr	r2, [r7, #24]
 8000b18:	615a      	str	r2, [r3, #20]

    p_uart->TX_write_index  = 0;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	821a      	strh	r2, [r3, #16]
    p_uart->TX_read_index   = 0;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2200      	movs	r2, #0
 8000b24:	825a      	strh	r2, [r3, #18]
    p_uart->RX_write_index  = 0;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	831a      	strh	r2, [r3, #24]
    p_uart->RX_read_index   = 0;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	835a      	strh	r2, [r3, #26]

    if(TX_BUFFER_SIZE(p_uart) != 0)
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	88db      	ldrh	r3, [r3, #6]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d006      	beq.n	8000b48 <UART_Init+0x62>
    {
        //p_uart->p_TX_buffer = (uint8_t *)malloc(TX_BUFFER_SIZE(p_uart) * sizeof(uint8_t));
        memset((void *)p_uart->p_TX_buffer, 0, sizeof(p_uart->p_TX_buffer));
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	68db      	ldr	r3, [r3, #12]
 8000b3e:	2204      	movs	r2, #4
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f003 fcba 	bl	80044bc <memset>
    }

    if(RX_BUFFER_SIZE(p_uart) != 0)
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	891b      	ldrh	r3, [r3, #8]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d006      	beq.n	8000b5e <UART_Init+0x78>
    {
        //p_uart->p_RX_buffer = (uint8_t *)malloc(RX_BUFFER_SIZE(p_uart) * sizeof(uint8_t));
        memset((void *)p_uart->p_RX_buffer, 0, sizeof(p_uart->p_RX_buffer));
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	695b      	ldr	r3, [r3, #20]
 8000b54:	2204      	movs	r2, #4
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f003 fcaf 	bl	80044bc <memset>
    }

    // Disable the TX IT
    LL_USART_DisableIT_TXE(p_uart->handle);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff ff7a 	bl	8000a5c <LL_USART_DisableIT_TXE>

    // Start the RX IT, it will only run when there is a data send to the MCU.
    LL_USART_EnableIT_RXNE(p_uart->handle);
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff ff2f 	bl	80009d0 <LL_USART_EnableIT_RXNE>
}
 8000b72:	bf00      	nop
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <UART_Send_Char>:
//!
//! \param pcBuf points to a buffer containing the string to transmit.
//
//*****************************************************************************
void UART_Send_Char(uart_stdio_typedef* p_uart, const char Char)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
 8000b82:	460b      	mov	r3, r1
 8000b84:	70fb      	strb	r3, [r7, #3]
	UART_Write(p_uart, &Char, 1);
 8000b86:	1cfb      	adds	r3, r7, #3
 8000b88:	2201      	movs	r2, #1
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f000 f817 	bl	8000bc0 <UART_Write>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <UART_Send_String>:
//!
//! \param pcBuf points to a buffer containing the string to transmit.
//
//*****************************************************************************
void UART_Send_String(uart_stdio_typedef* p_uart, const char *pcBuf)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
 8000ba2:	6039      	str	r1, [r7, #0]
	UART_Write(p_uart, pcBuf, strlen(pcBuf));
 8000ba4:	6838      	ldr	r0, [r7, #0]
 8000ba6:	f7ff fb19 	bl	80001dc <strlen>
 8000baa:	4603      	mov	r3, r0
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	461a      	mov	r2, r3
 8000bb0:	6839      	ldr	r1, [r7, #0]
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f000 f804 	bl	8000bc0 <UART_Write>
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <UART_Write>:
//!
//! \return Returns the count of characters written.
//
//*****************************************************************************
uint16_t UART_Write(uart_stdio_typedef* p_uart, const char *pcBuf, uint16_t ui16Len)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	80fb      	strh	r3, [r7, #6]
    // Check for valid arguments.
    //
    //
    // Send the characters
    //
    for(uIdx = 0; uIdx < ui16Len; uIdx++)
 8000bce:	2300      	movs	r3, #0
 8000bd0:	75fb      	strb	r3, [r7, #23]
 8000bd2:	e053      	b.n	8000c7c <UART_Write+0xbc>
    {
        //
        // If the character to the UART is \n, then add a \r before it so that
        // \n is translated to \n\r in the output. This is for the enter key.
        //
        if(pcBuf[uIdx] == '\n')
 8000bd4:	7dfb      	ldrb	r3, [r7, #23]
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	4413      	add	r3, r2
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b0a      	cmp	r3, #10
 8000bde:	d11e      	bne.n	8000c1e <UART_Write+0x5e>
        {
            if(!TX_BUFFER_FULL(p_uart))
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f103 0012 	add.w	r0, r3, #18
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f103 0110 	add.w	r1, r3, #16
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	88db      	ldrh	r3, [r3, #6]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	f000 fa8b 	bl	800110c <UART_is_buffer_full>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d145      	bne.n	8000c88 <UART_Write+0xc8>
            {
                p_uart->p_TX_buffer[p_uart->TX_write_index] = '\r';
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	68fa      	ldr	r2, [r7, #12]
 8000c02:	8a12      	ldrh	r2, [r2, #16]
 8000c04:	b292      	uxth	r2, r2
 8000c06:	4413      	add	r3, r2
 8000c08:	220d      	movs	r2, #13
 8000c0a:	701a      	strb	r2, [r3, #0]
                ADVANCE_TX_WRITE_INDEX(p_uart);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f103 0210 	add.w	r2, r3, #16
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	88db      	ldrh	r3, [r3, #6]
 8000c16:	4619      	mov	r1, r3
 8000c18:	4610      	mov	r0, r2
 8000c1a:	f000 fab0 	bl	800117e <UART_advance_buffer_index>
                //
                break;
            }
        }

        if(!TX_BUFFER_FULL(p_uart))
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	f103 0012 	add.w	r0, r3, #18
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f103 0110 	add.w	r1, r3, #16
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	88db      	ldrh	r3, [r3, #6]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	f000 fa6c 	bl	800110c <UART_is_buffer_full>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d114      	bne.n	8000c64 <UART_Write+0xa4>
        {
        	p_uart->p_TX_buffer[p_uart->TX_write_index] = pcBuf[uIdx];
 8000c3a:	7dfb      	ldrb	r3, [r7, #23]
 8000c3c:	68ba      	ldr	r2, [r7, #8]
 8000c3e:	441a      	add	r2, r3
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	68f9      	ldr	r1, [r7, #12]
 8000c46:	8a09      	ldrh	r1, [r1, #16]
 8000c48:	b289      	uxth	r1, r1
 8000c4a:	440b      	add	r3, r1
 8000c4c:	7812      	ldrb	r2, [r2, #0]
 8000c4e:	701a      	strb	r2, [r3, #0]
            ADVANCE_TX_WRITE_INDEX(p_uart);
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f103 0210 	add.w	r2, r3, #16
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	88db      	ldrh	r3, [r3, #6]
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4610      	mov	r0, r2
 8000c5e:	f000 fa8e 	bl	800117e <UART_advance_buffer_index>
 8000c62:	e008      	b.n	8000c76 <UART_Write+0xb6>
        else
        {
            //
            // Buffer is full - discard remaining characters and return.
            //
            p_uart->p_TX_buffer[p_uart->TX_write_index] = '\r';
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	8a12      	ldrh	r2, [r2, #16]
 8000c6c:	b292      	uxth	r2, r2
 8000c6e:	4413      	add	r3, r2
 8000c70:	220d      	movs	r2, #13
 8000c72:	701a      	strb	r2, [r3, #0]
            break;
 8000c74:	e009      	b.n	8000c8a <UART_Write+0xca>
    for(uIdx = 0; uIdx < ui16Len; uIdx++)
 8000c76:	7dfb      	ldrb	r3, [r7, #23]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	75fb      	strb	r3, [r7, #23]
 8000c7c:	7dfb      	ldrb	r3, [r7, #23]
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	88fa      	ldrh	r2, [r7, #6]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d8a6      	bhi.n	8000bd4 <UART_Write+0x14>
 8000c86:	e000      	b.n	8000c8a <UART_Write+0xca>
                break;
 8000c88:	bf00      	nop

    //
    // If the usart txe irq is disable, this mean an usart phase is finished
    // we need to enable the txe irq and kick start the transmit process.
    //
    if (LL_USART_IsEnabledIT_TXE(p_uart->handle) == false)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff ff07 	bl	8000aa2 <LL_USART_IsEnabledIT_TXE>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d107      	bne.n	8000caa <UART_Write+0xea>
        // if turn on TXE b4 prime transmit create a
        // bug where the index = 2 char don't get
        // send.

        //LL_USART_EnableIT_TXE(p_uart->handle);
        UART_Prime_Transmit(p_uart);
 8000c9a:	68f8      	ldr	r0, [r7, #12]
 8000c9c:	f000 fa8b 	bl	80011b6 <UART_Prime_Transmit>
        LL_USART_EnableIT_TXE(p_uart->handle);
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff feb6 	bl	8000a16 <LL_USART_EnableIT_TXE>
    }

    //
    // Return the number of characters written.
    //
    return(uIdx);
 8000caa:	7dfb      	ldrb	r3, [r7, #23]
 8000cac:	b29b      	uxth	r3, r3
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <UART_Printf>:
//!
//! \return None.
//
//*****************************************************************************
void UART_Printf(uart_stdio_typedef* p_uart, const char *pc_string, ...)
{
 8000cb8:	b40e      	push	{r1, r2, r3}
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b08d      	sub	sp, #52	@ 0x34
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
    // Check the arguments.
    //

    va_list vaArgP;

    va_start(vaArgP, pc_string);
 8000cc2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000cc6:	60bb      	str	r3, [r7, #8]

    //
    // Loop while there are more characters in the string.
    //
    while(*pc_string)
 8000cc8:	e1e5      	b.n	8001096 <UART_Printf+0x3de>
    {
        //
        // Find the first non-% character, or the end of the string.
        //
        for(ui16Idx = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000cce:	e002      	b.n	8000cd6 <UART_Printf+0x1e>
            (pc_string[ui16Idx] != '%') && (pc_string[ui16Idx] != '\0');
            ui16Idx++)
 8000cd0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            (pc_string[ui16Idx] != '%') && (pc_string[ui16Idx] != '\0');
 8000cd6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000cd8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000cda:	4413      	add	r3, r2
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b25      	cmp	r3, #37	@ 0x25
 8000ce0:	d005      	beq.n	8000cee <UART_Printf+0x36>
 8000ce2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000ce4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000ce6:	4413      	add	r3, r2
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1f0      	bne.n	8000cd0 <UART_Printf+0x18>
        }

        //
        // Write this portion of the string.
        //
        UART_Write(p_uart, pc_string, ui16Idx);
 8000cee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff ff63 	bl	8000bc0 <UART_Write>

        //
        // Skip the portion of the string that was written.
        //
        pc_string += ui16Idx;
 8000cfa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000cfc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000cfe:	4413      	add	r3, r2
 8000d00:	63fb      	str	r3, [r7, #60]	@ 0x3c

        //
        // See if the next character is a %.
        //
        if(*pc_string == '%')
 8000d02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b25      	cmp	r3, #37	@ 0x25
 8000d08:	f040 81c5 	bne.w	8001096 <UART_Printf+0x3de>
        {
            //
            // Skip the %.
            //
            pc_string++;
 8000d0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d0e:	3301      	adds	r3, #1
 8000d10:	63fb      	str	r3, [r7, #60]	@ 0x3c

            //
            // Set the digit count to zero, and the fill character to space
            // (in other words, to the defaults).
            //
            ui16Count = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	857b      	strh	r3, [r7, #42]	@ 0x2a
            cFill = ' ';
 8000d16:	2320      	movs	r3, #32
 8000d18:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
again:

            //
            // Determine how to handle the next character.
            //
            switch(*pc_string++)
 8000d1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d1e:	1c5a      	adds	r2, r3, #1
 8000d20:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	3b25      	subs	r3, #37	@ 0x25
 8000d26:	2b53      	cmp	r3, #83	@ 0x53
 8000d28:	f200 81ae 	bhi.w	8001088 <UART_Printf+0x3d0>
 8000d2c:	a201      	add	r2, pc, #4	@ (adr r2, 8000d34 <UART_Printf+0x7c>)
 8000d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d32:	bf00      	nop
 8000d34:	08001079 	.word	0x08001079
 8000d38:	08001089 	.word	0x08001089
 8000d3c:	08001089 	.word	0x08001089
 8000d40:	08001089 	.word	0x08001089
 8000d44:	08001089 	.word	0x08001089
 8000d48:	08001089 	.word	0x08001089
 8000d4c:	08001089 	.word	0x08001089
 8000d50:	08001089 	.word	0x08001089
 8000d54:	08001089 	.word	0x08001089
 8000d58:	08001089 	.word	0x08001089
 8000d5c:	08001089 	.word	0x08001089
 8000d60:	08000e85 	.word	0x08000e85
 8000d64:	08000e85 	.word	0x08000e85
 8000d68:	08000e85 	.word	0x08000e85
 8000d6c:	08000e85 	.word	0x08000e85
 8000d70:	08000e85 	.word	0x08000e85
 8000d74:	08000e85 	.word	0x08000e85
 8000d78:	08000e85 	.word	0x08000e85
 8000d7c:	08000e85 	.word	0x08000e85
 8000d80:	08000e85 	.word	0x08000e85
 8000d84:	08000e85 	.word	0x08000e85
 8000d88:	08001089 	.word	0x08001089
 8000d8c:	08001089 	.word	0x08001089
 8000d90:	08001089 	.word	0x08001089
 8000d94:	08001089 	.word	0x08001089
 8000d98:	08001089 	.word	0x08001089
 8000d9c:	08001089 	.word	0x08001089
 8000da0:	08001089 	.word	0x08001089
 8000da4:	08001089 	.word	0x08001089
 8000da8:	08001089 	.word	0x08001089
 8000dac:	08001089 	.word	0x08001089
 8000db0:	08001089 	.word	0x08001089
 8000db4:	08001089 	.word	0x08001089
 8000db8:	08001089 	.word	0x08001089
 8000dbc:	08001089 	.word	0x08001089
 8000dc0:	08001089 	.word	0x08001089
 8000dc4:	08001089 	.word	0x08001089
 8000dc8:	08001089 	.word	0x08001089
 8000dcc:	08001089 	.word	0x08001089
 8000dd0:	08001089 	.word	0x08001089
 8000dd4:	08001089 	.word	0x08001089
 8000dd8:	08001089 	.word	0x08001089
 8000ddc:	08001089 	.word	0x08001089
 8000de0:	08001089 	.word	0x08001089
 8000de4:	08001089 	.word	0x08001089
 8000de8:	08001089 	.word	0x08001089
 8000dec:	08001089 	.word	0x08001089
 8000df0:	08001089 	.word	0x08001089
 8000df4:	08001089 	.word	0x08001089
 8000df8:	08001089 	.word	0x08001089
 8000dfc:	08001089 	.word	0x08001089
 8000e00:	08000f79 	.word	0x08000f79
 8000e04:	08001089 	.word	0x08001089
 8000e08:	08001089 	.word	0x08001089
 8000e0c:	08001089 	.word	0x08001089
 8000e10:	08001089 	.word	0x08001089
 8000e14:	08001089 	.word	0x08001089
 8000e18:	08001089 	.word	0x08001089
 8000e1c:	08001089 	.word	0x08001089
 8000e20:	08001089 	.word	0x08001089
 8000e24:	08001089 	.word	0x08001089
 8000e28:	08001089 	.word	0x08001089
 8000e2c:	08000ebb 	.word	0x08000ebb
 8000e30:	08000ed7 	.word	0x08000ed7
 8000e34:	08001089 	.word	0x08001089
 8000e38:	08001089 	.word	0x08001089
 8000e3c:	08001089 	.word	0x08001089
 8000e40:	08001089 	.word	0x08001089
 8000e44:	08000ed7 	.word	0x08000ed7
 8000e48:	08001089 	.word	0x08001089
 8000e4c:	08001089 	.word	0x08001089
 8000e50:	08001089 	.word	0x08001089
 8000e54:	08001089 	.word	0x08001089
 8000e58:	08001089 	.word	0x08001089
 8000e5c:	08001089 	.word	0x08001089
 8000e60:	08000f79 	.word	0x08000f79
 8000e64:	08001089 	.word	0x08001089
 8000e68:	08001089 	.word	0x08001089
 8000e6c:	08000f07 	.word	0x08000f07
 8000e70:	08001089 	.word	0x08001089
 8000e74:	08000f5f 	.word	0x08000f5f
 8000e78:	08001089 	.word	0x08001089
 8000e7c:	08001089 	.word	0x08001089
 8000e80:	08000f79 	.word	0x08000f79
                {
                    //
                    // If this is a zero, and it is the first digit, then the
                    // fill character is a zero instead of a space.
                    //
                    if((pc_string[-1] == '0') && (ui16Count == 0))
 8000e84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e86:	3b01      	subs	r3, #1
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b30      	cmp	r3, #48	@ 0x30
 8000e8c:	d105      	bne.n	8000e9a <UART_Printf+0x1e2>
 8000e8e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d102      	bne.n	8000e9a <UART_Printf+0x1e2>
                    {
                        cFill = '0';
 8000e94:	2330      	movs	r3, #48	@ 0x30
 8000e96:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                    }

                    //
                    // Update the digit count.
                    //
                    ui16Count *= 10;
 8000e9a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	0092      	lsls	r2, r2, #2
 8000ea0:	4413      	add	r3, r2
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	857b      	strh	r3, [r7, #42]	@ 0x2a
                    ui16Count += pc_string[-1] - '0';
 8000ea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000eb0:	4413      	add	r3, r2
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	3b30      	subs	r3, #48	@ 0x30
 8000eb6:	857b      	strh	r3, [r7, #42]	@ 0x2a

                    //
                    // Get the next character.
                    //
                    goto again;
 8000eb8:	e730      	b.n	8000d1c <UART_Printf+0x64>
                case 'c':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui16Value = va_arg(vaArgP, int);
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	1d1a      	adds	r2, r3, #4
 8000ebe:	60ba      	str	r2, [r7, #8]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	83fb      	strh	r3, [r7, #30]

                    //
                    // Print out the character.
                    //
                    UART_Write(p_uart, (char *)&ui16Value, 1);
 8000ec6:	f107 031e 	add.w	r3, r7, #30
 8000eca:	2201      	movs	r2, #1
 8000ecc:	4619      	mov	r1, r3
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff fe76 	bl	8000bc0 <UART_Write>

                    //
                    // This command has been handled.
                    //
                    break;
 8000ed4:	e0df      	b.n	8001096 <UART_Printf+0x3de>
                case 'i':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui16Value = va_arg(vaArgP, int);
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	1d1a      	adds	r2, r3, #4
 8000eda:	60ba      	str	r2, [r7, #8]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	83fb      	strh	r3, [r7, #30]

                    //
                    // Reset the buffer position.
                    //
                    ui16Pos = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	85bb      	strh	r3, [r7, #44]	@ 0x2c

                    //
                    // If the value is negative, make it positive and indicate
                    // that a minus sign is needed.
                    //
                    if((int16_t)ui16Value < 0)
 8000ee6:	8bfb      	ldrh	r3, [r7, #30]
 8000ee8:	b21b      	sxth	r3, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	da06      	bge.n	8000efc <UART_Printf+0x244>
                    {
                        //
                        // Make the value positive.
                        //
                        ui16Value = -(int16_t)ui16Value;
 8000eee:	8bfb      	ldrh	r3, [r7, #30]
 8000ef0:	425b      	negs	r3, r3
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	83fb      	strh	r3, [r7, #30]

                        //
                        // Indicate that the value is negative.
                        //
                        ui16Neg = 1;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000efa:	e001      	b.n	8000f00 <UART_Printf+0x248>
                    {
                        //
                        // Indicate that the value is positive so that a minus
                        // sign isn't inserted.
                        //
                        ui16Neg = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	84fb      	strh	r3, [r7, #38]	@ 0x26
                    }

                    //
                    // Set the base to 10.
                    //
                    ui16Base = 10;
 8000f00:	230a      	movs	r3, #10
 8000f02:	853b      	strh	r3, [r7, #40]	@ 0x28

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
 8000f04:	e044      	b.n	8000f90 <UART_Printf+0x2d8>
                case 's':
                {
                    //
                    // Get the string pointer from the varargs.
                    //
                    pcStr = va_arg(vaArgP, char *);
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	1d1a      	adds	r2, r3, #4
 8000f0a:	60ba      	str	r2, [r7, #8]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	623b      	str	r3, [r7, #32]

                    //
                    // Determine the length of the string.
                    //
                    for(ui16Idx = 0; pcStr[ui16Idx] != '\0'; ui16Idx++)
 8000f10:	2300      	movs	r3, #0
 8000f12:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000f14:	e002      	b.n	8000f1c <UART_Printf+0x264>
 8000f16:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000f18:	3301      	adds	r3, #1
 8000f1a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000f1c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000f1e:	6a3a      	ldr	r2, [r7, #32]
 8000f20:	4413      	add	r3, r2
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1f6      	bne.n	8000f16 <UART_Printf+0x25e>
                    }

                    //
                    // Write the string.
                    //
                    UART_Write(p_uart, pcStr, ui16Idx);
 8000f28:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	6a39      	ldr	r1, [r7, #32]
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff fe46 	bl	8000bc0 <UART_Write>

                    //
                    // Write any required padding spaces
                    //
                    if(ui16Count > ui16Idx)
 8000f34:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8000f36:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	f240 80ab 	bls.w	8001094 <UART_Printf+0x3dc>
                    {
                        ui16Count -= ui16Idx;
 8000f3e:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8000f40:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	857b      	strh	r3, [r7, #42]	@ 0x2a
                        while(ui16Count--)
 8000f46:	e004      	b.n	8000f52 <UART_Printf+0x29a>
                        {
                            UART_Write(p_uart, " ", 1);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4959      	ldr	r1, [pc, #356]	@ (80010b0 <UART_Printf+0x3f8>)
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff fe37 	bl	8000bc0 <UART_Write>
                        while(ui16Count--)
 8000f52:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000f54:	1e5a      	subs	r2, r3, #1
 8000f56:	857a      	strh	r2, [r7, #42]	@ 0x2a
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d1f5      	bne.n	8000f48 <UART_Printf+0x290>
                    }

                    //
                    // This command has been handled.
                    //
                    break;
 8000f5c:	e09a      	b.n	8001094 <UART_Printf+0x3dc>
                case 'u':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui16Value = va_arg(vaArgP, int);
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	1d1a      	adds	r2, r3, #4
 8000f62:	60ba      	str	r2, [r7, #8]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	83fb      	strh	r3, [r7, #30]

                    //
                    // Reset the buffer position.
                    //
                    ui16Pos = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	85bb      	strh	r3, [r7, #44]	@ 0x2c

                    //
                    // Set the base to 10.
                    //
                    ui16Base = 10;
 8000f6e:	230a      	movs	r3, #10
 8000f70:	853b      	strh	r3, [r7, #40]	@ 0x28

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui16Neg = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	84fb      	strh	r3, [r7, #38]	@ 0x26

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
 8000f76:	e00b      	b.n	8000f90 <UART_Printf+0x2d8>
                case 'p':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui16Value = va_arg(vaArgP, int);
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	1d1a      	adds	r2, r3, #4
 8000f7c:	60ba      	str	r2, [r7, #8]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	83fb      	strh	r3, [r7, #30]

                    //
                    // Reset the buffer position.
                    //
                    ui16Pos = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	85bb      	strh	r3, [r7, #44]	@ 0x2c

                    //
                    // Set the base to 16.
                    //
                    ui16Base = 16;
 8000f88:	2310      	movs	r3, #16
 8000f8a:	853b      	strh	r3, [r7, #40]	@ 0x28

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui16Neg = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	84fb      	strh	r3, [r7, #38]	@ 0x26
                    //
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ui16Idx = 1;
 8000f90:	2301      	movs	r3, #1
 8000f92:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000f94:	e007      	b.n	8000fa6 <UART_Printf+0x2ee>
                        (((ui16Idx * ui16Base) <= ui16Value) &&
                         (((ui16Idx * ui16Base) / ui16Base) == ui16Idx));
                        ui16Idx *= ui16Base, ui16Count--)
 8000f96:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000f98:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000f9a:	fb12 f303 	smulbb	r3, r2, r3
 8000f9e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000fa0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	857b      	strh	r3, [r7, #42]	@ 0x2a
                        (((ui16Idx * ui16Base) <= ui16Value) &&
 8000fa6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000fa8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000faa:	fb02 f303 	mul.w	r3, r2, r3
 8000fae:	8bfa      	ldrh	r2, [r7, #30]
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	ddf0      	ble.n	8000f96 <UART_Printf+0x2de>

                    //
                    // If the value is negative, reduce the count of padding
                    // characters needed.
                    //
                    if(ui16Neg)
 8000fb4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d002      	beq.n	8000fc0 <UART_Printf+0x308>
                    {
                        ui16Count--;
 8000fba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	857b      	strh	r3, [r7, #42]	@ 0x2a

                    //
                    // If the value is negative and the value is padded with
                    // zeros, then place the minus sign before the padding.
                    //
                    if(ui16Neg && (cFill == '0'))
 8000fc0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d00d      	beq.n	8000fe2 <UART_Printf+0x32a>
 8000fc6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000fca:	2b30      	cmp	r3, #48	@ 0x30
 8000fcc:	d109      	bne.n	8000fe2 <UART_Printf+0x32a>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui16Pos++] = '-';
 8000fce:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000fd0:	1c5a      	adds	r2, r3, #1
 8000fd2:	85ba      	strh	r2, [r7, #44]	@ 0x2c
 8000fd4:	3330      	adds	r3, #48	@ 0x30
 8000fd6:	443b      	add	r3, r7
 8000fd8:	222d      	movs	r2, #45	@ 0x2d
 8000fda:	f803 2c24 	strb.w	r2, [r3, #-36]

                        //
                        // The minus sign has been placed, so turn off the
                        // negative flag.
                        //
                        ui16Neg = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	84fb      	strh	r3, [r7, #38]	@ 0x26

                    //
                    // Provide additional padding at the beginning of the
                    // string conversion if needed.
                    //
                    if((ui16Count > 1) && (ui16Count < 16))
 8000fe2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d915      	bls.n	8001014 <UART_Printf+0x35c>
 8000fe8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000fea:	2b0f      	cmp	r3, #15
 8000fec:	d812      	bhi.n	8001014 <UART_Printf+0x35c>
                    {
                        for(ui16Count--; ui16Count; ui16Count--)
 8000fee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8000ff4:	e00b      	b.n	800100e <UART_Printf+0x356>
                        {
                            pcBuf[ui16Pos++] = cFill;
 8000ff6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000ff8:	1c5a      	adds	r2, r3, #1
 8000ffa:	85ba      	strh	r2, [r7, #44]	@ 0x2c
 8000ffc:	3330      	adds	r3, #48	@ 0x30
 8000ffe:	443b      	add	r3, r7
 8001000:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8001004:	f803 2c24 	strb.w	r2, [r3, #-36]
                        for(ui16Count--; ui16Count; ui16Count--)
 8001008:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800100a:	3b01      	subs	r3, #1
 800100c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800100e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1f0      	bne.n	8000ff6 <UART_Printf+0x33e>

                    //
                    // If the value is negative, then place the minus sign
                    // before the number.
                    //
                    if(ui16Neg)
 8001014:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001016:	2b00      	cmp	r3, #0
 8001018:	d023      	beq.n	8001062 <UART_Printf+0x3aa>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui16Pos++] = '-';
 800101a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800101c:	1c5a      	adds	r2, r3, #1
 800101e:	85ba      	strh	r2, [r7, #44]	@ 0x2c
 8001020:	3330      	adds	r3, #48	@ 0x30
 8001022:	443b      	add	r3, r7
 8001024:	222d      	movs	r2, #45	@ 0x2d
 8001026:	f803 2c24 	strb.w	r2, [r3, #-36]
                    }

                    //
                    // Convert the value into a string.
                    //
                    for(; ui16Idx; ui16Idx /= ui16Base)
 800102a:	e01a      	b.n	8001062 <UART_Printf+0x3aa>
                    {
                        pcBuf[ui16Pos++] =
                            HEX_reference[(ui16Value / ui16Idx) % ui16Base];
 800102c:	4821      	ldr	r0, [pc, #132]	@ (80010b4 <UART_Printf+0x3fc>)
 800102e:	8bfa      	ldrh	r2, [r7, #30]
 8001030:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001032:	fbb2 f3f3 	udiv	r3, r2, r3
 8001036:	b29b      	uxth	r3, r3
 8001038:	461a      	mov	r2, r3
 800103a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800103c:	fb92 f1f3 	sdiv	r1, r2, r3
 8001040:	fb01 f303 	mul.w	r3, r1, r3
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	18c2      	adds	r2, r0, r3
                        pcBuf[ui16Pos++] =
 8001048:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800104a:	1c59      	adds	r1, r3, #1
 800104c:	85b9      	strh	r1, [r7, #44]	@ 0x2c
                            HEX_reference[(ui16Value / ui16Idx) % ui16Base];
 800104e:	7812      	ldrb	r2, [r2, #0]
                        pcBuf[ui16Pos++] =
 8001050:	3330      	adds	r3, #48	@ 0x30
 8001052:	443b      	add	r3, r7
 8001054:	f803 2c24 	strb.w	r2, [r3, #-36]
                    for(; ui16Idx; ui16Idx /= ui16Base)
 8001058:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800105a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800105c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001060:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001062:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1e1      	bne.n	800102c <UART_Printf+0x374>
                    }

                    //
                    // Write the string.
                    //
                    UART_Write(p_uart, pcBuf, ui16Pos);
 8001068:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	4619      	mov	r1, r3
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff fda5 	bl	8000bc0 <UART_Write>

                    //
                    // This command has been handled.
                    //
                    break;
 8001076:	e00e      	b.n	8001096 <UART_Printf+0x3de>
                case '%':
                {
                    //
                    // Simply write a single %.
                    //
                    UART_Write(p_uart, pc_string - 1, 1);
 8001078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800107a:	3b01      	subs	r3, #1
 800107c:	2201      	movs	r2, #1
 800107e:	4619      	mov	r1, r3
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff fd9d 	bl	8000bc0 <UART_Write>

                    //
                    // This command has been handled.
                    //
                    break;
 8001086:	e006      	b.n	8001096 <UART_Printf+0x3de>
                default:
                {
                    //
                    // Indicate an error.
                    //
                    UART_Write(p_uart, "ERROR", 5);
 8001088:	2205      	movs	r2, #5
 800108a:	490b      	ldr	r1, [pc, #44]	@ (80010b8 <UART_Printf+0x400>)
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff fd97 	bl	8000bc0 <UART_Write>

                    //
                    // This command has been handled.
                    //
                    break;
 8001092:	e000      	b.n	8001096 <UART_Printf+0x3de>
                    break;
 8001094:	bf00      	nop
    while(*pc_string)
 8001096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	f47f ae15 	bne.w	8000cca <UART_Printf+0x12>
                }
            }
        }
    }
    va_end(vaArgP);
}
 80010a0:	bf00      	nop
 80010a2:	bf00      	nop
 80010a4:	3734      	adds	r7, #52	@ 0x34
 80010a6:	46bd      	mov	sp, r7
 80010a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010ac:	b003      	add	sp, #12
 80010ae:	4770      	bx	lr
 80010b0:	0800454c 	.word	0x0800454c
 80010b4:	08004538 	.word	0x08004538
 80010b8:	08004550 	.word	0x08004550

080010bc <UART_Get_Char>:
//!
//! \return Returns the character read.
//
//*****************************************************************************
char UART_Get_Char(uart_stdio_typedef* p_uart)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]

    char return_char;

    if (RX_BUFFER_EMPTY(p_uart))
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f103 021a 	add.w	r2, r3, #26
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3318      	adds	r3, #24
 80010ce:	4619      	mov	r1, r3
 80010d0:	4610      	mov	r0, r2
 80010d2:	f000 f83c 	bl	800114e <UART_is_buffer_empty>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <UART_Get_Char+0x24>
    {
        return 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	e011      	b.n	8001104 <UART_Get_Char+0x48>
    }

    //
    // Read a character from the buffer.
    //
    return_char = p_uart->p_RX_buffer[p_uart->RX_read_index];
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	8b52      	ldrh	r2, [r2, #26]
 80010e8:	b292      	uxth	r2, r2
 80010ea:	4413      	add	r3, r2
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	73fb      	strb	r3, [r7, #15]
    ADVANCE_RX_READ_INDEX(p_uart);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f103 021a 	add.w	r2, r3, #26
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	891b      	ldrh	r3, [r3, #8]
 80010fa:	4619      	mov	r1, r3
 80010fc:	4610      	mov	r0, r2
 80010fe:	f000 f83e 	bl	800117e <UART_advance_buffer_index>

    //
    // Return the character to the caller.
    //
    return(return_char);
 8001102:	7bfb      	ldrb	r3, [r7, #15]

}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <UART_is_buffer_full>:
//
//*****************************************************************************

uint8_t UART_is_buffer_full(volatile uint16_t *pui16Read,
             volatile uint16_t *pui16Write, uint16_t ui16Size)
{
 800110c:	b480      	push	{r7}
 800110e:	b087      	sub	sp, #28
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	4613      	mov	r3, r2
 8001118:	80fb      	strh	r3, [r7, #6]
    uint16_t ui16Write;
    uint16_t ui16Read;

    ui16Write = *pui16Write;
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	881b      	ldrh	r3, [r3, #0]
 800111e:	82fb      	strh	r3, [r7, #22]
    ui16Read = *pui16Read;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	82bb      	strh	r3, [r7, #20]

    return((((ui16Write + 1) % ui16Size) == ui16Read) ? 1 : 0);
 8001126:	8afb      	ldrh	r3, [r7, #22]
 8001128:	3301      	adds	r3, #1
 800112a:	88fa      	ldrh	r2, [r7, #6]
 800112c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001130:	fb01 f202 	mul.w	r2, r1, r2
 8001134:	1a9a      	subs	r2, r3, r2
 8001136:	8abb      	ldrh	r3, [r7, #20]
 8001138:	429a      	cmp	r2, r3
 800113a:	bf0c      	ite	eq
 800113c:	2301      	moveq	r3, #1
 800113e:	2300      	movne	r3, #0
 8001140:	b2db      	uxtb	r3, r3
}
 8001142:	4618      	mov	r0, r3
 8001144:	371c      	adds	r7, #28
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <UART_is_buffer_empty>:
//
//*****************************************************************************

uint8_t UART_is_buffer_empty(volatile uint16_t *pui16Read,
              volatile uint16_t *pui16Write)
{
 800114e:	b480      	push	{r7}
 8001150:	b085      	sub	sp, #20
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
 8001156:	6039      	str	r1, [r7, #0]
    uint16_t ui16Write;
    uint16_t ui16Read;

    ui16Write = *pui16Write;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	81fb      	strh	r3, [r7, #14]
    ui16Read = *pui16Read;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	81bb      	strh	r3, [r7, #12]

    return((ui16Read == ui16Write) ? 1 : 0);
 8001164:	89ba      	ldrh	r2, [r7, #12]
 8001166:	89fb      	ldrh	r3, [r7, #14]
 8001168:	429a      	cmp	r2, r3
 800116a:	bf0c      	ite	eq
 800116c:	2301      	moveq	r3, #1
 800116e:	2300      	movne	r3, #0
 8001170:	b2db      	uxtb	r3, r3
}
 8001172:	4618      	mov	r0, r3
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <UART_advance_buffer_index>:
//! \return Returns the number of bytes of data currently in the buffer.
//
//*****************************************************************************

uint16_t UART_advance_buffer_index(volatile uint16_t* pui16Index, uint16_t ui16Size)
{
 800117e:	b480      	push	{r7}
 8001180:	b083      	sub	sp, #12
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
 8001186:	460b      	mov	r3, r1
 8001188:	807b      	strh	r3, [r7, #2]
    *pui16Index = (*pui16Index + 1) % ui16Size;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	b29b      	uxth	r3, r3
 8001190:	3301      	adds	r3, #1
 8001192:	887a      	ldrh	r2, [r7, #2]
 8001194:	fb93 f1f2 	sdiv	r1, r3, r2
 8001198:	fb01 f202 	mul.w	r2, r1, r2
 800119c:	1a9b      	subs	r3, r3, r2
 800119e:	b29a      	uxth	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	801a      	strh	r2, [r3, #0]

    return(*pui16Index);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	b29b      	uxth	r3, r3
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <UART_Prime_Transmit>:
// Take as many bytes from the transmit buffer as we have space for and move
// them into the UART transmit FIFO.
//
//*****************************************************************************
void UART_Prime_Transmit(uart_stdio_typedef* p_uart)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
    //
    // Do we have any data to transmit?
    //
    if(!TX_BUFFER_EMPTY(p_uart))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f103 0212 	add.w	r2, r3, #18
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3310      	adds	r3, #16
 80011c8:	4619      	mov	r1, r3
 80011ca:	4610      	mov	r0, r2
 80011cc:	f7ff ffbf 	bl	800114e <UART_is_buffer_empty>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d120      	bne.n	8001218 <UART_Prime_Transmit+0x62>
    {
        NVIC_DisableIRQ(p_uart->irqn);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fbd3 	bl	8000988 <__NVIC_DisableIRQ>

        LL_USART_TransmitData8(p_uart->handle, p_uart->p_TX_buffer[p_uart->TX_read_index]);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6818      	ldr	r0, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	8a52      	ldrh	r2, [r2, #18]
 80011ee:	b292      	uxth	r2, r2
 80011f0:	4413      	add	r3, r2
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4619      	mov	r1, r3
 80011f6:	f7ff fc67 	bl	8000ac8 <LL_USART_TransmitData8>
        ADVANCE_TX_READ_INDEX(p_uart);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f103 0212 	add.w	r2, r3, #18
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	88db      	ldrh	r3, [r3, #6]
 8001204:	4619      	mov	r1, r3
 8001206:	4610      	mov	r0, r2
 8001208:	f7ff ffb9 	bl	800117e <UART_advance_buffer_index>

        NVIC_EnableIRQ(p_uart->irqn);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fb9a 	bl	800094c <__NVIC_EnableIRQ>
    }
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <CmdLineProcess>:
//! \b CMDLINE_TOO_MANY_ARGS if there are more arguments than can be parsed.
//! Otherwise it returns the code that was returned by the command function.
//
//*****************************************************************************
uint8_t CmdLineProcess(char *pcCmdLine, USART_TypeDef* USARTx)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
    char *pcChar;
    uint_fast8_t ui8Argc;
    bool bFindArg = true;
 800122a:	2301      	movs	r3, #1
 800122c:	73fb      	strb	r3, [r7, #15]

    //
    // Initialize the argument counter, and point to the beginning of the
    // command line string.
    //
    ui8Argc = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
    pcChar = pcCmdLine;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	617b      	str	r3, [r7, #20]

    //
    // Advance through the command line until a zero character is found.
    //
    while(*pcChar)
 8001236:	e01f      	b.n	8001278 <CmdLineProcess+0x58>
    {
        //
        // If there is a space, then replace it with a zero, and set the flag
        // to search for the next argument.
        //
        if(*pcChar == ' ')
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b20      	cmp	r3, #32
 800123e:	d105      	bne.n	800124c <CmdLineProcess+0x2c>
        {
            *pcChar = 0;
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
            bFindArg = true;
 8001246:	2301      	movs	r3, #1
 8001248:	73fb      	strb	r3, [r7, #15]
 800124a:	e012      	b.n	8001272 <CmdLineProcess+0x52>
        {
            //
            // If bFindArg is set, then that means we are looking for the start
            // of the next argument.
            //
            if(bFindArg)
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d00f      	beq.n	8001272 <CmdLineProcess+0x52>
                //
                // As long as the maximum number of arguments has not been
                // reached, then save the pointer to the start of this new arg
                // in the argv array, and increment the count of args, argc.
                //
                if(ui8Argc < CMDLINE_MAX_ARGS)
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	2b07      	cmp	r3, #7
 8001256:	d80a      	bhi.n	800126e <CmdLineProcess+0x4e>
                {
                    g_ppcArgv[ui8Argc] = pcChar;
 8001258:	4920      	ldr	r1, [pc, #128]	@ (80012dc <CmdLineProcess+0xbc>)
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    ui8Argc++;
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	3301      	adds	r3, #1
 8001266:	613b      	str	r3, [r7, #16]
                    bFindArg = false;
 8001268:	2300      	movs	r3, #0
 800126a:	73fb      	strb	r3, [r7, #15]
 800126c:	e001      	b.n	8001272 <CmdLineProcess+0x52>
                // The maximum number of arguments has been reached so return
                // the error.
                //
                else
                {
                    return(CMDLINE_TOO_MANY_ARGS);
 800126e:	2302      	movs	r3, #2
 8001270:	e030      	b.n	80012d4 <CmdLineProcess+0xb4>
        }

        //
        // Advance to the next character in the command line.
        //
        pcChar++;
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	3301      	adds	r3, #1
 8001276:	617b      	str	r3, [r7, #20]
    while(*pcChar)
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1db      	bne.n	8001238 <CmdLineProcess+0x18>
    }

    //
    // If one or more arguments was found, then process the command.
    //
    if(ui8Argc)
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d025      	beq.n	80012d2 <CmdLineProcess+0xb2>
    {
        g_ppcArgv[ui8Argc] = (char*)USARTx;
 8001286:	4915      	ldr	r1, [pc, #84]	@ (80012dc <CmdLineProcess+0xbc>)
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        ui8Argc++;
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	3301      	adds	r3, #1
 8001294:	613b      	str	r3, [r7, #16]
        //
        // Start at the beginning of the command table, to look for a matching
        // command.
        //
        psCmdEntry = &g_psCmdTable[0];
 8001296:	4b12      	ldr	r3, [pc, #72]	@ (80012e0 <CmdLineProcess+0xc0>)
 8001298:	60bb      	str	r3, [r7, #8]

        //
        // Search through the command table until a null command string is
        // found, which marks the end of the table.
        //
        while(psCmdEntry->pcCmd)
 800129a:	e016      	b.n	80012ca <CmdLineProcess+0xaa>
            //
            // If this command entry command string matches argv[0], then call
            // the function for this command, passing the command line
            // arguments.
            //
            if(!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
 800129c:	4b0f      	ldr	r3, [pc, #60]	@ (80012dc <CmdLineProcess+0xbc>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4619      	mov	r1, r3
 80012a6:	4610      	mov	r0, r2
 80012a8:	f7fe ff8e 	bl	80001c8 <strcmp>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d108      	bne.n	80012c4 <CmdLineProcess+0xa4>
            {
                return(psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4908      	ldr	r1, [pc, #32]	@ (80012dc <CmdLineProcess+0xbc>)
 80012ba:	4610      	mov	r0, r2
 80012bc:	4798      	blx	r3
 80012be:	4603      	mov	r3, r0
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	e007      	b.n	80012d4 <CmdLineProcess+0xb4>
            }

            //
            // Not found, so advance to the next entry.
            //
            psCmdEntry++;
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	330c      	adds	r3, #12
 80012c8:	60bb      	str	r3, [r7, #8]
        while(psCmdEntry->pcCmd)
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1e4      	bne.n	800129c <CmdLineProcess+0x7c>

    //
    // Fall through to here means that no matching command was found, so return
    // an error.
    //
    return(CMDLINE_BAD_CMD);
 80012d2:	2301      	movs	r3, #1
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	200001d0 	.word	0x200001d0
 80012e0:	20000018 	.word	0x20000018

080012e4 <LL_USART_IsActiveFlag_RXNE>:
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0320 	and.w	r3, r3, #32
 80012f4:	2b20      	cmp	r3, #32
 80012f6:	bf0c      	ite	eq
 80012f8:	2301      	moveq	r3, #1
 80012fa:	2300      	movne	r3, #0
 80012fc:	b2db      	uxtb	r3, r3
}
 80012fe:	4618      	mov	r0, r3
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <LL_USART_IsActiveFlag_TXE>:
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800131a:	2b80      	cmp	r3, #128	@ 0x80
 800131c:	bf0c      	ite	eq
 800131e:	2301      	moveq	r3, #1
 8001320:	2300      	movne	r3, #0
 8001322:	b2db      	uxtb	r3, r3
}
 8001324:	4618      	mov	r0, r3
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <LL_USART_DisableIT_TXE>:
{
 8001330:	b480      	push	{r7}
 8001332:	b089      	sub	sp, #36	@ 0x24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	330c      	adds	r3, #12
 800133c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	e853 3f00 	ldrex	r3, [r3]
 8001344:	60bb      	str	r3, [r7, #8]
   return(result);
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800134c:	61fb      	str	r3, [r7, #28]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	330c      	adds	r3, #12
 8001352:	69fa      	ldr	r2, [r7, #28]
 8001354:	61ba      	str	r2, [r7, #24]
 8001356:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001358:	6979      	ldr	r1, [r7, #20]
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	e841 2300 	strex	r3, r2, [r1]
 8001360:	613b      	str	r3, [r7, #16]
   return(result);
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1e7      	bne.n	8001338 <LL_USART_DisableIT_TXE+0x8>
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	3724      	adds	r7, #36	@ 0x24
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <LL_USART_ReceiveData8>:
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	b2db      	uxtb	r3, r3
}
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	619a      	str	r2, [r3, #24]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <command_init>:
		9
	}
};

void	command_init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af04      	add	r7, sp, #16
    UART_Init( &CONSOLE_UART, EXP_UART_HANDLE, EXP_UART_IRQ,
 80013b2:	2340      	movs	r3, #64	@ 0x40
 80013b4:	9302      	str	r3, [sp, #8]
 80013b6:	2340      	movs	r3, #64	@ 0x40
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	4b13      	ldr	r3, [pc, #76]	@ (8001408 <command_init+0x5c>)
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	4b13      	ldr	r3, [pc, #76]	@ (800140c <command_init+0x60>)
 80013c0:	2227      	movs	r2, #39	@ 0x27
 80013c2:	4913      	ldr	r1, [pc, #76]	@ (8001410 <command_init+0x64>)
 80013c4:	4813      	ldr	r0, [pc, #76]	@ (8001414 <command_init+0x68>)
 80013c6:	f7ff fb8e 	bl	8000ae6 <UART_Init>
				g_EXP_UART_TX_buffer, g_EXP_UART_RX_buffer,
				sizeof(g_EXP_UART_TX_buffer), sizeof(g_EXP_UART_RX_buffer));
    CMD_line.p_buffer       = g_CMD_line_buffer;
 80013ca:	4b13      	ldr	r3, [pc, #76]	@ (8001418 <command_init+0x6c>)
 80013cc:	4a13      	ldr	r2, [pc, #76]	@ (800141c <command_init+0x70>)
 80013ce:	605a      	str	r2, [r3, #4]
	CMD_line.buffer_size    = 64;
 80013d0:	4b11      	ldr	r3, [pc, #68]	@ (8001418 <command_init+0x6c>)
 80013d2:	2240      	movs	r2, #64	@ 0x40
 80013d4:	801a      	strh	r2, [r3, #0]
	CMD_line.write_index 	= 0;
 80013d6:	4b10      	ldr	r3, [pc, #64]	@ (8001418 <command_init+0x6c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	811a      	strh	r2, [r3, #8]
	if(CMD_line.buffer_size != 0)
 80013dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001418 <command_init+0x6c>)
 80013de:	881b      	ldrh	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d006      	beq.n	80013f2 <command_init+0x46>
	{
		memset((void *)CMD_line.p_buffer, 0, sizeof(CMD_line.p_buffer));
 80013e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <command_init+0x6c>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2204      	movs	r2, #4
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f003 f865 	bl	80044bc <memset>
	}
	//command_send_splash();
	UART_Send_String(&CONSOLE_UART, "EXP FIRMWARE V1.0.0\n");
 80013f2:	490b      	ldr	r1, [pc, #44]	@ (8001420 <command_init+0x74>)
 80013f4:	4807      	ldr	r0, [pc, #28]	@ (8001414 <command_init+0x68>)
 80013f6:	f7ff fbd0 	bl	8000b9a <UART_Send_String>
	UART_Send_String(&CONSOLE_UART, "> ");
 80013fa:	490a      	ldr	r1, [pc, #40]	@ (8001424 <command_init+0x78>)
 80013fc:	4805      	ldr	r0, [pc, #20]	@ (8001414 <command_init+0x68>)
 80013fe:	f7ff fbcc 	bl	8000b9a <UART_Send_String>
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000254 	.word	0x20000254
 800140c:	20000214 	.word	0x20000214
 8001410:	40004800 	.word	0x40004800
 8001414:	200001f4 	.word	0x200001f4
 8001418:	20000294 	.word	0x20000294
 800141c:	200002a0 	.word	0x200002a0
 8001420:	080046f0 	.word	0x080046f0
 8001424:	08004708 	.word	0x08004708

08001428 <command_task_update>:
//static char s_commandHistory[MAX_HISTORY][MAX_CMD_LENGTH];
//static int s_historyCount = 0;
//static int s_historyIndex = 0;

static void command_task_update(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
	uint8_t cmd_return, time_out;
	for(time_out = 50; (!RX_BUFFER_EMPTY(&CONSOLE_UART)) && (time_out != 0); time_out--)
 800142e:	2332      	movs	r3, #50	@ 0x32
 8001430:	71fb      	strb	r3, [r7, #7]
 8001432:	e08d      	b.n	8001550 <command_task_update+0x128>
	{
		CMD_line.RX_char = UART_Get_Char(&CONSOLE_UART);
 8001434:	484f      	ldr	r0, [pc, #316]	@ (8001574 <command_task_update+0x14c>)
 8001436:	f7ff fe41 	bl	80010bc <UART_Get_Char>
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	4b4e      	ldr	r3, [pc, #312]	@ (8001578 <command_task_update+0x150>)
 8001440:	729a      	strb	r2, [r3, #10]

		if(((CMD_line.RX_char == 8) || (CMD_line.RX_char == 127)))
 8001442:	4b4d      	ldr	r3, [pc, #308]	@ (8001578 <command_task_update+0x150>)
 8001444:	7a9b      	ldrb	r3, [r3, #10]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b08      	cmp	r3, #8
 800144a:	d004      	beq.n	8001456 <command_task_update+0x2e>
 800144c:	4b4a      	ldr	r3, [pc, #296]	@ (8001578 <command_task_update+0x150>)
 800144e:	7a9b      	ldrb	r3, [r3, #10]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b7f      	cmp	r3, #127	@ 0x7f
 8001454:	d114      	bne.n	8001480 <command_task_update+0x58>
		{
			if (CMD_line.write_index == 0)
 8001456:	4b48      	ldr	r3, [pc, #288]	@ (8001578 <command_task_update+0x150>)
 8001458:	891b      	ldrh	r3, [r3, #8]
 800145a:	b29b      	uxth	r3, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 8083 	beq.w	8001568 <command_task_update+0x140>
				break;
			CMD_line.write_index--;
 8001462:	4b45      	ldr	r3, [pc, #276]	@ (8001578 <command_task_update+0x150>)
 8001464:	891b      	ldrh	r3, [r3, #8]
 8001466:	b29b      	uxth	r3, r3
 8001468:	3b01      	subs	r3, #1
 800146a:	b29a      	uxth	r2, r3
 800146c:	4b42      	ldr	r3, [pc, #264]	@ (8001578 <command_task_update+0x150>)
 800146e:	811a      	strh	r2, [r3, #8]
			UART_Send_Char(&CONSOLE_UART, CMD_line.RX_char);
 8001470:	4b41      	ldr	r3, [pc, #260]	@ (8001578 <command_task_update+0x150>)
 8001472:	7a9b      	ldrb	r3, [r3, #10]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	4619      	mov	r1, r3
 8001478:	483e      	ldr	r0, [pc, #248]	@ (8001574 <command_task_update+0x14c>)
 800147a:	f7ff fb7e 	bl	8000b7a <UART_Send_Char>
			break;
 800147e:	e074      	b.n	800156a <command_task_update+0x142>
		}

		UART_Send_Char(&CONSOLE_UART, CMD_line.RX_char);
 8001480:	4b3d      	ldr	r3, [pc, #244]	@ (8001578 <command_task_update+0x150>)
 8001482:	7a9b      	ldrb	r3, [r3, #10]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	4619      	mov	r1, r3
 8001488:	483a      	ldr	r0, [pc, #232]	@ (8001574 <command_task_update+0x14c>)
 800148a:	f7ff fb76 	bl	8000b7a <UART_Send_Char>

		if((CMD_line.RX_char == '\r') || (CMD_line.RX_char == '\n'))
 800148e:	4b3a      	ldr	r3, [pc, #232]	@ (8001578 <command_task_update+0x150>)
 8001490:	7a9b      	ldrb	r3, [r3, #10]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b0d      	cmp	r3, #13
 8001496:	d004      	beq.n	80014a2 <command_task_update+0x7a>
 8001498:	4b37      	ldr	r3, [pc, #220]	@ (8001578 <command_task_update+0x150>)
 800149a:	7a9b      	ldrb	r3, [r3, #10]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b0a      	cmp	r3, #10
 80014a0:	d134      	bne.n	800150c <command_task_update+0xe4>
		{
			if(CMD_line.write_index > 0)
 80014a2:	4b35      	ldr	r3, [pc, #212]	@ (8001578 <command_task_update+0x150>)
 80014a4:	891b      	ldrh	r3, [r3, #8]
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d02a      	beq.n	8001502 <command_task_update+0xda>
			{
				// Add a NUL char at the end of the CMD
				CMD_line.p_buffer[CMD_line.write_index] = 0;
 80014ac:	4b32      	ldr	r3, [pc, #200]	@ (8001578 <command_task_update+0x150>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	4a31      	ldr	r2, [pc, #196]	@ (8001578 <command_task_update+0x150>)
 80014b2:	8912      	ldrh	r2, [r2, #8]
 80014b4:	b292      	uxth	r2, r2
 80014b6:	4413      	add	r3, r2
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
				CMD_line.write_index++;
 80014bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001578 <command_task_update+0x150>)
 80014be:	891b      	ldrh	r3, [r3, #8]
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	3301      	adds	r3, #1
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001578 <command_task_update+0x150>)
 80014c8:	811a      	strh	r2, [r3, #8]

				cmd_return = CmdLineProcess(CMD_line.p_buffer, CONSOLE_UART_HANDLE);
 80014ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001578 <command_task_update+0x150>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	492b      	ldr	r1, [pc, #172]	@ (800157c <command_task_update+0x154>)
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fea5 	bl	8001220 <CmdLineProcess>
 80014d6:	4603      	mov	r3, r0
 80014d8:	71bb      	strb	r3, [r7, #6]
				CMD_line.write_index    = 0;
 80014da:	4b27      	ldr	r3, [pc, #156]	@ (8001578 <command_task_update+0x150>)
 80014dc:	2200      	movs	r2, #0
 80014de:	811a      	strh	r2, [r3, #8]

				UART_Send_String(&CONSOLE_UART, "> ");
 80014e0:	4927      	ldr	r1, [pc, #156]	@ (8001580 <command_task_update+0x158>)
 80014e2:	4824      	ldr	r0, [pc, #144]	@ (8001574 <command_task_update+0x14c>)
 80014e4:	f7ff fb59 	bl	8000b9a <UART_Send_String>
				UART_Printf(&CONSOLE_UART, ErrorCode[cmd_return]);
 80014e8:	79bb      	ldrb	r3, [r7, #6]
 80014ea:	4a26      	ldr	r2, [pc, #152]	@ (8001584 <command_task_update+0x15c>)
 80014ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f0:	4619      	mov	r1, r3
 80014f2:	4820      	ldr	r0, [pc, #128]	@ (8001574 <command_task_update+0x14c>)
 80014f4:	f7ff fbe0 	bl	8000cb8 <UART_Printf>
				UART_Send_String(&CONSOLE_UART, "> ");
 80014f8:	4921      	ldr	r1, [pc, #132]	@ (8001580 <command_task_update+0x158>)
 80014fa:	481e      	ldr	r0, [pc, #120]	@ (8001574 <command_task_update+0x14c>)
 80014fc:	f7ff fb4d 	bl	8000b9a <UART_Send_String>
			if(CMD_line.write_index > 0)
 8001500:	e023      	b.n	800154a <command_task_update+0x122>
			}
			else
			{
				UART_Send_String(&CONSOLE_UART, "> ");
 8001502:	491f      	ldr	r1, [pc, #124]	@ (8001580 <command_task_update+0x158>)
 8001504:	481b      	ldr	r0, [pc, #108]	@ (8001574 <command_task_update+0x14c>)
 8001506:	f7ff fb48 	bl	8000b9a <UART_Send_String>
			if(CMD_line.write_index > 0)
 800150a:	e01e      	b.n	800154a <command_task_update+0x122>
			}
		}
		else
		{
			CMD_line.p_buffer[CMD_line.write_index] = CMD_line.RX_char;
 800150c:	4b1a      	ldr	r3, [pc, #104]	@ (8001578 <command_task_update+0x150>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	4a19      	ldr	r2, [pc, #100]	@ (8001578 <command_task_update+0x150>)
 8001512:	8912      	ldrh	r2, [r2, #8]
 8001514:	b292      	uxth	r2, r2
 8001516:	4413      	add	r3, r2
 8001518:	4a17      	ldr	r2, [pc, #92]	@ (8001578 <command_task_update+0x150>)
 800151a:	7a92      	ldrb	r2, [r2, #10]
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	701a      	strb	r2, [r3, #0]
			CMD_line.write_index++;
 8001520:	4b15      	ldr	r3, [pc, #84]	@ (8001578 <command_task_update+0x150>)
 8001522:	891b      	ldrh	r3, [r3, #8]
 8001524:	b29b      	uxth	r3, r3
 8001526:	3301      	adds	r3, #1
 8001528:	b29a      	uxth	r2, r3
 800152a:	4b13      	ldr	r3, [pc, #76]	@ (8001578 <command_task_update+0x150>)
 800152c:	811a      	strh	r2, [r3, #8]

			if (CMD_line.write_index > CMD_line.buffer_size)
 800152e:	4b12      	ldr	r3, [pc, #72]	@ (8001578 <command_task_update+0x150>)
 8001530:	891b      	ldrh	r3, [r3, #8]
 8001532:	b29a      	uxth	r2, r3
 8001534:	4b10      	ldr	r3, [pc, #64]	@ (8001578 <command_task_update+0x150>)
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	429a      	cmp	r2, r3
 800153a:	d906      	bls.n	800154a <command_task_update+0x122>
			{
				// SDKLFJSDFKS
				// > CMD too long!
				// >
				UART_Send_String(&CONSOLE_UART, "\n> CMD too long!\n> ");
 800153c:	4912      	ldr	r1, [pc, #72]	@ (8001588 <command_task_update+0x160>)
 800153e:	480d      	ldr	r0, [pc, #52]	@ (8001574 <command_task_update+0x14c>)
 8001540:	f7ff fb2b 	bl	8000b9a <UART_Send_String>
				CMD_line.write_index    = 0;
 8001544:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <command_task_update+0x150>)
 8001546:	2200      	movs	r2, #0
 8001548:	811a      	strh	r2, [r3, #8]
	for(time_out = 50; (!RX_BUFFER_EMPTY(&CONSOLE_UART)) && (time_out != 0); time_out--)
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	3b01      	subs	r3, #1
 800154e:	71fb      	strb	r3, [r7, #7]
 8001550:	490e      	ldr	r1, [pc, #56]	@ (800158c <command_task_update+0x164>)
 8001552:	480f      	ldr	r0, [pc, #60]	@ (8001590 <command_task_update+0x168>)
 8001554:	f7ff fdfb 	bl	800114e <UART_is_buffer_empty>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d105      	bne.n	800156a <command_task_update+0x142>
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	2b00      	cmp	r3, #0
 8001562:	f47f af67 	bne.w	8001434 <command_task_update+0xc>
//            Uart_write(USART2, rxData);
//            process_command(USART2, rxData);
//        }
//    }

}
 8001566:	e000      	b.n	800156a <command_task_update+0x142>
				break;
 8001568:	bf00      	nop
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200001f4 	.word	0x200001f4
 8001578:	20000294 	.word	0x20000294
 800157c:	40004800 	.word	0x40004800
 8001580:	08004708 	.word	0x08004708
 8001584:	20000000 	.word	0x20000000
 8001588:	0800470c 	.word	0x0800470c
 800158c:	2000020c 	.word	0x2000020c
 8001590:	2000020e 	.word	0x2000020e

08001594 <Cmd_help>:
//            s_commandBufferIndex = 0;
//        }
//    }
//}

int Cmd_help(int argc, char *argv[]) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
    tCmdLineEntry * pEntry;
//    USART_TypeDef * USARTx = (USART_TypeDef*)argv[argc-1];

    pEntry = &g_psCmdTable[0];
 800159e:	4b0f      	ldr	r3, [pc, #60]	@ (80015dc <Cmd_help+0x48>)
 80015a0:	60fb      	str	r3, [r7, #12]
	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
    while (pEntry->pcCmd)
 80015a2:	e012      	b.n	80015ca <Cmd_help+0x36>
    {
    	// Print the command name and the brief description.
        UART_Send_String(&CONSOLE_UART, pEntry->pcCmd);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4619      	mov	r1, r3
 80015aa:	480d      	ldr	r0, [pc, #52]	@ (80015e0 <Cmd_help+0x4c>)
 80015ac:	f7ff faf5 	bl	8000b9a <UART_Send_String>
        UART_Send_String(&CONSOLE_UART, pEntry->pcHelp);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	4619      	mov	r1, r3
 80015b6:	480a      	ldr	r0, [pc, #40]	@ (80015e0 <Cmd_help+0x4c>)
 80015b8:	f7ff faef 	bl	8000b9a <UART_Send_String>
    	UART_Send_String(&CONSOLE_UART, "\n");
 80015bc:	4909      	ldr	r1, [pc, #36]	@ (80015e4 <Cmd_help+0x50>)
 80015be:	4808      	ldr	r0, [pc, #32]	@ (80015e0 <Cmd_help+0x4c>)
 80015c0:	f7ff faeb 	bl	8000b9a <UART_Send_String>
        // Advance to the next entry in the table.
        pEntry++;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	330c      	adds	r3, #12
 80015c8:	60fb      	str	r3, [r7, #12]
    while (pEntry->pcCmd)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1e8      	bne.n	80015a4 <Cmd_help+0x10>
    }
    return (CMDLINE_OK);
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000018 	.word	0x20000018
 80015e0:	200001f4 	.word	0x200001f4
 80015e4:	08004720 	.word	0x08004720

080015e8 <Cmd_on_tec_pw>:

int Cmd_on_tec_pw(int argc, char *argv[])
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
	LL_GPIO_SetOutputPin(EF_TEC_EN_GPIO_Port, EF_TEC_EN_Pin);
 80015f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015f6:	4804      	ldr	r0, [pc, #16]	@ (8001608 <Cmd_on_tec_pw+0x20>)
 80015f8:	f7ff feca 	bl	8001390 <LL_GPIO_SetOutputPin>
	return (CMDLINE_OK);
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40020800 	.word	0x40020800

0800160c <Cmd_reset>:

int Cmd_reset(int argc, char *argv[])
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
	lt8722_reset();
 8001616:	f000 fc53 	bl	8001ec0 <lt8722_reset>
	return (CMDLINE_OK);
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <Cmd_set_en_req>:

int Cmd_set_en_req(int argc, char *argv[])
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
	LL_GPIO_SetOutputPin(TEC_1_EN_GPIO_Port, TEC_1_EN_Pin);
 800162e:	2120      	movs	r1, #32
 8001630:	4806      	ldr	r0, [pc, #24]	@ (800164c <Cmd_set_en_req+0x28>)
 8001632:	f7ff fead 	bl	8001390 <LL_GPIO_SetOutputPin>
	lt8722_reg_write(LT8722_SPIS_COMMAND, 0x00004000);
 8001636:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800163a:	2000      	movs	r0, #0
 800163c:	f000 fbd2 	bl	8001de4 <lt8722_reg_write>
//	lt8722_set_enable_req(LT8722_ENABLE_REQ_ENABLED);
	return (CMDLINE_OK);
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40021000 	.word	0x40021000

08001650 <Cmd_reset_en_req>:

int Cmd_reset_en_req(int argc, char *argv[])
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
	lt8722_set_enable_req(LT8722_ENABLE_REQ_DISABLED);
 800165a:	2000      	movs	r0, #0
 800165c:	f000 fc10 	bl	8001e80 <lt8722_set_enable_req>
	return (CMDLINE_OK);
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <Cmd_clear_status_reg>:

int Cmd_clear_status_reg(int argc, char *argv[])
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	6039      	str	r1, [r7, #0]
	lt8722_reg_write(LT8722_SPIS_STATUS, 0);
 8001674:	2100      	movs	r1, #0
 8001676:	2001      	movs	r0, #1
 8001678:	f000 fbb4 	bl	8001de4 <lt8722_reg_write>
	return (CMDLINE_OK);
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <Cmd_read>:

int Cmd_read(int argc, char *argv[])
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
	uint32_t data;
	lt8722_reg_read(LT8722_SPIS_COMMAND, &data);
 8001692:	f107 030c 	add.w	r3, r7, #12
 8001696:	4619      	mov	r1, r3
 8001698:	2000      	movs	r0, #0
 800169a:	f000 fb6d 	bl	8001d78 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_COMMAND: 0x%X-%X \n", data>>16, data);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	0c1a      	lsrs	r2, r3, #16
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4930      	ldr	r1, [pc, #192]	@ (8001768 <Cmd_read+0xe0>)
 80016a6:	4831      	ldr	r0, [pc, #196]	@ (800176c <Cmd_read+0xe4>)
 80016a8:	f7ff fb06 	bl	8000cb8 <UART_Printf>

	lt8722_reg_read(LT8722_SPIS_STATUS, &data);
 80016ac:	f107 030c 	add.w	r3, r7, #12
 80016b0:	4619      	mov	r1, r3
 80016b2:	2001      	movs	r0, #1
 80016b4:	f000 fb60 	bl	8001d78 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_STATUS: 0x%X-%X \n", data>>16, data);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	0c1a      	lsrs	r2, r3, #16
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	492c      	ldr	r1, [pc, #176]	@ (8001770 <Cmd_read+0xe8>)
 80016c0:	482a      	ldr	r0, [pc, #168]	@ (800176c <Cmd_read+0xe4>)
 80016c2:	f7ff faf9 	bl	8000cb8 <UART_Printf>

	lt8722_reg_read(LT8722_SPIS_DAC_ILIMN, &data);
 80016c6:	f107 030c 	add.w	r3, r7, #12
 80016ca:	4619      	mov	r1, r3
 80016cc:	2002      	movs	r0, #2
 80016ce:	f000 fb53 	bl	8001d78 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_DAC_ILIMN: 0x%X-%X \n", data>>16, data);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	0c1a      	lsrs	r2, r3, #16
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	4926      	ldr	r1, [pc, #152]	@ (8001774 <Cmd_read+0xec>)
 80016da:	4824      	ldr	r0, [pc, #144]	@ (800176c <Cmd_read+0xe4>)
 80016dc:	f7ff faec 	bl	8000cb8 <UART_Printf>

	lt8722_reg_read(LT8722_SPIS_DAC_ILIMP, &data);
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	4619      	mov	r1, r3
 80016e6:	2003      	movs	r0, #3
 80016e8:	f000 fb46 	bl	8001d78 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_DAC_ILIMP: 0x%X-%X \n", data>>16, data);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	0c1a      	lsrs	r2, r3, #16
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4921      	ldr	r1, [pc, #132]	@ (8001778 <Cmd_read+0xf0>)
 80016f4:	481d      	ldr	r0, [pc, #116]	@ (800176c <Cmd_read+0xe4>)
 80016f6:	f7ff fadf 	bl	8000cb8 <UART_Printf>

	lt8722_reg_read(LT8722_SPIS_DAC, &data);
 80016fa:	f107 030c 	add.w	r3, r7, #12
 80016fe:	4619      	mov	r1, r3
 8001700:	2004      	movs	r0, #4
 8001702:	f000 fb39 	bl	8001d78 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_DAC: 0x%X-%X \n", data>>16, data);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	0c1a      	lsrs	r2, r3, #16
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	491b      	ldr	r1, [pc, #108]	@ (800177c <Cmd_read+0xf4>)
 800170e:	4817      	ldr	r0, [pc, #92]	@ (800176c <Cmd_read+0xe4>)
 8001710:	f7ff fad2 	bl	8000cb8 <UART_Printf>

	lt8722_reg_read(LT8722_SPIS_OV_CLAMP, &data);
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	4619      	mov	r1, r3
 800171a:	2005      	movs	r0, #5
 800171c:	f000 fb2c 	bl	8001d78 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_OV_CLAMP: 0x%X \n", data);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	461a      	mov	r2, r3
 8001724:	4916      	ldr	r1, [pc, #88]	@ (8001780 <Cmd_read+0xf8>)
 8001726:	4811      	ldr	r0, [pc, #68]	@ (800176c <Cmd_read+0xe4>)
 8001728:	f7ff fac6 	bl	8000cb8 <UART_Printf>

	lt8722_reg_read(LT8722_SPIS_UV_CLAMP, &data);
 800172c:	f107 030c 	add.w	r3, r7, #12
 8001730:	4619      	mov	r1, r3
 8001732:	2006      	movs	r0, #6
 8001734:	f000 fb20 	bl	8001d78 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_UV_CLAMP: 0x%X \n", data);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	461a      	mov	r2, r3
 800173c:	4911      	ldr	r1, [pc, #68]	@ (8001784 <Cmd_read+0xfc>)
 800173e:	480b      	ldr	r0, [pc, #44]	@ (800176c <Cmd_read+0xe4>)
 8001740:	f7ff faba 	bl	8000cb8 <UART_Printf>

	lt8722_reg_read(LT8722_SPIS_AMUX, &data);
 8001744:	f107 030c 	add.w	r3, r7, #12
 8001748:	4619      	mov	r1, r3
 800174a:	2007      	movs	r0, #7
 800174c:	f000 fb14 	bl	8001d78 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_AMUX: 0x%X \n", data);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	461a      	mov	r2, r3
 8001754:	490c      	ldr	r1, [pc, #48]	@ (8001788 <Cmd_read+0x100>)
 8001756:	4805      	ldr	r0, [pc, #20]	@ (800176c <Cmd_read+0xe4>)
 8001758:	f7ff faae 	bl	8000cb8 <UART_Printf>

	return (CMDLINE_OK);
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	08004724 	.word	0x08004724
 800176c:	200001f4 	.word	0x200001f4
 8001770:	0800473c 	.word	0x0800473c
 8001774:	08004754 	.word	0x08004754
 8001778:	08004770 	.word	0x08004770
 800177c:	0800478c 	.word	0x0800478c
 8001780:	080047a0 	.word	0x080047a0
 8001784:	080047b8 	.word	0x080047b8
 8001788:	080047d0 	.word	0x080047d0

0800178c <Cmd_on_tec>:


int Cmd_on_tec(int argc, char *argv[])
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
	lt8722_init();
 8001796:	f000 fc25 	bl	8001fe4 <lt8722_init>
	return (CMDLINE_OK);
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <Cmd_tec_set_vol>:

int Cmd_tec_set_vol(int argc, char *argv[])
{
 80017a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017a8:	b088      	sub	sp, #32
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6178      	str	r0, [r7, #20]
 80017ae:	6139      	str	r1, [r7, #16]
//	if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
//	if (argc > 2) return CMDLINE_TOO_MANY_ARGS;

	int64_t vol = atoi(argv[1]);
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	3304      	adds	r3, #4
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f002 fdf8 	bl	80043ac <atoi>
 80017bc:	4603      	mov	r3, r0
 80017be:	17da      	asrs	r2, r3, #31
 80017c0:	469a      	mov	sl, r3
 80017c2:	4693      	mov	fp, r2
 80017c4:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	UART_Printf(&CONSOLE_UART, "Tec set: %d mV \n", vol);
 80017c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017cc:	4925      	ldr	r1, [pc, #148]	@ (8001864 <Cmd_tec_set_vol+0xc0>)
 80017ce:	4826      	ldr	r0, [pc, #152]	@ (8001868 <Cmd_tec_set_vol+0xc4>)
 80017d0:	f7ff fa72 	bl	8000cb8 <UART_Printf>
	vol *= 1000000;
 80017d4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	f04f 0a00 	mov.w	sl, #0
 80017e0:	f04f 0b00 	mov.w	fp, #0
 80017e4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80017e8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80017ec:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80017f0:	4652      	mov	r2, sl
 80017f2:	465b      	mov	r3, fp
 80017f4:	1a14      	subs	r4, r2, r0
 80017f6:	eb63 0501 	sbc.w	r5, r3, r1
 80017fa:	f04f 0200 	mov.w	r2, #0
 80017fe:	f04f 0300 	mov.w	r3, #0
 8001802:	026b      	lsls	r3, r5, #9
 8001804:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001808:	0262      	lsls	r2, r4, #9
 800180a:	4614      	mov	r4, r2
 800180c:	461d      	mov	r5, r3
 800180e:	eb14 0800 	adds.w	r8, r4, r0
 8001812:	eb45 0901 	adc.w	r9, r5, r1
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	f04f 0300 	mov.w	r3, #0
 800181e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001822:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001826:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800182a:	ebb2 0408 	subs.w	r4, r2, r8
 800182e:	60bc      	str	r4, [r7, #8]
 8001830:	eb63 0309 	sbc.w	r3, r3, r9
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800183a:	4623      	mov	r3, r4
 800183c:	181b      	adds	r3, r3, r0
 800183e:	603b      	str	r3, [r7, #0]
 8001840:	462b      	mov	r3, r5
 8001842:	eb41 0303 	adc.w	r3, r1, r3
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	e9d7 3400 	ldrd	r3, r4, [r7]
 800184c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	lt8722_set_output_voltage(vol);
 8001850:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001854:	f000 fc76 	bl	8002144 <lt8722_set_output_voltage>
	return (CMDLINE_OK);
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3720      	adds	r7, #32
 800185e:	46bd      	mov	sp, r7
 8001860:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001864:	080047e4 	.word	0x080047e4
 8001868:	200001f4 	.word	0x200001f4

0800186c <Cmd_get_status>:

int Cmd_get_status(int argc, char *argv[])
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
	uint16_t status;
	lt8722_get_status(&status);
 8001876:	f107 030e 	add.w	r3, r7, #14
 800187a:	4618      	mov	r0, r3
 800187c:	f000 fb42 	bl	8001f04 <lt8722_get_status>
	UART_Printf(&CONSOLE_UART, "status: 0x%X \n", status);
 8001880:	89fb      	ldrh	r3, [r7, #14]
 8001882:	461a      	mov	r2, r3
 8001884:	4904      	ldr	r1, [pc, #16]	@ (8001898 <Cmd_get_status+0x2c>)
 8001886:	4805      	ldr	r0, [pc, #20]	@ (800189c <Cmd_get_status+0x30>)
 8001888:	f7ff fa16 	bl	8000cb8 <UART_Printf>
	return (CMDLINE_OK);
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	080047f8 	.word	0x080047f8
 800189c:	200001f4 	.word	0x200001f4

080018a0 <Cmd_set_ov_clamp>:

int Cmd_set_ov_clamp(int argc, char *argv[])
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
	uint8_t over_vol = atoi(argv[1]);
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	3304      	adds	r3, #4
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f002 fd7b 	bl	80043ac <atoi>
 80018b6:	4603      	mov	r3, r0
 80018b8:	73fb      	strb	r3, [r7, #15]
	UART_Printf(&CONSOLE_UART, "OV_CLAMP: %X \n", over_vol);
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	461a      	mov	r2, r3
 80018be:	4906      	ldr	r1, [pc, #24]	@ (80018d8 <Cmd_set_ov_clamp+0x38>)
 80018c0:	4806      	ldr	r0, [pc, #24]	@ (80018dc <Cmd_set_ov_clamp+0x3c>)
 80018c2:	f7ff f9f9 	bl	8000cb8 <UART_Printf>
	lt8722_set_spis_ov_clamp(over_vol);
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f000 fb59 	bl	8001f80 <lt8722_set_spis_ov_clamp>
	return CMDLINE_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	08004808 	.word	0x08004808
 80018dc:	200001f4 	.word	0x200001f4

080018e0 <Cmd_set_uv_clamp>:
int Cmd_set_uv_clamp(int argc, char *argv[])
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
	uint8_t uper_vol = atoi(argv[1]);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	3304      	adds	r3, #4
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f002 fd5b 	bl	80043ac <atoi>
 80018f6:	4603      	mov	r3, r0
 80018f8:	73fb      	strb	r3, [r7, #15]
	UART_Printf(&CONSOLE_UART, "UV_CLAMP: %X \n", uper_vol);
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	461a      	mov	r2, r3
 80018fe:	4906      	ldr	r1, [pc, #24]	@ (8001918 <Cmd_set_uv_clamp+0x38>)
 8001900:	4806      	ldr	r0, [pc, #24]	@ (800191c <Cmd_set_uv_clamp+0x3c>)
 8001902:	f7ff f9d9 	bl	8000cb8 <UART_Printf>
	lt8722_set_spis_uv_clamp(uper_vol);
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	4618      	mov	r0, r3
 800190a:	f000 fb52 	bl	8001fb2 <lt8722_set_spis_uv_clamp>
	return CMDLINE_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	08004818 	.word	0x08004818
 800191c:	200001f4 	.word	0x200001f4

08001920 <Cmd_get_all>:

#include "i2c.h"

int Cmd_get_all(int argc, char *argv[])
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af02      	add	r7, sp, #8
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
	uint8_t data = 0x32;
 800192a:	2332      	movs	r3, #50	@ 0x32
 800192c:	73fb      	strb	r3, [r7, #15]
	UART_Send_String(&CONSOLE_UART, "get all \n");
 800192e:	490a      	ldr	r1, [pc, #40]	@ (8001958 <Cmd_get_all+0x38>)
 8001930:	480a      	ldr	r0, [pc, #40]	@ (800195c <Cmd_get_all+0x3c>)
 8001932:	f7ff f932 	bl	8000b9a <UART_Send_String>
	I2C_SendData(I2C2, 0x68, 0x01, &data, 1, 50000);
 8001936:	f107 030f 	add.w	r3, r7, #15
 800193a:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800193e:	9201      	str	r2, [sp, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	9200      	str	r2, [sp, #0]
 8001944:	2201      	movs	r2, #1
 8001946:	2168      	movs	r1, #104	@ 0x68
 8001948:	4805      	ldr	r0, [pc, #20]	@ (8001960 <Cmd_get_all+0x40>)
 800194a:	f7fe fef3 	bl	8000734 <I2C_SendData>
	return (CMDLINE_OK);
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	08004828 	.word	0x08004828
 800195c:	200001f4 	.word	0x200001f4
 8001960:	40005800 	.word	0x40005800

08001964 <command_create_task>:

void	command_create_task(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_CommandTaskContext.taskHandle, &s_CommandTaskContext.taskProperty);
 8001968:	4902      	ldr	r1, [pc, #8]	@ (8001974 <command_create_task+0x10>)
 800196a:	4803      	ldr	r0, [pc, #12]	@ (8001978 <command_create_task+0x14>)
 800196c:	f002 fbea 	bl	8004144 <SCH_TASK_CreateTask>
}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	200000c4 	.word	0x200000c4
 8001978:	200000c0 	.word	0x200000c0

0800197c <CONSOLE_UART_IRQHandler>:
}


/* :::::::::: CONSOLE_UART_IRQHandler ::::::::::::: */
void CONSOLE_UART_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
    if(LL_USART_IsActiveFlag_TXE(CONSOLE_UART.handle) == true)
 8001980:	4b2e      	ldr	r3, [pc, #184]	@ (8001a3c <CONSOLE_UART_IRQHandler+0xc0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fcc0 	bl	800130a <LL_USART_IsActiveFlag_TXE>
 800198a:	4603      	mov	r3, r0
 800198c:	2b01      	cmp	r3, #1
 800198e:	d10f      	bne.n	80019b0 <CONSOLE_UART_IRQHandler+0x34>
    {
        if(TX_BUFFER_EMPTY(&CONSOLE_UART))
 8001990:	492b      	ldr	r1, [pc, #172]	@ (8001a40 <CONSOLE_UART_IRQHandler+0xc4>)
 8001992:	482c      	ldr	r0, [pc, #176]	@ (8001a44 <CONSOLE_UART_IRQHandler+0xc8>)
 8001994:	f7ff fbdb 	bl	800114e <UART_is_buffer_empty>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d005      	beq.n	80019aa <CONSOLE_UART_IRQHandler+0x2e>
        {
            // Buffer empty, so disable interrupts
            LL_USART_DisableIT_TXE(CONSOLE_UART.handle);
 800199e:	4b27      	ldr	r3, [pc, #156]	@ (8001a3c <CONSOLE_UART_IRQHandler+0xc0>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fcc4 	bl	8001330 <LL_USART_DisableIT_TXE>
 80019a8:	e002      	b.n	80019b0 <CONSOLE_UART_IRQHandler+0x34>
        }
        else
        {
            // There is more data in the output buffer. Send the next byte
            UART_Prime_Transmit(&CONSOLE_UART);
 80019aa:	4824      	ldr	r0, [pc, #144]	@ (8001a3c <CONSOLE_UART_IRQHandler+0xc0>)
 80019ac:	f7ff fc03 	bl	80011b6 <UART_Prime_Transmit>
        }
    }

    if(LL_USART_IsActiveFlag_RXNE(CONSOLE_UART.handle) == true)
 80019b0:	4b22      	ldr	r3, [pc, #136]	@ (8001a3c <CONSOLE_UART_IRQHandler+0xc0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fc95 	bl	80012e4 <LL_USART_IsActiveFlag_RXNE>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d13b      	bne.n	8001a38 <CONSOLE_UART_IRQHandler+0xbc>
    {
    	CONSOLE_UART.RX_irq_char = LL_USART_ReceiveData8(CONSOLE_UART.handle);
 80019c0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a3c <CONSOLE_UART_IRQHandler+0xc0>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fcd6 	bl	8001376 <LL_USART_ReceiveData8>
 80019ca:	4603      	mov	r3, r0
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b1b      	ldr	r3, [pc, #108]	@ (8001a3c <CONSOLE_UART_IRQHandler+0xc0>)
 80019d0:	771a      	strb	r2, [r3, #28]

        // NOTE: On win 10, default PUTTY when hit enter only send back '\r',
        // while on default HERCULES when hit enter send '\r\n' in that order.
        // The code bellow is modified so that it can work on PUTTY and HERCULES.
        if((!RX_BUFFER_FULL(&CONSOLE_UART)) && (CONSOLE_UART.RX_irq_char != '\n'))
 80019d2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a3c <CONSOLE_UART_IRQHandler+0xc0>)
 80019d4:	891b      	ldrh	r3, [r3, #8]
 80019d6:	461a      	mov	r2, r3
 80019d8:	491b      	ldr	r1, [pc, #108]	@ (8001a48 <CONSOLE_UART_IRQHandler+0xcc>)
 80019da:	481c      	ldr	r0, [pc, #112]	@ (8001a4c <CONSOLE_UART_IRQHandler+0xd0>)
 80019dc:	f7ff fb96 	bl	800110c <UART_is_buffer_full>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d128      	bne.n	8001a38 <CONSOLE_UART_IRQHandler+0xbc>
 80019e6:	4b15      	ldr	r3, [pc, #84]	@ (8001a3c <CONSOLE_UART_IRQHandler+0xc0>)
 80019e8:	7f1b      	ldrb	r3, [r3, #28]
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b0a      	cmp	r3, #10
 80019ee:	d023      	beq.n	8001a38 <CONSOLE_UART_IRQHandler+0xbc>
        {
            if (CONSOLE_UART.RX_irq_char == '\r')
 80019f0:	4b12      	ldr	r3, [pc, #72]	@ (8001a3c <CONSOLE_UART_IRQHandler+0xc0>)
 80019f2:	7f1b      	ldrb	r3, [r3, #28]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b0d      	cmp	r3, #13
 80019f8:	d10e      	bne.n	8001a18 <CONSOLE_UART_IRQHandler+0x9c>
            {
            	CONSOLE_UART.p_RX_buffer[CONSOLE_UART.RX_write_index] = '\n';
 80019fa:	4b10      	ldr	r3, [pc, #64]	@ (8001a3c <CONSOLE_UART_IRQHandler+0xc0>)
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	4a0f      	ldr	r2, [pc, #60]	@ (8001a3c <CONSOLE_UART_IRQHandler+0xc0>)
 8001a00:	8b12      	ldrh	r2, [r2, #24]
 8001a02:	b292      	uxth	r2, r2
 8001a04:	4413      	add	r3, r2
 8001a06:	220a      	movs	r2, #10
 8001a08:	701a      	strb	r2, [r3, #0]
                ADVANCE_RX_WRITE_INDEX(&CONSOLE_UART);
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a3c <CONSOLE_UART_IRQHandler+0xc0>)
 8001a0c:	891b      	ldrh	r3, [r3, #8]
 8001a0e:	4619      	mov	r1, r3
 8001a10:	480d      	ldr	r0, [pc, #52]	@ (8001a48 <CONSOLE_UART_IRQHandler+0xcc>)
 8001a12:	f7ff fbb4 	bl	800117e <UART_advance_buffer_index>
            	CONSOLE_UART.p_RX_buffer[EXP_UART.RX_write_index] = CONSOLE_UART.RX_irq_char;
                ADVANCE_RX_WRITE_INDEX(&CONSOLE_UART);
            }
        }
    }
}
 8001a16:	e00f      	b.n	8001a38 <CONSOLE_UART_IRQHandler+0xbc>
            	CONSOLE_UART.p_RX_buffer[EXP_UART.RX_write_index] = CONSOLE_UART.RX_irq_char;
 8001a18:	4b08      	ldr	r3, [pc, #32]	@ (8001a3c <CONSOLE_UART_IRQHandler+0xc0>)
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	4a07      	ldr	r2, [pc, #28]	@ (8001a3c <CONSOLE_UART_IRQHandler+0xc0>)
 8001a1e:	8b12      	ldrh	r2, [r2, #24]
 8001a20:	b292      	uxth	r2, r2
 8001a22:	4413      	add	r3, r2
 8001a24:	4a05      	ldr	r2, [pc, #20]	@ (8001a3c <CONSOLE_UART_IRQHandler+0xc0>)
 8001a26:	7f12      	ldrb	r2, [r2, #28]
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	701a      	strb	r2, [r3, #0]
                ADVANCE_RX_WRITE_INDEX(&CONSOLE_UART);
 8001a2c:	4b03      	ldr	r3, [pc, #12]	@ (8001a3c <CONSOLE_UART_IRQHandler+0xc0>)
 8001a2e:	891b      	ldrh	r3, [r3, #8]
 8001a30:	4619      	mov	r1, r3
 8001a32:	4805      	ldr	r0, [pc, #20]	@ (8001a48 <CONSOLE_UART_IRQHandler+0xcc>)
 8001a34:	f7ff fba3 	bl	800117e <UART_advance_buffer_index>
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	200001f4 	.word	0x200001f4
 8001a40:	20000204 	.word	0x20000204
 8001a44:	20000206 	.word	0x20000206
 8001a48:	2000020c 	.word	0x2000020c
 8001a4c:	2000020e 	.word	0x2000020e

08001a50 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d101      	bne.n	8001a68 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001a64:	2301      	movs	r3, #1
 8001a66:	e000      	b.n	8001a6a <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	330c      	adds	r3, #12
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	b2db      	uxtb	r3, r3
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b085      	sub	sp, #20
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	330c      	adds	r3, #12
 8001aa2:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	78fa      	ldrb	r2, [r7, #3]
 8001aa8:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001aaa:	bf00      	nop
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <LL_GPIO_SetOutputPin>:
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	619a      	str	r2, [r3, #24]
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	041a      	lsls	r2, r3, #16
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	619a      	str	r2, [r3, #24]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <csLOW>:
		LT8722_SPIS_AMUX_SIZE
	},
};

/* SPI support function --------------------------------------------------*/
static inline void csLOW(void) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(TEC_1_CS_GPIO_Port, TEC_1_CS_Pin);
 8001af4:	2102      	movs	r1, #2
 8001af6:	4802      	ldr	r0, [pc, #8]	@ (8001b00 <csLOW+0x10>)
 8001af8:	f7ff ffeb 	bl	8001ad2 <LL_GPIO_ResetOutputPin>
}
 8001afc:	bf00      	nop
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40021000 	.word	0x40021000

08001b04 <csHIGH>:

static inline void csHIGH(void) {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(TEC_1_CS_GPIO_Port, TEC_1_CS_Pin);
 8001b08:	2102      	movs	r1, #2
 8001b0a:	4802      	ldr	r0, [pc, #8]	@ (8001b14 <csHIGH+0x10>)
 8001b0c:	f7ff ffd3 	bl	8001ab6 <LL_GPIO_SetOutputPin>
}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40021000 	.word	0x40021000

08001b18 <SPI_LL_Transmit>:

static uint8_t SPI_LL_Transmit(uint8_t data)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
	LL_SPI_TransmitData8(SPI1, data);
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	4619      	mov	r1, r3
 8001b26:	4809      	ldr	r0, [pc, #36]	@ (8001b4c <SPI_LL_Transmit+0x34>)
 8001b28:	f7ff ffb3 	bl	8001a92 <LL_SPI_TransmitData8>
	while(!LL_SPI_IsActiveFlag_RXNE(SPI1));
 8001b2c:	bf00      	nop
 8001b2e:	4807      	ldr	r0, [pc, #28]	@ (8001b4c <SPI_LL_Transmit+0x34>)
 8001b30:	f7ff ff8e 	bl	8001a50 <LL_SPI_IsActiveFlag_RXNE>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f9      	beq.n	8001b2e <SPI_LL_Transmit+0x16>
	return LL_SPI_ReceiveData8(SPI1);
 8001b3a:	4804      	ldr	r0, [pc, #16]	@ (8001b4c <SPI_LL_Transmit+0x34>)
 8001b3c:	f7ff ff9b 	bl	8001a76 <LL_SPI_ReceiveData8>
 8001b40:	4603      	mov	r3, r0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40013000 	.word	0x40013000

08001b50 <SPI_write_and_read_buffer>:

uint8_t SPI_write_and_read_buffer(uint8_t *buffer, uint8_t byte_number)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	70fb      	strb	r3, [r7, #3]
    uint8_t received_data = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	73fb      	strb	r3, [r7, #15]
    csLOW();
 8001b60:	f7ff ffc6 	bl	8001af0 <csLOW>
    for (uint8_t i = 0; i < byte_number; i++)
 8001b64:	2300      	movs	r3, #0
 8001b66:	73bb      	strb	r3, [r7, #14]
 8001b68:	e010      	b.n	8001b8c <SPI_write_and_read_buffer+0x3c>
    {
        received_data = SPI_LL_Transmit(buffer[i]);
 8001b6a:	7bbb      	ldrb	r3, [r7, #14]
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	4413      	add	r3, r2
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff ffd0 	bl	8001b18 <SPI_LL_Transmit>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	73fb      	strb	r3, [r7, #15]
        buffer[i] = received_data;
 8001b7c:	7bbb      	ldrb	r3, [r7, #14]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	7bfa      	ldrb	r2, [r7, #15]
 8001b84:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < byte_number; i++)
 8001b86:	7bbb      	ldrb	r3, [r7, #14]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	73bb      	strb	r3, [r7, #14]
 8001b8c:	7bba      	ldrb	r2, [r7, #14]
 8001b8e:	78fb      	ldrb	r3, [r7, #3]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d3ea      	bcc.n	8001b6a <SPI_write_and_read_buffer+0x1a>
    }
    csHIGH();
 8001b94:	f7ff ffb6 	bl	8001b04 <csHIGH>
    return received_data;
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	0000      	movs	r0, r0
 8001ba4:	0000      	movs	r0, r0
	...

08001ba8 <lt8722_voltage_to_dac>:
 * @brief Convert voltage to DAC code.
 * @param voltage - Voltage value in nanovolts.
 * @return DAC code.
 */
int32_t lt8722_voltage_to_dac(int64_t voltage)
{
 8001ba8:	b5b0      	push	{r4, r5, r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	e9c7 0100 	strd	r0, r1, [r7]
	return (LT8722_DAC_OFFSET - voltage) * (1 << LT8722_DAC_RESOLUTION) / LT8722_DAC_VREF;
 8001bb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bb6:	4d0e      	ldr	r5, [pc, #56]	@ (8001bf0 <lt8722_voltage_to_dac+0x48>)
 8001bb8:	2400      	movs	r4, #0
 8001bba:	1a2a      	subs	r2, r5, r0
 8001bbc:	eb64 0301 	sbc.w	r3, r4, r1
 8001bc0:	f04f 0000 	mov.w	r0, #0
 8001bc4:	f04f 0100 	mov.w	r1, #0
 8001bc8:	0659      	lsls	r1, r3, #25
 8001bca:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8001bce:	0650      	lsls	r0, r2, #25
 8001bd0:	a305      	add	r3, pc, #20	@ (adr r3, 8001be8 <lt8722_voltage_to_dac+0x40>)
 8001bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd6:	f7fe fb09 	bl	80001ec <__aeabi_ldivmod>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4613      	mov	r3, r2
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bdb0      	pop	{r4, r5, r7, pc}
 8001be8:	9502f900 	.word	0x9502f900
 8001bec:	00000000 	.word	0x00000000
 8001bf0:	4a817c80 	.word	0x4a817c80

08001bf4 <lt8722_dac_to_voltage>:
 * @brief Convert DAC code to nanovolts.
 * @param dac - DAC code.
 * @return Voltage value in nanovolts.
 */
int64_t lt8722_dac_to_voltage(int32_t dac)
{
 8001bf4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001bf8:	b085      	sub	sp, #20
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	60f8      	str	r0, [r7, #12]
	return LT8722_DAC_OFFSET - dac * LT8722_DAC_VREF /(1 << LT8722_DAC_RESOLUTION);
 8001bfe:	68f9      	ldr	r1, [r7, #12]
 8001c00:	17c8      	asrs	r0, r1, #31
 8001c02:	460c      	mov	r4, r1
 8001c04:	4605      	mov	r5, r0
 8001c06:	491b      	ldr	r1, [pc, #108]	@ (8001c74 <lt8722_dac_to_voltage+0x80>)
 8001c08:	fb01 f005 	mul.w	r0, r1, r5
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	fb04 f101 	mul.w	r1, r4, r1
 8001c12:	4401      	add	r1, r0
 8001c14:	4817      	ldr	r0, [pc, #92]	@ (8001c74 <lt8722_dac_to_voltage+0x80>)
 8001c16:	fba4 2300 	umull	r2, r3, r4, r0
 8001c1a:	4419      	add	r1, r3
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4610      	mov	r0, r2
 8001c20:	4619      	mov	r1, r3
 8001c22:	2900      	cmp	r1, #0
 8001c24:	da08      	bge.n	8001c38 <lt8722_dac_to_voltage+0x44>
 8001c26:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8001c2a:	18c3      	adds	r3, r0, r3
 8001c2c:	603b      	str	r3, [r7, #0]
 8001c2e:	f141 0300 	adc.w	r3, r1, #0
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	0e42      	lsrs	r2, r0, #25
 8001c42:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001c46:	164b      	asrs	r3, r1, #25
 8001c48:	2100      	movs	r1, #0
 8001c4a:	f1d2 0a00 	rsbs	sl, r2, #0
 8001c4e:	eb61 0b03 	sbc.w	fp, r1, r3
 8001c52:	4652      	mov	r2, sl
 8001c54:	465b      	mov	r3, fp
 8001c56:	4908      	ldr	r1, [pc, #32]	@ (8001c78 <lt8722_dac_to_voltage+0x84>)
 8001c58:	eb12 0801 	adds.w	r8, r2, r1
 8001c5c:	f143 0900 	adc.w	r9, r3, #0
 8001c60:	4642      	mov	r2, r8
 8001c62:	464b      	mov	r3, r9
}
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	9502f900 	.word	0x9502f900
 8001c78:	4a817c80 	.word	0x4a817c80

08001c7c <lt8722_transaction>:
 * @param dev - LT8722 device descriptor
 * @param packet - LT8722 packet.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_transaction(struct lt8722_packet *packet)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
	uint8_t buffer[8] = {0};
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	2300      	movs	r3, #0
 8001c8a:	613b      	str	r3, [r7, #16]
	buffer[0] = packet->command.byte;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	733b      	strb	r3, [r7, #12]
	buffer[1] = packet->reg.address << 1;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	791b      	ldrb	r3, [r3, #4]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	737b      	strb	r3, [r7, #13]
	if (packet->command.byte == LT8722_DATA_WRITE_COMMAND)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2bf2      	cmp	r3, #242	@ 0xf2
 8001ca2:	d111      	bne.n	8001cc8 <lt8722_transaction+0x4c>
	{
		put_unaligned_be32(packet->data, &buffer[2]);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691a      	ldr	r2, [r3, #16]
 8001ca8:	f107 030c 	add.w	r3, r7, #12
 8001cac:	3302      	adds	r3, #2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	f000 fabe 	bl	8002232 <put_unaligned_be32>
		buffer[6] = Calculate_CRC8(buffer, 6);
 8001cb6:	f107 030c 	add.w	r3, r7, #12
 8001cba:	2106      	movs	r1, #6
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f000 fa7d 	bl	80021bc <Calculate_CRC8>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	74bb      	strb	r3, [r7, #18]
 8001cc6:	e007      	b.n	8001cd8 <lt8722_transaction+0x5c>
	} else
		buffer[2] = Calculate_CRC8(buffer, 2);
 8001cc8:	f107 030c 	add.w	r3, r7, #12
 8001ccc:	2102      	movs	r1, #2
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 fa74 	bl	80021bc <Calculate_CRC8>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	73bb      	strb	r3, [r7, #14]
	SPI_write_and_read_buffer(buffer, packet->command.size);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	785a      	ldrb	r2, [r3, #1]
 8001cdc:	f107 030c 	add.w	r3, r7, #12
 8001ce0:	4611      	mov	r1, r2
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff ff34 	bl	8001b50 <SPI_write_and_read_buffer>
	packet->status = (get_unaligned_be16(&buffer[0]) & GENMASK(10, 0));
 8001ce8:	f107 030c 	add.w	r3, r7, #12
 8001cec:	4618      	mov	r0, r3
 8001cee:	f000 fade 	bl	80022ae <get_unaligned_be16>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	055b      	lsls	r3, r3, #21
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	0d5b      	lsrs	r3, r3, #21
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	82da      	strh	r2, [r3, #22]
	if (packet->command.byte == LT8722_DATA_WRITE_COMMAND)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2bf2      	cmp	r3, #242	@ 0xf2
 8001d1a:	d106      	bne.n	8001d2a <lt8722_transaction+0xae>
	{
		packet->crc = buffer[2];
 8001d1c:	7bba      	ldrb	r2, [r7, #14]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	751a      	strb	r2, [r3, #20]
		packet->ack = buffer[7];
 8001d22:	7cfa      	ldrb	r2, [r7, #19]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	755a      	strb	r2, [r3, #21]
 8001d28:	e019      	b.n	8001d5e <lt8722_transaction+0xe2>
	} else if (packet->command.byte == LT8722_DATA_READ_COMMAND) {
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2bf4      	cmp	r3, #244	@ 0xf4
 8001d30:	d10f      	bne.n	8001d52 <lt8722_transaction+0xd6>
		packet->data = get_unaligned_be32(&buffer[2]);
 8001d32:	f107 030c 	add.w	r3, r7, #12
 8001d36:	3302      	adds	r3, #2
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f000 fa9b 	bl	8002274 <get_unaligned_be32>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	611a      	str	r2, [r3, #16]
		packet->crc = buffer[6];
 8001d44:	7cba      	ldrb	r2, [r7, #18]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	751a      	strb	r2, [r3, #20]
		packet->ack = buffer[7];
 8001d4a:	7cfa      	ldrb	r2, [r7, #19]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	755a      	strb	r2, [r3, #21]
 8001d50:	e005      	b.n	8001d5e <lt8722_transaction+0xe2>
	} else {
		packet->crc = buffer[2];
 8001d52:	7bba      	ldrb	r2, [r7, #14]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	751a      	strb	r2, [r3, #20]
		packet->ack = buffer[3];
 8001d58:	7bfa      	ldrb	r2, [r7, #15]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	755a      	strb	r2, [r3, #21]
	}
	if (packet->ack != LT8722_ACK_ACKNOWLEDGE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	7d5b      	ldrb	r3, [r3, #21]
 8001d62:	2ba5      	cmp	r3, #165	@ 0xa5
 8001d64:	d002      	beq.n	8001d6c <lt8722_transaction+0xf0>
		return -1;
 8001d66:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6a:	e000      	b.n	8001d6e <lt8722_transaction+0xf2>
	return 0;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <lt8722_reg_read>:
 * @param address - Register address.
 * @param data - Received data.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reg_read(uint8_t address, uint32_t *data)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	@ 0x28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	6039      	str	r1, [r7, #0]
 8001d82:	71fb      	strb	r3, [r7, #7]
	int8_t ret = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	struct lt8722_packet packet;
	struct lt8722_command command = {
 8001d8a:	4b14      	ldr	r3, [pc, #80]	@ (8001ddc <lt8722_reg_read+0x64>)
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	813b      	strh	r3, [r7, #8]
		LT8722_DATA_READ_COMMAND,
		LT8722_DATA_READ_COMMAND_SIZE
	};
	packet.command = command;
 8001d90:	893b      	ldrh	r3, [r7, #8]
 8001d92:	81bb      	strh	r3, [r7, #12]
	packet.reg = lt8722_regs[address];
 8001d94:	79fa      	ldrb	r2, [r7, #7]
 8001d96:	4912      	ldr	r1, [pc, #72]	@ (8001de0 <lt8722_reg_read+0x68>)
 8001d98:	4613      	mov	r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	18ca      	adds	r2, r1, r3
 8001da2:	f107 0310 	add.w	r3, r7, #16
 8001da6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001da8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	ret = lt8722_transaction(&packet);
 8001dac:	f107 030c 	add.w	r3, r7, #12
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff63 	bl	8001c7c <lt8722_transaction>
 8001db6:	4603      	mov	r3, r0
 8001db8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (ret)
 8001dbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d002      	beq.n	8001dca <lt8722_reg_read+0x52>
		return ret;
 8001dc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001dc8:	e003      	b.n	8001dd2 <lt8722_reg_read+0x5a>
	*data = packet.data;
 8001dca:	69fa      	ldr	r2, [r7, #28]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	601a      	str	r2, [r3, #0]
	return 0;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3728      	adds	r7, #40	@ 0x28
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	08004910 	.word	0x08004910
 8001de0:	200000d4 	.word	0x200000d4

08001de4 <lt8722_reg_write>:
 * @param address - Register address.
 * @param data - Data to be written.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reg_write(uint8_t address, uint32_t data)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	@ 0x28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	6039      	str	r1, [r7, #0]
 8001dee:	71fb      	strb	r3, [r7, #7]
	struct lt8722_packet packet;
	struct lt8722_command command = {
 8001df0:	4b0e      	ldr	r3, [pc, #56]	@ (8001e2c <lt8722_reg_write+0x48>)
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	81bb      	strh	r3, [r7, #12]
		LT8722_DATA_WRITE_COMMAND,
		LT8722_DATA_WRITE_COMMAND_SIZE
	};
	packet.command = command;
 8001df6:	89bb      	ldrh	r3, [r7, #12]
 8001df8:	823b      	strh	r3, [r7, #16]
	packet.reg = lt8722_regs[address];
 8001dfa:	79fa      	ldrb	r2, [r7, #7]
 8001dfc:	490c      	ldr	r1, [pc, #48]	@ (8001e30 <lt8722_reg_write+0x4c>)
 8001dfe:	4613      	mov	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4413      	add	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	18ca      	adds	r2, r1, r3
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	packet.data = data;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	623b      	str	r3, [r7, #32]
	return lt8722_transaction(&packet);
 8001e16:	f107 0310 	add.w	r3, r7, #16
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff ff2e 	bl	8001c7c <lt8722_transaction>
 8001e20:	4603      	mov	r3, r0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3728      	adds	r7, #40	@ 0x28
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	08004914 	.word	0x08004914
 8001e30:	200000d4 	.word	0x200000d4

08001e34 <lt8722_reg_write_mask>:
 * @param mask - Mask to be applied.
 * @param data - Data to be written.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reg_write_mask(uint8_t address, uint32_t mask, uint32_t data)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	73fb      	strb	r3, [r7, #15]
	uint32_t reg_data;
	lt8722_reg_read(address, &reg_data);
 8001e42:	f107 0214 	add.w	r2, r7, #20
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	4611      	mov	r1, r2
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff ff94 	bl	8001d78 <lt8722_reg_read>
	reg_data &= ~mask;
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	43da      	mvns	r2, r3
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	4013      	ands	r3, r2
 8001e58:	617b      	str	r3, [r7, #20]
	reg_data |= field_prep(mask, data);
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	68b8      	ldr	r0, [r7, #8]
 8001e5e:	f000 fa56 	bl	800230e <field_prep>
 8001e62:	4602      	mov	r2, r0
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	617b      	str	r3, [r7, #20]
	return lt8722_reg_write(address, reg_data);
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
 8001e6e:	4611      	mov	r1, r2
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ffb7 	bl	8001de4 <lt8722_reg_write>
 8001e76:	4603      	mov	r3, r0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <lt8722_set_enable_req>:
 * @brief Set ENABLE_REQ field in LT8722 device.
 * @param value - Enable if true, disabled otherwise
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_enable_req(bool value)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
	return lt8722_reg_write_mask(LT8722_SPIS_COMMAND, LT8722_ENABLE_REQ_MASK, value);
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	2101      	movs	r1, #1
 8001e90:	2000      	movs	r0, #0
 8001e92:	f7ff ffcf 	bl	8001e34 <lt8722_reg_write_mask>
 8001e96:	4603      	mov	r3, r0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <lt8722_set_swen_req>:
 * @brief Set switching enable of LT8722 device.
 * @param value - Enable if true, disabled otherwise
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_swen_req(bool value)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	71fb      	strb	r3, [r7, #7]
	return lt8722_reg_write_mask(LT8722_SPIS_COMMAND, LT8722_SWEN_REQ_MASK, value);
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	461a      	mov	r2, r3
 8001eae:	2102      	movs	r1, #2
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	f7ff ffbf 	bl	8001e34 <lt8722_reg_write_mask>
 8001eb6:	4603      	mov	r3, r0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <lt8722_reset>:
/**
 * @brief Shutdown the LT8722 device.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reset(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
	return lt8722_reg_write_mask(LT8722_SPIS_COMMAND, LT8722_SPI_RST_MASK, LT8722_SPI_RST_RESET);
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f7ff ffb2 	bl	8001e34 <lt8722_reg_write_mask>
 8001ed0:	4603      	mov	r3, r0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <lt8722_clear_faults>:
/**
 * @brief Clear LT8722 device faults.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_clear_faults(void)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
	return lt8722_reg_write_mask(LT8722_SPIS_STATUS, LT8722_FAULTS_MASK, 0);
 8001edc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee0:	607b      	str	r3, [r7, #4]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	069b      	lsls	r3, r3, #26
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	0d5b      	lsrs	r3, r3, #21
 8001eec:	607b      	str	r3, [r7, #4]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	f7ff ff9d 	bl	8001e34 <lt8722_reg_write_mask>
 8001efa:	4603      	mov	r3, r0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <lt8722_get_status>:
 * @brief Get LT8722 device status.
 * @param status - Status value to be returned.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_get_status(uint16_t *status)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08a      	sub	sp, #40	@ 0x28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	int8_t ret;
	struct lt8722_packet packet;
	struct lt8722_command command = {
 8001f0c:	4b11      	ldr	r3, [pc, #68]	@ (8001f54 <lt8722_get_status+0x50>)
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	813b      	strh	r3, [r7, #8]
		LT8722_STATUS_ACQUISITION_COMMAND,
		LT8722_STATUS_ACQUISITION_COMMAND_SIZE
	};
	packet.command = command;
 8001f12:	893b      	ldrh	r3, [r7, #8]
 8001f14:	81bb      	strh	r3, [r7, #12]
	packet.reg = lt8722_regs[LT8722_SPIS_STATUS];
 8001f16:	4a10      	ldr	r2, [pc, #64]	@ (8001f58 <lt8722_get_status+0x54>)
 8001f18:	f107 0310 	add.w	r3, r7, #16
 8001f1c:	320c      	adds	r2, #12
 8001f1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f20:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	ret = lt8722_transaction(&packet);
 8001f24:	f107 030c 	add.w	r3, r7, #12
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fea7 	bl	8001c7c <lt8722_transaction>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (ret)
 8001f34:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d002      	beq.n	8001f42 <lt8722_get_status+0x3e>
		return ret;
 8001f3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001f40:	e003      	b.n	8001f4a <lt8722_get_status+0x46>
	*status = packet.status;
 8001f42:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	801a      	strh	r2, [r3, #0]
	return 0;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3728      	adds	r7, #40	@ 0x28
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	08004918 	.word	0x08004918
 8001f58:	200000d4 	.word	0x200000d4

08001f5c <lt8722_set_dac>:
 * @brief Set DAC code of LT8722 device.
 * @param value - DAC value
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_dac(uint32_t value)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
	return lt8722_reg_write_mask(LT8722_SPIS_DAC, LT8722_SPIS_DAC_MASK, value);
 8001f64:	f04f 33ff 	mov.w	r3, #4294967295
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	4619      	mov	r1, r3
 8001f70:	2004      	movs	r0, #4
 8001f72:	f7ff ff5f 	bl	8001e34 <lt8722_reg_write_mask>
 8001f76:	4603      	mov	r3, r0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <lt8722_set_spis_ov_clamp>:
 * @brief Set positive output voltage limit of LT8722 device.
 * @param value - Positive output voltage limit value
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_spis_ov_clamp(uint8_t value)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
	return lt8722_reg_write_mask(LT8722_SPIS_OV_CLAMP, LT8722_SPIS_OV_CLAMP_MASK, value);
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	071b      	lsls	r3, r3, #28
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	0f1b      	lsrs	r3, r3, #28
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	79fa      	ldrb	r2, [r7, #7]
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	2005      	movs	r0, #5
 8001fa4:	f7ff ff46 	bl	8001e34 <lt8722_reg_write_mask>
 8001fa8:	4603      	mov	r3, r0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <lt8722_set_spis_uv_clamp>:
 * @brief Set negative output voltage limit of LT8722 device.
 * @param value - Negative output voltage limit value
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_spis_uv_clamp(uint8_t value)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b084      	sub	sp, #16
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	4603      	mov	r3, r0
 8001fba:	71fb      	strb	r3, [r7, #7]
	return lt8722_reg_write_mask(LT8722_SPIS_UV_CLAMP, LT8722_SPIS_UV_CLAMP_MASK, value);
 8001fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	071b      	lsls	r3, r3, #28
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	0f1b      	lsrs	r3, r3, #28
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	79fa      	ldrb	r2, [r7, #7]
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	2006      	movs	r0, #6
 8001fd6:	f7ff ff2d 	bl	8001e34 <lt8722_reg_write_mask>
 8001fda:	4603      	mov	r3, r0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <lt8722_init>:
 * @param init_param - Initialization parameter containing information about the
 * 		LT8722 device to be initialized.
 * @return 0 in case of succes, negative error code otherwise
*/
int8_t lt8722_init(void)
{
 8001fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fe8:	b08f      	sub	sp, #60	@ 0x3c
 8001fea:	af00      	add	r7, sp, #0
	int8_t ret = 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	int32_t dac;
	int64_t voltage;
	int64_t start_voltage;
	int64_t end_voltage;

	LL_GPIO_ResetOutputPin(TEC_1_EN_GPIO_Port, TEC_1_EN_Pin);
 8001ff2:	2120      	movs	r1, #32
 8001ff4:	4852      	ldr	r0, [pc, #328]	@ (8002140 <lt8722_init+0x15c>)
 8001ff6:	f7ff fd6c 	bl	8001ad2 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(TEC_1_SWEN_GPIO_Port, TEC_1_SWEN_Pin);
 8001ffa:	2104      	movs	r1, #4
 8001ffc:	4850      	ldr	r0, [pc, #320]	@ (8002140 <lt8722_init+0x15c>)
 8001ffe:	f7ff fd68 	bl	8001ad2 <LL_GPIO_ResetOutputPin>
	/*
	 * Reset LT8722
	 */
	lt8722_reset();
 8002002:	f7ff ff5d 	bl	8001ec0 <lt8722_reset>
	 * Start-up sequence
	 * 1. Apply proper VIN and VDDIO voltages
	 *
	 * 2. Enable VCC LDO and other LT8722 circuitry
	 */
	ret = lt8722_clear_faults();
 8002006:	f7ff ff66 	bl	8001ed6 <lt8722_clear_faults>
 800200a:	4603      	mov	r3, r0
 800200c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	LL_GPIO_SetOutputPin(TEC_1_EN_GPIO_Port, TEC_1_EN_Pin);
 8002010:	2120      	movs	r1, #32
 8002012:	484b      	ldr	r0, [pc, #300]	@ (8002140 <lt8722_init+0x15c>)
 8002014:	f7ff fd4f 	bl	8001ab6 <LL_GPIO_SetOutputPin>
	ret = lt8722_set_enable_req(LT8722_ENABLE_REQ_ENABLED);
 8002018:	2001      	movs	r0, #1
 800201a:	f7ff ff31 	bl	8001e80 <lt8722_set_enable_req>
 800201e:	4603      	mov	r3, r0
 8002020:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	ret = lt8722_reg_write(LT8722_SPIS_COMMAND, 0x00003A01);
 8002024:	f643 2101 	movw	r1, #14849	@ 0x3a01
 8002028:	2000      	movs	r0, #0
 800202a:	f7ff fedb 	bl	8001de4 <lt8722_reg_write>
 800202e:	4603      	mov	r3, r0
 8002030:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	/*
	 * 3. Configure output voltage control DAC to 0xFF000000
	 */
	ret = lt8722_set_dac(0xFF000000);
 8002034:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8002038:	f7ff ff90 	bl	8001f5c <lt8722_set_dac>
 800203c:	4603      	mov	r3, r0
 800203e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	/*
	 * 4. Write all SPIS_STATUS registers to 0
	 */
	ret = lt8722_reg_write(LT8722_SPIS_STATUS, 0);
 8002042:	2100      	movs	r1, #0
 8002044:	2001      	movs	r0, #1
 8002046:	f7ff fecd 	bl	8001de4 <lt8722_reg_write>
 800204a:	4603      	mov	r3, r0
 800204c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	LL_mDelay(1);
 8002050:	2001      	movs	r0, #1
 8002052:	f001 ffeb 	bl	800402c <LL_mDelay>
	ret = lt8722_reg_write(LT8722_SPIS_COMMAND, 0x00003A01);
 8002056:	f643 2101 	movw	r1, #14849	@ 0x3a01
 800205a:	2000      	movs	r0, #0
 800205c:	f7ff fec2 	bl	8001de4 <lt8722_reg_write>
 8002060:	4603      	mov	r3, r0
 8002062:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	/*
	 * 5. Ramp the output voltage control DAC from 0xFF000000 to 0x00000000
	 */
	start_voltage = lt8722_dac_to_voltage(0xFF000000);
 8002066:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800206a:	f7ff fdc3 	bl	8001bf4 <lt8722_dac_to_voltage>
 800206e:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
	end_voltage = lt8722_dac_to_voltage(0x00000000);
 8002072:	2000      	movs	r0, #0
 8002074:	f7ff fdbe 	bl	8001bf4 <lt8722_dac_to_voltage>
 8002078:	e9c7 0108 	strd	r0, r1, [r7, #32]
	for (uint8_t i = 0;  i < 5; i++)
 800207c:	2300      	movs	r3, #0
 800207e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002082:	e045      	b.n	8002110 <lt8722_init+0x12c>
	{
		voltage = (start_voltage + (end_voltage - start_voltage) * i / 4);
 8002084:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002088:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800208c:	1a84      	subs	r4, r0, r2
 800208e:	eb61 0503 	sbc.w	r5, r1, r3
 8002092:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002096:	2200      	movs	r2, #0
 8002098:	4698      	mov	r8, r3
 800209a:	4691      	mov	r9, r2
 800209c:	fb08 f205 	mul.w	r2, r8, r5
 80020a0:	fb04 f309 	mul.w	r3, r4, r9
 80020a4:	4413      	add	r3, r2
 80020a6:	fba4 ab08 	umull	sl, fp, r4, r8
 80020aa:	445b      	add	r3, fp
 80020ac:	469b      	mov	fp, r3
 80020ae:	4652      	mov	r2, sl
 80020b0:	465b      	mov	r3, fp
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	da06      	bge.n	80020c4 <lt8722_init+0xe0>
 80020b6:	1cd1      	adds	r1, r2, #3
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	f143 0300 	adc.w	r3, r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020c4:	f04f 0000 	mov.w	r0, #0
 80020c8:	f04f 0100 	mov.w	r1, #0
 80020cc:	0890      	lsrs	r0, r2, #2
 80020ce:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 80020d2:	1099      	asrs	r1, r3, #2
 80020d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80020d8:	1816      	adds	r6, r2, r0
 80020da:	603e      	str	r6, [r7, #0]
 80020dc:	414b      	adcs	r3, r1
 80020de:	607b      	str	r3, [r7, #4]
 80020e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
		dac = lt8722_voltage_to_dac(voltage);
 80020e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020ec:	f7ff fd5c 	bl	8001ba8 <lt8722_voltage_to_dac>
 80020f0:	6178      	str	r0, [r7, #20]
		ret = lt8722_set_dac(dac);
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff31 	bl	8001f5c <lt8722_set_dac>
 80020fa:	4603      	mov	r3, r0
 80020fc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
		LL_mDelay(1);
 8002100:	2001      	movs	r0, #1
 8002102:	f001 ff93 	bl	800402c <LL_mDelay>
	for (uint8_t i = 0;  i < 5; i++)
 8002106:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800210a:	3301      	adds	r3, #1
 800210c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002110:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002114:	2b04      	cmp	r3, #4
 8002116:	d9b5      	bls.n	8002084 <lt8722_init+0xa0>
	}
	/*
	 * 6. Enable the PWM switching behavior
	 */
	LL_GPIO_SetOutputPin(TEC_1_SWEN_GPIO_Port, TEC_1_SWEN_Pin);
 8002118:	2104      	movs	r1, #4
 800211a:	4809      	ldr	r0, [pc, #36]	@ (8002140 <lt8722_init+0x15c>)
 800211c:	f7ff fccb 	bl	8001ab6 <LL_GPIO_SetOutputPin>
	ret = lt8722_set_swen_req(LT8722_SWEN_REQ_ENABLED);
 8002120:	2001      	movs	r0, #1
 8002122:	f7ff febd 	bl	8001ea0 <lt8722_set_swen_req>
 8002126:	4603      	mov	r3, r0
 8002128:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	delay_us(180);
 800212c:	20b4      	movs	r0, #180	@ 0xb4
 800212e:	f7fe fa39 	bl	80005a4 <delay_us>
	/*
	 * 7. Set the desired output voltage
	 */
	return ret;
 8002132:	f997 3036 	ldrsb.w	r3, [r7, #54]	@ 0x36
}
 8002136:	4618      	mov	r0, r3
 8002138:	373c      	adds	r7, #60	@ 0x3c
 800213a:	46bd      	mov	sp, r7
 800213c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002140:	40021000 	.word	0x40021000

08002144 <lt8722_set_output_voltage>:
 * @brief Set output volatge of LT8722 device.
 * @param value - Output voltage value in nanovolts.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_output_voltage(int64_t value)
{
 8002144:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002148:	b088      	sub	sp, #32
 800214a:	af00      	add	r7, sp, #0
 800214c:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t ret = 0;
 8002150:	2100      	movs	r1, #0
 8002152:	77f9      	strb	r1, [r7, #31]
//	ret = lt8722_set_dac(dac_destination);
//	LL_mDelay(1);
//	UART_Printf(&CONSOLE_UART, "0x%X-%X \n", dac_destination>>16, dac_destination);


	vdac = LT8722_DAC_OFFSET - value / 16;
 8002154:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002158:	2900      	cmp	r1, #0
 800215a:	da05      	bge.n	8002168 <lt8722_set_output_voltage+0x24>
 800215c:	f110 020f 	adds.w	r2, r0, #15
 8002160:	f141 0300 	adc.w	r3, r1, #0
 8002164:	4610      	mov	r0, r2
 8002166:	4619      	mov	r1, r3
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	f04f 0300 	mov.w	r3, #0
 8002170:	0902      	lsrs	r2, r0, #4
 8002172:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8002176:	110b      	asrs	r3, r1, #4
 8002178:	2100      	movs	r1, #0
 800217a:	f1d2 0800 	rsbs	r8, r2, #0
 800217e:	eb61 0903 	sbc.w	r9, r1, r3
 8002182:	4642      	mov	r2, r8
 8002184:	464b      	mov	r3, r9
 8002186:	490c      	ldr	r1, [pc, #48]	@ (80021b8 <lt8722_set_output_voltage+0x74>)
 8002188:	1854      	adds	r4, r2, r1
 800218a:	f143 0500 	adc.w	r5, r3, #0
 800218e:	e9c7 4504 	strd	r4, r5, [r7, #16]
	dac = lt8722_voltage_to_dac(vdac);
 8002192:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002196:	f7ff fd07 	bl	8001ba8 <lt8722_voltage_to_dac>
 800219a:	60f8      	str	r0, [r7, #12]
	ret = lt8722_set_dac(dac);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fedc 	bl	8001f5c <lt8722_set_dac>
 80021a4:	4603      	mov	r3, r0
 80021a6:	77fb      	strb	r3, [r7, #31]
	return ret;
 80021a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3720      	adds	r7, #32
 80021b0:	46bd      	mov	sp, r7
 80021b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80021b6:	bf00      	nop
 80021b8:	4a817c80 	.word	0x4a817c80

080021bc <Calculate_CRC8>:

/* Private support function definition ------------------------------------*/
uint8_t Calculate_CRC8(uint8_t *data, uint8_t length) {
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0x00;
 80021c8:	2300      	movs	r3, #0
 80021ca:	73fb      	strb	r3, [r7, #15]
    uint8_t poly = 0x07;
 80021cc:	2307      	movs	r3, #7
 80021ce:	733b      	strb	r3, [r7, #12]
    for (uint8_t i = 0; i < length; i++)
 80021d0:	2300      	movs	r3, #0
 80021d2:	73bb      	strb	r3, [r7, #14]
 80021d4:	e022      	b.n	800221c <Calculate_CRC8+0x60>
    {
        crc ^= data[i];
 80021d6:	7bbb      	ldrb	r3, [r7, #14]
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	4413      	add	r3, r2
 80021dc:	781a      	ldrb	r2, [r3, #0]
 80021de:	7bfb      	ldrb	r3, [r7, #15]
 80021e0:	4053      	eors	r3, r2
 80021e2:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 0; bit < 8; bit++)
 80021e4:	2300      	movs	r3, #0
 80021e6:	737b      	strb	r3, [r7, #13]
 80021e8:	e012      	b.n	8002210 <Calculate_CRC8+0x54>
        {
            if (crc & 0x80)
 80021ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	da08      	bge.n	8002204 <Calculate_CRC8+0x48>
                crc = (crc << 1) ^ poly;
 80021f2:	7bfb      	ldrb	r3, [r7, #15]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	b25a      	sxtb	r2, r3
 80021f8:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80021fc:	4053      	eors	r3, r2
 80021fe:	b25b      	sxtb	r3, r3
 8002200:	73fb      	strb	r3, [r7, #15]
 8002202:	e002      	b.n	800220a <Calculate_CRC8+0x4e>
            else
                crc <<= 1;
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 0; bit < 8; bit++)
 800220a:	7b7b      	ldrb	r3, [r7, #13]
 800220c:	3301      	adds	r3, #1
 800220e:	737b      	strb	r3, [r7, #13]
 8002210:	7b7b      	ldrb	r3, [r7, #13]
 8002212:	2b07      	cmp	r3, #7
 8002214:	d9e9      	bls.n	80021ea <Calculate_CRC8+0x2e>
    for (uint8_t i = 0; i < length; i++)
 8002216:	7bbb      	ldrb	r3, [r7, #14]
 8002218:	3301      	adds	r3, #1
 800221a:	73bb      	strb	r3, [r7, #14]
 800221c:	7bba      	ldrb	r2, [r7, #14]
 800221e:	78fb      	ldrb	r3, [r7, #3]
 8002220:	429a      	cmp	r2, r3
 8002222:	d3d8      	bcc.n	80021d6 <Calculate_CRC8+0x1a>
        }
    }
    return crc;
 8002224:	7bfb      	ldrb	r3, [r7, #15]
}
 8002226:	4618      	mov	r0, r3
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <put_unaligned_be32>:

void put_unaligned_be32(uint32_t val, uint8_t *buf)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	6039      	str	r1, [r7, #0]
	buf[3] = val & 0xFF;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	3303      	adds	r3, #3
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	701a      	strb	r2, [r3, #0]
	buf[2] = (val >> 8) & 0xFF;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	0a1a      	lsrs	r2, r3, #8
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	3302      	adds	r3, #2
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	701a      	strb	r2, [r3, #0]
	buf[1] = (val >> 16) & 0xFF;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	0c1a      	lsrs	r2, r3, #16
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	3301      	adds	r3, #1
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	701a      	strb	r2, [r3, #0]
	buf[0] = val >> 24;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	0e1b      	lsrs	r3, r3, #24
 8002262:	b2da      	uxtb	r2, r3
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	701a      	strb	r2, [r3, #0]
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <get_unaligned_be32>:
{
	buf[1] = val & 0xFF;
	buf[0] = val >> 8;
}
uint32_t get_unaligned_be32(uint8_t *buf)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
	return buf[3] | ((uint16_t)buf[2] << 8) | ((uint32_t)buf[1] << 16) | ((uint32_t)buf[0] << 24);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3303      	adds	r3, #3
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	461a      	mov	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3302      	adds	r3, #2
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	021b      	lsls	r3, r3, #8
 800228c:	4313      	orrs	r3, r2
 800228e:	461a      	mov	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3301      	adds	r3, #1
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	041b      	lsls	r3, r3, #16
 8002298:	431a      	orrs	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	061b      	lsls	r3, r3, #24
 80022a0:	4313      	orrs	r3, r2
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <get_unaligned_be16>:
uint32_t get_unaligned_be16(uint8_t *buf)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
	return buf[1] | ((uint16_t)buf[0] << 8);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3301      	adds	r3, #1
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	461a      	mov	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	021b      	lsls	r3, r3, #8
 80022c4:	4313      	orrs	r3, r2
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <find_first_set_bit>:
uint32_t find_first_set_bit(uint32_t word)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b085      	sub	sp, #20
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
	uint32_t first_set_bit = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	60fb      	str	r3, [r7, #12]
	while (word) {
 80022de:	e00c      	b.n	80022fa <find_first_set_bit+0x28>
		if (word & 0x1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <find_first_set_bit+0x1c>
			return first_set_bit;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	e009      	b.n	8002302 <find_first_set_bit+0x30>
		word >>= 1;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	085b      	lsrs	r3, r3, #1
 80022f2:	607b      	str	r3, [r7, #4]
		first_set_bit ++;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	3301      	adds	r3, #1
 80022f8:	60fb      	str	r3, [r7, #12]
	while (word) {
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1ef      	bne.n	80022e0 <find_first_set_bit+0xe>
	}
	return 32;
 8002300:	2320      	movs	r3, #32
}
 8002302:	4618      	mov	r0, r3
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <field_prep>:
uint32_t field_prep(uint32_t mask, uint32_t val)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b082      	sub	sp, #8
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	6039      	str	r1, [r7, #0]
	return (val << find_first_set_bit(mask)) & mask;
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff ffda 	bl	80022d2 <find_first_set_bit>
 800231e:	4602      	mov	r2, r0
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	fa03 f202 	lsl.w	r2, r3, r2
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4013      	ands	r3, r2
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <LL_GPIO_SetOutputPin>:
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	619a      	str	r2, [r3, #24]
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <LL_GPIO_ResetOutputPin>:
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	041a      	lsls	r2, r3, #16
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	619a      	str	r2, [r3, #24]
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <status_led_init>:
		48									// taskTick
	},
};

void status_led_init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
    s_led_display_status.led_green = 0;
 8002370:	4a0a      	ldr	r2, [pc, #40]	@ (800239c <status_led_init+0x30>)
 8002372:	7813      	ldrb	r3, [r2, #0]
 8002374:	f36f 0300 	bfc	r3, #0, #1
 8002378:	7013      	strb	r3, [r2, #0]
    s_led_display_status.led_blue = 0;
 800237a:	4a08      	ldr	r2, [pc, #32]	@ (800239c <status_led_init+0x30>)
 800237c:	7813      	ldrb	r3, [r2, #0]
 800237e:	f36f 0341 	bfc	r3, #1, #1
 8002382:	7013      	strb	r3, [r2, #0]
    s_led_display_status.state = EXP_POWERUP;
 8002384:	4a05      	ldr	r2, [pc, #20]	@ (800239c <status_led_init+0x30>)
 8002386:	7813      	ldrb	r3, [r2, #0]
 8002388:	f36f 0387 	bfc	r3, #2, #6
 800238c:	7013      	strb	r3, [r2, #0]
	status_led_led_green_off();
 800238e:	f000 f8e1 	bl	8002554 <status_led_led_green_off>
	status_led_led_blue_off();
 8002392:	f000 f8f7 	bl	8002584 <status_led_led_blue_off>
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	200002e0 	.word	0x200002e0

080023a0 <status_led_update>:

void	status_led_update(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
	switch (s_led_display_status.state) {
 80023a4:	4b0c      	ldr	r3, [pc, #48]	@ (80023d8 <status_led_update+0x38>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	f3c3 0385 	ubfx	r3, r3, #2, #6
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d00c      	beq.n	80023cc <status_led_update+0x2c>
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	dc0d      	bgt.n	80023d2 <status_led_update+0x32>
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d002      	beq.n	80023c0 <status_led_update+0x20>
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d003      	beq.n	80023c6 <status_led_update+0x26>
		break;
	case EXP_ERROR:
		status_led_error();
		break;
	default:
		break;
 80023be:	e008      	b.n	80023d2 <status_led_update+0x32>
		status_led_powerup();
 80023c0:	f000 f80c 	bl	80023dc <status_led_powerup>
		break;
 80023c4:	e006      	b.n	80023d4 <status_led_update+0x34>
		status_led_normal();
 80023c6:	f000 f851 	bl	800246c <status_led_normal>
		break;
 80023ca:	e003      	b.n	80023d4 <status_led_update+0x34>
		status_led_error();
 80023cc:	f000 f870 	bl	80024b0 <status_led_error>
		break;
 80023d0:	e000      	b.n	80023d4 <status_led_update+0x34>
		break;
 80023d2:	bf00      	nop
	}
}
 80023d4:	bf00      	nop
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	200002e0 	.word	0x200002e0

080023dc <status_led_powerup>:

static void status_led_powerup(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
	if (s_led_display_status.led_green && s_led_display_status.led_blue) {
 80023e0:	4b21      	ldr	r3, [pc, #132]	@ (8002468 <status_led_powerup+0x8c>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d020      	beq.n	8002430 <status_led_powerup+0x54>
 80023ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002468 <status_led_powerup+0x8c>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d019      	beq.n	8002430 <status_led_powerup+0x54>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 80023fc:	2000      	movs	r0, #0
 80023fe:	f001 fe8b 	bl	8004118 <SCH_TIM_HasCompleted>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d02d      	beq.n	8002464 <status_led_powerup+0x88>
			s_led_display_status.led_green = 0;
 8002408:	4a17      	ldr	r2, [pc, #92]	@ (8002468 <status_led_powerup+0x8c>)
 800240a:	7813      	ldrb	r3, [r2, #0]
 800240c:	f36f 0300 	bfc	r3, #0, #1
 8002410:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 0;
 8002412:	4a15      	ldr	r2, [pc, #84]	@ (8002468 <status_led_powerup+0x8c>)
 8002414:	7813      	ldrb	r3, [r2, #0]
 8002416:	f36f 0341 	bfc	r3, #1, #1
 800241a:	7013      	strb	r3, [r2, #0]
			status_led_led_green_off();
 800241c:	f000 f89a 	bl	8002554 <status_led_led_green_off>
			status_led_led_blue_off();
 8002420:	f000 f8b0 	bl	8002584 <status_led_led_blue_off>
			SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD);
 8002424:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002428:	2000      	movs	r0, #0
 800242a:	f001 fe5f 	bl	80040ec <SCH_TIM_Start>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 800242e:	e019      	b.n	8002464 <status_led_powerup+0x88>
		}
	} else {
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 8002430:	2000      	movs	r0, #0
 8002432:	f001 fe71 	bl	8004118 <SCH_TIM_HasCompleted>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d013      	beq.n	8002464 <status_led_powerup+0x88>
			s_led_display_status.led_green = 1;
 800243c:	4a0a      	ldr	r2, [pc, #40]	@ (8002468 <status_led_powerup+0x8c>)
 800243e:	7813      	ldrb	r3, [r2, #0]
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 1;
 8002446:	4a08      	ldr	r2, [pc, #32]	@ (8002468 <status_led_powerup+0x8c>)
 8002448:	7813      	ldrb	r3, [r2, #0]
 800244a:	f043 0302 	orr.w	r3, r3, #2
 800244e:	7013      	strb	r3, [r2, #0]
			status_led_led_green_on();
 8002450:	f000 f874 	bl	800253c <status_led_led_green_on>
			status_led_led_blue_on();
 8002454:	f000 f88a 	bl	800256c <status_led_led_blue_on>
			SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD);
 8002458:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800245c:	2000      	movs	r0, #0
 800245e:	f001 fe45 	bl	80040ec <SCH_TIM_Start>
		}
	}
}
 8002462:	e7ff      	b.n	8002464 <status_led_powerup+0x88>
 8002464:	bf00      	nop
 8002466:	bd80      	pop	{r7, pc}
 8002468:	200002e0 	.word	0x200002e0

0800246c <status_led_normal>:

static void status_led_normal(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
	// viết tạm
	LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8002470:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002474:	480d      	ldr	r0, [pc, #52]	@ (80024ac <status_led_normal+0x40>)
 8002476:	f7ff ff6a 	bl	800234e <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 800247a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800247e:	480b      	ldr	r0, [pc, #44]	@ (80024ac <status_led_normal+0x40>)
 8002480:	f7ff ff57 	bl	8002332 <LL_GPIO_SetOutputPin>
	LL_mDelay(500);
 8002484:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002488:	f001 fdd0 	bl	800402c <LL_mDelay>
	LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 800248c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002490:	4806      	ldr	r0, [pc, #24]	@ (80024ac <status_led_normal+0x40>)
 8002492:	f7ff ff5c 	bl	800234e <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8002496:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800249a:	4804      	ldr	r0, [pc, #16]	@ (80024ac <status_led_normal+0x40>)
 800249c:	f7ff ff49 	bl	8002332 <LL_GPIO_SetOutputPin>
	LL_mDelay(500);
 80024a0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80024a4:	f001 fdc2 	bl	800402c <LL_mDelay>
}
 80024a8:	bf00      	nop
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40020c00 	.word	0x40020c00

080024b0 <status_led_error>:

static void status_led_error(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
	if (s_led_display_status.led_green && s_led_display_status.led_blue) {
 80024b4:	4b20      	ldr	r3, [pc, #128]	@ (8002538 <status_led_error+0x88>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d01f      	beq.n	8002502 <status_led_error+0x52>
 80024c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002538 <status_led_error+0x88>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d018      	beq.n	8002502 <status_led_error+0x52>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 80024d0:	2000      	movs	r0, #0
 80024d2:	f001 fe21 	bl	8004118 <SCH_TIM_HasCompleted>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d02b      	beq.n	8002534 <status_led_error+0x84>
			s_led_display_status.led_green = 0;
 80024dc:	4a16      	ldr	r2, [pc, #88]	@ (8002538 <status_led_error+0x88>)
 80024de:	7813      	ldrb	r3, [r2, #0]
 80024e0:	f36f 0300 	bfc	r3, #0, #1
 80024e4:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 0;
 80024e6:	4a14      	ldr	r2, [pc, #80]	@ (8002538 <status_led_error+0x88>)
 80024e8:	7813      	ldrb	r3, [r2, #0]
 80024ea:	f36f 0341 	bfc	r3, #1, #1
 80024ee:	7013      	strb	r3, [r2, #0]
			status_led_led_green_off();
 80024f0:	f000 f830 	bl	8002554 <status_led_led_green_off>
			status_led_led_blue_off();
 80024f4:	f000 f846 	bl	8002584 <status_led_led_blue_off>
			SCH_TIM_Start(SCH_TIM_LED, ERROR_PERIOD);
 80024f8:	2132      	movs	r1, #50	@ 0x32
 80024fa:	2000      	movs	r0, #0
 80024fc:	f001 fdf6 	bl	80040ec <SCH_TIM_Start>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 8002500:	e018      	b.n	8002534 <status_led_error+0x84>
		}
	} else {
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 8002502:	2000      	movs	r0, #0
 8002504:	f001 fe08 	bl	8004118 <SCH_TIM_HasCompleted>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d012      	beq.n	8002534 <status_led_error+0x84>
			s_led_display_status.led_green = 1;
 800250e:	4a0a      	ldr	r2, [pc, #40]	@ (8002538 <status_led_error+0x88>)
 8002510:	7813      	ldrb	r3, [r2, #0]
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 1;
 8002518:	4a07      	ldr	r2, [pc, #28]	@ (8002538 <status_led_error+0x88>)
 800251a:	7813      	ldrb	r3, [r2, #0]
 800251c:	f043 0302 	orr.w	r3, r3, #2
 8002520:	7013      	strb	r3, [r2, #0]
			status_led_led_green_on();
 8002522:	f000 f80b 	bl	800253c <status_led_led_green_on>
			status_led_led_blue_on();
 8002526:	f000 f821 	bl	800256c <status_led_led_blue_on>
			SCH_TIM_Start(SCH_TIM_LED, ERROR_PERIOD);
 800252a:	2132      	movs	r1, #50	@ 0x32
 800252c:	2000      	movs	r0, #0
 800252e:	f001 fddd 	bl	80040ec <SCH_TIM_Start>
		}
	}
}
 8002532:	e7ff      	b.n	8002534 <status_led_error+0x84>
 8002534:	bf00      	nop
 8002536:	bd80      	pop	{r7, pc}
 8002538:	200002e0 	.word	0x200002e0

0800253c <status_led_led_green_on>:

static void status_led_led_green_on(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8002540:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002544:	4802      	ldr	r0, [pc, #8]	@ (8002550 <status_led_led_green_on+0x14>)
 8002546:	f7ff fef4 	bl	8002332 <LL_GPIO_SetOutputPin>
}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40020c00 	.word	0x40020c00

08002554 <status_led_led_green_off>:
static void status_led_led_green_off(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8002558:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800255c:	4802      	ldr	r0, [pc, #8]	@ (8002568 <status_led_led_green_off+0x14>)
 800255e:	f7ff fef6 	bl	800234e <LL_GPIO_ResetOutputPin>
}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40020c00 	.word	0x40020c00

0800256c <status_led_led_blue_on>:
static void status_led_led_blue_on(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8002570:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002574:	4802      	ldr	r0, [pc, #8]	@ (8002580 <status_led_led_blue_on+0x14>)
 8002576:	f7ff fedc 	bl	8002332 <LL_GPIO_SetOutputPin>
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40020c00 	.word	0x40020c00

08002584 <status_led_led_blue_off>:
static void status_led_led_blue_off(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8002588:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800258c:	4802      	ldr	r0, [pc, #8]	@ (8002598 <status_led_led_blue_off+0x14>)
 800258e:	f7ff fede 	bl	800234e <LL_GPIO_ResetOutputPin>
}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40020c00 	.word	0x40020c00

0800259c <status_led_create_task>:

void	status_led_create_task(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_task_context.taskHandle, &s_task_context.taskProperty);
 80025a0:	4902      	ldr	r1, [pc, #8]	@ (80025ac <status_led_create_task+0x10>)
 80025a2:	4803      	ldr	r0, [pc, #12]	@ (80025b0 <status_led_create_task+0x14>)
 80025a4:	f001 fdce 	bl	8004144 <SCH_TASK_CreateTask>
}
 80025a8:	bf00      	nop
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20000138 	.word	0x20000138
 80025b0:	20000134 	.word	0x20000134

080025b4 <__NVIC_SetPriorityGrouping>:
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025c4:	4b0c      	ldr	r3, [pc, #48]	@ (80025f8 <__NVIC_SetPriorityGrouping+0x44>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025d0:	4013      	ands	r3, r2
 80025d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025e6:	4a04      	ldr	r2, [pc, #16]	@ (80025f8 <__NVIC_SetPriorityGrouping+0x44>)
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	60d3      	str	r3, [r2, #12]
}
 80025ec:	bf00      	nop
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <__NVIC_GetPriorityGrouping>:
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002600:	4b04      	ldr	r3, [pc, #16]	@ (8002614 <__NVIC_GetPriorityGrouping+0x18>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	0a1b      	lsrs	r3, r3, #8
 8002606:	f003 0307 	and.w	r3, r3, #7
}
 800260a:	4618      	mov	r0, r3
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <__NVIC_EnableIRQ>:
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	2b00      	cmp	r3, #0
 8002628:	db0b      	blt.n	8002642 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	f003 021f 	and.w	r2, r3, #31
 8002630:	4907      	ldr	r1, [pc, #28]	@ (8002650 <__NVIC_EnableIRQ+0x38>)
 8002632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002636:	095b      	lsrs	r3, r3, #5
 8002638:	2001      	movs	r0, #1
 800263a:	fa00 f202 	lsl.w	r2, r0, r2
 800263e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	e000e100 	.word	0xe000e100

08002654 <__NVIC_SetPriority>:
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	6039      	str	r1, [r7, #0]
 800265e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002664:	2b00      	cmp	r3, #0
 8002666:	db0a      	blt.n	800267e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	b2da      	uxtb	r2, r3
 800266c:	490c      	ldr	r1, [pc, #48]	@ (80026a0 <__NVIC_SetPriority+0x4c>)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	0112      	lsls	r2, r2, #4
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	440b      	add	r3, r1
 8002678:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800267c:	e00a      	b.n	8002694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	b2da      	uxtb	r2, r3
 8002682:	4908      	ldr	r1, [pc, #32]	@ (80026a4 <__NVIC_SetPriority+0x50>)
 8002684:	79fb      	ldrb	r3, [r7, #7]
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	3b04      	subs	r3, #4
 800268c:	0112      	lsls	r2, r2, #4
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	440b      	add	r3, r1
 8002692:	761a      	strb	r2, [r3, #24]
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000e100 	.word	0xe000e100
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <NVIC_EncodePriority>:
{
 80026a8:	b480      	push	{r7}
 80026aa:	b089      	sub	sp, #36	@ 0x24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f1c3 0307 	rsb	r3, r3, #7
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	bf28      	it	cs
 80026c6:	2304      	movcs	r3, #4
 80026c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	3304      	adds	r3, #4
 80026ce:	2b06      	cmp	r3, #6
 80026d0:	d902      	bls.n	80026d8 <NVIC_EncodePriority+0x30>
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3b03      	subs	r3, #3
 80026d6:	e000      	b.n	80026da <NVIC_EncodePriority+0x32>
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026dc:	f04f 32ff 	mov.w	r2, #4294967295
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43da      	mvns	r2, r3
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	401a      	ands	r2, r3
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026f0:	f04f 31ff 	mov.w	r1, #4294967295
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	fa01 f303 	lsl.w	r3, r1, r3
 80026fa:	43d9      	mvns	r1, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002700:	4313      	orrs	r3, r2
}
 8002702:	4618      	mov	r0, r3
 8002704:	3724      	adds	r7, #36	@ 0x24
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <LL_I2C_Enable>:
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f043 0201 	orr.w	r2, r3, #1
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	601a      	str	r2, [r3, #0]
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <LL_I2C_EnableClockStretching>:
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	601a      	str	r2, [r3, #0]
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <LL_I2C_DisableGeneralCall>:
{
 800274e:	b480      	push	{r7}
 8002750:	b083      	sub	sp, #12
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	601a      	str	r2, [r3, #0]
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <LL_I2C_SetOwnAddress2>:
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f023 02fe 	bic.w	r2, r3, #254	@ 0xfe
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	60da      	str	r2, [r3, #12]
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <LL_I2C_DisableOwnAddress2>:
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f023 0201 	bic.w	r2, r3, #1
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	60da      	str	r2, [r3, #12]
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80027b8:	4b05      	ldr	r3, [pc, #20]	@ (80027d0 <LL_RCC_HSI_Enable+0x1c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a04      	ldr	r2, [pc, #16]	@ (80027d0 <LL_RCC_HSI_Enable+0x1c>)
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	6013      	str	r3, [r2, #0]
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40023800 	.word	0x40023800

080027d4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80027d8:	4b06      	ldr	r3, [pc, #24]	@ (80027f4 <LL_RCC_HSI_IsReady+0x20>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	bf0c      	ite	eq
 80027e4:	2301      	moveq	r3, #1
 80027e6:	2300      	movne	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	40023800 	.word	0x40023800

080027f8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8002800:	4b07      	ldr	r3, [pc, #28]	@ (8002820 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	4904      	ldr	r1, [pc, #16]	@ (8002820 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800280e:	4313      	orrs	r3, r2
 8002810:	600b      	str	r3, [r1, #0]
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40023800 	.word	0x40023800

08002824 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800282c:	4b06      	ldr	r3, [pc, #24]	@ (8002848 <LL_RCC_SetSysClkSource+0x24>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f023 0203 	bic.w	r2, r3, #3
 8002834:	4904      	ldr	r1, [pc, #16]	@ (8002848 <LL_RCC_SetSysClkSource+0x24>)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4313      	orrs	r3, r2
 800283a:	608b      	str	r3, [r1, #8]
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	40023800 	.word	0x40023800

0800284c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002850:	4b04      	ldr	r3, [pc, #16]	@ (8002864 <LL_RCC_GetSysClkSource+0x18>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 030c 	and.w	r3, r3, #12
}
 8002858:	4618      	mov	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800

08002868 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002870:	4b06      	ldr	r3, [pc, #24]	@ (800288c <LL_RCC_SetAHBPrescaler+0x24>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002878:	4904      	ldr	r1, [pc, #16]	@ (800288c <LL_RCC_SetAHBPrescaler+0x24>)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4313      	orrs	r3, r2
 800287e:	608b      	str	r3, [r1, #8]
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	40023800 	.word	0x40023800

08002890 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002898:	4b06      	ldr	r3, [pc, #24]	@ (80028b4 <LL_RCC_SetAPB1Prescaler+0x24>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80028a0:	4904      	ldr	r1, [pc, #16]	@ (80028b4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	608b      	str	r3, [r1, #8]
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	40023800 	.word	0x40023800

080028b8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80028c0:	4b06      	ldr	r3, [pc, #24]	@ (80028dc <LL_RCC_SetAPB2Prescaler+0x24>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80028c8:	4904      	ldr	r1, [pc, #16]	@ (80028dc <LL_RCC_SetAPB2Prescaler+0x24>)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	608b      	str	r3, [r1, #8]
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	40023800 	.word	0x40023800

080028e0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80028e8:	4b08      	ldr	r3, [pc, #32]	@ (800290c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80028ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028ec:	4907      	ldr	r1, [pc, #28]	@ (800290c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80028f4:	4b05      	ldr	r3, [pc, #20]	@ (800290c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80028f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4013      	ands	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028fe:	68fb      	ldr	r3, [r7, #12]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	40023800 	.word	0x40023800

08002910 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002918:	4b08      	ldr	r3, [pc, #32]	@ (800293c <LL_APB1_GRP1_EnableClock+0x2c>)
 800291a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800291c:	4907      	ldr	r1, [pc, #28]	@ (800293c <LL_APB1_GRP1_EnableClock+0x2c>)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4313      	orrs	r3, r2
 8002922:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002924:	4b05      	ldr	r3, [pc, #20]	@ (800293c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002926:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4013      	ands	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800292e:	68fb      	ldr	r3, [r7, #12]
}
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	40023800 	.word	0x40023800

08002940 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002948:	4b08      	ldr	r3, [pc, #32]	@ (800296c <LL_APB2_GRP1_EnableClock+0x2c>)
 800294a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800294c:	4907      	ldr	r1, [pc, #28]	@ (800296c <LL_APB2_GRP1_EnableClock+0x2c>)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4313      	orrs	r3, r2
 8002952:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002954:	4b05      	ldr	r3, [pc, #20]	@ (800296c <LL_APB2_GRP1_EnableClock+0x2c>)
 8002956:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4013      	ands	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800295e:	68fb      	ldr	r3, [r7, #12]
}
 8002960:	bf00      	nop
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	40023800 	.word	0x40023800

08002970 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002978:	4b06      	ldr	r3, [pc, #24]	@ (8002994 <LL_FLASH_SetLatency+0x24>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f023 0207 	bic.w	r2, r3, #7
 8002980:	4904      	ldr	r1, [pc, #16]	@ (8002994 <LL_FLASH_SetLatency+0x24>)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4313      	orrs	r3, r2
 8002986:	600b      	str	r3, [r1, #0]
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	40023c00 	.word	0x40023c00

08002998 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800299c:	4b04      	ldr	r3, [pc, #16]	@ (80029b0 <LL_FLASH_GetLatency+0x18>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0307 	and.w	r3, r3, #7
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40023c00 	.word	0x40023c00

080029b4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80029bc:	4b06      	ldr	r3, [pc, #24]	@ (80029d8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80029c4:	4904      	ldr	r1, [pc, #16]	@ (80029d8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	600b      	str	r3, [r1, #0]
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	40007000 	.word	0x40007000

080029dc <LL_SPI_Enable>:
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	601a      	str	r2, [r3, #0]
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <LL_SPI_SetStandard>:
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f023 0210 	bic.w	r2, r3, #16
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	431a      	orrs	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	605a      	str	r2, [r3, #4]
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <LL_USART_Enable>:
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	60da      	str	r2, [r3, #12]
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <LL_USART_ConfigAsyncMode>:
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	615a      	str	r2, [r3, #20]
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <LL_GPIO_SetOutputPin>:
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
 8002a76:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	619a      	str	r2, [r3, #24]
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <LL_GPIO_ResetOutputPin>:
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
 8002a92:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	041a      	lsls	r2, r3, #16
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	619a      	str	r2, [r3, #24]
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002aac:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002ab0:	f7ff ff46 	bl	8002940 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002ab4:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8002ab8:	f7ff ff2a 	bl	8002910 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002abc:	2003      	movs	r0, #3
 8002abe:	f7ff fd79 	bl	80025b4 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8002ac2:	f7ff fd9b 	bl	80025fc <__NVIC_GetPriorityGrouping>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2200      	movs	r2, #0
 8002aca:	210f      	movs	r1, #15
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff fdeb 	bl	80026a8 <NVIC_EncodePriority>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8002ada:	f7ff fdbb 	bl	8002654 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ade:	f000 f81b 	bl	8002b18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ae2:	f000 f963 	bl	8002dac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002ae6:	f000 f8ff 	bl	8002ce8 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8002aea:	f000 f8a7 	bl	8002c3c <MX_SPI1_Init>
  MX_I2C2_Init();
 8002aee:	f000 f849 	bl	8002b84 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
    WDT_init();
 8002af2:	f000 fa9f 	bl	8003034 <WDT_init>
    status_led_init();
 8002af6:	f7ff fc39 	bl	800236c <status_led_init>
    command_init();
 8002afa:	f7fe fc57 	bl	80013ac <command_init>
    //tec_init();

    SCH_Initialize();
 8002afe:	f001 facb 	bl	8004098 <SCH_Initialize>
    WDT_create_task();
 8002b02:	f000 faa3 	bl	800304c <WDT_create_task>
    status_led_create_task();
 8002b06:	f7ff fd49 	bl	800259c <status_led_create_task>
    command_create_task();
 8002b0a:	f7fe ff2b 	bl	8001964 <command_create_task>
    //tec_create_task();

    SCH_StartSchedular();
 8002b0e:	f001 fbed 	bl	80042ec <SCH_StartSchedular>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_HandleScheduledTask();
 8002b12:	f001 fbf1 	bl	80042f8 <SCH_HandleScheduledTask>
 8002b16:	e7fc      	b.n	8002b12 <main+0x6a>

08002b18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	f7ff ff27 	bl	8002970 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8002b22:	bf00      	nop
 8002b24:	f7ff ff38 	bl	8002998 <LL_FLASH_GetLatency>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1fa      	bne.n	8002b24 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8002b2e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002b32:	f7ff ff3f 	bl	80029b4 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8002b36:	2010      	movs	r0, #16
 8002b38:	f7ff fe5e 	bl	80027f8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8002b3c:	f7ff fe3a 	bl	80027b4 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8002b40:	bf00      	nop
 8002b42:	f7ff fe47 	bl	80027d4 <LL_RCC_HSI_IsReady>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d1fa      	bne.n	8002b42 <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 8002b4c:	2080      	movs	r0, #128	@ 0x80
 8002b4e:	f7ff fe8b 	bl	8002868 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8002b52:	2000      	movs	r0, #0
 8002b54:	f7ff fe9c 	bl	8002890 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8002b58:	2000      	movs	r0, #0
 8002b5a:	f7ff fead 	bl	80028b8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8002b5e:	2000      	movs	r0, #0
 8002b60:	f7ff fe60 	bl	8002824 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8002b64:	bf00      	nop
 8002b66:	f7ff fe71 	bl	800284c <LL_RCC_GetSysClkSource>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1fa      	bne.n	8002b66 <SystemClock_Config+0x4e>
  {

  }
  LL_Init1msTick(8000000);
 8002b70:	4803      	ldr	r0, [pc, #12]	@ (8002b80 <SystemClock_Config+0x68>)
 8002b72:	f001 fa4d 	bl	8004010 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 8002b76:	4802      	ldr	r0, [pc, #8]	@ (8002b80 <SystemClock_Config+0x68>)
 8002b78:	f001 fa7e 	bl	8004078 <LL_SetSystemCoreClock>
}
 8002b7c:	bf00      	nop
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	007a1200 	.word	0x007a1200

08002b84 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08c      	sub	sp, #48	@ 0x30
 8002b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8002b8a:	f107 0318 	add.w	r3, r7, #24
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	605a      	str	r2, [r3, #4]
 8002b94:	609a      	str	r2, [r3, #8]
 8002b96:	60da      	str	r2, [r3, #12]
 8002b98:	611a      	str	r2, [r3, #16]
 8002b9a:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b9c:	463b      	mov	r3, r7
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	605a      	str	r2, [r3, #4]
 8002ba4:	609a      	str	r2, [r3, #8]
 8002ba6:	60da      	str	r2, [r3, #12]
 8002ba8:	611a      	str	r2, [r3, #16]
 8002baa:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002bac:	2002      	movs	r0, #2
 8002bae:	f7ff fe97 	bl	80028e0 <LL_AHB1_GRP1_EnableClock>
  /**I2C2 GPIO Configuration
  PB10   ------> I2C2_SCL
  PB11   ------> I2C2_SDA
  */
  GPIO_InitStruct.Pin = EXP_SCL_Pin|EXP_SDA_Pin;
 8002bb2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002bb6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8002bc8:	2304      	movs	r3, #4
 8002bca:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bcc:	463b      	mov	r3, r7
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4817      	ldr	r0, [pc, #92]	@ (8002c30 <MX_I2C2_Init+0xac>)
 8002bd2:	f000 fbc2 	bl	800335a <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 8002bd6:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8002bda:	f7ff fe99 	bl	8002910 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C2_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C2);
 8002bde:	4815      	ldr	r0, [pc, #84]	@ (8002c34 <MX_I2C2_Init+0xb0>)
 8002be0:	f7ff fdd8 	bl	8002794 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 8002be4:	4813      	ldr	r0, [pc, #76]	@ (8002c34 <MX_I2C2_Init+0xb0>)
 8002be6:	f7ff fdb2 	bl	800274e <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 8002bea:	4812      	ldr	r0, [pc, #72]	@ (8002c34 <MX_I2C2_Init+0xb0>)
 8002bec:	f7ff fd9f 	bl	800272e <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8002bf4:	4b10      	ldr	r3, [pc, #64]	@ (8002c38 <MX_I2C2_Init+0xb4>)
 8002bf6:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8002c00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c04:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8002c06:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 8002c0c:	f107 0318 	add.w	r3, r7, #24
 8002c10:	4619      	mov	r1, r3
 8002c12:	4808      	ldr	r0, [pc, #32]	@ (8002c34 <MX_I2C2_Init+0xb0>)
 8002c14:	f000 fd18 	bl	8003648 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C2, 0);
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4806      	ldr	r0, [pc, #24]	@ (8002c34 <MX_I2C2_Init+0xb0>)
 8002c1c:	f7ff fda7 	bl	800276e <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C2_Init 2 */
  LL_I2C_Enable(I2C2);
 8002c20:	4804      	ldr	r0, [pc, #16]	@ (8002c34 <MX_I2C2_Init+0xb0>)
 8002c22:	f7ff fd74 	bl	800270e <LL_I2C_Enable>
  /* USER CODE END I2C2_Init 2 */

}
 8002c26:	bf00      	nop
 8002c28:	3730      	adds	r7, #48	@ 0x30
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40020400 	.word	0x40020400
 8002c34:	40005800 	.word	0x40005800
 8002c38:	000186a0 	.word	0x000186a0

08002c3c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b090      	sub	sp, #64	@ 0x40
 8002c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002c42:	f107 0318 	add.w	r3, r7, #24
 8002c46:	2228      	movs	r2, #40	@ 0x28
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f001 fc36 	bl	80044bc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c50:	463b      	mov	r3, r7
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	605a      	str	r2, [r3, #4]
 8002c58:	609a      	str	r2, [r3, #8]
 8002c5a:	60da      	str	r2, [r3, #12]
 8002c5c:	611a      	str	r2, [r3, #16]
 8002c5e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002c60:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002c64:	f7ff fe6c 	bl	8002940 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002c68:	2002      	movs	r0, #2
 8002c6a:	f7ff fe39 	bl	80028e0 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PB3   ------> SPI1_SCK
  PB4   ------> SPI1_MISO
  PB5   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = TEC_SCK_Pin|TEC_MISO_Pin|TEC_MOSI_Pin;
 8002c6e:	2338      	movs	r3, #56	@ 0x38
 8002c70:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002c72:	2302      	movs	r3, #2
 8002c74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002c76:	2303      	movs	r3, #3
 8002c78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002c82:	2305      	movs	r3, #5
 8002c84:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c86:	463b      	mov	r3, r7
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4815      	ldr	r0, [pc, #84]	@ (8002ce0 <MX_SPI1_Init+0xa4>)
 8002c8c:	f000 fb65 	bl	800335a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002c90:	2300      	movs	r3, #0
 8002c92:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002c94:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002c98:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002ca6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8002cac:	2318      	movs	r3, #24
 8002cae:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8002cb8:	230a      	movs	r3, #10
 8002cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8002cbc:	f107 0318 	add.w	r3, r7, #24
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4808      	ldr	r0, [pc, #32]	@ (8002ce4 <MX_SPI1_Init+0xa8>)
 8002cc4:	f000 fe4f 	bl	8003966 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8002cc8:	2100      	movs	r1, #0
 8002cca:	4806      	ldr	r0, [pc, #24]	@ (8002ce4 <MX_SPI1_Init+0xa8>)
 8002ccc:	f7ff fe96 	bl	80029fc <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */
  LL_SPI_Enable(SPI1);
 8002cd0:	4804      	ldr	r0, [pc, #16]	@ (8002ce4 <MX_SPI1_Init+0xa8>)
 8002cd2:	f7ff fe83 	bl	80029dc <LL_SPI_Enable>
  /* USER CODE END SPI1_Init 2 */

}
 8002cd6:	bf00      	nop
 8002cd8:	3740      	adds	r7, #64	@ 0x40
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40020400 	.word	0x40020400
 8002ce4:	40013000 	.word	0x40013000

08002ce8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08e      	sub	sp, #56	@ 0x38
 8002cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002cee:	f107 031c 	add.w	r3, r7, #28
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	605a      	str	r2, [r3, #4]
 8002cf8:	609a      	str	r2, [r3, #8]
 8002cfa:	60da      	str	r2, [r3, #12]
 8002cfc:	611a      	str	r2, [r3, #16]
 8002cfe:	615a      	str	r2, [r3, #20]
 8002d00:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d02:	1d3b      	adds	r3, r7, #4
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	60da      	str	r2, [r3, #12]
 8002d0e:	611a      	str	r2, [r3, #16]
 8002d10:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8002d12:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8002d16:	f7ff fdfb 	bl	8002910 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8002d1a:	2008      	movs	r0, #8
 8002d1c:	f7ff fde0 	bl	80028e0 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = EXP_URRT_TX_Pin|EXP_UART_RX_Pin;
 8002d20:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002d24:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002d26:	2302      	movs	r3, #2
 8002d28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002d36:	2307      	movs	r3, #7
 8002d38:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d3a:	1d3b      	adds	r3, r7, #4
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4819      	ldr	r0, [pc, #100]	@ (8002da4 <MX_USART3_UART_Init+0xbc>)
 8002d40:	f000 fb0b 	bl	800335a <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002d44:	f7ff fc5a 	bl	80025fc <__NVIC_GetPriorityGrouping>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff fcaa 	bl	80026a8 <NVIC_EncodePriority>
 8002d54:	4603      	mov	r3, r0
 8002d56:	4619      	mov	r1, r3
 8002d58:	2027      	movs	r0, #39	@ 0x27
 8002d5a:	f7ff fc7b 	bl	8002654 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8002d5e:	2027      	movs	r0, #39	@ 0x27
 8002d60:	f7ff fc5a 	bl	8002618 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002d64:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002d68:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002d76:	230c      	movs	r3, #12
 8002d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8002d82:	f107 031c 	add.w	r3, r7, #28
 8002d86:	4619      	mov	r1, r3
 8002d88:	4807      	ldr	r0, [pc, #28]	@ (8002da8 <MX_USART3_UART_Init+0xc0>)
 8002d8a:	f001 f8a7 	bl	8003edc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8002d8e:	4806      	ldr	r0, [pc, #24]	@ (8002da8 <MX_USART3_UART_Init+0xc0>)
 8002d90:	f7ff fe57 	bl	8002a42 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8002d94:	4804      	ldr	r0, [pc, #16]	@ (8002da8 <MX_USART3_UART_Init+0xc0>)
 8002d96:	f7ff fe44 	bl	8002a22 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002d9a:	bf00      	nop
 8002d9c:	3738      	adds	r7, #56	@ 0x38
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40020c00 	.word	0x40020c00
 8002da8:	40004800 	.word	0x40004800

08002dac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db2:	463b      	mov	r3, r7
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	605a      	str	r2, [r3, #4]
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	60da      	str	r2, [r3, #12]
 8002dbe:	611a      	str	r2, [r3, #16]
 8002dc0:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8002dc2:	2010      	movs	r0, #16
 8002dc4:	f7ff fd8c 	bl	80028e0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002dc8:	2004      	movs	r0, #4
 8002dca:	f7ff fd89 	bl	80028e0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8002dce:	2080      	movs	r0, #128	@ 0x80
 8002dd0:	f7ff fd86 	bl	80028e0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002dd4:	2001      	movs	r0, #1
 8002dd6:	f7ff fd83 	bl	80028e0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002dda:	2002      	movs	r0, #2
 8002ddc:	f7ff fd80 	bl	80028e0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8002de0:	2008      	movs	r0, #8
 8002de2:	f7ff fd7d 	bl	80028e0 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, TEC_1_SWEN_Pin|TEC_1_EN_Pin);
 8002de6:	2124      	movs	r1, #36	@ 0x24
 8002de8:	4842      	ldr	r0, [pc, #264]	@ (8002ef4 <MX_GPIO_Init+0x148>)
 8002dea:	f7ff fe4e 	bl	8002a8a <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(EF_TEC_EN_GPIO_Port, EF_TEC_EN_Pin);
 8002dee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002df2:	4841      	ldr	r0, [pc, #260]	@ (8002ef8 <MX_GPIO_Init+0x14c>)
 8002df4:	f7ff fe49 	bl	8002a8a <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 8002df8:	2102      	movs	r1, #2
 8002dfa:	4840      	ldr	r0, [pc, #256]	@ (8002efc <MX_GPIO_Init+0x150>)
 8002dfc:	f7ff fe45 	bl	8002a8a <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LED_B_Pin|LED_G_Pin);
 8002e00:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8002e04:	483e      	ldr	r0, [pc, #248]	@ (8002f00 <MX_GPIO_Init+0x154>)
 8002e06:	f7ff fe40 	bl	8002a8a <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOB, TEC_4_CS_Pin|TEC_3_CS_Pin);
 8002e0a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002e0e:	483d      	ldr	r0, [pc, #244]	@ (8002f04 <MX_GPIO_Init+0x158>)
 8002e10:	f7ff fe2d 	bl	8002a6e <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOE, TEC_2_CS_Pin|TEC_1_CS_Pin);
 8002e14:	2103      	movs	r1, #3
 8002e16:	4837      	ldr	r0, [pc, #220]	@ (8002ef4 <MX_GPIO_Init+0x148>)
 8002e18:	f7ff fe29 	bl	8002a6e <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = TEC_1_SWEN_Pin|TEC_1_EN_Pin;
 8002e1c:	2324      	movs	r3, #36	@ 0x24
 8002e1e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002e20:	2301      	movs	r3, #1
 8002e22:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002e24:	2300      	movs	r3, #0
 8002e26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e30:	463b      	mov	r3, r7
 8002e32:	4619      	mov	r1, r3
 8002e34:	482f      	ldr	r0, [pc, #188]	@ (8002ef4 <MX_GPIO_Init+0x148>)
 8002e36:	f000 fa90 	bl	800335a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EF_TEC_AUX_Pin;
 8002e3a:	2340      	movs	r3, #64	@ 0x40
 8002e3c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e42:	2300      	movs	r3, #0
 8002e44:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(EF_TEC_AUX_GPIO_Port, &GPIO_InitStruct);
 8002e46:	463b      	mov	r3, r7
 8002e48:	4619      	mov	r1, r3
 8002e4a:	482a      	ldr	r0, [pc, #168]	@ (8002ef4 <MX_GPIO_Init+0x148>)
 8002e4c:	f000 fa85 	bl	800335a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EF_TEC_EN_Pin;
 8002e50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e54:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002e56:	2301      	movs	r3, #1
 8002e58:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e62:	2300      	movs	r3, #0
 8002e64:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(EF_TEC_EN_GPIO_Port, &GPIO_InitStruct);
 8002e66:	463b      	mov	r3, r7
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4823      	ldr	r0, [pc, #140]	@ (8002ef8 <MX_GPIO_Init+0x14c>)
 8002e6c:	f000 fa75 	bl	800335a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = WD_DONE_Pin;
 8002e70:	2302      	movs	r3, #2
 8002e72:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002e74:	2301      	movs	r3, #1
 8002e76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e80:	2300      	movs	r3, #0
 8002e82:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(WD_DONE_GPIO_Port, &GPIO_InitStruct);
 8002e84:	463b      	mov	r3, r7
 8002e86:	4619      	mov	r1, r3
 8002e88:	481c      	ldr	r0, [pc, #112]	@ (8002efc <MX_GPIO_Init+0x150>)
 8002e8a:	f000 fa66 	bl	800335a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_B_Pin|LED_G_Pin;
 8002e8e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002e92:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002e94:	2301      	movs	r3, #1
 8002e96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ea4:	463b      	mov	r3, r7
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4815      	ldr	r0, [pc, #84]	@ (8002f00 <MX_GPIO_Init+0x154>)
 8002eaa:	f000 fa56 	bl	800335a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_4_CS_Pin|TEC_3_CS_Pin;
 8002eae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002eb2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ec4:	463b      	mov	r3, r7
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	480e      	ldr	r0, [pc, #56]	@ (8002f04 <MX_GPIO_Init+0x158>)
 8002eca:	f000 fa46 	bl	800335a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_2_CS_Pin|TEC_1_CS_Pin;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002eda:	2300      	movs	r3, #0
 8002edc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ee2:	463b      	mov	r3, r7
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4803      	ldr	r0, [pc, #12]	@ (8002ef4 <MX_GPIO_Init+0x148>)
 8002ee8:	f000 fa37 	bl	800335a <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002eec:	bf00      	nop
 8002eee:	3718      	adds	r7, #24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	40020800 	.word	0x40020800
 8002efc:	40020000 	.word	0x40020000
 8002f00:	40020c00 	.word	0x40020c00
 8002f04:	40020400 	.word	0x40020400

08002f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f0c:	bf00      	nop
 8002f0e:	e7fd      	b.n	8002f0c <NMI_Handler+0x4>

08002f10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f14:	bf00      	nop
 8002f16:	e7fd      	b.n	8002f14 <HardFault_Handler+0x4>

08002f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f1c:	bf00      	nop
 8002f1e:	e7fd      	b.n	8002f1c <MemManage_Handler+0x4>

08002f20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f24:	bf00      	nop
 8002f26:	e7fd      	b.n	8002f24 <BusFault_Handler+0x4>

08002f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f2c:	bf00      	nop
 8002f2e:	e7fd      	b.n	8002f2c <UsageFault_Handler+0x4>

08002f30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f42:	bf00      	nop
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f50:	bf00      	nop
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
	...

08002f5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	g_systick_count++;
 8002f60:	4b04      	ldr	r3, [pc, #16]	@ (8002f74 <SysTick_Handler+0x18>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	3301      	adds	r3, #1
 8002f66:	4a03      	ldr	r2, [pc, #12]	@ (8002f74 <SysTick_Handler+0x18>)
 8002f68:	6013      	str	r3, [r2, #0]
	SCH_RunSystemTickTimer();
 8002f6a:	f001 f92b 	bl	80041c4 <SCH_RunSystemTickTimer>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f6e:	bf00      	nop
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	200002e4 	.word	0x200002e4

08002f78 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	CONSOLE_UART_IRQHandler();
 8002f7c:	f7fe fcfe 	bl	800197c <CONSOLE_UART_IRQHandler>
  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002f80:	bf00      	nop
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f88:	4b06      	ldr	r3, [pc, #24]	@ (8002fa4 <SystemInit+0x20>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f8e:	4a05      	ldr	r2, [pc, #20]	@ (8002fa4 <SystemInit+0x20>)
 8002f90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f98:	bf00      	nop
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	e000ed00 	.word	0xe000ed00

08002fa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002fa8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002fe0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002fac:	f7ff ffea 	bl	8002f84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fb0:	480c      	ldr	r0, [pc, #48]	@ (8002fe4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002fb2:	490d      	ldr	r1, [pc, #52]	@ (8002fe8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8002fec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fb8:	e002      	b.n	8002fc0 <LoopCopyDataInit>

08002fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fbe:	3304      	adds	r3, #4

08002fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fc4:	d3f9      	bcc.n	8002fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ff0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002fc8:	4c0a      	ldr	r4, [pc, #40]	@ (8002ff4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fcc:	e001      	b.n	8002fd2 <LoopFillZerobss>

08002fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fd0:	3204      	adds	r2, #4

08002fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fd4:	d3fb      	bcc.n	8002fce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002fd6:	f001 fa7f 	bl	80044d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fda:	f7ff fd65 	bl	8002aa8 <main>
  bx  lr    
 8002fde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002fe0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fe8:	200001b4 	.word	0x200001b4
  ldr r2, =_sidata
 8002fec:	08004a48 	.word	0x08004a48
  ldr r2, =_sbss
 8002ff0:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 8002ff4:	20000638 	.word	0x20000638

08002ff8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ff8:	e7fe      	b.n	8002ff8 <ADC_IRQHandler>

08002ffa <LL_GPIO_SetOutputPin>:
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	619a      	str	r2, [r3, #24]
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <LL_GPIO_ResetOutputPin>:
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
 800301e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	041a      	lsls	r2, r3, #16
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	619a      	str	r2, [r3, #24]
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <WDT_init>:
		181
	}
};

void WDT_init(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
	WDT_Current = 0;
 8003038:	4b03      	ldr	r3, [pc, #12]	@ (8003048 <WDT_init+0x14>)
 800303a:	2200      	movs	r2, #0
 800303c:	701a      	strb	r2, [r3, #0]
}
 800303e:	bf00      	nop
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	200002e8 	.word	0x200002e8

0800304c <WDT_create_task>:

void WDT_create_task(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&wdt_task_context.taskHandle, &wdt_task_context.taskProperty);
 8003050:	4902      	ldr	r1, [pc, #8]	@ (800305c <WDT_create_task+0x10>)
 8003052:	4803      	ldr	r0, [pc, #12]	@ (8003060 <WDT_create_task+0x14>)
 8003054:	f001 f876 	bl	8004144 <SCH_TASK_CreateTask>
}
 8003058:	bf00      	nop
 800305a:	bd80      	pop	{r7, pc}
 800305c:	20000154 	.word	0x20000154
 8003060:	20000150 	.word	0x20000150

08003064 <status_wdt_update>:

void status_wdt_update(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
	if (WDT_Current)
 8003068:	4b14      	ldr	r3, [pc, #80]	@ (80030bc <status_wdt_update+0x58>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d012      	beq.n	8003096 <status_wdt_update+0x32>
	{
		if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 8003070:	2001      	movs	r0, #1
 8003072:	f001 f851 	bl	8004118 <SCH_TIM_HasCompleted>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d01d      	beq.n	80030b8 <status_wdt_update+0x54>
		{
			WDT_Current = 0;
 800307c:	4b0f      	ldr	r3, [pc, #60]	@ (80030bc <status_wdt_update+0x58>)
 800307e:	2200      	movs	r2, #0
 8003080:	701a      	strb	r2, [r3, #0]
			LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 8003082:	2102      	movs	r1, #2
 8003084:	480e      	ldr	r0, [pc, #56]	@ (80030c0 <status_wdt_update+0x5c>)
 8003086:	f7ff ffc6 	bl	8003016 <LL_GPIO_ResetOutputPin>
			SCH_TIM_Start(SCH_TIM_WDT,LOW_PERIOD);	//restart
 800308a:	f44f 7116 	mov.w	r1, #600	@ 0x258
 800308e:	2001      	movs	r0, #1
 8003090:	f001 f82c 	bl	80040ec <SCH_TIM_Start>
			WDT_Current = 1;
			LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
			SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
		}
	}
}
 8003094:	e010      	b.n	80030b8 <status_wdt_update+0x54>
		if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 8003096:	2001      	movs	r0, #1
 8003098:	f001 f83e 	bl	8004118 <SCH_TIM_HasCompleted>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00a      	beq.n	80030b8 <status_wdt_update+0x54>
			WDT_Current = 1;
 80030a2:	4b06      	ldr	r3, [pc, #24]	@ (80030bc <status_wdt_update+0x58>)
 80030a4:	2201      	movs	r2, #1
 80030a6:	701a      	strb	r2, [r3, #0]
			LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 80030a8:	2102      	movs	r1, #2
 80030aa:	4805      	ldr	r0, [pc, #20]	@ (80030c0 <status_wdt_update+0x5c>)
 80030ac:	f7ff ffa5 	bl	8002ffa <LL_GPIO_SetOutputPin>
			SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
 80030b0:	21c8      	movs	r1, #200	@ 0xc8
 80030b2:	2001      	movs	r0, #1
 80030b4:	f001 f81a 	bl	80040ec <SCH_TIM_Start>
}
 80030b8:	bf00      	nop
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	200002e8 	.word	0x200002e8
 80030c0:	40020000 	.word	0x40020000

080030c4 <LL_GPIO_SetPinMode>:
{
 80030c4:	b480      	push	{r7}
 80030c6:	b08b      	sub	sp, #44	@ 0x2c
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	fa93 f3a3 	rbit	r3, r3
 80030de:	613b      	str	r3, [r7, #16]
  return result;
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80030ea:	2320      	movs	r3, #32
 80030ec:	e003      	b.n	80030f6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	fab3 f383 	clz	r3, r3
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	2103      	movs	r1, #3
 80030fa:	fa01 f303 	lsl.w	r3, r1, r3
 80030fe:	43db      	mvns	r3, r3
 8003100:	401a      	ands	r2, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	fa93 f3a3 	rbit	r3, r3
 800310c:	61fb      	str	r3, [r7, #28]
  return result;
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8003118:	2320      	movs	r3, #32
 800311a:	e003      	b.n	8003124 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800311c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311e:	fab3 f383 	clz	r3, r3
 8003122:	b2db      	uxtb	r3, r3
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	fa01 f303 	lsl.w	r3, r1, r3
 800312c:	431a      	orrs	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	601a      	str	r2, [r3, #0]
}
 8003132:	bf00      	nop
 8003134:	372c      	adds	r7, #44	@ 0x2c
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <LL_GPIO_SetPinOutputType>:
{
 800313e:	b480      	push	{r7}
 8003140:	b085      	sub	sp, #20
 8003142:	af00      	add	r7, sp, #0
 8003144:	60f8      	str	r0, [r7, #12]
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	43db      	mvns	r3, r3
 8003152:	401a      	ands	r2, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	fb01 f303 	mul.w	r3, r1, r3
 800315c:	431a      	orrs	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	605a      	str	r2, [r3, #4]
}
 8003162:	bf00      	nop
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <LL_GPIO_SetPinSpeed>:
{
 800316e:	b480      	push	{r7}
 8003170:	b08b      	sub	sp, #44	@ 0x2c
 8003172:	af00      	add	r7, sp, #0
 8003174:	60f8      	str	r0, [r7, #12]
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	fa93 f3a3 	rbit	r3, r3
 8003188:	613b      	str	r3, [r7, #16]
  return result;
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8003194:	2320      	movs	r3, #32
 8003196:	e003      	b.n	80031a0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	fab3 f383 	clz	r3, r3
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	2103      	movs	r1, #3
 80031a4:	fa01 f303 	lsl.w	r3, r1, r3
 80031a8:	43db      	mvns	r3, r3
 80031aa:	401a      	ands	r2, r3
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	fa93 f3a3 	rbit	r3, r3
 80031b6:	61fb      	str	r3, [r7, #28]
  return result;
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80031bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80031c2:	2320      	movs	r3, #32
 80031c4:	e003      	b.n	80031ce <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80031c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c8:	fab3 f383 	clz	r3, r3
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	fa01 f303 	lsl.w	r3, r1, r3
 80031d6:	431a      	orrs	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	609a      	str	r2, [r3, #8]
}
 80031dc:	bf00      	nop
 80031de:	372c      	adds	r7, #44	@ 0x2c
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <LL_GPIO_SetPinPull>:
{
 80031e8:	b480      	push	{r7}
 80031ea:	b08b      	sub	sp, #44	@ 0x2c
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	fa93 f3a3 	rbit	r3, r3
 8003202:	613b      	str	r3, [r7, #16]
  return result;
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800320e:	2320      	movs	r3, #32
 8003210:	e003      	b.n	800321a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	fab3 f383 	clz	r3, r3
 8003218:	b2db      	uxtb	r3, r3
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	2103      	movs	r1, #3
 800321e:	fa01 f303 	lsl.w	r3, r1, r3
 8003222:	43db      	mvns	r3, r3
 8003224:	401a      	ands	r2, r3
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	fa93 f3a3 	rbit	r3, r3
 8003230:	61fb      	str	r3, [r7, #28]
  return result;
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800323c:	2320      	movs	r3, #32
 800323e:	e003      	b.n	8003248 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8003240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003242:	fab3 f383 	clz	r3, r3
 8003246:	b2db      	uxtb	r3, r3
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	fa01 f303 	lsl.w	r3, r1, r3
 8003250:	431a      	orrs	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	60da      	str	r2, [r3, #12]
}
 8003256:	bf00      	nop
 8003258:	372c      	adds	r7, #44	@ 0x2c
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <LL_GPIO_SetAFPin_0_7>:
{
 8003262:	b480      	push	{r7}
 8003264:	b08b      	sub	sp, #44	@ 0x2c
 8003266:	af00      	add	r7, sp, #0
 8003268:	60f8      	str	r0, [r7, #12]
 800326a:	60b9      	str	r1, [r7, #8]
 800326c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a1a      	ldr	r2, [r3, #32]
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	fa93 f3a3 	rbit	r3, r3
 800327c:	613b      	str	r3, [r7, #16]
  return result;
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8003288:	2320      	movs	r3, #32
 800328a:	e003      	b.n	8003294 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	fab3 f383 	clz	r3, r3
 8003292:	b2db      	uxtb	r3, r3
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	210f      	movs	r1, #15
 8003298:	fa01 f303 	lsl.w	r3, r1, r3
 800329c:	43db      	mvns	r3, r3
 800329e:	401a      	ands	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	fa93 f3a3 	rbit	r3, r3
 80032aa:	61fb      	str	r3, [r7, #28]
  return result;
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80032b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80032b6:	2320      	movs	r3, #32
 80032b8:	e003      	b.n	80032c2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80032ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032bc:	fab3 f383 	clz	r3, r3
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ca:	431a      	orrs	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	621a      	str	r2, [r3, #32]
}
 80032d0:	bf00      	nop
 80032d2:	372c      	adds	r7, #44	@ 0x2c
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <LL_GPIO_SetAFPin_8_15>:
{
 80032dc:	b480      	push	{r7}
 80032de:	b08b      	sub	sp, #44	@ 0x2c
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	0a1b      	lsrs	r3, r3, #8
 80032f0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	fa93 f3a3 	rbit	r3, r3
 80032f8:	613b      	str	r3, [r7, #16]
  return result;
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8003304:	2320      	movs	r3, #32
 8003306:	e003      	b.n	8003310 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	fab3 f383 	clz	r3, r3
 800330e:	b2db      	uxtb	r3, r3
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	210f      	movs	r1, #15
 8003314:	fa01 f303 	lsl.w	r3, r1, r3
 8003318:	43db      	mvns	r3, r3
 800331a:	401a      	ands	r2, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	0a1b      	lsrs	r3, r3, #8
 8003320:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	fa93 f3a3 	rbit	r3, r3
 8003328:	61fb      	str	r3, [r7, #28]
  return result;
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800332e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8003334:	2320      	movs	r3, #32
 8003336:	e003      	b.n	8003340 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8003338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333a:	fab3 f383 	clz	r3, r3
 800333e:	b2db      	uxtb	r3, r3
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	fa01 f303 	lsl.w	r3, r1, r3
 8003348:	431a      	orrs	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800334e:	bf00      	nop
 8003350:	372c      	adds	r7, #44	@ 0x2c
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b08a      	sub	sp, #40	@ 0x28
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003364:	2300      	movs	r3, #0
 8003366:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8003368:	2300      	movs	r3, #0
 800336a:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	fa93 f3a3 	rbit	r3, r3
 8003378:	617b      	str	r3, [r7, #20]
  return result;
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <LL_GPIO_Init+0x2e>
    return 32U;
 8003384:	2320      	movs	r3, #32
 8003386:	e003      	b.n	8003390 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	fab3 f383 	clz	r3, r3
 800338e:	b2db      	uxtb	r3, r3
 8003390:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003392:	e057      	b.n	8003444 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	2101      	movs	r1, #1
 800339a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339c:	fa01 f303 	lsl.w	r3, r1, r3
 80033a0:	4013      	ands	r3, r2
 80033a2:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d049      	beq.n	800343e <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d003      	beq.n	80033ba <LL_GPIO_Init+0x60>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d10d      	bne.n	80033d6 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	461a      	mov	r2, r3
 80033c0:	6a39      	ldr	r1, [r7, #32]
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff fed3 	bl	800316e <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	461a      	mov	r2, r3
 80033ce:	6a39      	ldr	r1, [r7, #32]
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7ff feb4 	bl	800313e <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	461a      	mov	r2, r3
 80033dc:	6a39      	ldr	r1, [r7, #32]
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7ff ff02 	bl	80031e8 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d121      	bne.n	8003430 <LL_GPIO_Init+0xd6>
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	fa93 f3a3 	rbit	r3, r3
 80033f6:	60bb      	str	r3, [r7, #8]
  return result;
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <LL_GPIO_Init+0xac>
    return 32U;
 8003402:	2320      	movs	r3, #32
 8003404:	e003      	b.n	800340e <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	fab3 f383 	clz	r3, r3
 800340c:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800340e:	2b07      	cmp	r3, #7
 8003410:	d807      	bhi.n	8003422 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	461a      	mov	r2, r3
 8003418:	6a39      	ldr	r1, [r7, #32]
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7ff ff21 	bl	8003262 <LL_GPIO_SetAFPin_0_7>
 8003420:	e006      	b.n	8003430 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	461a      	mov	r2, r3
 8003428:	6a39      	ldr	r1, [r7, #32]
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7ff ff56 	bl	80032dc <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	461a      	mov	r2, r3
 8003436:	6a39      	ldr	r1, [r7, #32]
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7ff fe43 	bl	80030c4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800343e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003440:	3301      	adds	r3, #1
 8003442:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344a:	fa22 f303 	lsr.w	r3, r2, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1a0      	bne.n	8003394 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3728      	adds	r7, #40	@ 0x28
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <LL_I2C_Enable>:
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f043 0201 	orr.w	r2, r3, #1
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	601a      	str	r2, [r3, #0]
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <LL_I2C_Disable>:
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f023 0201 	bic.w	r2, r3, #1
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	601a      	str	r2, [r3, #0]
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <LL_I2C_SetOwnAddress1>:
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80034b0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80034b4:	68b9      	ldr	r1, [r7, #8]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	431a      	orrs	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	609a      	str	r2, [r3, #8]
}
 80034c0:	bf00      	nop
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <LL_I2C_ConfigSpeed>:
{
 80034cc:	b480      	push	{r7}
 80034ce:	b087      	sub	sp, #28
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
 80034d8:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 80034de:	2300      	movs	r3, #0
 80034e0:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	4a42      	ldr	r2, [pc, #264]	@ (80035f0 <LL_I2C_ConfigSpeed+0x124>)
 80034e6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ea:	0c9b      	lsrs	r3, r3, #18
 80034ec:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	431a      	orrs	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	493a      	ldr	r1, [pc, #232]	@ (80035f4 <LL_I2C_ConfigSpeed+0x128>)
 800350a:	428b      	cmp	r3, r1
 800350c:	d802      	bhi.n	8003514 <LL_I2C_ConfigSpeed+0x48>
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	3301      	adds	r3, #1
 8003512:	e009      	b.n	8003528 <LL_I2C_ConfigSpeed+0x5c>
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800351a:	fb01 f303 	mul.w	r3, r1, r3
 800351e:	4936      	ldr	r1, [pc, #216]	@ (80035f8 <LL_I2C_ConfigSpeed+0x12c>)
 8003520:	fba1 1303 	umull	r1, r3, r1, r3
 8003524:	099b      	lsrs	r3, r3, #6
 8003526:	3301      	adds	r3, #1
 8003528:	431a      	orrs	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a30      	ldr	r2, [pc, #192]	@ (80035f4 <LL_I2C_ConfigSpeed+0x128>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d939      	bls.n	80035aa <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d117      	bne.n	800356c <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	4613      	mov	r3, r2
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	4413      	add	r3, r2
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	fbb2 f3f3 	udiv	r3, r2, r3
 800354a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800354e:	2b00      	cmp	r3, #0
 8003550:	d009      	beq.n	8003566 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	4413      	add	r3, r2
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003560:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003564:	e01d      	b.n	80035a2 <LL_I2C_ConfigSpeed+0xd6>
 8003566:	f248 0301 	movw	r3, #32769	@ 0x8001
 800356a:	e01a      	b.n	80035a2 <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	009a      	lsls	r2, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	fbb2 f3f3 	udiv	r3, r2, r3
 800357e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00b      	beq.n	800359e <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	4613      	mov	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	009a      	lsls	r2, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003598:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800359c:	e001      	b.n	80035a2 <LL_I2C_ConfigSpeed+0xd6>
 800359e:	f248 0301 	movw	r3, #32769	@ 0x8001
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	e011      	b.n	80035ce <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80035b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80035b8:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d005      	beq.n	80035ca <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c8:	e000      	b.n	80035cc <LL_I2C_ConfigSpeed+0x100>
 80035ca:	2304      	movs	r3, #4
 80035cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	f423 434f 	bic.w	r3, r3, #52992	@ 0xcf00
 80035d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	431a      	orrs	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	61da      	str	r2, [r3, #28]
}
 80035e2:	bf00      	nop
 80035e4:	371c      	adds	r7, #28
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	431bde83 	.word	0x431bde83
 80035f4:	000186a0 	.word	0x000186a0
 80035f8:	10624dd3 	.word	0x10624dd3

080035fc <LL_I2C_SetMode>:
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f023 021a 	bic.w	r2, r3, #26
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	431a      	orrs	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	601a      	str	r2, [r3, #0]
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <LL_I2C_AcknowledgeNextData>:
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
 800362a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	601a      	str	r2, [r3, #0]
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7ff ff12 	bl	800347c <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003658:	f107 0308 	add.w	r3, r7, #8
 800365c:	4618      	mov	r0, r3
 800365e:	f000 f895 	bl	800378c <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8003662:	6939      	ldr	r1, [r7, #16]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7ff ff2d 	bl	80034cc <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	68d9      	ldr	r1, [r3, #12]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	461a      	mov	r2, r3
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff ff0d 	bl	800349c <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4619      	mov	r1, r3
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7ff ffb7 	bl	80035fc <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7ff fee4 	bl	800345c <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	4619      	mov	r1, r3
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7ff ffc1 	bl	8003622 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <LL_RCC_GetSysClkSource>:
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80036b0:	4b04      	ldr	r3, [pc, #16]	@ (80036c4 <LL_RCC_GetSysClkSource+0x18>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 030c 	and.w	r3, r3, #12
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	40023800 	.word	0x40023800

080036c8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80036cc:	4b04      	ldr	r3, [pc, #16]	@ (80036e0 <LL_RCC_GetAHBPrescaler+0x18>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	40023800 	.word	0x40023800

080036e4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80036e8:	4b04      	ldr	r3, [pc, #16]	@ (80036fc <LL_RCC_GetAPB1Prescaler+0x18>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	40023800 	.word	0x40023800

08003700 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003704:	4b04      	ldr	r3, [pc, #16]	@ (8003718 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800370c:	4618      	mov	r0, r3
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	40023800 	.word	0x40023800

0800371c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003720:	4b04      	ldr	r3, [pc, #16]	@ (8003734 <LL_RCC_PLL_GetMainSource+0x18>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8003728:	4618      	mov	r0, r3
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	40023800 	.word	0x40023800

08003738 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800373c:	4b04      	ldr	r3, [pc, #16]	@ (8003750 <LL_RCC_PLL_GetN+0x18>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	099b      	lsrs	r3, r3, #6
 8003742:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003746:	4618      	mov	r0, r3
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	40023800 	.word	0x40023800

08003754 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003758:	4b04      	ldr	r3, [pc, #16]	@ (800376c <LL_RCC_PLL_GetP+0x18>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003760:	4618      	mov	r0, r3
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	40023800 	.word	0x40023800

08003770 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003774:	4b04      	ldr	r3, [pc, #16]	@ (8003788 <LL_RCC_PLL_GetDivider+0x18>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800377c:	4618      	mov	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	40023800 	.word	0x40023800

0800378c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003794:	f000 f820 	bl	80037d8 <RCC_GetSystemClockFreq>
 8003798:	4602      	mov	r2, r0
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 f840 	bl	8003828 <RCC_GetHCLKClockFreq>
 80037a8:	4602      	mov	r2, r0
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 f84e 	bl	8003854 <RCC_GetPCLK1ClockFreq>
 80037b8:	4602      	mov	r2, r0
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 f85a 	bl	800387c <RCC_GetPCLK2ClockFreq>
 80037c8:	4602      	mov	r2, r0
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	60da      	str	r2, [r3, #12]
}
 80037ce:	bf00      	nop
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
	...

080037d8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80037de:	2300      	movs	r3, #0
 80037e0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80037e2:	f7ff ff63 	bl	80036ac <LL_RCC_GetSysClkSource>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d00c      	beq.n	8003806 <RCC_GetSystemClockFreq+0x2e>
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d80f      	bhi.n	8003810 <RCC_GetSystemClockFreq+0x38>
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <RCC_GetSystemClockFreq+0x22>
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d003      	beq.n	8003800 <RCC_GetSystemClockFreq+0x28>
 80037f8:	e00a      	b.n	8003810 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80037fa:	4b09      	ldr	r3, [pc, #36]	@ (8003820 <RCC_GetSystemClockFreq+0x48>)
 80037fc:	607b      	str	r3, [r7, #4]
      break;
 80037fe:	e00a      	b.n	8003816 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003800:	4b08      	ldr	r3, [pc, #32]	@ (8003824 <RCC_GetSystemClockFreq+0x4c>)
 8003802:	607b      	str	r3, [r7, #4]
      break;
 8003804:	e007      	b.n	8003816 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003806:	2008      	movs	r0, #8
 8003808:	f000 f84c 	bl	80038a4 <RCC_PLL_GetFreqDomain_SYS>
 800380c:	6078      	str	r0, [r7, #4]
      break;
 800380e:	e002      	b.n	8003816 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003810:	4b03      	ldr	r3, [pc, #12]	@ (8003820 <RCC_GetSystemClockFreq+0x48>)
 8003812:	607b      	str	r3, [r7, #4]
      break;
 8003814:	bf00      	nop
  }

  return frequency;
 8003816:	687b      	ldr	r3, [r7, #4]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	00f42400 	.word	0x00f42400
 8003824:	007a1200 	.word	0x007a1200

08003828 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003830:	f7ff ff4a 	bl	80036c8 <LL_RCC_GetAHBPrescaler>
 8003834:	4603      	mov	r3, r0
 8003836:	091b      	lsrs	r3, r3, #4
 8003838:	f003 030f 	and.w	r3, r3, #15
 800383c:	4a04      	ldr	r2, [pc, #16]	@ (8003850 <RCC_GetHCLKClockFreq+0x28>)
 800383e:	5cd3      	ldrb	r3, [r2, r3]
 8003840:	461a      	mov	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	40d3      	lsrs	r3, r2
}
 8003846:	4618      	mov	r0, r3
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	0800491c 	.word	0x0800491c

08003854 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800385c:	f7ff ff42 	bl	80036e4 <LL_RCC_GetAPB1Prescaler>
 8003860:	4603      	mov	r3, r0
 8003862:	0a9b      	lsrs	r3, r3, #10
 8003864:	4a04      	ldr	r2, [pc, #16]	@ (8003878 <RCC_GetPCLK1ClockFreq+0x24>)
 8003866:	5cd3      	ldrb	r3, [r2, r3]
 8003868:	461a      	mov	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	40d3      	lsrs	r3, r2
}
 800386e:	4618      	mov	r0, r3
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	0800492c 	.word	0x0800492c

0800387c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003884:	f7ff ff3c 	bl	8003700 <LL_RCC_GetAPB2Prescaler>
 8003888:	4603      	mov	r3, r0
 800388a:	0b5b      	lsrs	r3, r3, #13
 800388c:	4a04      	ldr	r2, [pc, #16]	@ (80038a0 <RCC_GetPCLK2ClockFreq+0x24>)
 800388e:	5cd3      	ldrb	r3, [r2, r3]
 8003890:	461a      	mov	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	40d3      	lsrs	r3, r2
}
 8003896:	4618      	mov	r0, r3
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	0800492c 	.word	0x0800492c

080038a4 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80038a4:	b590      	push	{r4, r7, lr}
 80038a6:	b087      	sub	sp, #28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80038b8:	f7ff ff30 	bl	800371c <LL_RCC_PLL_GetMainSource>
 80038bc:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d004      	beq.n	80038ce <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038ca:	d003      	beq.n	80038d4 <RCC_PLL_GetFreqDomain_SYS+0x30>
 80038cc:	e005      	b.n	80038da <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80038ce:	4b12      	ldr	r3, [pc, #72]	@ (8003918 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80038d0:	617b      	str	r3, [r7, #20]
      break;
 80038d2:	e005      	b.n	80038e0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80038d4:	4b11      	ldr	r3, [pc, #68]	@ (800391c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80038d6:	617b      	str	r3, [r7, #20]
      break;
 80038d8:	e002      	b.n	80038e0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80038da:	4b0f      	ldr	r3, [pc, #60]	@ (8003918 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80038dc:	617b      	str	r3, [r7, #20]
      break;
 80038de:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b08      	cmp	r3, #8
 80038e4:	d113      	bne.n	800390e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80038e6:	f7ff ff43 	bl	8003770 <LL_RCC_PLL_GetDivider>
 80038ea:	4602      	mov	r2, r0
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	fbb3 f4f2 	udiv	r4, r3, r2
 80038f2:	f7ff ff21 	bl	8003738 <LL_RCC_PLL_GetN>
 80038f6:	4603      	mov	r3, r0
 80038f8:	fb03 f404 	mul.w	r4, r3, r4
 80038fc:	f7ff ff2a 	bl	8003754 <LL_RCC_PLL_GetP>
 8003900:	4603      	mov	r3, r0
 8003902:	0c1b      	lsrs	r3, r3, #16
 8003904:	3301      	adds	r3, #1
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	fbb4 f3f3 	udiv	r3, r4, r3
 800390c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800390e:	693b      	ldr	r3, [r7, #16]
}
 8003910:	4618      	mov	r0, r3
 8003912:	371c      	adds	r7, #28
 8003914:	46bd      	mov	sp, r7
 8003916:	bd90      	pop	{r4, r7, pc}
 8003918:	00f42400 	.word	0x00f42400
 800391c:	007a1200 	.word	0x007a1200

08003920 <LL_SPI_IsEnabled>:
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003930:	2b40      	cmp	r3, #64	@ 0x40
 8003932:	d101      	bne.n	8003938 <LL_SPI_IsEnabled+0x18>
 8003934:	2301      	movs	r3, #1
 8003936:	e000      	b.n	800393a <LL_SPI_IsEnabled+0x1a>
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <LL_SPI_SetCRCPolynomial>:
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
 800394e:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	b29b      	uxth	r3, r3
 8003954:	461a      	mov	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	611a      	str	r2, [r3, #16]
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b084      	sub	sp, #16
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff ffd3 	bl	8003920 <LL_SPI_IsEnabled>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d139      	bne.n	80039f4 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003988:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	6811      	ldr	r1, [r2, #0]
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	6852      	ldr	r2, [r2, #4]
 8003994:	4311      	orrs	r1, r2
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	6892      	ldr	r2, [r2, #8]
 800399a:	4311      	orrs	r1, r2
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	68d2      	ldr	r2, [r2, #12]
 80039a0:	4311      	orrs	r1, r2
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	6912      	ldr	r2, [r2, #16]
 80039a6:	4311      	orrs	r1, r2
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	6952      	ldr	r2, [r2, #20]
 80039ac:	4311      	orrs	r1, r2
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	6992      	ldr	r2, [r2, #24]
 80039b2:	4311      	orrs	r1, r2
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	69d2      	ldr	r2, [r2, #28]
 80039b8:	4311      	orrs	r1, r2
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	6a12      	ldr	r2, [r2, #32]
 80039be:	430a      	orrs	r2, r1
 80039c0:	431a      	orrs	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f023 0204 	bic.w	r2, r3, #4
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	0c1b      	lsrs	r3, r3, #16
 80039d4:	431a      	orrs	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039e2:	d105      	bne.n	80039f0 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e8:	4619      	mov	r1, r3
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7ff ffab 	bl	8003946 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80039f0:	2300      	movs	r3, #0
 80039f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	61da      	str	r2, [r3, #28]
  return status;
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <LL_USART_IsEnabled>:
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a1e:	bf0c      	ite	eq
 8003a20:	2301      	moveq	r3, #1
 8003a22:	2300      	movne	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <LL_USART_SetStopBitsLength>:
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
 8003a3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	611a      	str	r2, [r3, #16]
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <LL_USART_SetHWFlowCtrl>:
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	615a      	str	r2, [r3, #20]
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
	...

08003a80 <LL_USART_SetBaudRate>:
{
 8003a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a84:	b0c0      	sub	sp, #256	@ 0x100
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003a8c:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8003a90:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8003a94:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003aa0:	f040 810c 	bne.w	8003cbc <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003aa4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003aae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003ab2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003ab6:	4622      	mov	r2, r4
 8003ab8:	462b      	mov	r3, r5
 8003aba:	1891      	adds	r1, r2, r2
 8003abc:	6639      	str	r1, [r7, #96]	@ 0x60
 8003abe:	415b      	adcs	r3, r3
 8003ac0:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ac2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8003ac6:	4621      	mov	r1, r4
 8003ac8:	eb12 0801 	adds.w	r8, r2, r1
 8003acc:	4629      	mov	r1, r5
 8003ace:	eb43 0901 	adc.w	r9, r3, r1
 8003ad2:	f04f 0200 	mov.w	r2, #0
 8003ad6:	f04f 0300 	mov.w	r3, #0
 8003ada:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ade:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ae2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ae6:	4690      	mov	r8, r2
 8003ae8:	4699      	mov	r9, r3
 8003aea:	4623      	mov	r3, r4
 8003aec:	eb18 0303 	adds.w	r3, r8, r3
 8003af0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003af4:	462b      	mov	r3, r5
 8003af6:	eb49 0303 	adc.w	r3, r9, r3
 8003afa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003afe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003b02:	2200      	movs	r2, #0
 8003b04:	469a      	mov	sl, r3
 8003b06:	4693      	mov	fp, r2
 8003b08:	eb1a 030a 	adds.w	r3, sl, sl
 8003b0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b0e:	eb4b 030b 	adc.w	r3, fp, fp
 8003b12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b14:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003b1c:	f7fc fbb6 	bl	800028c <__aeabi_uldivmod>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4b64      	ldr	r3, [pc, #400]	@ (8003cb8 <LL_USART_SetBaudRate+0x238>)
 8003b26:	fba3 2302 	umull	r2, r3, r3, r2
 8003b2a:	095b      	lsrs	r3, r3, #5
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	b29c      	uxth	r4, r3
 8003b32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003b36:	2200      	movs	r2, #0
 8003b38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b3c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003b40:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8003b44:	4642      	mov	r2, r8
 8003b46:	464b      	mov	r3, r9
 8003b48:	1891      	adds	r1, r2, r2
 8003b4a:	6539      	str	r1, [r7, #80]	@ 0x50
 8003b4c:	415b      	adcs	r3, r3
 8003b4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003b54:	4641      	mov	r1, r8
 8003b56:	1851      	adds	r1, r2, r1
 8003b58:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003b5a:	4649      	mov	r1, r9
 8003b5c:	414b      	adcs	r3, r1
 8003b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b60:	f04f 0200 	mov.w	r2, #0
 8003b64:	f04f 0300 	mov.w	r3, #0
 8003b68:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8003b6c:	4659      	mov	r1, fp
 8003b6e:	00cb      	lsls	r3, r1, #3
 8003b70:	4651      	mov	r1, sl
 8003b72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b76:	4651      	mov	r1, sl
 8003b78:	00ca      	lsls	r2, r1, #3
 8003b7a:	4610      	mov	r0, r2
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	4603      	mov	r3, r0
 8003b80:	4642      	mov	r2, r8
 8003b82:	189b      	adds	r3, r3, r2
 8003b84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b88:	464b      	mov	r3, r9
 8003b8a:	460a      	mov	r2, r1
 8003b8c:	eb42 0303 	adc.w	r3, r2, r3
 8003b90:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003b94:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b9e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8003ba2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	18db      	adds	r3, r3, r3
 8003baa:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bac:	4613      	mov	r3, r2
 8003bae:	eb42 0303 	adc.w	r3, r2, r3
 8003bb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bb4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003bb8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8003bbc:	f7fc fb66 	bl	800028c <__aeabi_uldivmod>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	4611      	mov	r1, r2
 8003bc6:	4b3c      	ldr	r3, [pc, #240]	@ (8003cb8 <LL_USART_SetBaudRate+0x238>)
 8003bc8:	fba3 2301 	umull	r2, r3, r3, r1
 8003bcc:	095b      	lsrs	r3, r3, #5
 8003bce:	2264      	movs	r2, #100	@ 0x64
 8003bd0:	fb02 f303 	mul.w	r3, r2, r3
 8003bd4:	1acb      	subs	r3, r1, r3
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003bdc:	4b36      	ldr	r3, [pc, #216]	@ (8003cb8 <LL_USART_SetBaudRate+0x238>)
 8003bde:	fba3 2302 	umull	r2, r3, r3, r2
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	4423      	add	r3, r4
 8003bf2:	b29c      	uxth	r4, r3
 8003bf4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bfe:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003c02:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8003c06:	4642      	mov	r2, r8
 8003c08:	464b      	mov	r3, r9
 8003c0a:	1891      	adds	r1, r2, r2
 8003c0c:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c0e:	415b      	adcs	r3, r3
 8003c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c12:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003c16:	4641      	mov	r1, r8
 8003c18:	1851      	adds	r1, r2, r1
 8003c1a:	6339      	str	r1, [r7, #48]	@ 0x30
 8003c1c:	4649      	mov	r1, r9
 8003c1e:	414b      	adcs	r3, r1
 8003c20:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c22:	f04f 0200 	mov.w	r2, #0
 8003c26:	f04f 0300 	mov.w	r3, #0
 8003c2a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003c2e:	4659      	mov	r1, fp
 8003c30:	00cb      	lsls	r3, r1, #3
 8003c32:	4651      	mov	r1, sl
 8003c34:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c38:	4651      	mov	r1, sl
 8003c3a:	00ca      	lsls	r2, r1, #3
 8003c3c:	4610      	mov	r0, r2
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4603      	mov	r3, r0
 8003c42:	4642      	mov	r2, r8
 8003c44:	189b      	adds	r3, r3, r2
 8003c46:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c4a:	464b      	mov	r3, r9
 8003c4c:	460a      	mov	r2, r1
 8003c4e:	eb42 0303 	adc.w	r3, r2, r3
 8003c52:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003c56:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c60:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8003c64:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	18db      	adds	r3, r3, r3
 8003c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c6e:	4613      	mov	r3, r2
 8003c70:	eb42 0303 	adc.w	r3, r2, r3
 8003c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c7a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8003c7e:	f7fc fb05 	bl	800028c <__aeabi_uldivmod>
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	4b0c      	ldr	r3, [pc, #48]	@ (8003cb8 <LL_USART_SetBaudRate+0x238>)
 8003c88:	fba3 1302 	umull	r1, r3, r3, r2
 8003c8c:	095b      	lsrs	r3, r3, #5
 8003c8e:	2164      	movs	r1, #100	@ 0x64
 8003c90:	fb01 f303 	mul.w	r3, r1, r3
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	3332      	adds	r3, #50	@ 0x32
 8003c9a:	4a07      	ldr	r2, [pc, #28]	@ (8003cb8 <LL_USART_SetBaudRate+0x238>)
 8003c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca0:	095b      	lsrs	r3, r3, #5
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	4423      	add	r3, r4
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	461a      	mov	r2, r3
 8003cb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cb4:	609a      	str	r2, [r3, #8]
}
 8003cb6:	e108      	b.n	8003eca <LL_USART_SetBaudRate+0x44a>
 8003cb8:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003cbc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003cc6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003cca:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8003cce:	4642      	mov	r2, r8
 8003cd0:	464b      	mov	r3, r9
 8003cd2:	1891      	adds	r1, r2, r2
 8003cd4:	6239      	str	r1, [r7, #32]
 8003cd6:	415b      	adcs	r3, r3
 8003cd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cde:	4641      	mov	r1, r8
 8003ce0:	1854      	adds	r4, r2, r1
 8003ce2:	4649      	mov	r1, r9
 8003ce4:	eb43 0501 	adc.w	r5, r3, r1
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	f04f 0300 	mov.w	r3, #0
 8003cf0:	00eb      	lsls	r3, r5, #3
 8003cf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cf6:	00e2      	lsls	r2, r4, #3
 8003cf8:	4614      	mov	r4, r2
 8003cfa:	461d      	mov	r5, r3
 8003cfc:	4643      	mov	r3, r8
 8003cfe:	18e3      	adds	r3, r4, r3
 8003d00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d04:	464b      	mov	r3, r9
 8003d06:	eb45 0303 	adc.w	r3, r5, r3
 8003d0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003d0e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003d12:	2200      	movs	r2, #0
 8003d14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d18:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	f04f 0300 	mov.w	r3, #0
 8003d24:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8003d28:	4629      	mov	r1, r5
 8003d2a:	008b      	lsls	r3, r1, #2
 8003d2c:	4621      	mov	r1, r4
 8003d2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d32:	4621      	mov	r1, r4
 8003d34:	008a      	lsls	r2, r1, #2
 8003d36:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8003d3a:	f7fc faa7 	bl	800028c <__aeabi_uldivmod>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	460b      	mov	r3, r1
 8003d42:	4b65      	ldr	r3, [pc, #404]	@ (8003ed8 <LL_USART_SetBaudRate+0x458>)
 8003d44:	fba3 2302 	umull	r2, r3, r3, r2
 8003d48:	095b      	lsrs	r3, r3, #5
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	011b      	lsls	r3, r3, #4
 8003d4e:	b29c      	uxth	r4, r3
 8003d50:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d54:	2200      	movs	r2, #0
 8003d56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d5e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8003d62:	4642      	mov	r2, r8
 8003d64:	464b      	mov	r3, r9
 8003d66:	1891      	adds	r1, r2, r2
 8003d68:	61b9      	str	r1, [r7, #24]
 8003d6a:	415b      	adcs	r3, r3
 8003d6c:	61fb      	str	r3, [r7, #28]
 8003d6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d72:	4641      	mov	r1, r8
 8003d74:	1851      	adds	r1, r2, r1
 8003d76:	6139      	str	r1, [r7, #16]
 8003d78:	4649      	mov	r1, r9
 8003d7a:	414b      	adcs	r3, r1
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	f04f 0300 	mov.w	r3, #0
 8003d86:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d8a:	4659      	mov	r1, fp
 8003d8c:	00cb      	lsls	r3, r1, #3
 8003d8e:	4651      	mov	r1, sl
 8003d90:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d94:	4651      	mov	r1, sl
 8003d96:	00ca      	lsls	r2, r1, #3
 8003d98:	4610      	mov	r0, r2
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	4642      	mov	r2, r8
 8003da0:	189b      	adds	r3, r3, r2
 8003da2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003da6:	464b      	mov	r3, r9
 8003da8:	460a      	mov	r2, r1
 8003daa:	eb42 0303 	adc.w	r3, r2, r3
 8003dae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003db2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003db6:	2200      	movs	r2, #0
 8003db8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003dbc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003dc0:	f04f 0200 	mov.w	r2, #0
 8003dc4:	f04f 0300 	mov.w	r3, #0
 8003dc8:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8003dcc:	4649      	mov	r1, r9
 8003dce:	008b      	lsls	r3, r1, #2
 8003dd0:	4641      	mov	r1, r8
 8003dd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dd6:	4641      	mov	r1, r8
 8003dd8:	008a      	lsls	r2, r1, #2
 8003dda:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8003dde:	f7fc fa55 	bl	800028c <__aeabi_uldivmod>
 8003de2:	4602      	mov	r2, r0
 8003de4:	460b      	mov	r3, r1
 8003de6:	4611      	mov	r1, r2
 8003de8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ed8 <LL_USART_SetBaudRate+0x458>)
 8003dea:	fba3 2301 	umull	r2, r3, r3, r1
 8003dee:	095b      	lsrs	r3, r3, #5
 8003df0:	2264      	movs	r2, #100	@ 0x64
 8003df2:	fb02 f303 	mul.w	r3, r2, r3
 8003df6:	1acb      	subs	r3, r1, r3
 8003df8:	011b      	lsls	r3, r3, #4
 8003dfa:	3332      	adds	r3, #50	@ 0x32
 8003dfc:	4a36      	ldr	r2, [pc, #216]	@ (8003ed8 <LL_USART_SetBaudRate+0x458>)
 8003dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003e02:	095b      	lsrs	r3, r3, #5
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	4423      	add	r3, r4
 8003e0e:	b29c      	uxth	r4, r3
 8003e10:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e14:	2200      	movs	r2, #0
 8003e16:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e18:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003e1a:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003e1e:	4642      	mov	r2, r8
 8003e20:	464b      	mov	r3, r9
 8003e22:	1891      	adds	r1, r2, r2
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	415b      	adcs	r3, r3
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e2e:	4641      	mov	r1, r8
 8003e30:	1851      	adds	r1, r2, r1
 8003e32:	6039      	str	r1, [r7, #0]
 8003e34:	4649      	mov	r1, r9
 8003e36:	414b      	adcs	r3, r1
 8003e38:	607b      	str	r3, [r7, #4]
 8003e3a:	f04f 0200 	mov.w	r2, #0
 8003e3e:	f04f 0300 	mov.w	r3, #0
 8003e42:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e46:	4659      	mov	r1, fp
 8003e48:	00cb      	lsls	r3, r1, #3
 8003e4a:	4651      	mov	r1, sl
 8003e4c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e50:	4651      	mov	r1, sl
 8003e52:	00ca      	lsls	r2, r1, #3
 8003e54:	4610      	mov	r0, r2
 8003e56:	4619      	mov	r1, r3
 8003e58:	4603      	mov	r3, r0
 8003e5a:	4642      	mov	r2, r8
 8003e5c:	189b      	adds	r3, r3, r2
 8003e5e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e60:	464b      	mov	r3, r9
 8003e62:	460a      	mov	r2, r1
 8003e64:	eb42 0303 	adc.w	r3, r2, r3
 8003e68:	677b      	str	r3, [r7, #116]	@ 0x74
 8003e6a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003e6e:	2200      	movs	r2, #0
 8003e70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8003e80:	4649      	mov	r1, r9
 8003e82:	008b      	lsls	r3, r1, #2
 8003e84:	4641      	mov	r1, r8
 8003e86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e8a:	4641      	mov	r1, r8
 8003e8c:	008a      	lsls	r2, r1, #2
 8003e8e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003e92:	f7fc f9fb 	bl	800028c <__aeabi_uldivmod>
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8003ed8 <LL_USART_SetBaudRate+0x458>)
 8003e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003ea0:	095b      	lsrs	r3, r3, #5
 8003ea2:	2164      	movs	r1, #100	@ 0x64
 8003ea4:	fb01 f303 	mul.w	r3, r1, r3
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	011b      	lsls	r3, r3, #4
 8003eac:	3332      	adds	r3, #50	@ 0x32
 8003eae:	4a0a      	ldr	r2, [pc, #40]	@ (8003ed8 <LL_USART_SetBaudRate+0x458>)
 8003eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb4:	095b      	lsrs	r3, r3, #5
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	f003 030f 	and.w	r3, r3, #15
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	4423      	add	r3, r4
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ec8:	609a      	str	r2, [r3, #8]
}
 8003eca:	bf00      	nop
 8003ecc:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ed6:	bf00      	nop
 8003ed8:	51eb851f 	.word	0x51eb851f

08003edc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b088      	sub	sp, #32
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003eea:	2300      	movs	r3, #0
 8003eec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7ff fd8b 	bl	8003a0a <LL_USART_IsEnabled>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d15e      	bne.n	8003fb8 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003f02:	f023 030c 	bic.w	r3, r3, #12
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	6851      	ldr	r1, [r2, #4]
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	68d2      	ldr	r2, [r2, #12]
 8003f0e:	4311      	orrs	r1, r2
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	6912      	ldr	r2, [r2, #16]
 8003f14:	4311      	orrs	r1, r2
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	6992      	ldr	r2, [r2, #24]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	4619      	mov	r1, r3
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff fd82 	bl	8003a32 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	4619      	mov	r1, r3
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f7ff fd8f 	bl	8003a58 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003f3a:	f107 0308 	add.w	r3, r7, #8
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff fc24 	bl	800378c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a1f      	ldr	r2, [pc, #124]	@ (8003fc4 <LL_USART_Init+0xe8>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d102      	bne.n	8003f52 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	61bb      	str	r3, [r7, #24]
 8003f50:	e021      	b.n	8003f96 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a1c      	ldr	r2, [pc, #112]	@ (8003fc8 <LL_USART_Init+0xec>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d102      	bne.n	8003f60 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	61bb      	str	r3, [r7, #24]
 8003f5e:	e01a      	b.n	8003f96 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a1a      	ldr	r2, [pc, #104]	@ (8003fcc <LL_USART_Init+0xf0>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d102      	bne.n	8003f6e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	61bb      	str	r3, [r7, #24]
 8003f6c:	e013      	b.n	8003f96 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a17      	ldr	r2, [pc, #92]	@ (8003fd0 <LL_USART_Init+0xf4>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d102      	bne.n	8003f7c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	61bb      	str	r3, [r7, #24]
 8003f7a:	e00c      	b.n	8003f96 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a15      	ldr	r2, [pc, #84]	@ (8003fd4 <LL_USART_Init+0xf8>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d102      	bne.n	8003f8a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	61bb      	str	r3, [r7, #24]
 8003f88:	e005      	b.n	8003f96 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a12      	ldr	r2, [pc, #72]	@ (8003fd8 <LL_USART_Init+0xfc>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d101      	bne.n	8003f96 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00d      	beq.n	8003fb8 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d009      	beq.n	8003fb8 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8003fb0:	69b9      	ldr	r1, [r7, #24]
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7ff fd64 	bl	8003a80 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003fb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3720      	adds	r7, #32
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40011000 	.word	0x40011000
 8003fc8:	40004400 	.word	0x40004400
 8003fcc:	40004800 	.word	0x40004800
 8003fd0:	40011400 	.word	0x40011400
 8003fd4:	40004c00 	.word	0x40004c00
 8003fd8:	40005000 	.word	0x40005000

08003fdc <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fee:	4a07      	ldr	r2, [pc, #28]	@ (800400c <LL_InitTick+0x30>)
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003ff4:	4b05      	ldr	r3, [pc, #20]	@ (800400c <LL_InitTick+0x30>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ffa:	4b04      	ldr	r3, [pc, #16]	@ (800400c <LL_InitTick+0x30>)
 8003ffc:	2205      	movs	r2, #5
 8003ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	e000e010 	.word	0xe000e010

08004010 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8004018:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f7ff ffdd 	bl	8003fdc <LL_InitTick>
}
 8004022:	bf00      	nop
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004034:	4b0f      	ldr	r3, [pc, #60]	@ (8004074 <LL_mDelay+0x48>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800403a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004042:	d00c      	beq.n	800405e <LL_mDelay+0x32>
  {
    Delay++;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3301      	adds	r3, #1
 8004048:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800404a:	e008      	b.n	800405e <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800404c:	4b09      	ldr	r3, [pc, #36]	@ (8004074 <LL_mDelay+0x48>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d002      	beq.n	800405e <LL_mDelay+0x32>
    {
      Delay--;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3b01      	subs	r3, #1
 800405c:	607b      	str	r3, [r7, #4]
  while (Delay)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1f3      	bne.n	800404c <LL_mDelay+0x20>
    }
  }
}
 8004064:	bf00      	nop
 8004066:	bf00      	nop
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	e000e010 	.word	0xe000e010

08004078 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004080:	4a04      	ldr	r2, [pc, #16]	@ (8004094 <LL_SetSystemCoreClock+0x1c>)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6013      	str	r3, [r2, #0]
}
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	2000014c 	.word	0x2000014c

08004098 <SCH_Initialize>:
  * @param  None
  * @retval None
  *****************************************************************************/

void SCH_Initialize(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  s_SystemTick = RESET;
 800409c:	4b0d      	ldr	r3, [pc, #52]	@ (80040d4 <SCH_Initialize+0x3c>)
 800409e:	2200      	movs	r2, #0
 80040a0:	601a      	str	r2, [r3, #0]
  s_NumOfTaskScheduled = RESET;
 80040a2:	4b0d      	ldr	r3, [pc, #52]	@ (80040d8 <SCH_Initialize+0x40>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	701a      	strb	r2, [r3, #0]
  s_NumOfTimers = RESET;
 80040a8:	4b0c      	ldr	r3, [pc, #48]	@ (80040dc <SCH_Initialize+0x44>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	701a      	strb	r2, [r3, #0]

  // Initial Scheduler Context
  memset((uint8_t*)&s_TaskContext[0], RESET, (sizeof(SCH_TaskContextTypedef) * MAX_TASK));
 80040ae:	22f0      	movs	r2, #240	@ 0xf0
 80040b0:	2100      	movs	r1, #0
 80040b2:	480b      	ldr	r0, [pc, #44]	@ (80040e0 <SCH_Initialize+0x48>)
 80040b4:	f000 fa02 	bl	80044bc <memset>
  memset((uint8_t*)&s_TimerContext[0], RESET, (sizeof(SCH_TimerContextTypedef) * MAX_TIMERS));
 80040b8:	22f0      	movs	r2, #240	@ 0xf0
 80040ba:	2100      	movs	r1, #0
 80040bc:	4809      	ldr	r0, [pc, #36]	@ (80040e4 <SCH_Initialize+0x4c>)
 80040be:	f000 f9fd 	bl	80044bc <memset>
  memset((uint8_t*)&s_SoftTimers[0], RESET, (sizeof(uint32_t) * SCH_TIM_LAST));
 80040c2:	2228      	movs	r2, #40	@ 0x28
 80040c4:	2100      	movs	r1, #0
 80040c6:	4808      	ldr	r0, [pc, #32]	@ (80040e8 <SCH_Initialize+0x50>)
 80040c8:	f000 f9f8 	bl	80044bc <memset>

    // Initialize Scheduler context
  systick_timer_init();
 80040cc:	f7fc fc2c 	bl	8000928 <systick_timer_init>
}
 80040d0:	bf00      	nop
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	200004d4 	.word	0x200004d4
 80040d8:	200003dc 	.word	0x200003dc
 80040dc:	200004d0 	.word	0x200004d0
 80040e0:	200002ec 	.word	0x200002ec
 80040e4:	200003e0 	.word	0x200003e0
 80040e8:	200004d8 	.word	0x200004d8

080040ec <SCH_TIM_Start>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  *         const uint32_t timeInMs - time in mSec
  * @retval None
  *****************************************************************************/
void SCH_TIM_Start(const SCH_SoftTimerTypedef timer, const uint32_t timeInMs)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	4603      	mov	r3, r0
 80040f4:	6039      	str	r1, [r7, #0]
 80040f6:	71fb      	strb	r3, [r7, #7]
  if(timer < SCH_TIM_LAST)
 80040f8:	79fb      	ldrb	r3, [r7, #7]
 80040fa:	2b09      	cmp	r3, #9
 80040fc:	d804      	bhi.n	8004108 <SCH_TIM_Start+0x1c>
  {
	//s_SoftTimers[timer] = timeInMs + s_SystemTick;
    s_SoftTimers[timer] = timeInMs;
 80040fe:	79fb      	ldrb	r3, [r7, #7]
 8004100:	4904      	ldr	r1, [pc, #16]	@ (8004114 <SCH_TIM_Start+0x28>)
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	200004d8 	.word	0x200004d8

08004118 <SCH_TIM_HasCompleted>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  * @retval TRUE / FALSE
  *****************************************************************************/

uint16_t SCH_TIM_HasCompleted(const SCH_SoftTimerTypedef timer)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	4603      	mov	r3, r0
 8004120:	71fb      	strb	r3, [r7, #7]
  return (s_SoftTimers[timer] == 0 ? 1:0 ) ;
 8004122:	79fb      	ldrb	r3, [r7, #7]
 8004124:	4a06      	ldr	r2, [pc, #24]	@ (8004140 <SCH_TIM_HasCompleted+0x28>)
 8004126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800412a:	2b00      	cmp	r3, #0
 800412c:	bf0c      	ite	eq
 800412e:	2301      	moveq	r3, #1
 8004130:	2300      	movne	r3, #0
 8004132:	b2db      	uxtb	r3, r3
}
 8004134:	4618      	mov	r0, r3
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	200004d8 	.word	0x200004d8

08004144 <SCH_TASK_CreateTask>:
  * @param  SCH_TASK_HANDLE* pHandle - pointer to task handle
  *         SCH_TaskPropertyTypedef* pTaskProperty - pointer to task property
  * @retval status
  *****************************************************************************/
t_Status SCH_TASK_CreateTask(SCH_TASK_HANDLE* pHandle, SCH_TaskPropertyTypedef* pTaskProperty)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  t_Status                      status = STS_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	73fb      	strb	r3, [r7, #15]

  // make sure that we have valid parameters
  if((pHandle) && (pTaskProperty))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d029      	beq.n	80041ac <SCH_TASK_CreateTask+0x68>
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d026      	beq.n	80041ac <SCH_TASK_CreateTask+0x68>
  {
    // Check for number of task defined
    if(s_NumOfTaskScheduled < (MAX_TASK - 1))
 800415e:	4b17      	ldr	r3, [pc, #92]	@ (80041bc <SCH_TASK_CreateTask+0x78>)
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	2b12      	cmp	r3, #18
 8004164:	d822      	bhi.n	80041ac <SCH_TASK_CreateTask+0x68>
    {
      SCH_TaskContextTypedef* pTaskContext = &s_TaskContext[s_NumOfTaskScheduled];
 8004166:	4b15      	ldr	r3, [pc, #84]	@ (80041bc <SCH_TASK_CreateTask+0x78>)
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	461a      	mov	r2, r3
 800416c:	4613      	mov	r3, r2
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	4413      	add	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4a12      	ldr	r2, [pc, #72]	@ (80041c0 <SCH_TASK_CreateTask+0x7c>)
 8004176:	4413      	add	r3, r2
 8004178:	60bb      	str	r3, [r7, #8]
      // get task context
      // memcpy((uint8_t*)pTaskContext->pTaskProperty, (uint8_t*)pTaskProperty, sizeof(SCH_TaskPropertyTypedef));
      pTaskContext->pTaskProperty = pTaskProperty;
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	609a      	str	r2, [r3, #8]
      // Make sure we are initializing other members of task context
      pTaskContext->taskFlag = FALSE;
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2200      	movs	r2, #0
 8004184:	805a      	strh	r2, [r3, #2]
      pTaskContext->taskTick = pTaskProperty->taskTick;;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	68da      	ldr	r2, [r3, #12]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	605a      	str	r2, [r3, #4]
      // Put task in Ready State
      pTaskContext->taskState = TASK_StateReady;
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	2201      	movs	r2, #1
 8004192:	701a      	strb	r2, [r3, #0]

      // Give Task Handle back to caller
      *pHandle = s_NumOfTaskScheduled;
 8004194:	4b09      	ldr	r3, [pc, #36]	@ (80041bc <SCH_TASK_CreateTask+0x78>)
 8004196:	781a      	ldrb	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	701a      	strb	r2, [r3, #0]

      s_NumOfTaskScheduled++;
 800419c:	4b07      	ldr	r3, [pc, #28]	@ (80041bc <SCH_TASK_CreateTask+0x78>)
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	3301      	adds	r3, #1
 80041a2:	b2da      	uxtb	r2, r3
 80041a4:	4b05      	ldr	r3, [pc, #20]	@ (80041bc <SCH_TASK_CreateTask+0x78>)
 80041a6:	701a      	strb	r2, [r3, #0]
      // We were able to register task with schedular
      status = STS_DONE;
 80041a8:	2300      	movs	r3, #0
 80041aa:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	200003dc 	.word	0x200003dc
 80041c0:	200002ec 	.word	0x200002ec

080041c4 <SCH_RunSystemTickTimer>:
  * @brief  Function handles system tick timer
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_RunSystemTickTimer(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // Increment System Tick counter

  s_SystemTick++;
 80041ca:	4b42      	ldr	r3, [pc, #264]	@ (80042d4 <SCH_RunSystemTickTimer+0x110>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3301      	adds	r3, #1
 80041d0:	4a40      	ldr	r2, [pc, #256]	@ (80042d4 <SCH_RunSystemTickTimer+0x110>)
 80041d2:	6013      	str	r3, [r2, #0]
//  if(s_SystemTick > 100000){
//	  LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_15);
//  }
  // Check Status of other Periodic Task
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 80041d4:	2300      	movs	r3, #0
 80041d6:	73fb      	strb	r3, [r7, #15]
 80041d8:	e025      	b.n	8004226 <SCH_RunSystemTickTimer+0x62>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 80041da:	7bfa      	ldrb	r2, [r7, #15]
 80041dc:	4613      	mov	r3, r2
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	4413      	add	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4a3c      	ldr	r2, [pc, #240]	@ (80042d8 <SCH_RunSystemTickTimer+0x114>)
 80041e6:	4413      	add	r3, r2
 80041e8:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((SCH_TASK_SYNC == pTaskContext->pTaskProperty->taskType) && (TASK_StateReady == pTaskContext->taskState))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d115      	bne.n	8004220 <SCH_RunSystemTickTimer+0x5c>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d111      	bne.n	8004220 <SCH_RunSystemTickTimer+0x5c>
    {
      // Increment task tick
      pTaskContext->taskTick += 1;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	1c5a      	adds	r2, r3, #1
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTaskContext->taskTick >= pTaskContext->pTaskProperty->taskPeriodInMS)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	429a      	cmp	r2, r3
 8004212:	d305      	bcc.n	8004220 <SCH_RunSystemTickTimer+0x5c>
      {
        // Yes
        // Reset Task tick timer
        pTaskContext->taskTick = RESET;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	605a      	str	r2, [r3, #4]
        // Enable Flag
        pTaskContext->taskFlag = TRUE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	805a      	strh	r2, [r3, #2]
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8004220:	7bfb      	ldrb	r3, [r7, #15]
 8004222:	3301      	adds	r3, #1
 8004224:	73fb      	strb	r3, [r7, #15]
 8004226:	4b2d      	ldr	r3, [pc, #180]	@ (80042dc <SCH_RunSystemTickTimer+0x118>)
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	7bfa      	ldrb	r2, [r7, #15]
 800422c:	429a      	cmp	r2, r3
 800422e:	d3d4      	bcc.n	80041da <SCH_RunSystemTickTimer+0x16>
      }
    }
  }

  // Check Status of other Periodic Task
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8004230:	2300      	movs	r3, #0
 8004232:	73bb      	strb	r3, [r7, #14]
 8004234:	e02b      	b.n	800428e <SCH_RunSystemTickTimer+0xca>
  {
    // Get Task Context
    pTimerContext = &s_TimerContext[timerIndex];
 8004236:	7bba      	ldrb	r2, [r7, #14]
 8004238:	4613      	mov	r3, r2
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	4413      	add	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4a27      	ldr	r2, [pc, #156]	@ (80042e0 <SCH_RunSystemTickTimer+0x11c>)
 8004242:	4413      	add	r3, r2
 8004244:	60bb      	str	r3, [r7, #8]

    // Check type and State of the task
    if(TIM_StateRun == pTimerContext->timerState)
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d11c      	bne.n	8004288 <SCH_RunSystemTickTimer+0xc4>
    {
      // Increment task tick
      pTimerContext->timerTick += 1;
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	1c5a      	adds	r2, r3, #1
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTimerContext->timerTick >= pTimerContext->pTimerProperty->timerPeriodInMS)
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	429a      	cmp	r2, r3
 8004264:	d310      	bcc.n	8004288 <SCH_RunSystemTickTimer+0xc4>
      {
        // Yes
        // Enable Flag
        pTimerContext->timerFlag = TRUE;
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	2201      	movs	r2, #1
 800426a:	805a      	strh	r2, [r3, #2]
        // Reset tick timer
        pTimerContext->timerTick = RESET;
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2200      	movs	r2, #0
 8004270:	605a      	str	r2, [r3, #4]
        // Check timer type and change the state
        pTimerContext->timerState = (SCH_TIMER_PERIODIC == pTimerContext->pTimerProperty->timerType)?TIM_StateRun:TIM_StateStop;
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b02      	cmp	r3, #2
 800427a:	bf0c      	ite	eq
 800427c:	2301      	moveq	r3, #1
 800427e:	2300      	movne	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	461a      	mov	r2, r3
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	701a      	strb	r2, [r3, #0]
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8004288:	7bbb      	ldrb	r3, [r7, #14]
 800428a:	3301      	adds	r3, #1
 800428c:	73bb      	strb	r3, [r7, #14]
 800428e:	4b15      	ldr	r3, [pc, #84]	@ (80042e4 <SCH_RunSystemTickTimer+0x120>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	7bba      	ldrb	r2, [r7, #14]
 8004294:	429a      	cmp	r2, r3
 8004296:	d3ce      	bcc.n	8004236 <SCH_RunSystemTickTimer+0x72>
      }
    }
  }
  // Update software timer
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 8004298:	2300      	movs	r3, #0
 800429a:	73bb      	strb	r3, [r7, #14]
 800429c:	e010      	b.n	80042c0 <SCH_RunSystemTickTimer+0xfc>
 	if (s_SoftTimers[timerIndex] > 0)	s_SoftTimers[timerIndex] --;
 800429e:	7bbb      	ldrb	r3, [r7, #14]
 80042a0:	4a11      	ldr	r2, [pc, #68]	@ (80042e8 <SCH_RunSystemTickTimer+0x124>)
 80042a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d007      	beq.n	80042ba <SCH_RunSystemTickTimer+0xf6>
 80042aa:	7bbb      	ldrb	r3, [r7, #14]
 80042ac:	4a0e      	ldr	r2, [pc, #56]	@ (80042e8 <SCH_RunSystemTickTimer+0x124>)
 80042ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80042b2:	3a01      	subs	r2, #1
 80042b4:	490c      	ldr	r1, [pc, #48]	@ (80042e8 <SCH_RunSystemTickTimer+0x124>)
 80042b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 80042ba:	7bbb      	ldrb	r3, [r7, #14]
 80042bc:	3301      	adds	r3, #1
 80042be:	73bb      	strb	r3, [r7, #14]
 80042c0:	7bbb      	ldrb	r3, [r7, #14]
 80042c2:	2b09      	cmp	r3, #9
 80042c4:	d9eb      	bls.n	800429e <SCH_RunSystemTickTimer+0xda>
}
 80042c6:	bf00      	nop
 80042c8:	bf00      	nop
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	200004d4 	.word	0x200004d4
 80042d8:	200002ec 	.word	0x200002ec
 80042dc:	200003dc 	.word	0x200003dc
 80042e0:	200003e0 	.word	0x200003e0
 80042e4:	200004d0 	.word	0x200004d0
 80042e8:	200004d8 	.word	0x200004d8

080042ec <SCH_StartSchedular>:
  * @brief  Start schedular
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_StartSchedular(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
  // Start Schedular..i.e. start system tick timer
  SCH_START;
 80042f0:	f7fc fb0a 	bl	8000908 <systick_timer_start>
}
 80042f4:	bf00      	nop
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <SCH_HandleScheduledTask>:
  * @brief  Function handles scheduled task and timer events
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_HandleScheduledTask(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
  SCH_TaskContextTypedef*       pTaskContext;
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // check for schedule flag
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 80042fe:	2300      	movs	r3, #0
 8004300:	73fb      	strb	r3, [r7, #15]
 8004302:	e01e      	b.n	8004342 <SCH_HandleScheduledTask+0x4a>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 8004304:	7bfa      	ldrb	r2, [r7, #15]
 8004306:	4613      	mov	r3, r2
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	4413      	add	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4a23      	ldr	r2, [pc, #140]	@ (800439c <SCH_HandleScheduledTask+0xa4>)
 8004310:	4413      	add	r3, r2
 8004312:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((TRUE == pTaskContext->taskFlag) && (TASK_StateReady == pTaskContext->taskState))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	885b      	ldrh	r3, [r3, #2]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d10f      	bne.n	800433c <SCH_HandleScheduledTask+0x44>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d10b      	bne.n	800433c <SCH_HandleScheduledTask+0x44>
    {
      pTaskContext->taskFlag = FALSE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	805a      	strh	r2, [r3, #2]
      if(pTaskContext->pTaskProperty->taskFunction)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <SCH_HandleScheduledTask+0x44>
      {
        pTaskContext->pTaskProperty->taskFunction();
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	4798      	blx	r3
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800433c:	7bfb      	ldrb	r3, [r7, #15]
 800433e:	3301      	adds	r3, #1
 8004340:	73fb      	strb	r3, [r7, #15]
 8004342:	4b17      	ldr	r3, [pc, #92]	@ (80043a0 <SCH_HandleScheduledTask+0xa8>)
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	7bfa      	ldrb	r2, [r7, #15]
 8004348:	429a      	cmp	r2, r3
 800434a:	d3db      	bcc.n	8004304 <SCH_HandleScheduledTask+0xc>
      }
    }
  }

  // check for timer flag
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800434c:	2300      	movs	r3, #0
 800434e:	73bb      	strb	r3, [r7, #14]
 8004350:	e01a      	b.n	8004388 <SCH_HandleScheduledTask+0x90>
  {
    // Get Timer Context
    pTimerContext = &s_TimerContext[timerIndex];
 8004352:	7bba      	ldrb	r2, [r7, #14]
 8004354:	4613      	mov	r3, r2
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	4413      	add	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4a11      	ldr	r2, [pc, #68]	@ (80043a4 <SCH_HandleScheduledTask+0xac>)
 800435e:	4413      	add	r3, r2
 8004360:	60bb      	str	r3, [r7, #8]

    // Check timer flag
    if(TRUE == pTimerContext->timerFlag)
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	885b      	ldrh	r3, [r3, #2]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d10b      	bne.n	8004382 <SCH_HandleScheduledTask+0x8a>
    {
      pTimerContext->timerFlag = FALSE;
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2200      	movs	r2, #0
 800436e:	805a      	strh	r2, [r3, #2]
      if(pTimerContext->pTimerProperty->timerCallbackFunction)
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <SCH_HandleScheduledTask+0x8a>
      {
        pTimerContext->pTimerProperty->timerCallbackFunction();
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	4798      	blx	r3
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8004382:	7bbb      	ldrb	r3, [r7, #14]
 8004384:	3301      	adds	r3, #1
 8004386:	73bb      	strb	r3, [r7, #14]
 8004388:	4b07      	ldr	r3, [pc, #28]	@ (80043a8 <SCH_HandleScheduledTask+0xb0>)
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	7bba      	ldrb	r2, [r7, #14]
 800438e:	429a      	cmp	r2, r3
 8004390:	d3df      	bcc.n	8004352 <SCH_HandleScheduledTask+0x5a>
      }
    }
  }
}
 8004392:	bf00      	nop
 8004394:	bf00      	nop
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	200002ec 	.word	0x200002ec
 80043a0:	200003dc 	.word	0x200003dc
 80043a4:	200003e0 	.word	0x200003e0
 80043a8:	200004d0 	.word	0x200004d0

080043ac <atoi>:
 80043ac:	220a      	movs	r2, #10
 80043ae:	2100      	movs	r1, #0
 80043b0:	f000 b87a 	b.w	80044a8 <strtol>

080043b4 <_strtol_l.constprop.0>:
 80043b4:	2b24      	cmp	r3, #36	@ 0x24
 80043b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043ba:	4686      	mov	lr, r0
 80043bc:	4690      	mov	r8, r2
 80043be:	d801      	bhi.n	80043c4 <_strtol_l.constprop.0+0x10>
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d106      	bne.n	80043d2 <_strtol_l.constprop.0+0x1e>
 80043c4:	f000 f882 	bl	80044cc <__errno>
 80043c8:	2316      	movs	r3, #22
 80043ca:	6003      	str	r3, [r0, #0]
 80043cc:	2000      	movs	r0, #0
 80043ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043d2:	4834      	ldr	r0, [pc, #208]	@ (80044a4 <_strtol_l.constprop.0+0xf0>)
 80043d4:	460d      	mov	r5, r1
 80043d6:	462a      	mov	r2, r5
 80043d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80043dc:	5d06      	ldrb	r6, [r0, r4]
 80043de:	f016 0608 	ands.w	r6, r6, #8
 80043e2:	d1f8      	bne.n	80043d6 <_strtol_l.constprop.0+0x22>
 80043e4:	2c2d      	cmp	r4, #45	@ 0x2d
 80043e6:	d12d      	bne.n	8004444 <_strtol_l.constprop.0+0x90>
 80043e8:	782c      	ldrb	r4, [r5, #0]
 80043ea:	2601      	movs	r6, #1
 80043ec:	1c95      	adds	r5, r2, #2
 80043ee:	f033 0210 	bics.w	r2, r3, #16
 80043f2:	d109      	bne.n	8004408 <_strtol_l.constprop.0+0x54>
 80043f4:	2c30      	cmp	r4, #48	@ 0x30
 80043f6:	d12a      	bne.n	800444e <_strtol_l.constprop.0+0x9a>
 80043f8:	782a      	ldrb	r2, [r5, #0]
 80043fa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80043fe:	2a58      	cmp	r2, #88	@ 0x58
 8004400:	d125      	bne.n	800444e <_strtol_l.constprop.0+0x9a>
 8004402:	786c      	ldrb	r4, [r5, #1]
 8004404:	2310      	movs	r3, #16
 8004406:	3502      	adds	r5, #2
 8004408:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800440c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004410:	2200      	movs	r2, #0
 8004412:	fbbc f9f3 	udiv	r9, ip, r3
 8004416:	4610      	mov	r0, r2
 8004418:	fb03 ca19 	mls	sl, r3, r9, ip
 800441c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004420:	2f09      	cmp	r7, #9
 8004422:	d81b      	bhi.n	800445c <_strtol_l.constprop.0+0xa8>
 8004424:	463c      	mov	r4, r7
 8004426:	42a3      	cmp	r3, r4
 8004428:	dd27      	ble.n	800447a <_strtol_l.constprop.0+0xc6>
 800442a:	1c57      	adds	r7, r2, #1
 800442c:	d007      	beq.n	800443e <_strtol_l.constprop.0+0x8a>
 800442e:	4581      	cmp	r9, r0
 8004430:	d320      	bcc.n	8004474 <_strtol_l.constprop.0+0xc0>
 8004432:	d101      	bne.n	8004438 <_strtol_l.constprop.0+0x84>
 8004434:	45a2      	cmp	sl, r4
 8004436:	db1d      	blt.n	8004474 <_strtol_l.constprop.0+0xc0>
 8004438:	fb00 4003 	mla	r0, r0, r3, r4
 800443c:	2201      	movs	r2, #1
 800443e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004442:	e7eb      	b.n	800441c <_strtol_l.constprop.0+0x68>
 8004444:	2c2b      	cmp	r4, #43	@ 0x2b
 8004446:	bf04      	itt	eq
 8004448:	782c      	ldrbeq	r4, [r5, #0]
 800444a:	1c95      	addeq	r5, r2, #2
 800444c:	e7cf      	b.n	80043ee <_strtol_l.constprop.0+0x3a>
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1da      	bne.n	8004408 <_strtol_l.constprop.0+0x54>
 8004452:	2c30      	cmp	r4, #48	@ 0x30
 8004454:	bf0c      	ite	eq
 8004456:	2308      	moveq	r3, #8
 8004458:	230a      	movne	r3, #10
 800445a:	e7d5      	b.n	8004408 <_strtol_l.constprop.0+0x54>
 800445c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004460:	2f19      	cmp	r7, #25
 8004462:	d801      	bhi.n	8004468 <_strtol_l.constprop.0+0xb4>
 8004464:	3c37      	subs	r4, #55	@ 0x37
 8004466:	e7de      	b.n	8004426 <_strtol_l.constprop.0+0x72>
 8004468:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800446c:	2f19      	cmp	r7, #25
 800446e:	d804      	bhi.n	800447a <_strtol_l.constprop.0+0xc6>
 8004470:	3c57      	subs	r4, #87	@ 0x57
 8004472:	e7d8      	b.n	8004426 <_strtol_l.constprop.0+0x72>
 8004474:	f04f 32ff 	mov.w	r2, #4294967295
 8004478:	e7e1      	b.n	800443e <_strtol_l.constprop.0+0x8a>
 800447a:	1c53      	adds	r3, r2, #1
 800447c:	d108      	bne.n	8004490 <_strtol_l.constprop.0+0xdc>
 800447e:	2322      	movs	r3, #34	@ 0x22
 8004480:	f8ce 3000 	str.w	r3, [lr]
 8004484:	4660      	mov	r0, ip
 8004486:	f1b8 0f00 	cmp.w	r8, #0
 800448a:	d0a0      	beq.n	80043ce <_strtol_l.constprop.0+0x1a>
 800448c:	1e69      	subs	r1, r5, #1
 800448e:	e006      	b.n	800449e <_strtol_l.constprop.0+0xea>
 8004490:	b106      	cbz	r6, 8004494 <_strtol_l.constprop.0+0xe0>
 8004492:	4240      	negs	r0, r0
 8004494:	f1b8 0f00 	cmp.w	r8, #0
 8004498:	d099      	beq.n	80043ce <_strtol_l.constprop.0+0x1a>
 800449a:	2a00      	cmp	r2, #0
 800449c:	d1f6      	bne.n	800448c <_strtol_l.constprop.0+0xd8>
 800449e:	f8c8 1000 	str.w	r1, [r8]
 80044a2:	e794      	b.n	80043ce <_strtol_l.constprop.0+0x1a>
 80044a4:	08004935 	.word	0x08004935

080044a8 <strtol>:
 80044a8:	4613      	mov	r3, r2
 80044aa:	460a      	mov	r2, r1
 80044ac:	4601      	mov	r1, r0
 80044ae:	4802      	ldr	r0, [pc, #8]	@ (80044b8 <strtol+0x10>)
 80044b0:	6800      	ldr	r0, [r0, #0]
 80044b2:	f7ff bf7f 	b.w	80043b4 <_strtol_l.constprop.0>
 80044b6:	bf00      	nop
 80044b8:	20000164 	.word	0x20000164

080044bc <memset>:
 80044bc:	4402      	add	r2, r0
 80044be:	4603      	mov	r3, r0
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d100      	bne.n	80044c6 <memset+0xa>
 80044c4:	4770      	bx	lr
 80044c6:	f803 1b01 	strb.w	r1, [r3], #1
 80044ca:	e7f9      	b.n	80044c0 <memset+0x4>

080044cc <__errno>:
 80044cc:	4b01      	ldr	r3, [pc, #4]	@ (80044d4 <__errno+0x8>)
 80044ce:	6818      	ldr	r0, [r3, #0]
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	20000164 	.word	0x20000164

080044d8 <__libc_init_array>:
 80044d8:	b570      	push	{r4, r5, r6, lr}
 80044da:	4d0d      	ldr	r5, [pc, #52]	@ (8004510 <__libc_init_array+0x38>)
 80044dc:	4c0d      	ldr	r4, [pc, #52]	@ (8004514 <__libc_init_array+0x3c>)
 80044de:	1b64      	subs	r4, r4, r5
 80044e0:	10a4      	asrs	r4, r4, #2
 80044e2:	2600      	movs	r6, #0
 80044e4:	42a6      	cmp	r6, r4
 80044e6:	d109      	bne.n	80044fc <__libc_init_array+0x24>
 80044e8:	4d0b      	ldr	r5, [pc, #44]	@ (8004518 <__libc_init_array+0x40>)
 80044ea:	4c0c      	ldr	r4, [pc, #48]	@ (800451c <__libc_init_array+0x44>)
 80044ec:	f000 f818 	bl	8004520 <_init>
 80044f0:	1b64      	subs	r4, r4, r5
 80044f2:	10a4      	asrs	r4, r4, #2
 80044f4:	2600      	movs	r6, #0
 80044f6:	42a6      	cmp	r6, r4
 80044f8:	d105      	bne.n	8004506 <__libc_init_array+0x2e>
 80044fa:	bd70      	pop	{r4, r5, r6, pc}
 80044fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004500:	4798      	blx	r3
 8004502:	3601      	adds	r6, #1
 8004504:	e7ee      	b.n	80044e4 <__libc_init_array+0xc>
 8004506:	f855 3b04 	ldr.w	r3, [r5], #4
 800450a:	4798      	blx	r3
 800450c:	3601      	adds	r6, #1
 800450e:	e7f2      	b.n	80044f6 <__libc_init_array+0x1e>
 8004510:	08004a40 	.word	0x08004a40
 8004514:	08004a40 	.word	0x08004a40
 8004518:	08004a40 	.word	0x08004a40
 800451c:	08004a44 	.word	0x08004a44

08004520 <_init>:
 8004520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004522:	bf00      	nop
 8004524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004526:	bc08      	pop	{r3}
 8004528:	469e      	mov	lr, r3
 800452a:	4770      	bx	lr

0800452c <_fini>:
 800452c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800452e:	bf00      	nop
 8004530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004532:	bc08      	pop	{r3}
 8004534:	469e      	mov	lr, r3
 8004536:	4770      	bx	lr
