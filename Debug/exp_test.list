
exp_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ebc  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  08005044  08005044  00006044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005574  08005574  000091b4  2**0
                  CONTENTS
  4 .ARM          00000008  08005574  08005574  00006574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800557c  0800557c  000091b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800557c  0800557c  0000657c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005580  08005580  00006580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000021b4  20000000  08005584  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091b4  2**0
                  CONTENTS
 10 .bss          00000494  200021b4  200021b4  000091b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002648  20002648  000091b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ad8e  00000000  00000000  000091e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028f4  00000000  00000000  00013f72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c58  00000000  00000000  00016868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000905  00000000  00000000  000174c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f5e1  00000000  00000000  00017dc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bd30  00000000  00000000  000373a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a9b9b  00000000  00000000  000430d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ecc71  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000033d4  00000000  00000000  000eccb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  000f0088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200021b4 	.word	0x200021b4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800502c 	.word	0x0800502c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200021b8 	.word	0x200021b8
 80001c4:	0800502c 	.word	0x0800502c

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_ldivmod>:
 80001ec:	b97b      	cbnz	r3, 800020e <__aeabi_ldivmod+0x22>
 80001ee:	b972      	cbnz	r2, 800020e <__aeabi_ldivmod+0x22>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bfbe      	ittt	lt
 80001f4:	2000      	movlt	r0, #0
 80001f6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80001fa:	e006      	blt.n	800020a <__aeabi_ldivmod+0x1e>
 80001fc:	bf08      	it	eq
 80001fe:	2800      	cmpeq	r0, #0
 8000200:	bf1c      	itt	ne
 8000202:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000206:	f04f 30ff 	movne.w	r0, #4294967295
 800020a:	f000 b9b5 	b.w	8000578 <__aeabi_idiv0>
 800020e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000212:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000216:	2900      	cmp	r1, #0
 8000218:	db09      	blt.n	800022e <__aeabi_ldivmod+0x42>
 800021a:	2b00      	cmp	r3, #0
 800021c:	db1a      	blt.n	8000254 <__aeabi_ldivmod+0x68>
 800021e:	f000 f84d 	bl	80002bc <__udivmoddi4>
 8000222:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000226:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022a:	b004      	add	sp, #16
 800022c:	4770      	bx	lr
 800022e:	4240      	negs	r0, r0
 8000230:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000234:	2b00      	cmp	r3, #0
 8000236:	db1b      	blt.n	8000270 <__aeabi_ldivmod+0x84>
 8000238:	f000 f840 	bl	80002bc <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	4252      	negs	r2, r2
 800024e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000252:	4770      	bx	lr
 8000254:	4252      	negs	r2, r2
 8000256:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800025a:	f000 f82f 	bl	80002bc <__udivmoddi4>
 800025e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000262:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000266:	b004      	add	sp, #16
 8000268:	4240      	negs	r0, r0
 800026a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026e:	4770      	bx	lr
 8000270:	4252      	negs	r2, r2
 8000272:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000276:	f000 f821 	bl	80002bc <__udivmoddi4>
 800027a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800027e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000282:	b004      	add	sp, #16
 8000284:	4252      	negs	r2, r2
 8000286:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028a:	4770      	bx	lr

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b96a 	b.w	8000578 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c0:	9d08      	ldr	r5, [sp, #32]
 80002c2:	460c      	mov	r4, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14e      	bne.n	8000366 <__udivmoddi4+0xaa>
 80002c8:	4694      	mov	ip, r2
 80002ca:	458c      	cmp	ip, r1
 80002cc:	4686      	mov	lr, r0
 80002ce:	fab2 f282 	clz	r2, r2
 80002d2:	d962      	bls.n	800039a <__udivmoddi4+0xde>
 80002d4:	b14a      	cbz	r2, 80002ea <__udivmoddi4+0x2e>
 80002d6:	f1c2 0320 	rsb	r3, r2, #32
 80002da:	4091      	lsls	r1, r2
 80002dc:	fa20 f303 	lsr.w	r3, r0, r3
 80002e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e4:	4319      	orrs	r1, r3
 80002e6:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f f68c 	uxth.w	r6, ip
 80002f2:	fbb1 f4f7 	udiv	r4, r1, r7
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb07 1114 	mls	r1, r7, r4, r1
 80002fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000302:	fb04 f106 	mul.w	r1, r4, r6
 8000306:	4299      	cmp	r1, r3
 8000308:	d90a      	bls.n	8000320 <__udivmoddi4+0x64>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000312:	f080 8112 	bcs.w	800053a <__udivmoddi4+0x27e>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 810f 	bls.w	800053a <__udivmoddi4+0x27e>
 800031c:	3c02      	subs	r4, #2
 800031e:	4463      	add	r3, ip
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb1 f0f7 	udiv	r0, r1, r7
 800032a:	fb07 1110 	mls	r1, r7, r0, r1
 800032e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000332:	fb00 f606 	mul.w	r6, r0, r6
 8000336:	429e      	cmp	r6, r3
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x94>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000342:	f080 80fc 	bcs.w	800053e <__udivmoddi4+0x282>
 8000346:	429e      	cmp	r6, r3
 8000348:	f240 80f9 	bls.w	800053e <__udivmoddi4+0x282>
 800034c:	4463      	add	r3, ip
 800034e:	3802      	subs	r0, #2
 8000350:	1b9b      	subs	r3, r3, r6
 8000352:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa6>
 800035a:	40d3      	lsrs	r3, r2
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xba>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb4>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa6>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x150>
 800037e:	42a3      	cmp	r3, r4
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xcc>
 8000382:	4290      	cmp	r0, r2
 8000384:	f0c0 80f0 	bcc.w	8000568 <__udivmoddi4+0x2ac>
 8000388:	1a86      	subs	r6, r0, r2
 800038a:	eb64 0303 	sbc.w	r3, r4, r3
 800038e:	2001      	movs	r0, #1
 8000390:	2d00      	cmp	r5, #0
 8000392:	d0e6      	beq.n	8000362 <__udivmoddi4+0xa6>
 8000394:	e9c5 6300 	strd	r6, r3, [r5]
 8000398:	e7e3      	b.n	8000362 <__udivmoddi4+0xa6>
 800039a:	2a00      	cmp	r2, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x204>
 80003a0:	eba1 040c 	sub.w	r4, r1, ip
 80003a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003a8:	fa1f f78c 	uxth.w	r7, ip
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003b6:	fb08 4416 	mls	r4, r8, r6, r4
 80003ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003be:	fb07 f006 	mul.w	r0, r7, r6
 80003c2:	4298      	cmp	r0, r3
 80003c4:	d908      	bls.n	80003d8 <__udivmoddi4+0x11c>
 80003c6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ca:	f106 34ff 	add.w	r4, r6, #4294967295
 80003ce:	d202      	bcs.n	80003d6 <__udivmoddi4+0x11a>
 80003d0:	4298      	cmp	r0, r3
 80003d2:	f200 80cd 	bhi.w	8000570 <__udivmoddi4+0x2b4>
 80003d6:	4626      	mov	r6, r4
 80003d8:	1a1c      	subs	r4, r3, r0
 80003da:	fa1f f38e 	uxth.w	r3, lr
 80003de:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e2:	fb08 4410 	mls	r4, r8, r0, r4
 80003e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ea:	fb00 f707 	mul.w	r7, r0, r7
 80003ee:	429f      	cmp	r7, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x148>
 80003f2:	eb1c 0303 	adds.w	r3, ip, r3
 80003f6:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x146>
 80003fc:	429f      	cmp	r7, r3
 80003fe:	f200 80b0 	bhi.w	8000562 <__udivmoddi4+0x2a6>
 8000402:	4620      	mov	r0, r4
 8000404:	1bdb      	subs	r3, r3, r7
 8000406:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x9c>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa20 fc06 	lsr.w	ip, r0, r6
 800041c:	fa04 f301 	lsl.w	r3, r4, r1
 8000420:	ea43 030c 	orr.w	r3, r3, ip
 8000424:	40f4      	lsrs	r4, r6
 8000426:	fa00 f801 	lsl.w	r8, r0, r1
 800042a:	0c38      	lsrs	r0, r7, #16
 800042c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000430:	fbb4 fef0 	udiv	lr, r4, r0
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	fb00 441e 	mls	r4, r0, lr, r4
 800043c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000440:	fb0e f90c 	mul.w	r9, lr, ip
 8000444:	45a1      	cmp	r9, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x1a6>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000452:	f080 8084 	bcs.w	800055e <__udivmoddi4+0x2a2>
 8000456:	45a1      	cmp	r9, r4
 8000458:	f240 8081 	bls.w	800055e <__udivmoddi4+0x2a2>
 800045c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000460:	443c      	add	r4, r7
 8000462:	eba4 0409 	sub.w	r4, r4, r9
 8000466:	fa1f f983 	uxth.w	r9, r3
 800046a:	fbb4 f3f0 	udiv	r3, r4, r0
 800046e:	fb00 4413 	mls	r4, r0, r3, r4
 8000472:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000476:	fb03 fc0c 	mul.w	ip, r3, ip
 800047a:	45a4      	cmp	ip, r4
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x1d2>
 800047e:	193c      	adds	r4, r7, r4
 8000480:	f103 30ff 	add.w	r0, r3, #4294967295
 8000484:	d267      	bcs.n	8000556 <__udivmoddi4+0x29a>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d965      	bls.n	8000556 <__udivmoddi4+0x29a>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000492:	fba0 9302 	umull	r9, r3, r0, r2
 8000496:	eba4 040c 	sub.w	r4, r4, ip
 800049a:	429c      	cmp	r4, r3
 800049c:	46ce      	mov	lr, r9
 800049e:	469c      	mov	ip, r3
 80004a0:	d351      	bcc.n	8000546 <__udivmoddi4+0x28a>
 80004a2:	d04e      	beq.n	8000542 <__udivmoddi4+0x286>
 80004a4:	b155      	cbz	r5, 80004bc <__udivmoddi4+0x200>
 80004a6:	ebb8 030e 	subs.w	r3, r8, lr
 80004aa:	eb64 040c 	sbc.w	r4, r4, ip
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	40cb      	lsrs	r3, r1
 80004b4:	431e      	orrs	r6, r3
 80004b6:	40cc      	lsrs	r4, r1
 80004b8:	e9c5 6400 	strd	r6, r4, [r5]
 80004bc:	2100      	movs	r1, #0
 80004be:	e750      	b.n	8000362 <__udivmoddi4+0xa6>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f103 	lsr.w	r1, r0, r3
 80004c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80004cc:	fa24 f303 	lsr.w	r3, r4, r3
 80004d0:	4094      	lsls	r4, r2
 80004d2:	430c      	orrs	r4, r1
 80004d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004d8:	fa00 fe02 	lsl.w	lr, r0, r2
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e4:	fb08 3110 	mls	r1, r8, r0, r3
 80004e8:	0c23      	lsrs	r3, r4, #16
 80004ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ee:	fb00 f107 	mul.w	r1, r0, r7
 80004f2:	4299      	cmp	r1, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x24c>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 36ff 	add.w	r6, r0, #4294967295
 80004fe:	d22c      	bcs.n	800055a <__udivmoddi4+0x29e>
 8000500:	4299      	cmp	r1, r3
 8000502:	d92a      	bls.n	800055a <__udivmoddi4+0x29e>
 8000504:	3802      	subs	r0, #2
 8000506:	4463      	add	r3, ip
 8000508:	1a5b      	subs	r3, r3, r1
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000510:	fb08 3311 	mls	r3, r8, r1, r3
 8000514:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000518:	fb01 f307 	mul.w	r3, r1, r7
 800051c:	42a3      	cmp	r3, r4
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x276>
 8000520:	eb1c 0404 	adds.w	r4, ip, r4
 8000524:	f101 36ff 	add.w	r6, r1, #4294967295
 8000528:	d213      	bcs.n	8000552 <__udivmoddi4+0x296>
 800052a:	42a3      	cmp	r3, r4
 800052c:	d911      	bls.n	8000552 <__udivmoddi4+0x296>
 800052e:	3902      	subs	r1, #2
 8000530:	4464      	add	r4, ip
 8000532:	1ae4      	subs	r4, r4, r3
 8000534:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000538:	e739      	b.n	80003ae <__udivmoddi4+0xf2>
 800053a:	4604      	mov	r4, r0
 800053c:	e6f0      	b.n	8000320 <__udivmoddi4+0x64>
 800053e:	4608      	mov	r0, r1
 8000540:	e706      	b.n	8000350 <__udivmoddi4+0x94>
 8000542:	45c8      	cmp	r8, r9
 8000544:	d2ae      	bcs.n	80004a4 <__udivmoddi4+0x1e8>
 8000546:	ebb9 0e02 	subs.w	lr, r9, r2
 800054a:	eb63 0c07 	sbc.w	ip, r3, r7
 800054e:	3801      	subs	r0, #1
 8000550:	e7a8      	b.n	80004a4 <__udivmoddi4+0x1e8>
 8000552:	4631      	mov	r1, r6
 8000554:	e7ed      	b.n	8000532 <__udivmoddi4+0x276>
 8000556:	4603      	mov	r3, r0
 8000558:	e799      	b.n	800048e <__udivmoddi4+0x1d2>
 800055a:	4630      	mov	r0, r6
 800055c:	e7d4      	b.n	8000508 <__udivmoddi4+0x24c>
 800055e:	46d6      	mov	lr, sl
 8000560:	e77f      	b.n	8000462 <__udivmoddi4+0x1a6>
 8000562:	4463      	add	r3, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e74d      	b.n	8000404 <__udivmoddi4+0x148>
 8000568:	4606      	mov	r6, r0
 800056a:	4623      	mov	r3, r4
 800056c:	4608      	mov	r0, r1
 800056e:	e70f      	b.n	8000390 <__udivmoddi4+0xd4>
 8000570:	3e02      	subs	r6, #2
 8000572:	4463      	add	r3, ip
 8000574:	e730      	b.n	80003d8 <__udivmoddi4+0x11c>
 8000576:	bf00      	nop

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8000580:	4b07      	ldr	r3, [pc, #28]	@ (80005a0 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800058c:	bf0c      	ite	eq
 800058e:	2301      	moveq	r3, #1
 8000590:	2300      	movne	r3, #0
 8000592:	b2db      	uxtb	r3, r3
}
 8000594:	4618      	mov	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	e000e010 	.word	0xe000e010

080005a4 <delay_us>:
#include "delay.h"
#include "stm32f4xx_ll_utils.h"
#include "stm32f4xx_ll_cortex.h"

void delay_us(uint8_t micro_seconds)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
    uint32_t ticks = micro_seconds * (SystemCoreClock / 1000000);
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	4a0c      	ldr	r2, [pc, #48]	@ (80005e4 <delay_us+0x40>)
 80005b2:	6812      	ldr	r2, [r2, #0]
 80005b4:	490c      	ldr	r1, [pc, #48]	@ (80005e8 <delay_us+0x44>)
 80005b6:	fba1 1202 	umull	r1, r2, r1, r2
 80005ba:	0c92      	lsrs	r2, r2, #18
 80005bc:	fb02 f303 	mul.w	r3, r2, r3
 80005c0:	60fb      	str	r3, [r7, #12]
    while (ticks > 0)
 80005c2:	e007      	b.n	80005d4 <delay_us+0x30>
    {
        if (LL_SYSTICK_IsActiveCounterFlag())
 80005c4:	f7ff ffda 	bl	800057c <LL_SYSTICK_IsActiveCounterFlag>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d002      	beq.n	80005d4 <delay_us+0x30>
        {
            ticks--;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	3b01      	subs	r3, #1
 80005d2:	60fb      	str	r3, [r7, #12]
    while (ticks > 0)
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d1f4      	bne.n	80005c4 <delay_us+0x20>
        }
    }
}
 80005da:	bf00      	nop
 80005dc:	bf00      	nop
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	2000214c 	.word	0x2000214c
 80005e8:	431bde83 	.word	0x431bde83

080005ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	6039      	str	r1, [r7, #0]
 80005f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	db0a      	blt.n	8000616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	b2da      	uxtb	r2, r3
 8000604:	490c      	ldr	r1, [pc, #48]	@ (8000638 <__NVIC_SetPriority+0x4c>)
 8000606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060a:	0112      	lsls	r2, r2, #4
 800060c:	b2d2      	uxtb	r2, r2
 800060e:	440b      	add	r3, r1
 8000610:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000614:	e00a      	b.n	800062c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	b2da      	uxtb	r2, r3
 800061a:	4908      	ldr	r1, [pc, #32]	@ (800063c <__NVIC_SetPriority+0x50>)
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	f003 030f 	and.w	r3, r3, #15
 8000622:	3b04      	subs	r3, #4
 8000624:	0112      	lsls	r2, r2, #4
 8000626:	b2d2      	uxtb	r2, r2
 8000628:	440b      	add	r3, r1
 800062a:	761a      	strb	r2, [r3, #24]
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	e000e100 	.word	0xe000e100
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	3b01      	subs	r3, #1
 800064c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000650:	d301      	bcc.n	8000656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000652:	2301      	movs	r3, #1
 8000654:	e00f      	b.n	8000676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000656:	4a0a      	ldr	r2, [pc, #40]	@ (8000680 <SysTick_Config+0x40>)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	3b01      	subs	r3, #1
 800065c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800065e:	210f      	movs	r1, #15
 8000660:	f04f 30ff 	mov.w	r0, #4294967295
 8000664:	f7ff ffc2 	bl	80005ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000668:	4b05      	ldr	r3, [pc, #20]	@ (8000680 <SysTick_Config+0x40>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800066e:	4b04      	ldr	r3, [pc, #16]	@ (8000680 <SysTick_Config+0x40>)
 8000670:	2207      	movs	r2, #7
 8000672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000674:	2300      	movs	r3, #0
}
 8000676:	4618      	mov	r0, r3
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	e000e010 	.word	0xe000e010

08000684 <systick_timer_start>:

#include "systick.h"
#include "stm32f4xx.h"

void systick_timer_start(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
    // Reset SysTick counter value
   // SysTick->VAL = 0;

    // Enable SysTick counter
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8000688:	4b05      	ldr	r3, [pc, #20]	@ (80006a0 <systick_timer_start+0x1c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a04      	ldr	r2, [pc, #16]	@ (80006a0 <systick_timer_start+0x1c>)
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	6013      	str	r3, [r2, #0]
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	e000e010 	.word	0xe000e010

080006a4 <systick_timer_init>:
    // Disable SysTick counter
   // SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
}

void systick_timer_init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
    // Set SysTick to trigger interrupt every 1ms
    SysTick_Config(SystemCoreClock/1000);
 80006a8:	4b05      	ldr	r3, [pc, #20]	@ (80006c0 <systick_timer_init+0x1c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a05      	ldr	r2, [pc, #20]	@ (80006c4 <systick_timer_init+0x20>)
 80006ae:	fba2 2303 	umull	r2, r3, r2, r3
 80006b2:	099b      	lsrs	r3, r3, #6
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff ffc3 	bl	8000640 <SysTick_Config>
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	2000214c 	.word	0x2000214c
 80006c4:	10624dd3 	.word	0x10624dd3

080006c8 <__NVIC_EnableIRQ>:
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	db0b      	blt.n	80006f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	f003 021f 	and.w	r2, r3, #31
 80006e0:	4907      	ldr	r1, [pc, #28]	@ (8000700 <__NVIC_EnableIRQ+0x38>)
 80006e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e6:	095b      	lsrs	r3, r3, #5
 80006e8:	2001      	movs	r0, #1
 80006ea:	fa00 f202 	lsl.w	r2, r0, r2
 80006ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e000e100 	.word	0xe000e100

08000704 <__NVIC_DisableIRQ>:
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800070e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000712:	2b00      	cmp	r3, #0
 8000714:	db12      	blt.n	800073c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	f003 021f 	and.w	r2, r3, #31
 800071c:	490a      	ldr	r1, [pc, #40]	@ (8000748 <__NVIC_DisableIRQ+0x44>)
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	095b      	lsrs	r3, r3, #5
 8000724:	2001      	movs	r0, #1
 8000726:	fa00 f202 	lsl.w	r2, r0, r2
 800072a:	3320      	adds	r3, #32
 800072c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000730:	f3bf 8f4f 	dsb	sy
}
 8000734:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000736:	f3bf 8f6f 	isb	sy
}
 800073a:	bf00      	nop
}
 800073c:	bf00      	nop
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	e000e100 	.word	0xe000e100

0800074c <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800074c:	b480      	push	{r7}
 800074e:	b089      	sub	sp, #36	@ 0x24
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	330c      	adds	r3, #12
 8000758:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	e853 3f00 	ldrex	r3, [r3]
 8000760:	60bb      	str	r3, [r7, #8]
   return(result);
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	f043 0320 	orr.w	r3, r3, #32
 8000768:	61fb      	str	r3, [r7, #28]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	330c      	adds	r3, #12
 800076e:	69fa      	ldr	r2, [r7, #28]
 8000770:	61ba      	str	r2, [r7, #24]
 8000772:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000774:	6979      	ldr	r1, [r7, #20]
 8000776:	69ba      	ldr	r2, [r7, #24]
 8000778:	e841 2300 	strex	r3, r2, [r1]
 800077c:	613b      	str	r3, [r7, #16]
   return(result);
 800077e:	693b      	ldr	r3, [r7, #16]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d1e7      	bne.n	8000754 <LL_USART_EnableIT_RXNE+0x8>
}
 8000784:	bf00      	nop
 8000786:	bf00      	nop
 8000788:	3724      	adds	r7, #36	@ 0x24
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr

08000792 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8000792:	b480      	push	{r7}
 8000794:	b089      	sub	sp, #36	@ 0x24
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	330c      	adds	r3, #12
 800079e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	e853 3f00 	ldrex	r3, [r3]
 80007a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ae:	61fb      	str	r3, [r7, #28]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	330c      	adds	r3, #12
 80007b4:	69fa      	ldr	r2, [r7, #28]
 80007b6:	61ba      	str	r2, [r7, #24]
 80007b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80007ba:	6979      	ldr	r1, [r7, #20]
 80007bc:	69ba      	ldr	r2, [r7, #24]
 80007be:	e841 2300 	strex	r3, r2, [r1]
 80007c2:	613b      	str	r3, [r7, #16]
   return(result);
 80007c4:	693b      	ldr	r3, [r7, #16]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d1e7      	bne.n	800079a <LL_USART_EnableIT_TXE+0x8>
}
 80007ca:	bf00      	nop
 80007cc:	bf00      	nop
 80007ce:	3724      	adds	r7, #36	@ 0x24
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 80007d8:	b480      	push	{r7}
 80007da:	b089      	sub	sp, #36	@ 0x24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	330c      	adds	r3, #12
 80007e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	e853 3f00 	ldrex	r3, [r3]
 80007ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80007f4:	61fb      	str	r3, [r7, #28]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	330c      	adds	r3, #12
 80007fa:	69fa      	ldr	r2, [r7, #28]
 80007fc:	61ba      	str	r2, [r7, #24]
 80007fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000800:	6979      	ldr	r1, [r7, #20]
 8000802:	69ba      	ldr	r2, [r7, #24]
 8000804:	e841 2300 	strex	r3, r2, [r1]
 8000808:	613b      	str	r3, [r7, #16]
   return(result);
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d1e7      	bne.n	80007e0 <LL_USART_DisableIT_TXE+0x8>
}
 8000810:	bf00      	nop
 8000812:	bf00      	nop
 8000814:	3724      	adds	r7, #36	@ 0x24
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 800081e:	b480      	push	{r7}
 8000820:	b083      	sub	sp, #12
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	68db      	ldr	r3, [r3, #12]
 800082a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800082e:	2b80      	cmp	r3, #128	@ 0x80
 8000830:	bf0c      	ite	eq
 8000832:	2301      	moveq	r3, #1
 8000834:	2300      	movne	r3, #0
 8000836:	b2db      	uxtb	r3, r3
}
 8000838:	4618      	mov	r0, r3
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000850:	78fa      	ldrb	r2, [r7, #3]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	605a      	str	r2, [r3, #4]
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <UART_Init>:
 */

void UART_Init( uart_stdio_typedef* p_uart, USART_TypeDef* _handle,
                IRQn_Type _irqn, char* _p_TX_buffer, char* _p_RX_buffer,
                uint16_t _TX_size, uint16_t _RX_size)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b084      	sub	sp, #16
 8000866:	af00      	add	r7, sp, #0
 8000868:	60f8      	str	r0, [r7, #12]
 800086a:	60b9      	str	r1, [r7, #8]
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	4613      	mov	r3, r2
 8000870:	71fb      	strb	r3, [r7, #7]
    p_uart->handle  = _handle;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	68ba      	ldr	r2, [r7, #8]
 8000876:	601a      	str	r2, [r3, #0]
    p_uart->irqn    = _irqn;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	79fa      	ldrb	r2, [r7, #7]
 800087c:	711a      	strb	r2, [r3, #4]
    p_uart->TX_size = _TX_size;
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	8bba      	ldrh	r2, [r7, #28]
 8000882:	80da      	strh	r2, [r3, #6]
    p_uart->RX_size = _RX_size;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	8c3a      	ldrh	r2, [r7, #32]
 8000888:	811a      	strh	r2, [r3, #8]

    p_uart->p_TX_buffer = _p_TX_buffer;
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	683a      	ldr	r2, [r7, #0]
 800088e:	60da      	str	r2, [r3, #12]
    p_uart->p_RX_buffer = _p_RX_buffer;
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	69ba      	ldr	r2, [r7, #24]
 8000894:	615a      	str	r2, [r3, #20]

    p_uart->TX_write_index  = 0;
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	2200      	movs	r2, #0
 800089a:	821a      	strh	r2, [r3, #16]
    p_uart->TX_read_index   = 0;
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	2200      	movs	r2, #0
 80008a0:	825a      	strh	r2, [r3, #18]
    p_uart->RX_write_index  = 0;
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	2200      	movs	r2, #0
 80008a6:	831a      	strh	r2, [r3, #24]
    p_uart->RX_read_index   = 0;
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	2200      	movs	r2, #0
 80008ac:	835a      	strh	r2, [r3, #26]

    if(TX_BUFFER_SIZE(p_uart) != 0)
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	88db      	ldrh	r3, [r3, #6]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d006      	beq.n	80008c4 <UART_Init+0x62>
    {
        //p_uart->p_TX_buffer = (uint8_t *)malloc(TX_BUFFER_SIZE(p_uart) * sizeof(uint8_t));
        memset((void *)p_uart->p_TX_buffer, 0, sizeof(p_uart->p_TX_buffer));
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	68db      	ldr	r3, [r3, #12]
 80008ba:	2204      	movs	r2, #4
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f004 fb82 	bl	8004fc8 <memset>
    }

    if(RX_BUFFER_SIZE(p_uart) != 0)
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	891b      	ldrh	r3, [r3, #8]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d006      	beq.n	80008da <UART_Init+0x78>
    {
        //p_uart->p_RX_buffer = (uint8_t *)malloc(RX_BUFFER_SIZE(p_uart) * sizeof(uint8_t));
        memset((void *)p_uart->p_RX_buffer, 0, sizeof(p_uart->p_RX_buffer));
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	695b      	ldr	r3, [r3, #20]
 80008d0:	2204      	movs	r2, #4
 80008d2:	2100      	movs	r1, #0
 80008d4:	4618      	mov	r0, r3
 80008d6:	f004 fb77 	bl	8004fc8 <memset>
    }

    // Disable the TX IT
    LL_USART_DisableIT_TXE(p_uart->handle);
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff ff7a 	bl	80007d8 <LL_USART_DisableIT_TXE>

    // Start the RX IT, it will only run when there is a data send to the MCU.
    LL_USART_EnableIT_RXNE(p_uart->handle);
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff2f 	bl	800074c <LL_USART_EnableIT_RXNE>
}
 80008ee:	bf00      	nop
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <UART_Send_Char>:
//!
//! \param pcBuf points to a buffer containing the string to transmit.
//
//*****************************************************************************
void UART_Send_Char(uart_stdio_typedef* p_uart, const char Char)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b082      	sub	sp, #8
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
 80008fe:	460b      	mov	r3, r1
 8000900:	70fb      	strb	r3, [r7, #3]
	UART_Write(p_uart, &Char, 1);
 8000902:	1cfb      	adds	r3, r7, #3
 8000904:	2201      	movs	r2, #1
 8000906:	4619      	mov	r1, r3
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 f817 	bl	800093c <UART_Write>
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <UART_Send_String>:
//!
//! \param pcBuf points to a buffer containing the string to transmit.
//
//*****************************************************************************
void UART_Send_String(uart_stdio_typedef* p_uart, const char *pcBuf)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b082      	sub	sp, #8
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
 800091e:	6039      	str	r1, [r7, #0]
	UART_Write(p_uart, pcBuf, strlen(pcBuf));
 8000920:	6838      	ldr	r0, [r7, #0]
 8000922:	f7ff fc5b 	bl	80001dc <strlen>
 8000926:	4603      	mov	r3, r0
 8000928:	b29b      	uxth	r3, r3
 800092a:	461a      	mov	r2, r3
 800092c:	6839      	ldr	r1, [r7, #0]
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f000 f804 	bl	800093c <UART_Write>
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <UART_Write>:
//!
//! \return Returns the count of characters written.
//
//*****************************************************************************
uint16_t UART_Write(uart_stdio_typedef* p_uart, const char *pcBuf, uint16_t ui16Len)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	4613      	mov	r3, r2
 8000948:	80fb      	strh	r3, [r7, #6]
    // Check for valid arguments.
    //
    //
    // Send the characters
    //
    for(uIdx = 0; uIdx < ui16Len; uIdx++)
 800094a:	2300      	movs	r3, #0
 800094c:	75fb      	strb	r3, [r7, #23]
 800094e:	e053      	b.n	80009f8 <UART_Write+0xbc>
    {
        //
        // If the character to the UART is \n, then add a \r before it so that
        // \n is translated to \n\r in the output. This is for the enter key.
        //
        if(pcBuf[uIdx] == '\n')
 8000950:	7dfb      	ldrb	r3, [r7, #23]
 8000952:	68ba      	ldr	r2, [r7, #8]
 8000954:	4413      	add	r3, r2
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b0a      	cmp	r3, #10
 800095a:	d11e      	bne.n	800099a <UART_Write+0x5e>
        {
            if(!TX_BUFFER_FULL(p_uart))
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	f103 0012 	add.w	r0, r3, #18
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	f103 0110 	add.w	r1, r3, #16
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	88db      	ldrh	r3, [r3, #6]
 800096c:	461a      	mov	r2, r3
 800096e:	f000 fa8b 	bl	8000e88 <UART_is_buffer_full>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d145      	bne.n	8000a04 <UART_Write+0xc8>
            {
                p_uart->p_TX_buffer[p_uart->TX_write_index] = '\r';
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	68fa      	ldr	r2, [r7, #12]
 800097e:	8a12      	ldrh	r2, [r2, #16]
 8000980:	b292      	uxth	r2, r2
 8000982:	4413      	add	r3, r2
 8000984:	220d      	movs	r2, #13
 8000986:	701a      	strb	r2, [r3, #0]
                ADVANCE_TX_WRITE_INDEX(p_uart);
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f103 0210 	add.w	r2, r3, #16
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	88db      	ldrh	r3, [r3, #6]
 8000992:	4619      	mov	r1, r3
 8000994:	4610      	mov	r0, r2
 8000996:	f000 fab0 	bl	8000efa <UART_advance_buffer_index>
                //
                break;
            }
        }

        if(!TX_BUFFER_FULL(p_uart))
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	f103 0012 	add.w	r0, r3, #18
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f103 0110 	add.w	r1, r3, #16
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	88db      	ldrh	r3, [r3, #6]
 80009aa:	461a      	mov	r2, r3
 80009ac:	f000 fa6c 	bl	8000e88 <UART_is_buffer_full>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d114      	bne.n	80009e0 <UART_Write+0xa4>
        {
        	p_uart->p_TX_buffer[p_uart->TX_write_index] = pcBuf[uIdx];
 80009b6:	7dfb      	ldrb	r3, [r7, #23]
 80009b8:	68ba      	ldr	r2, [r7, #8]
 80009ba:	441a      	add	r2, r3
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	68f9      	ldr	r1, [r7, #12]
 80009c2:	8a09      	ldrh	r1, [r1, #16]
 80009c4:	b289      	uxth	r1, r1
 80009c6:	440b      	add	r3, r1
 80009c8:	7812      	ldrb	r2, [r2, #0]
 80009ca:	701a      	strb	r2, [r3, #0]
            ADVANCE_TX_WRITE_INDEX(p_uart);
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	f103 0210 	add.w	r2, r3, #16
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	88db      	ldrh	r3, [r3, #6]
 80009d6:	4619      	mov	r1, r3
 80009d8:	4610      	mov	r0, r2
 80009da:	f000 fa8e 	bl	8000efa <UART_advance_buffer_index>
 80009de:	e008      	b.n	80009f2 <UART_Write+0xb6>
        else
        {
            //
            // Buffer is full - discard remaining characters and return.
            //
            p_uart->p_TX_buffer[p_uart->TX_write_index] = '\r';
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	68fa      	ldr	r2, [r7, #12]
 80009e6:	8a12      	ldrh	r2, [r2, #16]
 80009e8:	b292      	uxth	r2, r2
 80009ea:	4413      	add	r3, r2
 80009ec:	220d      	movs	r2, #13
 80009ee:	701a      	strb	r2, [r3, #0]
            break;
 80009f0:	e009      	b.n	8000a06 <UART_Write+0xca>
    for(uIdx = 0; uIdx < ui16Len; uIdx++)
 80009f2:	7dfb      	ldrb	r3, [r7, #23]
 80009f4:	3301      	adds	r3, #1
 80009f6:	75fb      	strb	r3, [r7, #23]
 80009f8:	7dfb      	ldrb	r3, [r7, #23]
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	88fa      	ldrh	r2, [r7, #6]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d8a6      	bhi.n	8000950 <UART_Write+0x14>
 8000a02:	e000      	b.n	8000a06 <UART_Write+0xca>
                break;
 8000a04:	bf00      	nop

    //
    // If the usart txe irq is disable, this mean an usart phase is finished
    // we need to enable the txe irq and kick start the transmit process.
    //
    if (LL_USART_IsEnabledIT_TXE(p_uart->handle) == false)
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff ff07 	bl	800081e <LL_USART_IsEnabledIT_TXE>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d107      	bne.n	8000a26 <UART_Write+0xea>
        // if turn on TXE b4 prime transmit create a
        // bug where the index = 2 char don't get
        // send.

        //LL_USART_EnableIT_TXE(p_uart->handle);
        UART_Prime_Transmit(p_uart);
 8000a16:	68f8      	ldr	r0, [r7, #12]
 8000a18:	f000 fa8b 	bl	8000f32 <UART_Prime_Transmit>
        LL_USART_EnableIT_TXE(p_uart->handle);
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff feb6 	bl	8000792 <LL_USART_EnableIT_TXE>
    }

    //
    // Return the number of characters written.
    //
    return(uIdx);
 8000a26:	7dfb      	ldrb	r3, [r7, #23]
 8000a28:	b29b      	uxth	r3, r3
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <UART_Printf>:
//!
//! \return None.
//
//*****************************************************************************
void UART_Printf(uart_stdio_typedef* p_uart, const char *pc_string, ...)
{
 8000a34:	b40e      	push	{r1, r2, r3}
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b08d      	sub	sp, #52	@ 0x34
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
    // Check the arguments.
    //

    va_list vaArgP;

    va_start(vaArgP, pc_string);
 8000a3e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a42:	60bb      	str	r3, [r7, #8]

    //
    // Loop while there are more characters in the string.
    //
    while(*pc_string)
 8000a44:	e1e5      	b.n	8000e12 <UART_Printf+0x3de>
    {
        //
        // Find the first non-% character, or the end of the string.
        //
        for(ui16Idx = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000a4a:	e002      	b.n	8000a52 <UART_Printf+0x1e>
            (pc_string[ui16Idx] != '%') && (pc_string[ui16Idx] != '\0');
            ui16Idx++)
 8000a4c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000a4e:	3301      	adds	r3, #1
 8000a50:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            (pc_string[ui16Idx] != '%') && (pc_string[ui16Idx] != '\0');
 8000a52:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000a54:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000a56:	4413      	add	r3, r2
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b25      	cmp	r3, #37	@ 0x25
 8000a5c:	d005      	beq.n	8000a6a <UART_Printf+0x36>
 8000a5e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000a60:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000a62:	4413      	add	r3, r2
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d1f0      	bne.n	8000a4c <UART_Printf+0x18>
        }

        //
        // Write this portion of the string.
        //
        UART_Write(p_uart, pc_string, ui16Idx);
 8000a6a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f7ff ff63 	bl	800093c <UART_Write>

        //
        // Skip the portion of the string that was written.
        //
        pc_string += ui16Idx;
 8000a76:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000a78:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000a7a:	4413      	add	r3, r2
 8000a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c

        //
        // See if the next character is a %.
        //
        if(*pc_string == '%')
 8000a7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b25      	cmp	r3, #37	@ 0x25
 8000a84:	f040 81c5 	bne.w	8000e12 <UART_Printf+0x3de>
        {
            //
            // Skip the %.
            //
            pc_string++;
 8000a88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c

            //
            // Set the digit count to zero, and the fill character to space
            // (in other words, to the defaults).
            //
            ui16Count = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	857b      	strh	r3, [r7, #42]	@ 0x2a
            cFill = ' ';
 8000a92:	2320      	movs	r3, #32
 8000a94:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
again:

            //
            // Determine how to handle the next character.
            //
            switch(*pc_string++)
 8000a98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a9a:	1c5a      	adds	r2, r3, #1
 8000a9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	3b25      	subs	r3, #37	@ 0x25
 8000aa2:	2b53      	cmp	r3, #83	@ 0x53
 8000aa4:	f200 81ae 	bhi.w	8000e04 <UART_Printf+0x3d0>
 8000aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8000ab0 <UART_Printf+0x7c>)
 8000aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aae:	bf00      	nop
 8000ab0:	08000df5 	.word	0x08000df5
 8000ab4:	08000e05 	.word	0x08000e05
 8000ab8:	08000e05 	.word	0x08000e05
 8000abc:	08000e05 	.word	0x08000e05
 8000ac0:	08000e05 	.word	0x08000e05
 8000ac4:	08000e05 	.word	0x08000e05
 8000ac8:	08000e05 	.word	0x08000e05
 8000acc:	08000e05 	.word	0x08000e05
 8000ad0:	08000e05 	.word	0x08000e05
 8000ad4:	08000e05 	.word	0x08000e05
 8000ad8:	08000e05 	.word	0x08000e05
 8000adc:	08000c01 	.word	0x08000c01
 8000ae0:	08000c01 	.word	0x08000c01
 8000ae4:	08000c01 	.word	0x08000c01
 8000ae8:	08000c01 	.word	0x08000c01
 8000aec:	08000c01 	.word	0x08000c01
 8000af0:	08000c01 	.word	0x08000c01
 8000af4:	08000c01 	.word	0x08000c01
 8000af8:	08000c01 	.word	0x08000c01
 8000afc:	08000c01 	.word	0x08000c01
 8000b00:	08000c01 	.word	0x08000c01
 8000b04:	08000e05 	.word	0x08000e05
 8000b08:	08000e05 	.word	0x08000e05
 8000b0c:	08000e05 	.word	0x08000e05
 8000b10:	08000e05 	.word	0x08000e05
 8000b14:	08000e05 	.word	0x08000e05
 8000b18:	08000e05 	.word	0x08000e05
 8000b1c:	08000e05 	.word	0x08000e05
 8000b20:	08000e05 	.word	0x08000e05
 8000b24:	08000e05 	.word	0x08000e05
 8000b28:	08000e05 	.word	0x08000e05
 8000b2c:	08000e05 	.word	0x08000e05
 8000b30:	08000e05 	.word	0x08000e05
 8000b34:	08000e05 	.word	0x08000e05
 8000b38:	08000e05 	.word	0x08000e05
 8000b3c:	08000e05 	.word	0x08000e05
 8000b40:	08000e05 	.word	0x08000e05
 8000b44:	08000e05 	.word	0x08000e05
 8000b48:	08000e05 	.word	0x08000e05
 8000b4c:	08000e05 	.word	0x08000e05
 8000b50:	08000e05 	.word	0x08000e05
 8000b54:	08000e05 	.word	0x08000e05
 8000b58:	08000e05 	.word	0x08000e05
 8000b5c:	08000e05 	.word	0x08000e05
 8000b60:	08000e05 	.word	0x08000e05
 8000b64:	08000e05 	.word	0x08000e05
 8000b68:	08000e05 	.word	0x08000e05
 8000b6c:	08000e05 	.word	0x08000e05
 8000b70:	08000e05 	.word	0x08000e05
 8000b74:	08000e05 	.word	0x08000e05
 8000b78:	08000e05 	.word	0x08000e05
 8000b7c:	08000cf5 	.word	0x08000cf5
 8000b80:	08000e05 	.word	0x08000e05
 8000b84:	08000e05 	.word	0x08000e05
 8000b88:	08000e05 	.word	0x08000e05
 8000b8c:	08000e05 	.word	0x08000e05
 8000b90:	08000e05 	.word	0x08000e05
 8000b94:	08000e05 	.word	0x08000e05
 8000b98:	08000e05 	.word	0x08000e05
 8000b9c:	08000e05 	.word	0x08000e05
 8000ba0:	08000e05 	.word	0x08000e05
 8000ba4:	08000e05 	.word	0x08000e05
 8000ba8:	08000c37 	.word	0x08000c37
 8000bac:	08000c53 	.word	0x08000c53
 8000bb0:	08000e05 	.word	0x08000e05
 8000bb4:	08000e05 	.word	0x08000e05
 8000bb8:	08000e05 	.word	0x08000e05
 8000bbc:	08000e05 	.word	0x08000e05
 8000bc0:	08000c53 	.word	0x08000c53
 8000bc4:	08000e05 	.word	0x08000e05
 8000bc8:	08000e05 	.word	0x08000e05
 8000bcc:	08000e05 	.word	0x08000e05
 8000bd0:	08000e05 	.word	0x08000e05
 8000bd4:	08000e05 	.word	0x08000e05
 8000bd8:	08000e05 	.word	0x08000e05
 8000bdc:	08000cf5 	.word	0x08000cf5
 8000be0:	08000e05 	.word	0x08000e05
 8000be4:	08000e05 	.word	0x08000e05
 8000be8:	08000c83 	.word	0x08000c83
 8000bec:	08000e05 	.word	0x08000e05
 8000bf0:	08000cdb 	.word	0x08000cdb
 8000bf4:	08000e05 	.word	0x08000e05
 8000bf8:	08000e05 	.word	0x08000e05
 8000bfc:	08000cf5 	.word	0x08000cf5
                {
                    //
                    // If this is a zero, and it is the first digit, then the
                    // fill character is a zero instead of a space.
                    //
                    if((pc_string[-1] == '0') && (ui16Count == 0))
 8000c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c02:	3b01      	subs	r3, #1
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b30      	cmp	r3, #48	@ 0x30
 8000c08:	d105      	bne.n	8000c16 <UART_Printf+0x1e2>
 8000c0a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d102      	bne.n	8000c16 <UART_Printf+0x1e2>
                    {
                        cFill = '0';
 8000c10:	2330      	movs	r3, #48	@ 0x30
 8000c12:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                    }

                    //
                    // Update the digit count.
                    //
                    ui16Count *= 10;
 8000c16:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000c18:	461a      	mov	r2, r3
 8000c1a:	0092      	lsls	r2, r2, #2
 8000c1c:	4413      	add	r3, r2
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	857b      	strh	r3, [r7, #42]	@ 0x2a
                    ui16Count += pc_string[-1] - '0';
 8000c22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c24:	3b01      	subs	r3, #1
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000c2c:	4413      	add	r3, r2
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	3b30      	subs	r3, #48	@ 0x30
 8000c32:	857b      	strh	r3, [r7, #42]	@ 0x2a

                    //
                    // Get the next character.
                    //
                    goto again;
 8000c34:	e730      	b.n	8000a98 <UART_Printf+0x64>
                case 'c':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui16Value = va_arg(vaArgP, int);
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	1d1a      	adds	r2, r3, #4
 8000c3a:	60ba      	str	r2, [r7, #8]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	83fb      	strh	r3, [r7, #30]

                    //
                    // Print out the character.
                    //
                    UART_Write(p_uart, (char *)&ui16Value, 1);
 8000c42:	f107 031e 	add.w	r3, r7, #30
 8000c46:	2201      	movs	r2, #1
 8000c48:	4619      	mov	r1, r3
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff fe76 	bl	800093c <UART_Write>

                    //
                    // This command has been handled.
                    //
                    break;
 8000c50:	e0df      	b.n	8000e12 <UART_Printf+0x3de>
                case 'i':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui16Value = va_arg(vaArgP, int);
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	1d1a      	adds	r2, r3, #4
 8000c56:	60ba      	str	r2, [r7, #8]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	83fb      	strh	r3, [r7, #30]

                    //
                    // Reset the buffer position.
                    //
                    ui16Pos = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	85bb      	strh	r3, [r7, #44]	@ 0x2c

                    //
                    // If the value is negative, make it positive and indicate
                    // that a minus sign is needed.
                    //
                    if((int16_t)ui16Value < 0)
 8000c62:	8bfb      	ldrh	r3, [r7, #30]
 8000c64:	b21b      	sxth	r3, r3
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	da06      	bge.n	8000c78 <UART_Printf+0x244>
                    {
                        //
                        // Make the value positive.
                        //
                        ui16Value = -(int16_t)ui16Value;
 8000c6a:	8bfb      	ldrh	r3, [r7, #30]
 8000c6c:	425b      	negs	r3, r3
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	83fb      	strh	r3, [r7, #30]

                        //
                        // Indicate that the value is negative.
                        //
                        ui16Neg = 1;
 8000c72:	2301      	movs	r3, #1
 8000c74:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000c76:	e001      	b.n	8000c7c <UART_Printf+0x248>
                    {
                        //
                        // Indicate that the value is positive so that a minus
                        // sign isn't inserted.
                        //
                        ui16Neg = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	84fb      	strh	r3, [r7, #38]	@ 0x26
                    }

                    //
                    // Set the base to 10.
                    //
                    ui16Base = 10;
 8000c7c:	230a      	movs	r3, #10
 8000c7e:	853b      	strh	r3, [r7, #40]	@ 0x28

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
 8000c80:	e044      	b.n	8000d0c <UART_Printf+0x2d8>
                case 's':
                {
                    //
                    // Get the string pointer from the varargs.
                    //
                    pcStr = va_arg(vaArgP, char *);
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	1d1a      	adds	r2, r3, #4
 8000c86:	60ba      	str	r2, [r7, #8]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	623b      	str	r3, [r7, #32]

                    //
                    // Determine the length of the string.
                    //
                    for(ui16Idx = 0; pcStr[ui16Idx] != '\0'; ui16Idx++)
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000c90:	e002      	b.n	8000c98 <UART_Printf+0x264>
 8000c92:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000c94:	3301      	adds	r3, #1
 8000c96:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000c98:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000c9a:	6a3a      	ldr	r2, [r7, #32]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d1f6      	bne.n	8000c92 <UART_Printf+0x25e>
                    }

                    //
                    // Write the string.
                    //
                    UART_Write(p_uart, pcStr, ui16Idx);
 8000ca4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	6a39      	ldr	r1, [r7, #32]
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff fe46 	bl	800093c <UART_Write>

                    //
                    // Write any required padding spaces
                    //
                    if(ui16Count > ui16Idx)
 8000cb0:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8000cb2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	f240 80ab 	bls.w	8000e10 <UART_Printf+0x3dc>
                    {
                        ui16Count -= ui16Idx;
 8000cba:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8000cbc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	857b      	strh	r3, [r7, #42]	@ 0x2a
                        while(ui16Count--)
 8000cc2:	e004      	b.n	8000cce <UART_Printf+0x29a>
                        {
                            UART_Write(p_uart, " ", 1);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	4959      	ldr	r1, [pc, #356]	@ (8000e2c <UART_Printf+0x3f8>)
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f7ff fe37 	bl	800093c <UART_Write>
                        while(ui16Count--)
 8000cce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000cd0:	1e5a      	subs	r2, r3, #1
 8000cd2:	857a      	strh	r2, [r7, #42]	@ 0x2a
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d1f5      	bne.n	8000cc4 <UART_Printf+0x290>
                    }

                    //
                    // This command has been handled.
                    //
                    break;
 8000cd8:	e09a      	b.n	8000e10 <UART_Printf+0x3dc>
                case 'u':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui16Value = va_arg(vaArgP, int);
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	1d1a      	adds	r2, r3, #4
 8000cde:	60ba      	str	r2, [r7, #8]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	83fb      	strh	r3, [r7, #30]

                    //
                    // Reset the buffer position.
                    //
                    ui16Pos = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	85bb      	strh	r3, [r7, #44]	@ 0x2c

                    //
                    // Set the base to 10.
                    //
                    ui16Base = 10;
 8000cea:	230a      	movs	r3, #10
 8000cec:	853b      	strh	r3, [r7, #40]	@ 0x28

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui16Neg = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	84fb      	strh	r3, [r7, #38]	@ 0x26

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
 8000cf2:	e00b      	b.n	8000d0c <UART_Printf+0x2d8>
                case 'p':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui16Value = va_arg(vaArgP, int);
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	1d1a      	adds	r2, r3, #4
 8000cf8:	60ba      	str	r2, [r7, #8]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	83fb      	strh	r3, [r7, #30]

                    //
                    // Reset the buffer position.
                    //
                    ui16Pos = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	85bb      	strh	r3, [r7, #44]	@ 0x2c

                    //
                    // Set the base to 16.
                    //
                    ui16Base = 16;
 8000d04:	2310      	movs	r3, #16
 8000d06:	853b      	strh	r3, [r7, #40]	@ 0x28

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui16Neg = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	84fb      	strh	r3, [r7, #38]	@ 0x26
                    //
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ui16Idx = 1;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000d10:	e007      	b.n	8000d22 <UART_Printf+0x2ee>
                        (((ui16Idx * ui16Base) <= ui16Value) &&
                         (((ui16Idx * ui16Base) / ui16Base) == ui16Idx));
                        ui16Idx *= ui16Base, ui16Count--)
 8000d12:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000d14:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000d16:	fb12 f303 	smulbb	r3, r2, r3
 8000d1a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000d1c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	857b      	strh	r3, [r7, #42]	@ 0x2a
                        (((ui16Idx * ui16Base) <= ui16Value) &&
 8000d22:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000d24:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000d26:	fb02 f303 	mul.w	r3, r2, r3
 8000d2a:	8bfa      	ldrh	r2, [r7, #30]
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	ddf0      	ble.n	8000d12 <UART_Printf+0x2de>

                    //
                    // If the value is negative, reduce the count of padding
                    // characters needed.
                    //
                    if(ui16Neg)
 8000d30:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d002      	beq.n	8000d3c <UART_Printf+0x308>
                    {
                        ui16Count--;
 8000d36:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	857b      	strh	r3, [r7, #42]	@ 0x2a

                    //
                    // If the value is negative and the value is padded with
                    // zeros, then place the minus sign before the padding.
                    //
                    if(ui16Neg && (cFill == '0'))
 8000d3c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d00d      	beq.n	8000d5e <UART_Printf+0x32a>
 8000d42:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000d46:	2b30      	cmp	r3, #48	@ 0x30
 8000d48:	d109      	bne.n	8000d5e <UART_Printf+0x32a>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui16Pos++] = '-';
 8000d4a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000d4c:	1c5a      	adds	r2, r3, #1
 8000d4e:	85ba      	strh	r2, [r7, #44]	@ 0x2c
 8000d50:	3330      	adds	r3, #48	@ 0x30
 8000d52:	443b      	add	r3, r7
 8000d54:	222d      	movs	r2, #45	@ 0x2d
 8000d56:	f803 2c24 	strb.w	r2, [r3, #-36]

                        //
                        // The minus sign has been placed, so turn off the
                        // negative flag.
                        //
                        ui16Neg = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	84fb      	strh	r3, [r7, #38]	@ 0x26

                    //
                    // Provide additional padding at the beginning of the
                    // string conversion if needed.
                    //
                    if((ui16Count > 1) && (ui16Count < 16))
 8000d5e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d915      	bls.n	8000d90 <UART_Printf+0x35c>
 8000d64:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000d66:	2b0f      	cmp	r3, #15
 8000d68:	d812      	bhi.n	8000d90 <UART_Printf+0x35c>
                    {
                        for(ui16Count--; ui16Count; ui16Count--)
 8000d6a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000d6c:	3b01      	subs	r3, #1
 8000d6e:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8000d70:	e00b      	b.n	8000d8a <UART_Printf+0x356>
                        {
                            pcBuf[ui16Pos++] = cFill;
 8000d72:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000d74:	1c5a      	adds	r2, r3, #1
 8000d76:	85ba      	strh	r2, [r7, #44]	@ 0x2c
 8000d78:	3330      	adds	r3, #48	@ 0x30
 8000d7a:	443b      	add	r3, r7
 8000d7c:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8000d80:	f803 2c24 	strb.w	r2, [r3, #-36]
                        for(ui16Count--; ui16Count; ui16Count--)
 8000d84:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000d86:	3b01      	subs	r3, #1
 8000d88:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8000d8a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d1f0      	bne.n	8000d72 <UART_Printf+0x33e>

                    //
                    // If the value is negative, then place the minus sign
                    // before the number.
                    //
                    if(ui16Neg)
 8000d90:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d023      	beq.n	8000dde <UART_Printf+0x3aa>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui16Pos++] = '-';
 8000d96:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000d98:	1c5a      	adds	r2, r3, #1
 8000d9a:	85ba      	strh	r2, [r7, #44]	@ 0x2c
 8000d9c:	3330      	adds	r3, #48	@ 0x30
 8000d9e:	443b      	add	r3, r7
 8000da0:	222d      	movs	r2, #45	@ 0x2d
 8000da2:	f803 2c24 	strb.w	r2, [r3, #-36]
                    }

                    //
                    // Convert the value into a string.
                    //
                    for(; ui16Idx; ui16Idx /= ui16Base)
 8000da6:	e01a      	b.n	8000dde <UART_Printf+0x3aa>
                    {
                        pcBuf[ui16Pos++] =
                            HEX_reference[(ui16Value / ui16Idx) % ui16Base];
 8000da8:	4821      	ldr	r0, [pc, #132]	@ (8000e30 <UART_Printf+0x3fc>)
 8000daa:	8bfa      	ldrh	r2, [r7, #30]
 8000dac:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	461a      	mov	r2, r3
 8000db6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000db8:	fb92 f1f3 	sdiv	r1, r2, r3
 8000dbc:	fb01 f303 	mul.w	r3, r1, r3
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	18c2      	adds	r2, r0, r3
                        pcBuf[ui16Pos++] =
 8000dc4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000dc6:	1c59      	adds	r1, r3, #1
 8000dc8:	85b9      	strh	r1, [r7, #44]	@ 0x2c
                            HEX_reference[(ui16Value / ui16Idx) % ui16Base];
 8000dca:	7812      	ldrb	r2, [r2, #0]
                        pcBuf[ui16Pos++] =
 8000dcc:	3330      	adds	r3, #48	@ 0x30
 8000dce:	443b      	add	r3, r7
 8000dd0:	f803 2c24 	strb.w	r2, [r3, #-36]
                    for(; ui16Idx; ui16Idx /= ui16Base)
 8000dd4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000dd6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ddc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000dde:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1e1      	bne.n	8000da8 <UART_Printf+0x374>
                    }

                    //
                    // Write the string.
                    //
                    UART_Write(p_uart, pcBuf, ui16Pos);
 8000de4:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	4619      	mov	r1, r3
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff fda5 	bl	800093c <UART_Write>

                    //
                    // This command has been handled.
                    //
                    break;
 8000df2:	e00e      	b.n	8000e12 <UART_Printf+0x3de>
                case '%':
                {
                    //
                    // Simply write a single %.
                    //
                    UART_Write(p_uart, pc_string - 1, 1);
 8000df4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000df6:	3b01      	subs	r3, #1
 8000df8:	2201      	movs	r2, #1
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff fd9d 	bl	800093c <UART_Write>

                    //
                    // This command has been handled.
                    //
                    break;
 8000e02:	e006      	b.n	8000e12 <UART_Printf+0x3de>
                default:
                {
                    //
                    // Indicate an error.
                    //
                    UART_Write(p_uart, "ERROR", 5);
 8000e04:	2205      	movs	r2, #5
 8000e06:	490b      	ldr	r1, [pc, #44]	@ (8000e34 <UART_Printf+0x400>)
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff fd97 	bl	800093c <UART_Write>

                    //
                    // This command has been handled.
                    //
                    break;
 8000e0e:	e000      	b.n	8000e12 <UART_Printf+0x3de>
                    break;
 8000e10:	bf00      	nop
    while(*pc_string)
 8000e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f47f ae15 	bne.w	8000a46 <UART_Printf+0x12>
                }
            }
        }
    }
    va_end(vaArgP);
}
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
 8000e20:	3734      	adds	r7, #52	@ 0x34
 8000e22:	46bd      	mov	sp, r7
 8000e24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e28:	b003      	add	sp, #12
 8000e2a:	4770      	bx	lr
 8000e2c:	08005058 	.word	0x08005058
 8000e30:	08005044 	.word	0x08005044
 8000e34:	0800505c 	.word	0x0800505c

08000e38 <UART_Get_Char>:
//!
//! \return Returns the character read.
//
//*****************************************************************************
char UART_Get_Char(uart_stdio_typedef* p_uart)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

    char return_char;

    if (RX_BUFFER_EMPTY(p_uart))
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f103 021a 	add.w	r2, r3, #26
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3318      	adds	r3, #24
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4610      	mov	r0, r2
 8000e4e:	f000 f83c 	bl	8000eca <UART_is_buffer_empty>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <UART_Get_Char+0x24>
    {
        return 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	e011      	b.n	8000e80 <UART_Get_Char+0x48>
    }

    //
    // Read a character from the buffer.
    //
    return_char = p_uart->p_RX_buffer[p_uart->RX_read_index];
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	695b      	ldr	r3, [r3, #20]
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	8b52      	ldrh	r2, [r2, #26]
 8000e64:	b292      	uxth	r2, r2
 8000e66:	4413      	add	r3, r2
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	73fb      	strb	r3, [r7, #15]
    ADVANCE_RX_READ_INDEX(p_uart);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f103 021a 	add.w	r2, r3, #26
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	891b      	ldrh	r3, [r3, #8]
 8000e76:	4619      	mov	r1, r3
 8000e78:	4610      	mov	r0, r2
 8000e7a:	f000 f83e 	bl	8000efa <UART_advance_buffer_index>

    //
    // Return the character to the caller.
    //
    return(return_char);
 8000e7e:	7bfb      	ldrb	r3, [r7, #15]

}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <UART_is_buffer_full>:
//
//*****************************************************************************

uint8_t UART_is_buffer_full(volatile uint16_t *pui16Read,
             volatile uint16_t *pui16Write, uint16_t ui16Size)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b087      	sub	sp, #28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	4613      	mov	r3, r2
 8000e94:	80fb      	strh	r3, [r7, #6]
    uint16_t ui16Write;
    uint16_t ui16Read;

    ui16Write = *pui16Write;
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	881b      	ldrh	r3, [r3, #0]
 8000e9a:	82fb      	strh	r3, [r7, #22]
    ui16Read = *pui16Read;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	82bb      	strh	r3, [r7, #20]

    return((((ui16Write + 1) % ui16Size) == ui16Read) ? 1 : 0);
 8000ea2:	8afb      	ldrh	r3, [r7, #22]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	88fa      	ldrh	r2, [r7, #6]
 8000ea8:	fb93 f1f2 	sdiv	r1, r3, r2
 8000eac:	fb01 f202 	mul.w	r2, r1, r2
 8000eb0:	1a9a      	subs	r2, r3, r2
 8000eb2:	8abb      	ldrh	r3, [r7, #20]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	bf0c      	ite	eq
 8000eb8:	2301      	moveq	r3, #1
 8000eba:	2300      	movne	r3, #0
 8000ebc:	b2db      	uxtb	r3, r3
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	371c      	adds	r7, #28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <UART_is_buffer_empty>:
//
//*****************************************************************************

uint8_t UART_is_buffer_empty(volatile uint16_t *pui16Read,
              volatile uint16_t *pui16Write)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b085      	sub	sp, #20
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
 8000ed2:	6039      	str	r1, [r7, #0]
    uint16_t ui16Write;
    uint16_t ui16Read;

    ui16Write = *pui16Write;
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	881b      	ldrh	r3, [r3, #0]
 8000ed8:	81fb      	strh	r3, [r7, #14]
    ui16Read = *pui16Read;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	81bb      	strh	r3, [r7, #12]

    return((ui16Read == ui16Write) ? 1 : 0);
 8000ee0:	89ba      	ldrh	r2, [r7, #12]
 8000ee2:	89fb      	ldrh	r3, [r7, #14]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	bf0c      	ite	eq
 8000ee8:	2301      	moveq	r3, #1
 8000eea:	2300      	movne	r3, #0
 8000eec:	b2db      	uxtb	r3, r3
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <UART_advance_buffer_index>:
//! \return Returns the number of bytes of data currently in the buffer.
//
//*****************************************************************************

uint16_t UART_advance_buffer_index(volatile uint16_t* pui16Index, uint16_t ui16Size)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
 8000f02:	460b      	mov	r3, r1
 8000f04:	807b      	strh	r3, [r7, #2]
    *pui16Index = (*pui16Index + 1) % ui16Size;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	881b      	ldrh	r3, [r3, #0]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	887a      	ldrh	r2, [r7, #2]
 8000f10:	fb93 f1f2 	sdiv	r1, r3, r2
 8000f14:	fb01 f202 	mul.w	r2, r1, r2
 8000f18:	1a9b      	subs	r3, r3, r2
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	801a      	strh	r2, [r3, #0]

    return(*pui16Index);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	b29b      	uxth	r3, r3
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <UART_Prime_Transmit>:
// Take as many bytes from the transmit buffer as we have space for and move
// them into the UART transmit FIFO.
//
//*****************************************************************************
void UART_Prime_Transmit(uart_stdio_typedef* p_uart)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
    //
    // Do we have any data to transmit?
    //
    if(!TX_BUFFER_EMPTY(p_uart))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f103 0212 	add.w	r2, r3, #18
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3310      	adds	r3, #16
 8000f44:	4619      	mov	r1, r3
 8000f46:	4610      	mov	r0, r2
 8000f48:	f7ff ffbf 	bl	8000eca <UART_is_buffer_empty>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d120      	bne.n	8000f94 <UART_Prime_Transmit+0x62>
    {
        NVIC_DisableIRQ(p_uart->irqn);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fbd3 	bl	8000704 <__NVIC_DisableIRQ>

        LL_USART_TransmitData8(p_uart->handle, p_uart->p_TX_buffer[p_uart->TX_read_index]);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6818      	ldr	r0, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	8a52      	ldrh	r2, [r2, #18]
 8000f6a:	b292      	uxth	r2, r2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4619      	mov	r1, r3
 8000f72:	f7ff fc67 	bl	8000844 <LL_USART_TransmitData8>
        ADVANCE_TX_READ_INDEX(p_uart);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f103 0212 	add.w	r2, r3, #18
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	88db      	ldrh	r3, [r3, #6]
 8000f80:	4619      	mov	r1, r3
 8000f82:	4610      	mov	r0, r2
 8000f84:	f7ff ffb9 	bl	8000efa <UART_advance_buffer_index>

        NVIC_EnableIRQ(p_uart->irqn);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fb9a 	bl	80006c8 <__NVIC_EnableIRQ>
    }
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <CmdLineProcess>:
//! \b CMDLINE_TOO_MANY_ARGS if there are more arguments than can be parsed.
//! Otherwise it returns the code that was returned by the command function.
//
//*****************************************************************************
uint8_t CmdLineProcess(char *pcCmdLine, USART_TypeDef* USARTx)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
    char *pcChar;
    uint_fast8_t ui8Argc;
    bool bFindArg = true;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]

    //
    // Initialize the argument counter, and point to the beginning of the
    // command line string.
    //
    ui8Argc = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
    pcChar = pcCmdLine;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	617b      	str	r3, [r7, #20]

    //
    // Advance through the command line until a zero character is found.
    //
    while(*pcChar)
 8000fb2:	e01f      	b.n	8000ff4 <CmdLineProcess+0x58>
    {
        //
        // If there is a space, then replace it with a zero, and set the flag
        // to search for the next argument.
        //
        if(*pcChar == ' ')
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b20      	cmp	r3, #32
 8000fba:	d105      	bne.n	8000fc8 <CmdLineProcess+0x2c>
        {
            *pcChar = 0;
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
            bFindArg = true;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	73fb      	strb	r3, [r7, #15]
 8000fc6:	e012      	b.n	8000fee <CmdLineProcess+0x52>
        {
            //
            // If bFindArg is set, then that means we are looking for the start
            // of the next argument.
            //
            if(bFindArg)
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d00f      	beq.n	8000fee <CmdLineProcess+0x52>
                //
                // As long as the maximum number of arguments has not been
                // reached, then save the pointer to the start of this new arg
                // in the argv array, and increment the count of args, argc.
                //
                if(ui8Argc < CMDLINE_MAX_ARGS)
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	2b07      	cmp	r3, #7
 8000fd2:	d80a      	bhi.n	8000fea <CmdLineProcess+0x4e>
                {
                    g_ppcArgv[ui8Argc] = pcChar;
 8000fd4:	4920      	ldr	r1, [pc, #128]	@ (8001058 <CmdLineProcess+0xbc>)
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	697a      	ldr	r2, [r7, #20]
 8000fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    ui8Argc++;
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	613b      	str	r3, [r7, #16]
                    bFindArg = false;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	73fb      	strb	r3, [r7, #15]
 8000fe8:	e001      	b.n	8000fee <CmdLineProcess+0x52>
                // The maximum number of arguments has been reached so return
                // the error.
                //
                else
                {
                    return(CMDLINE_TOO_MANY_ARGS);
 8000fea:	2302      	movs	r3, #2
 8000fec:	e030      	b.n	8001050 <CmdLineProcess+0xb4>
        }

        //
        // Advance to the next character in the command line.
        //
        pcChar++;
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	617b      	str	r3, [r7, #20]
    while(*pcChar)
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1db      	bne.n	8000fb4 <CmdLineProcess+0x18>
    }

    //
    // If one or more arguments was found, then process the command.
    //
    if(ui8Argc)
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d025      	beq.n	800104e <CmdLineProcess+0xb2>
    {
        g_ppcArgv[ui8Argc] = (char*)USARTx;
 8001002:	4915      	ldr	r1, [pc, #84]	@ (8001058 <CmdLineProcess+0xbc>)
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        ui8Argc++;
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	3301      	adds	r3, #1
 8001010:	613b      	str	r3, [r7, #16]
        //
        // Start at the beginning of the command table, to look for a matching
        // command.
        //
        psCmdEntry = &g_psCmdTable[0];
 8001012:	4b12      	ldr	r3, [pc, #72]	@ (800105c <CmdLineProcess+0xc0>)
 8001014:	60bb      	str	r3, [r7, #8]

        //
        // Search through the command table until a null command string is
        // found, which marks the end of the table.
        //
        while(psCmdEntry->pcCmd)
 8001016:	e016      	b.n	8001046 <CmdLineProcess+0xaa>
            //
            // If this command entry command string matches argv[0], then call
            // the function for this command, passing the command line
            // arguments.
            //
            if(!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
 8001018:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <CmdLineProcess+0xbc>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4619      	mov	r1, r3
 8001022:	4610      	mov	r0, r2
 8001024:	f7ff f8d0 	bl	80001c8 <strcmp>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d108      	bne.n	8001040 <CmdLineProcess+0xa4>
            {
                return(psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4908      	ldr	r1, [pc, #32]	@ (8001058 <CmdLineProcess+0xbc>)
 8001036:	4610      	mov	r0, r2
 8001038:	4798      	blx	r3
 800103a:	4603      	mov	r3, r0
 800103c:	b2db      	uxtb	r3, r3
 800103e:	e007      	b.n	8001050 <CmdLineProcess+0xb4>
            }

            //
            // Not found, so advance to the next entry.
            //
            psCmdEntry++;
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	330c      	adds	r3, #12
 8001044:	60bb      	str	r3, [r7, #8]
        while(psCmdEntry->pcCmd)
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1e4      	bne.n	8001018 <CmdLineProcess+0x7c>

    //
    // Fall through to here means that no matching command was found, so return
    // an error.
    //
    return(CMDLINE_BAD_CMD);
 800104e:	2301      	movs	r3, #1
}
 8001050:	4618      	mov	r0, r3
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200021d0 	.word	0x200021d0
 800105c:	20000018 	.word	0x20000018

08001060 <LL_USART_IsActiveFlag_RXNE>:
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0320 	and.w	r3, r3, #32
 8001070:	2b20      	cmp	r3, #32
 8001072:	bf0c      	ite	eq
 8001074:	2301      	moveq	r3, #1
 8001076:	2300      	movne	r3, #0
 8001078:	b2db      	uxtb	r3, r3
}
 800107a:	4618      	mov	r0, r3
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <LL_USART_IsActiveFlag_TXE>:
{
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001096:	2b80      	cmp	r3, #128	@ 0x80
 8001098:	bf0c      	ite	eq
 800109a:	2301      	moveq	r3, #1
 800109c:	2300      	movne	r3, #0
 800109e:	b2db      	uxtb	r3, r3
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <LL_USART_DisableIT_TXE>:
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	@ 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	330c      	adds	r3, #12
 80010b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	e853 3f00 	ldrex	r3, [r3]
 80010c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80010c8:	61fb      	str	r3, [r7, #28]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	330c      	adds	r3, #12
 80010ce:	69fa      	ldr	r2, [r7, #28]
 80010d0:	61ba      	str	r2, [r7, #24]
 80010d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80010d4:	6979      	ldr	r1, [r7, #20]
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	e841 2300 	strex	r3, r2, [r1]
 80010dc:	613b      	str	r3, [r7, #16]
   return(result);
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1e7      	bne.n	80010b4 <LL_USART_DisableIT_TXE+0x8>
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3724      	adds	r7, #36	@ 0x24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <LL_USART_ReceiveData8>:
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	b2db      	uxtb	r3, r3
}
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	619a      	str	r2, [r3, #24]
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <command_init>:
		9
	}
};

void	command_init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af04      	add	r7, sp, #16
    UART_Init( &CONSOLE_UART, EXP_UART_HANDLE, EXP_UART_IRQ,
 800112e:	2340      	movs	r3, #64	@ 0x40
 8001130:	9302      	str	r3, [sp, #8]
 8001132:	2340      	movs	r3, #64	@ 0x40
 8001134:	9301      	str	r3, [sp, #4]
 8001136:	4b13      	ldr	r3, [pc, #76]	@ (8001184 <command_init+0x5c>)
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <command_init+0x60>)
 800113c:	2227      	movs	r2, #39	@ 0x27
 800113e:	4913      	ldr	r1, [pc, #76]	@ (800118c <command_init+0x64>)
 8001140:	4813      	ldr	r0, [pc, #76]	@ (8001190 <command_init+0x68>)
 8001142:	f7ff fb8e 	bl	8000862 <UART_Init>
				g_EXP_UART_TX_buffer, g_EXP_UART_RX_buffer,
				sizeof(g_EXP_UART_TX_buffer), sizeof(g_EXP_UART_RX_buffer));
    CMD_line.p_buffer       = g_CMD_line_buffer;
 8001146:	4b13      	ldr	r3, [pc, #76]	@ (8001194 <command_init+0x6c>)
 8001148:	4a13      	ldr	r2, [pc, #76]	@ (8001198 <command_init+0x70>)
 800114a:	605a      	str	r2, [r3, #4]
	CMD_line.buffer_size    = 64;
 800114c:	4b11      	ldr	r3, [pc, #68]	@ (8001194 <command_init+0x6c>)
 800114e:	2240      	movs	r2, #64	@ 0x40
 8001150:	801a      	strh	r2, [r3, #0]
	CMD_line.write_index 	= 0;
 8001152:	4b10      	ldr	r3, [pc, #64]	@ (8001194 <command_init+0x6c>)
 8001154:	2200      	movs	r2, #0
 8001156:	811a      	strh	r2, [r3, #8]
	if(CMD_line.buffer_size != 0)
 8001158:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <command_init+0x6c>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d006      	beq.n	800116e <command_init+0x46>
	{
		memset((void *)CMD_line.p_buffer, 0, sizeof(CMD_line.p_buffer));
 8001160:	4b0c      	ldr	r3, [pc, #48]	@ (8001194 <command_init+0x6c>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2204      	movs	r2, #4
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f003 ff2d 	bl	8004fc8 <memset>
	}
	//command_send_splash();
	UART_Send_String(&CONSOLE_UART, "EXP FIRMWARE V1.0.0\n");
 800116e:	490b      	ldr	r1, [pc, #44]	@ (800119c <command_init+0x74>)
 8001170:	4807      	ldr	r0, [pc, #28]	@ (8001190 <command_init+0x68>)
 8001172:	f7ff fbd0 	bl	8000916 <UART_Send_String>
	UART_Send_String(&CONSOLE_UART, "> ");
 8001176:	490a      	ldr	r1, [pc, #40]	@ (80011a0 <command_init+0x78>)
 8001178:	4805      	ldr	r0, [pc, #20]	@ (8001190 <command_init+0x68>)
 800117a:	f7ff fbcc 	bl	8000916 <UART_Send_String>
}
 800117e:	bf00      	nop
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20002254 	.word	0x20002254
 8001188:	20002214 	.word	0x20002214
 800118c:	40004800 	.word	0x40004800
 8001190:	200021f4 	.word	0x200021f4
 8001194:	20002294 	.word	0x20002294
 8001198:	200022a0 	.word	0x200022a0
 800119c:	080051fc 	.word	0x080051fc
 80011a0:	08005214 	.word	0x08005214

080011a4 <command_task_update>:
//static char s_commandHistory[MAX_HISTORY][MAX_CMD_LENGTH];
//static int s_historyCount = 0;
//static int s_historyIndex = 0;

static void command_task_update(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
	uint8_t cmd_return, time_out;
	for(time_out = 50; (!RX_BUFFER_EMPTY(&CONSOLE_UART)) && (time_out != 0); time_out--)
 80011aa:	2332      	movs	r3, #50	@ 0x32
 80011ac:	71fb      	strb	r3, [r7, #7]
 80011ae:	e08d      	b.n	80012cc <command_task_update+0x128>
	{
		CMD_line.RX_char = UART_Get_Char(&CONSOLE_UART);
 80011b0:	484f      	ldr	r0, [pc, #316]	@ (80012f0 <command_task_update+0x14c>)
 80011b2:	f7ff fe41 	bl	8000e38 <UART_Get_Char>
 80011b6:	4603      	mov	r3, r0
 80011b8:	461a      	mov	r2, r3
 80011ba:	4b4e      	ldr	r3, [pc, #312]	@ (80012f4 <command_task_update+0x150>)
 80011bc:	729a      	strb	r2, [r3, #10]

		if(((CMD_line.RX_char == 8) || (CMD_line.RX_char == 127)))
 80011be:	4b4d      	ldr	r3, [pc, #308]	@ (80012f4 <command_task_update+0x150>)
 80011c0:	7a9b      	ldrb	r3, [r3, #10]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b08      	cmp	r3, #8
 80011c6:	d004      	beq.n	80011d2 <command_task_update+0x2e>
 80011c8:	4b4a      	ldr	r3, [pc, #296]	@ (80012f4 <command_task_update+0x150>)
 80011ca:	7a9b      	ldrb	r3, [r3, #10]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80011d0:	d114      	bne.n	80011fc <command_task_update+0x58>
		{
			if (CMD_line.write_index == 0)
 80011d2:	4b48      	ldr	r3, [pc, #288]	@ (80012f4 <command_task_update+0x150>)
 80011d4:	891b      	ldrh	r3, [r3, #8]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f000 8083 	beq.w	80012e4 <command_task_update+0x140>
				break;
			CMD_line.write_index--;
 80011de:	4b45      	ldr	r3, [pc, #276]	@ (80012f4 <command_task_update+0x150>)
 80011e0:	891b      	ldrh	r3, [r3, #8]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	3b01      	subs	r3, #1
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	4b42      	ldr	r3, [pc, #264]	@ (80012f4 <command_task_update+0x150>)
 80011ea:	811a      	strh	r2, [r3, #8]
			UART_Send_Char(&CONSOLE_UART, CMD_line.RX_char);
 80011ec:	4b41      	ldr	r3, [pc, #260]	@ (80012f4 <command_task_update+0x150>)
 80011ee:	7a9b      	ldrb	r3, [r3, #10]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	4619      	mov	r1, r3
 80011f4:	483e      	ldr	r0, [pc, #248]	@ (80012f0 <command_task_update+0x14c>)
 80011f6:	f7ff fb7e 	bl	80008f6 <UART_Send_Char>
			break;
 80011fa:	e074      	b.n	80012e6 <command_task_update+0x142>
		}

		UART_Send_Char(&CONSOLE_UART, CMD_line.RX_char);
 80011fc:	4b3d      	ldr	r3, [pc, #244]	@ (80012f4 <command_task_update+0x150>)
 80011fe:	7a9b      	ldrb	r3, [r3, #10]
 8001200:	b2db      	uxtb	r3, r3
 8001202:	4619      	mov	r1, r3
 8001204:	483a      	ldr	r0, [pc, #232]	@ (80012f0 <command_task_update+0x14c>)
 8001206:	f7ff fb76 	bl	80008f6 <UART_Send_Char>

		if((CMD_line.RX_char == '\r') || (CMD_line.RX_char == '\n'))
 800120a:	4b3a      	ldr	r3, [pc, #232]	@ (80012f4 <command_task_update+0x150>)
 800120c:	7a9b      	ldrb	r3, [r3, #10]
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b0d      	cmp	r3, #13
 8001212:	d004      	beq.n	800121e <command_task_update+0x7a>
 8001214:	4b37      	ldr	r3, [pc, #220]	@ (80012f4 <command_task_update+0x150>)
 8001216:	7a9b      	ldrb	r3, [r3, #10]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b0a      	cmp	r3, #10
 800121c:	d134      	bne.n	8001288 <command_task_update+0xe4>
		{
			if(CMD_line.write_index > 0)
 800121e:	4b35      	ldr	r3, [pc, #212]	@ (80012f4 <command_task_update+0x150>)
 8001220:	891b      	ldrh	r3, [r3, #8]
 8001222:	b29b      	uxth	r3, r3
 8001224:	2b00      	cmp	r3, #0
 8001226:	d02a      	beq.n	800127e <command_task_update+0xda>
			{
				// Add a NUL char at the end of the CMD
				CMD_line.p_buffer[CMD_line.write_index] = 0;
 8001228:	4b32      	ldr	r3, [pc, #200]	@ (80012f4 <command_task_update+0x150>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	4a31      	ldr	r2, [pc, #196]	@ (80012f4 <command_task_update+0x150>)
 800122e:	8912      	ldrh	r2, [r2, #8]
 8001230:	b292      	uxth	r2, r2
 8001232:	4413      	add	r3, r2
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
				CMD_line.write_index++;
 8001238:	4b2e      	ldr	r3, [pc, #184]	@ (80012f4 <command_task_update+0x150>)
 800123a:	891b      	ldrh	r3, [r3, #8]
 800123c:	b29b      	uxth	r3, r3
 800123e:	3301      	adds	r3, #1
 8001240:	b29a      	uxth	r2, r3
 8001242:	4b2c      	ldr	r3, [pc, #176]	@ (80012f4 <command_task_update+0x150>)
 8001244:	811a      	strh	r2, [r3, #8]

				cmd_return = CmdLineProcess(CMD_line.p_buffer, CONSOLE_UART_HANDLE);
 8001246:	4b2b      	ldr	r3, [pc, #172]	@ (80012f4 <command_task_update+0x150>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	492b      	ldr	r1, [pc, #172]	@ (80012f8 <command_task_update+0x154>)
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fea5 	bl	8000f9c <CmdLineProcess>
 8001252:	4603      	mov	r3, r0
 8001254:	71bb      	strb	r3, [r7, #6]
				CMD_line.write_index    = 0;
 8001256:	4b27      	ldr	r3, [pc, #156]	@ (80012f4 <command_task_update+0x150>)
 8001258:	2200      	movs	r2, #0
 800125a:	811a      	strh	r2, [r3, #8]

				UART_Send_String(&CONSOLE_UART, "> ");
 800125c:	4927      	ldr	r1, [pc, #156]	@ (80012fc <command_task_update+0x158>)
 800125e:	4824      	ldr	r0, [pc, #144]	@ (80012f0 <command_task_update+0x14c>)
 8001260:	f7ff fb59 	bl	8000916 <UART_Send_String>
				UART_Printf(&CONSOLE_UART, ErrorCode[cmd_return]);
 8001264:	79bb      	ldrb	r3, [r7, #6]
 8001266:	4a26      	ldr	r2, [pc, #152]	@ (8001300 <command_task_update+0x15c>)
 8001268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126c:	4619      	mov	r1, r3
 800126e:	4820      	ldr	r0, [pc, #128]	@ (80012f0 <command_task_update+0x14c>)
 8001270:	f7ff fbe0 	bl	8000a34 <UART_Printf>
				UART_Send_String(&CONSOLE_UART, "> ");
 8001274:	4921      	ldr	r1, [pc, #132]	@ (80012fc <command_task_update+0x158>)
 8001276:	481e      	ldr	r0, [pc, #120]	@ (80012f0 <command_task_update+0x14c>)
 8001278:	f7ff fb4d 	bl	8000916 <UART_Send_String>
			if(CMD_line.write_index > 0)
 800127c:	e023      	b.n	80012c6 <command_task_update+0x122>
			}
			else
			{
				UART_Send_String(&CONSOLE_UART, "> ");
 800127e:	491f      	ldr	r1, [pc, #124]	@ (80012fc <command_task_update+0x158>)
 8001280:	481b      	ldr	r0, [pc, #108]	@ (80012f0 <command_task_update+0x14c>)
 8001282:	f7ff fb48 	bl	8000916 <UART_Send_String>
			if(CMD_line.write_index > 0)
 8001286:	e01e      	b.n	80012c6 <command_task_update+0x122>
			}
		}
		else
		{
			CMD_line.p_buffer[CMD_line.write_index] = CMD_line.RX_char;
 8001288:	4b1a      	ldr	r3, [pc, #104]	@ (80012f4 <command_task_update+0x150>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	4a19      	ldr	r2, [pc, #100]	@ (80012f4 <command_task_update+0x150>)
 800128e:	8912      	ldrh	r2, [r2, #8]
 8001290:	b292      	uxth	r2, r2
 8001292:	4413      	add	r3, r2
 8001294:	4a17      	ldr	r2, [pc, #92]	@ (80012f4 <command_task_update+0x150>)
 8001296:	7a92      	ldrb	r2, [r2, #10]
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	701a      	strb	r2, [r3, #0]
			CMD_line.write_index++;
 800129c:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <command_task_update+0x150>)
 800129e:	891b      	ldrh	r3, [r3, #8]
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	3301      	adds	r3, #1
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	4b13      	ldr	r3, [pc, #76]	@ (80012f4 <command_task_update+0x150>)
 80012a8:	811a      	strh	r2, [r3, #8]

			if (CMD_line.write_index > CMD_line.buffer_size)
 80012aa:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <command_task_update+0x150>)
 80012ac:	891b      	ldrh	r3, [r3, #8]
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	4b10      	ldr	r3, [pc, #64]	@ (80012f4 <command_task_update+0x150>)
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d906      	bls.n	80012c6 <command_task_update+0x122>
			{
				// SDKLFJSDFKS
				// > CMD too long!
				// >
				UART_Send_String(&CONSOLE_UART, "\n> CMD too long!\n> ");
 80012b8:	4912      	ldr	r1, [pc, #72]	@ (8001304 <command_task_update+0x160>)
 80012ba:	480d      	ldr	r0, [pc, #52]	@ (80012f0 <command_task_update+0x14c>)
 80012bc:	f7ff fb2b 	bl	8000916 <UART_Send_String>
				CMD_line.write_index    = 0;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	@ (80012f4 <command_task_update+0x150>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	811a      	strh	r2, [r3, #8]
	for(time_out = 50; (!RX_BUFFER_EMPTY(&CONSOLE_UART)) && (time_out != 0); time_out--)
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	3b01      	subs	r3, #1
 80012ca:	71fb      	strb	r3, [r7, #7]
 80012cc:	490e      	ldr	r1, [pc, #56]	@ (8001308 <command_task_update+0x164>)
 80012ce:	480f      	ldr	r0, [pc, #60]	@ (800130c <command_task_update+0x168>)
 80012d0:	f7ff fdfb 	bl	8000eca <UART_is_buffer_empty>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d105      	bne.n	80012e6 <command_task_update+0x142>
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f47f af67 	bne.w	80011b0 <command_task_update+0xc>
//            Uart_write(USART2, rxData);
//            process_command(USART2, rxData);
//        }
//    }

}
 80012e2:	e000      	b.n	80012e6 <command_task_update+0x142>
				break;
 80012e4:	bf00      	nop
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200021f4 	.word	0x200021f4
 80012f4:	20002294 	.word	0x20002294
 80012f8:	40004800 	.word	0x40004800
 80012fc:	08005214 	.word	0x08005214
 8001300:	20000000 	.word	0x20000000
 8001304:	08005218 	.word	0x08005218
 8001308:	2000220c 	.word	0x2000220c
 800130c:	2000220e 	.word	0x2000220e

08001310 <Cmd_help>:
//            s_commandBufferIndex = 0;
//        }
//    }
//}

int Cmd_help(int argc, char *argv[]) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
    tCmdLineEntry * pEntry;
//    USART_TypeDef * USARTx = (USART_TypeDef*)argv[argc-1];

    pEntry = &g_psCmdTable[0];
 800131a:	4b0f      	ldr	r3, [pc, #60]	@ (8001358 <Cmd_help+0x48>)
 800131c:	60fb      	str	r3, [r7, #12]
	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
    while (pEntry->pcCmd)
 800131e:	e012      	b.n	8001346 <Cmd_help+0x36>
    {
    	// Print the command name and the brief description.
        UART_Send_String(&CONSOLE_UART, pEntry->pcCmd);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4619      	mov	r1, r3
 8001326:	480d      	ldr	r0, [pc, #52]	@ (800135c <Cmd_help+0x4c>)
 8001328:	f7ff faf5 	bl	8000916 <UART_Send_String>
        UART_Send_String(&CONSOLE_UART, pEntry->pcHelp);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	4619      	mov	r1, r3
 8001332:	480a      	ldr	r0, [pc, #40]	@ (800135c <Cmd_help+0x4c>)
 8001334:	f7ff faef 	bl	8000916 <UART_Send_String>
    	UART_Send_String(&CONSOLE_UART, "\n");
 8001338:	4909      	ldr	r1, [pc, #36]	@ (8001360 <Cmd_help+0x50>)
 800133a:	4808      	ldr	r0, [pc, #32]	@ (800135c <Cmd_help+0x4c>)
 800133c:	f7ff faeb 	bl	8000916 <UART_Send_String>
        // Advance to the next entry in the table.
        pEntry++;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	330c      	adds	r3, #12
 8001344:	60fb      	str	r3, [r7, #12]
    while (pEntry->pcCmd)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1e8      	bne.n	8001320 <Cmd_help+0x10>
    }
    return (CMDLINE_OK);
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000018 	.word	0x20000018
 800135c:	200021f4 	.word	0x200021f4
 8001360:	0800522c 	.word	0x0800522c

08001364 <Cmd_on_tec_pw>:

int Cmd_on_tec_pw(int argc, char *argv[])
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
	LL_GPIO_SetOutputPin(EF_TEC_EN_GPIO_Port, EF_TEC_EN_Pin);
 800136e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001372:	4804      	ldr	r0, [pc, #16]	@ (8001384 <Cmd_on_tec_pw+0x20>)
 8001374:	f7ff feca 	bl	800110c <LL_GPIO_SetOutputPin>
	return (CMDLINE_OK);
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40020800 	.word	0x40020800

08001388 <Cmd_reset>:

int Cmd_reset(int argc, char *argv[])
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
	lt8722_reset();
 8001392:	f000 fc45 	bl	8001c20 <lt8722_reset>
	return (CMDLINE_OK);
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <Cmd_set_en_req>:

int Cmd_set_en_req(int argc, char *argv[])
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
	LL_GPIO_SetOutputPin(TEC_1_EN_GPIO_Port, TEC_1_EN_Pin);
 80013aa:	2120      	movs	r1, #32
 80013ac:	4806      	ldr	r0, [pc, #24]	@ (80013c8 <Cmd_set_en_req+0x28>)
 80013ae:	f7ff fead 	bl	800110c <LL_GPIO_SetOutputPin>
	lt8722_reg_write(LT8722_SPIS_COMMAND, 0x00004000);
 80013b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013b6:	2000      	movs	r0, #0
 80013b8:	f000 fbc4 	bl	8001b44 <lt8722_reg_write>
//	lt8722_set_enable_req(LT8722_ENABLE_REQ_ENABLED);
	return (CMDLINE_OK);
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40021000 	.word	0x40021000

080013cc <Cmd_reset_en_req>:

int Cmd_reset_en_req(int argc, char *argv[])
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
	lt8722_set_enable_req(LT8722_ENABLE_REQ_DISABLED);
 80013d6:	2000      	movs	r0, #0
 80013d8:	f000 fc02 	bl	8001be0 <lt8722_set_enable_req>
	return (CMDLINE_OK);
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <Cmd_clear_status_reg>:

int Cmd_clear_status_reg(int argc, char *argv[])
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	6039      	str	r1, [r7, #0]
	lt8722_reg_write(LT8722_SPIS_STATUS, 0);
 80013f0:	2100      	movs	r1, #0
 80013f2:	2001      	movs	r0, #1
 80013f4:	f000 fba6 	bl	8001b44 <lt8722_reg_write>
	return (CMDLINE_OK);
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <Cmd_read>:

int Cmd_read(int argc, char *argv[])
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
	uint32_t data;
	lt8722_reg_read(LT8722_SPIS_COMMAND, &data);
 800140e:	f107 030c 	add.w	r3, r7, #12
 8001412:	4619      	mov	r1, r3
 8001414:	2000      	movs	r0, #0
 8001416:	f000 fb5f 	bl	8001ad8 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_COMMAND: 0x%X-%X \n", data>>16, data);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	0c1a      	lsrs	r2, r3, #16
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4930      	ldr	r1, [pc, #192]	@ (80014e4 <Cmd_read+0xe0>)
 8001422:	4831      	ldr	r0, [pc, #196]	@ (80014e8 <Cmd_read+0xe4>)
 8001424:	f7ff fb06 	bl	8000a34 <UART_Printf>

	lt8722_reg_read(LT8722_SPIS_STATUS, &data);
 8001428:	f107 030c 	add.w	r3, r7, #12
 800142c:	4619      	mov	r1, r3
 800142e:	2001      	movs	r0, #1
 8001430:	f000 fb52 	bl	8001ad8 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_STATUS: 0x%X-%X \n", data>>16, data);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	0c1a      	lsrs	r2, r3, #16
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	492c      	ldr	r1, [pc, #176]	@ (80014ec <Cmd_read+0xe8>)
 800143c:	482a      	ldr	r0, [pc, #168]	@ (80014e8 <Cmd_read+0xe4>)
 800143e:	f7ff faf9 	bl	8000a34 <UART_Printf>

	lt8722_reg_read(LT8722_SPIS_DAC_ILIMN, &data);
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	4619      	mov	r1, r3
 8001448:	2002      	movs	r0, #2
 800144a:	f000 fb45 	bl	8001ad8 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_DAC_ILIMN: 0x%X-%X \n", data>>16, data);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	0c1a      	lsrs	r2, r3, #16
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	4926      	ldr	r1, [pc, #152]	@ (80014f0 <Cmd_read+0xec>)
 8001456:	4824      	ldr	r0, [pc, #144]	@ (80014e8 <Cmd_read+0xe4>)
 8001458:	f7ff faec 	bl	8000a34 <UART_Printf>

	lt8722_reg_read(LT8722_SPIS_DAC_ILIMP, &data);
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	4619      	mov	r1, r3
 8001462:	2003      	movs	r0, #3
 8001464:	f000 fb38 	bl	8001ad8 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_DAC_ILIMP: 0x%X-%X \n", data>>16, data);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	0c1a      	lsrs	r2, r3, #16
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4921      	ldr	r1, [pc, #132]	@ (80014f4 <Cmd_read+0xf0>)
 8001470:	481d      	ldr	r0, [pc, #116]	@ (80014e8 <Cmd_read+0xe4>)
 8001472:	f7ff fadf 	bl	8000a34 <UART_Printf>

	lt8722_reg_read(LT8722_SPIS_DAC, &data);
 8001476:	f107 030c 	add.w	r3, r7, #12
 800147a:	4619      	mov	r1, r3
 800147c:	2004      	movs	r0, #4
 800147e:	f000 fb2b 	bl	8001ad8 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_DAC: 0x%X-%X \n", data>>16, data);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	0c1a      	lsrs	r2, r3, #16
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	491b      	ldr	r1, [pc, #108]	@ (80014f8 <Cmd_read+0xf4>)
 800148a:	4817      	ldr	r0, [pc, #92]	@ (80014e8 <Cmd_read+0xe4>)
 800148c:	f7ff fad2 	bl	8000a34 <UART_Printf>

	lt8722_reg_read(LT8722_SPIS_OV_CLAMP, &data);
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	4619      	mov	r1, r3
 8001496:	2005      	movs	r0, #5
 8001498:	f000 fb1e 	bl	8001ad8 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_OV_CLAMP: 0x%X \n", data);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	461a      	mov	r2, r3
 80014a0:	4916      	ldr	r1, [pc, #88]	@ (80014fc <Cmd_read+0xf8>)
 80014a2:	4811      	ldr	r0, [pc, #68]	@ (80014e8 <Cmd_read+0xe4>)
 80014a4:	f7ff fac6 	bl	8000a34 <UART_Printf>

	lt8722_reg_read(LT8722_SPIS_UV_CLAMP, &data);
 80014a8:	f107 030c 	add.w	r3, r7, #12
 80014ac:	4619      	mov	r1, r3
 80014ae:	2006      	movs	r0, #6
 80014b0:	f000 fb12 	bl	8001ad8 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_UV_CLAMP: 0x%X \n", data);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	461a      	mov	r2, r3
 80014b8:	4911      	ldr	r1, [pc, #68]	@ (8001500 <Cmd_read+0xfc>)
 80014ba:	480b      	ldr	r0, [pc, #44]	@ (80014e8 <Cmd_read+0xe4>)
 80014bc:	f7ff faba 	bl	8000a34 <UART_Printf>

	lt8722_reg_read(LT8722_SPIS_AMUX, &data);
 80014c0:	f107 030c 	add.w	r3, r7, #12
 80014c4:	4619      	mov	r1, r3
 80014c6:	2007      	movs	r0, #7
 80014c8:	f000 fb06 	bl	8001ad8 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_AMUX: 0x%X \n", data);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	461a      	mov	r2, r3
 80014d0:	490c      	ldr	r1, [pc, #48]	@ (8001504 <Cmd_read+0x100>)
 80014d2:	4805      	ldr	r0, [pc, #20]	@ (80014e8 <Cmd_read+0xe4>)
 80014d4:	f7ff faae 	bl	8000a34 <UART_Printf>

	return (CMDLINE_OK);
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	08005230 	.word	0x08005230
 80014e8:	200021f4 	.word	0x200021f4
 80014ec:	08005248 	.word	0x08005248
 80014f0:	08005260 	.word	0x08005260
 80014f4:	0800527c 	.word	0x0800527c
 80014f8:	08005298 	.word	0x08005298
 80014fc:	080052ac 	.word	0x080052ac
 8001500:	080052c4 	.word	0x080052c4
 8001504:	080052dc 	.word	0x080052dc

08001508 <Cmd_on_tec>:


int Cmd_on_tec(int argc, char *argv[])
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
	lt8722_init();
 8001512:	f000 fc17 	bl	8001d44 <lt8722_init>
	return (CMDLINE_OK);
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <Cmd_tec_set_vol>:

int Cmd_tec_set_vol(int argc, char *argv[])
{
 8001520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001524:	b088      	sub	sp, #32
 8001526:	af00      	add	r7, sp, #0
 8001528:	6178      	str	r0, [r7, #20]
 800152a:	6139      	str	r1, [r7, #16]
//	if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
//	if (argc > 2) return CMDLINE_TOO_MANY_ARGS;

	int64_t vol = atoi(argv[1]);
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	3304      	adds	r3, #4
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f003 fcc0 	bl	8004eb8 <atoi>
 8001538:	4603      	mov	r3, r0
 800153a:	17da      	asrs	r2, r3, #31
 800153c:	469a      	mov	sl, r3
 800153e:	4693      	mov	fp, r2
 8001540:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	UART_Printf(&CONSOLE_UART, "Tec set: %d mV \n", vol);
 8001544:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001548:	4925      	ldr	r1, [pc, #148]	@ (80015e0 <Cmd_tec_set_vol+0xc0>)
 800154a:	4826      	ldr	r0, [pc, #152]	@ (80015e4 <Cmd_tec_set_vol+0xc4>)
 800154c:	f7ff fa72 	bl	8000a34 <UART_Printf>
	vol *= 1000000;
 8001550:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	f04f 0a00 	mov.w	sl, #0
 800155c:	f04f 0b00 	mov.w	fp, #0
 8001560:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8001564:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001568:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800156c:	4652      	mov	r2, sl
 800156e:	465b      	mov	r3, fp
 8001570:	1a14      	subs	r4, r2, r0
 8001572:	eb63 0501 	sbc.w	r5, r3, r1
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	f04f 0300 	mov.w	r3, #0
 800157e:	026b      	lsls	r3, r5, #9
 8001580:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001584:	0262      	lsls	r2, r4, #9
 8001586:	4614      	mov	r4, r2
 8001588:	461d      	mov	r5, r3
 800158a:	eb14 0800 	adds.w	r8, r4, r0
 800158e:	eb45 0901 	adc.w	r9, r5, r1
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	f04f 0300 	mov.w	r3, #0
 800159a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800159e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80015a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80015a6:	ebb2 0408 	subs.w	r4, r2, r8
 80015aa:	60bc      	str	r4, [r7, #8]
 80015ac:	eb63 0309 	sbc.w	r3, r3, r9
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80015b6:	4623      	mov	r3, r4
 80015b8:	181b      	adds	r3, r3, r0
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	462b      	mov	r3, r5
 80015be:	eb41 0303 	adc.w	r3, r1, r3
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80015c8:	e9c7 3406 	strd	r3, r4, [r7, #24]
	lt8722_set_output_voltage(vol);
 80015cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015d0:	f000 fc68 	bl	8001ea4 <lt8722_set_output_voltage>
	return (CMDLINE_OK);
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3720      	adds	r7, #32
 80015da:	46bd      	mov	sp, r7
 80015dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015e0:	080052f0 	.word	0x080052f0
 80015e4:	200021f4 	.word	0x200021f4

080015e8 <Cmd_get_status>:

int Cmd_get_status(int argc, char *argv[])
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
	uint16_t status;
	lt8722_get_status(&status);
 80015f2:	f107 030e 	add.w	r3, r7, #14
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 fb34 	bl	8001c64 <lt8722_get_status>
	UART_Printf(&CONSOLE_UART, "status: 0x%X \n", status);
 80015fc:	89fb      	ldrh	r3, [r7, #14]
 80015fe:	461a      	mov	r2, r3
 8001600:	4904      	ldr	r1, [pc, #16]	@ (8001614 <Cmd_get_status+0x2c>)
 8001602:	4805      	ldr	r0, [pc, #20]	@ (8001618 <Cmd_get_status+0x30>)
 8001604:	f7ff fa16 	bl	8000a34 <UART_Printf>
	return (CMDLINE_OK);
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	08005304 	.word	0x08005304
 8001618:	200021f4 	.word	0x200021f4

0800161c <Cmd_set_ov_clamp>:

int Cmd_set_ov_clamp(int argc, char *argv[])
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
	uint8_t over_vol = atoi(argv[1]);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	3304      	adds	r3, #4
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f003 fc43 	bl	8004eb8 <atoi>
 8001632:	4603      	mov	r3, r0
 8001634:	73fb      	strb	r3, [r7, #15]
	UART_Printf(&CONSOLE_UART, "OV_CLAMP: %X \n", over_vol);
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	461a      	mov	r2, r3
 800163a:	4906      	ldr	r1, [pc, #24]	@ (8001654 <Cmd_set_ov_clamp+0x38>)
 800163c:	4806      	ldr	r0, [pc, #24]	@ (8001658 <Cmd_set_ov_clamp+0x3c>)
 800163e:	f7ff f9f9 	bl	8000a34 <UART_Printf>
	lt8722_set_spis_ov_clamp(over_vol);
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	4618      	mov	r0, r3
 8001646:	f000 fb4b 	bl	8001ce0 <lt8722_set_spis_ov_clamp>
	return CMDLINE_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	08005314 	.word	0x08005314
 8001658:	200021f4 	.word	0x200021f4

0800165c <Cmd_set_uv_clamp>:
int Cmd_set_uv_clamp(int argc, char *argv[])
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
	uint8_t uper_vol = atoi(argv[1]);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	3304      	adds	r3, #4
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f003 fc23 	bl	8004eb8 <atoi>
 8001672:	4603      	mov	r3, r0
 8001674:	73fb      	strb	r3, [r7, #15]
	UART_Printf(&CONSOLE_UART, "UV_CLAMP: %X \n", uper_vol);
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	461a      	mov	r2, r3
 800167a:	4906      	ldr	r1, [pc, #24]	@ (8001694 <Cmd_set_uv_clamp+0x38>)
 800167c:	4806      	ldr	r0, [pc, #24]	@ (8001698 <Cmd_set_uv_clamp+0x3c>)
 800167e:	f7ff f9d9 	bl	8000a34 <UART_Printf>
	lt8722_set_spis_uv_clamp(uper_vol);
 8001682:	7bfb      	ldrb	r3, [r7, #15]
 8001684:	4618      	mov	r0, r3
 8001686:	f000 fb44 	bl	8001d12 <lt8722_set_spis_uv_clamp>
	return CMDLINE_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	08005324 	.word	0x08005324
 8001698:	200021f4 	.word	0x200021f4

0800169c <Cmd_get_all>:

#include "i2c.h"

int Cmd_get_all(int argc, char *argv[])
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
	uint8_t data = 0x32;
 80016a6:	2332      	movs	r3, #50	@ 0x32
 80016a8:	73fb      	strb	r3, [r7, #15]
	UART_Send_String(&CONSOLE_UART, "get all \n");
 80016aa:	4904      	ldr	r1, [pc, #16]	@ (80016bc <Cmd_get_all+0x20>)
 80016ac:	4804      	ldr	r0, [pc, #16]	@ (80016c0 <Cmd_get_all+0x24>)
 80016ae:	f7ff f932 	bl	8000916 <UART_Send_String>
//	I2C_SendData(I2C2, 0x68, 0x01, &data, 1, 50000);
	return (CMDLINE_OK);
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	08005334 	.word	0x08005334
 80016c0:	200021f4 	.word	0x200021f4

080016c4 <command_create_task>:

void	command_create_task(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_CommandTaskContext.taskHandle, &s_CommandTaskContext.taskProperty);
 80016c8:	4902      	ldr	r1, [pc, #8]	@ (80016d4 <command_create_task+0x10>)
 80016ca:	4803      	ldr	r0, [pc, #12]	@ (80016d8 <command_create_task+0x14>)
 80016cc:	f003 fac0 	bl	8004c50 <SCH_TASK_CreateTask>
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	200000c4 	.word	0x200000c4
 80016d8:	200000c0 	.word	0x200000c0

080016dc <CONSOLE_UART_IRQHandler>:
}


/* :::::::::: CONSOLE_UART_IRQHandler ::::::::::::: */
void CONSOLE_UART_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
    if(LL_USART_IsActiveFlag_TXE(CONSOLE_UART.handle) == true)
 80016e0:	4b2e      	ldr	r3, [pc, #184]	@ (800179c <CONSOLE_UART_IRQHandler+0xc0>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fcce 	bl	8001086 <LL_USART_IsActiveFlag_TXE>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d10f      	bne.n	8001710 <CONSOLE_UART_IRQHandler+0x34>
    {
        if(TX_BUFFER_EMPTY(&CONSOLE_UART))
 80016f0:	492b      	ldr	r1, [pc, #172]	@ (80017a0 <CONSOLE_UART_IRQHandler+0xc4>)
 80016f2:	482c      	ldr	r0, [pc, #176]	@ (80017a4 <CONSOLE_UART_IRQHandler+0xc8>)
 80016f4:	f7ff fbe9 	bl	8000eca <UART_is_buffer_empty>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d005      	beq.n	800170a <CONSOLE_UART_IRQHandler+0x2e>
        {
            // Buffer empty, so disable interrupts
            LL_USART_DisableIT_TXE(CONSOLE_UART.handle);
 80016fe:	4b27      	ldr	r3, [pc, #156]	@ (800179c <CONSOLE_UART_IRQHandler+0xc0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fcd2 	bl	80010ac <LL_USART_DisableIT_TXE>
 8001708:	e002      	b.n	8001710 <CONSOLE_UART_IRQHandler+0x34>
        }
        else
        {
            // There is more data in the output buffer. Send the next byte
            UART_Prime_Transmit(&CONSOLE_UART);
 800170a:	4824      	ldr	r0, [pc, #144]	@ (800179c <CONSOLE_UART_IRQHandler+0xc0>)
 800170c:	f7ff fc11 	bl	8000f32 <UART_Prime_Transmit>
        }
    }

    if(LL_USART_IsActiveFlag_RXNE(CONSOLE_UART.handle) == true)
 8001710:	4b22      	ldr	r3, [pc, #136]	@ (800179c <CONSOLE_UART_IRQHandler+0xc0>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff fca3 	bl	8001060 <LL_USART_IsActiveFlag_RXNE>
 800171a:	4603      	mov	r3, r0
 800171c:	2b01      	cmp	r3, #1
 800171e:	d13b      	bne.n	8001798 <CONSOLE_UART_IRQHandler+0xbc>
    {
    	CONSOLE_UART.RX_irq_char = LL_USART_ReceiveData8(CONSOLE_UART.handle);
 8001720:	4b1e      	ldr	r3, [pc, #120]	@ (800179c <CONSOLE_UART_IRQHandler+0xc0>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fce4 	bl	80010f2 <LL_USART_ReceiveData8>
 800172a:	4603      	mov	r3, r0
 800172c:	461a      	mov	r2, r3
 800172e:	4b1b      	ldr	r3, [pc, #108]	@ (800179c <CONSOLE_UART_IRQHandler+0xc0>)
 8001730:	771a      	strb	r2, [r3, #28]

        // NOTE: On win 10, default PUTTY when hit enter only send back '\r',
        // while on default HERCULES when hit enter send '\r\n' in that order.
        // The code bellow is modified so that it can work on PUTTY and HERCULES.
        if((!RX_BUFFER_FULL(&CONSOLE_UART)) && (CONSOLE_UART.RX_irq_char != '\n'))
 8001732:	4b1a      	ldr	r3, [pc, #104]	@ (800179c <CONSOLE_UART_IRQHandler+0xc0>)
 8001734:	891b      	ldrh	r3, [r3, #8]
 8001736:	461a      	mov	r2, r3
 8001738:	491b      	ldr	r1, [pc, #108]	@ (80017a8 <CONSOLE_UART_IRQHandler+0xcc>)
 800173a:	481c      	ldr	r0, [pc, #112]	@ (80017ac <CONSOLE_UART_IRQHandler+0xd0>)
 800173c:	f7ff fba4 	bl	8000e88 <UART_is_buffer_full>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d128      	bne.n	8001798 <CONSOLE_UART_IRQHandler+0xbc>
 8001746:	4b15      	ldr	r3, [pc, #84]	@ (800179c <CONSOLE_UART_IRQHandler+0xc0>)
 8001748:	7f1b      	ldrb	r3, [r3, #28]
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b0a      	cmp	r3, #10
 800174e:	d023      	beq.n	8001798 <CONSOLE_UART_IRQHandler+0xbc>
        {
            if (CONSOLE_UART.RX_irq_char == '\r')
 8001750:	4b12      	ldr	r3, [pc, #72]	@ (800179c <CONSOLE_UART_IRQHandler+0xc0>)
 8001752:	7f1b      	ldrb	r3, [r3, #28]
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b0d      	cmp	r3, #13
 8001758:	d10e      	bne.n	8001778 <CONSOLE_UART_IRQHandler+0x9c>
            {
            	CONSOLE_UART.p_RX_buffer[CONSOLE_UART.RX_write_index] = '\n';
 800175a:	4b10      	ldr	r3, [pc, #64]	@ (800179c <CONSOLE_UART_IRQHandler+0xc0>)
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	4a0f      	ldr	r2, [pc, #60]	@ (800179c <CONSOLE_UART_IRQHandler+0xc0>)
 8001760:	8b12      	ldrh	r2, [r2, #24]
 8001762:	b292      	uxth	r2, r2
 8001764:	4413      	add	r3, r2
 8001766:	220a      	movs	r2, #10
 8001768:	701a      	strb	r2, [r3, #0]
                ADVANCE_RX_WRITE_INDEX(&CONSOLE_UART);
 800176a:	4b0c      	ldr	r3, [pc, #48]	@ (800179c <CONSOLE_UART_IRQHandler+0xc0>)
 800176c:	891b      	ldrh	r3, [r3, #8]
 800176e:	4619      	mov	r1, r3
 8001770:	480d      	ldr	r0, [pc, #52]	@ (80017a8 <CONSOLE_UART_IRQHandler+0xcc>)
 8001772:	f7ff fbc2 	bl	8000efa <UART_advance_buffer_index>
            	CONSOLE_UART.p_RX_buffer[EXP_UART.RX_write_index] = CONSOLE_UART.RX_irq_char;
                ADVANCE_RX_WRITE_INDEX(&CONSOLE_UART);
            }
        }
    }
}
 8001776:	e00f      	b.n	8001798 <CONSOLE_UART_IRQHandler+0xbc>
            	CONSOLE_UART.p_RX_buffer[EXP_UART.RX_write_index] = CONSOLE_UART.RX_irq_char;
 8001778:	4b08      	ldr	r3, [pc, #32]	@ (800179c <CONSOLE_UART_IRQHandler+0xc0>)
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	4a07      	ldr	r2, [pc, #28]	@ (800179c <CONSOLE_UART_IRQHandler+0xc0>)
 800177e:	8b12      	ldrh	r2, [r2, #24]
 8001780:	b292      	uxth	r2, r2
 8001782:	4413      	add	r3, r2
 8001784:	4a05      	ldr	r2, [pc, #20]	@ (800179c <CONSOLE_UART_IRQHandler+0xc0>)
 8001786:	7f12      	ldrb	r2, [r2, #28]
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	701a      	strb	r2, [r3, #0]
                ADVANCE_RX_WRITE_INDEX(&CONSOLE_UART);
 800178c:	4b03      	ldr	r3, [pc, #12]	@ (800179c <CONSOLE_UART_IRQHandler+0xc0>)
 800178e:	891b      	ldrh	r3, [r3, #8]
 8001790:	4619      	mov	r1, r3
 8001792:	4805      	ldr	r0, [pc, #20]	@ (80017a8 <CONSOLE_UART_IRQHandler+0xcc>)
 8001794:	f7ff fbb1 	bl	8000efa <UART_advance_buffer_index>
}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}
 800179c:	200021f4 	.word	0x200021f4
 80017a0:	20002204 	.word	0x20002204
 80017a4:	20002206 	.word	0x20002206
 80017a8:	2000220c 	.word	0x2000220c
 80017ac:	2000220e 	.word	0x2000220e

080017b0 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d101      	bne.n	80017c8 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	330c      	adds	r3, #12
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	b2db      	uxtb	r3, r3
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b085      	sub	sp, #20
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	460b      	mov	r3, r1
 80017fc:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	330c      	adds	r3, #12
 8001802:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	78fa      	ldrb	r2, [r7, #3]
 8001808:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800180a:	bf00      	nop
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <LL_GPIO_SetOutputPin>:
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	619a      	str	r2, [r3, #24]
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	041a      	lsls	r2, r3, #16
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	619a      	str	r2, [r3, #24]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <csLOW>:
		LT8722_SPIS_AMUX_SIZE
	},
};

/* SPI support function --------------------------------------------------*/
static inline void csLOW(void) {
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(TEC_1_CS_GPIO_Port, TEC_1_CS_Pin);
 8001854:	2102      	movs	r1, #2
 8001856:	4802      	ldr	r0, [pc, #8]	@ (8001860 <csLOW+0x10>)
 8001858:	f7ff ffeb 	bl	8001832 <LL_GPIO_ResetOutputPin>
}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40021000 	.word	0x40021000

08001864 <csHIGH>:

static inline void csHIGH(void) {
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(TEC_1_CS_GPIO_Port, TEC_1_CS_Pin);
 8001868:	2102      	movs	r1, #2
 800186a:	4802      	ldr	r0, [pc, #8]	@ (8001874 <csHIGH+0x10>)
 800186c:	f7ff ffd3 	bl	8001816 <LL_GPIO_SetOutputPin>
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40021000 	.word	0x40021000

08001878 <SPI_LL_Transmit>:

static uint8_t SPI_LL_Transmit(uint8_t data)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
	LL_SPI_TransmitData8(SPI1, data);
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	4619      	mov	r1, r3
 8001886:	4809      	ldr	r0, [pc, #36]	@ (80018ac <SPI_LL_Transmit+0x34>)
 8001888:	f7ff ffb3 	bl	80017f2 <LL_SPI_TransmitData8>
	while(!LL_SPI_IsActiveFlag_RXNE(SPI1));
 800188c:	bf00      	nop
 800188e:	4807      	ldr	r0, [pc, #28]	@ (80018ac <SPI_LL_Transmit+0x34>)
 8001890:	f7ff ff8e 	bl	80017b0 <LL_SPI_IsActiveFlag_RXNE>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0f9      	beq.n	800188e <SPI_LL_Transmit+0x16>
	return LL_SPI_ReceiveData8(SPI1);
 800189a:	4804      	ldr	r0, [pc, #16]	@ (80018ac <SPI_LL_Transmit+0x34>)
 800189c:	f7ff ff9b 	bl	80017d6 <LL_SPI_ReceiveData8>
 80018a0:	4603      	mov	r3, r0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40013000 	.word	0x40013000

080018b0 <SPI_write_and_read_buffer>:

uint8_t SPI_write_and_read_buffer(uint8_t *buffer, uint8_t byte_number)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	70fb      	strb	r3, [r7, #3]
    uint8_t received_data = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	73fb      	strb	r3, [r7, #15]
    csLOW();
 80018c0:	f7ff ffc6 	bl	8001850 <csLOW>
    for (uint8_t i = 0; i < byte_number; i++)
 80018c4:	2300      	movs	r3, #0
 80018c6:	73bb      	strb	r3, [r7, #14]
 80018c8:	e010      	b.n	80018ec <SPI_write_and_read_buffer+0x3c>
    {
        received_data = SPI_LL_Transmit(buffer[i]);
 80018ca:	7bbb      	ldrb	r3, [r7, #14]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	4413      	add	r3, r2
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff ffd0 	bl	8001878 <SPI_LL_Transmit>
 80018d8:	4603      	mov	r3, r0
 80018da:	73fb      	strb	r3, [r7, #15]
        buffer[i] = received_data;
 80018dc:	7bbb      	ldrb	r3, [r7, #14]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	7bfa      	ldrb	r2, [r7, #15]
 80018e4:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < byte_number; i++)
 80018e6:	7bbb      	ldrb	r3, [r7, #14]
 80018e8:	3301      	adds	r3, #1
 80018ea:	73bb      	strb	r3, [r7, #14]
 80018ec:	7bba      	ldrb	r2, [r7, #14]
 80018ee:	78fb      	ldrb	r3, [r7, #3]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d3ea      	bcc.n	80018ca <SPI_write_and_read_buffer+0x1a>
    }
    csHIGH();
 80018f4:	f7ff ffb6 	bl	8001864 <csHIGH>
    return received_data;
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	0000      	movs	r0, r0
 8001904:	0000      	movs	r0, r0
	...

08001908 <lt8722_voltage_to_dac>:
 * @brief Convert voltage to DAC code.
 * @param voltage - Voltage value in nanovolts.
 * @return DAC code.
 */
int32_t lt8722_voltage_to_dac(int64_t voltage)
{
 8001908:	b5b0      	push	{r4, r5, r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	e9c7 0100 	strd	r0, r1, [r7]
	return (LT8722_DAC_OFFSET - voltage) * (1 << LT8722_DAC_RESOLUTION) / LT8722_DAC_VREF;
 8001912:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001916:	4d0e      	ldr	r5, [pc, #56]	@ (8001950 <lt8722_voltage_to_dac+0x48>)
 8001918:	2400      	movs	r4, #0
 800191a:	1a2a      	subs	r2, r5, r0
 800191c:	eb64 0301 	sbc.w	r3, r4, r1
 8001920:	f04f 0000 	mov.w	r0, #0
 8001924:	f04f 0100 	mov.w	r1, #0
 8001928:	0659      	lsls	r1, r3, #25
 800192a:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 800192e:	0650      	lsls	r0, r2, #25
 8001930:	a305      	add	r3, pc, #20	@ (adr r3, 8001948 <lt8722_voltage_to_dac+0x40>)
 8001932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001936:	f7fe fc59 	bl	80001ec <__aeabi_ldivmod>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	4613      	mov	r3, r2
}
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bdb0      	pop	{r4, r5, r7, pc}
 8001948:	9502f900 	.word	0x9502f900
 800194c:	00000000 	.word	0x00000000
 8001950:	4a817c80 	.word	0x4a817c80

08001954 <lt8722_dac_to_voltage>:
 * @brief Convert DAC code to nanovolts.
 * @param dac - DAC code.
 * @return Voltage value in nanovolts.
 */
int64_t lt8722_dac_to_voltage(int32_t dac)
{
 8001954:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001958:	b085      	sub	sp, #20
 800195a:	af00      	add	r7, sp, #0
 800195c:	60f8      	str	r0, [r7, #12]
	return LT8722_DAC_OFFSET - dac * LT8722_DAC_VREF /(1 << LT8722_DAC_RESOLUTION);
 800195e:	68f9      	ldr	r1, [r7, #12]
 8001960:	17c8      	asrs	r0, r1, #31
 8001962:	460c      	mov	r4, r1
 8001964:	4605      	mov	r5, r0
 8001966:	491b      	ldr	r1, [pc, #108]	@ (80019d4 <lt8722_dac_to_voltage+0x80>)
 8001968:	fb01 f005 	mul.w	r0, r1, r5
 800196c:	2100      	movs	r1, #0
 800196e:	fb04 f101 	mul.w	r1, r4, r1
 8001972:	4401      	add	r1, r0
 8001974:	4817      	ldr	r0, [pc, #92]	@ (80019d4 <lt8722_dac_to_voltage+0x80>)
 8001976:	fba4 2300 	umull	r2, r3, r4, r0
 800197a:	4419      	add	r1, r3
 800197c:	460b      	mov	r3, r1
 800197e:	4610      	mov	r0, r2
 8001980:	4619      	mov	r1, r3
 8001982:	2900      	cmp	r1, #0
 8001984:	da08      	bge.n	8001998 <lt8722_dac_to_voltage+0x44>
 8001986:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800198a:	18c3      	adds	r3, r0, r3
 800198c:	603b      	str	r3, [r7, #0]
 800198e:	f141 0300 	adc.w	r3, r1, #0
 8001992:	607b      	str	r3, [r7, #4]
 8001994:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	f04f 0300 	mov.w	r3, #0
 80019a0:	0e42      	lsrs	r2, r0, #25
 80019a2:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80019a6:	164b      	asrs	r3, r1, #25
 80019a8:	2100      	movs	r1, #0
 80019aa:	f1d2 0a00 	rsbs	sl, r2, #0
 80019ae:	eb61 0b03 	sbc.w	fp, r1, r3
 80019b2:	4652      	mov	r2, sl
 80019b4:	465b      	mov	r3, fp
 80019b6:	4908      	ldr	r1, [pc, #32]	@ (80019d8 <lt8722_dac_to_voltage+0x84>)
 80019b8:	eb12 0801 	adds.w	r8, r2, r1
 80019bc:	f143 0900 	adc.w	r9, r3, #0
 80019c0:	4642      	mov	r2, r8
 80019c2:	464b      	mov	r3, r9
}
 80019c4:	4610      	mov	r0, r2
 80019c6:	4619      	mov	r1, r3
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	9502f900 	.word	0x9502f900
 80019d8:	4a817c80 	.word	0x4a817c80

080019dc <lt8722_transaction>:
 * @param dev - LT8722 device descriptor
 * @param packet - LT8722 packet.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_transaction(struct lt8722_packet *packet)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
	uint8_t buffer[8] = {0};
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	2300      	movs	r3, #0
 80019ea:	613b      	str	r3, [r7, #16]
	buffer[0] = packet->command.byte;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	733b      	strb	r3, [r7, #12]
	buffer[1] = packet->reg.address << 1;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	791b      	ldrb	r3, [r3, #4]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	737b      	strb	r3, [r7, #13]
	if (packet->command.byte == LT8722_DATA_WRITE_COMMAND)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2bf2      	cmp	r3, #242	@ 0xf2
 8001a02:	d111      	bne.n	8001a28 <lt8722_transaction+0x4c>
	{
		put_unaligned_be32(packet->data, &buffer[2]);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691a      	ldr	r2, [r3, #16]
 8001a08:	f107 030c 	add.w	r3, r7, #12
 8001a0c:	3302      	adds	r3, #2
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4610      	mov	r0, r2
 8001a12:	f000 fac6 	bl	8001fa2 <put_unaligned_be32>
		buffer[6] = Calculate_CRC8(buffer, 6);
 8001a16:	f107 030c 	add.w	r3, r7, #12
 8001a1a:	2106      	movs	r1, #6
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 fa85 	bl	8001f2c <Calculate_CRC8>
 8001a22:	4603      	mov	r3, r0
 8001a24:	74bb      	strb	r3, [r7, #18]
 8001a26:	e007      	b.n	8001a38 <lt8722_transaction+0x5c>
	} else
		buffer[2] = Calculate_CRC8(buffer, 2);
 8001a28:	f107 030c 	add.w	r3, r7, #12
 8001a2c:	2102      	movs	r1, #2
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 fa7c 	bl	8001f2c <Calculate_CRC8>
 8001a34:	4603      	mov	r3, r0
 8001a36:	73bb      	strb	r3, [r7, #14]
	SPI_write_and_read_buffer(buffer, packet->command.size);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	785a      	ldrb	r2, [r3, #1]
 8001a3c:	f107 030c 	add.w	r3, r7, #12
 8001a40:	4611      	mov	r1, r2
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff ff34 	bl	80018b0 <SPI_write_and_read_buffer>
	packet->status = (get_unaligned_be16(&buffer[0]) & GENMASK(10, 0));
 8001a48:	f107 030c 	add.w	r3, r7, #12
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f000 fae6 	bl	800201e <get_unaligned_be16>
 8001a52:	4603      	mov	r3, r0
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	055b      	lsls	r3, r3, #21
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	0d5b      	lsrs	r3, r3, #21
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	82da      	strh	r2, [r3, #22]
	if (packet->command.byte == LT8722_DATA_WRITE_COMMAND)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2bf2      	cmp	r3, #242	@ 0xf2
 8001a7a:	d106      	bne.n	8001a8a <lt8722_transaction+0xae>
	{
		packet->crc = buffer[2];
 8001a7c:	7bba      	ldrb	r2, [r7, #14]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	751a      	strb	r2, [r3, #20]
		packet->ack = buffer[7];
 8001a82:	7cfa      	ldrb	r2, [r7, #19]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	755a      	strb	r2, [r3, #21]
 8001a88:	e019      	b.n	8001abe <lt8722_transaction+0xe2>
	} else if (packet->command.byte == LT8722_DATA_READ_COMMAND) {
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2bf4      	cmp	r3, #244	@ 0xf4
 8001a90:	d10f      	bne.n	8001ab2 <lt8722_transaction+0xd6>
		packet->data = get_unaligned_be32(&buffer[2]);
 8001a92:	f107 030c 	add.w	r3, r7, #12
 8001a96:	3302      	adds	r3, #2
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f000 faa3 	bl	8001fe4 <get_unaligned_be32>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	611a      	str	r2, [r3, #16]
		packet->crc = buffer[6];
 8001aa4:	7cba      	ldrb	r2, [r7, #18]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	751a      	strb	r2, [r3, #20]
		packet->ack = buffer[7];
 8001aaa:	7cfa      	ldrb	r2, [r7, #19]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	755a      	strb	r2, [r3, #21]
 8001ab0:	e005      	b.n	8001abe <lt8722_transaction+0xe2>
	} else {
		packet->crc = buffer[2];
 8001ab2:	7bba      	ldrb	r2, [r7, #14]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	751a      	strb	r2, [r3, #20]
		packet->ack = buffer[3];
 8001ab8:	7bfa      	ldrb	r2, [r7, #15]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	755a      	strb	r2, [r3, #21]
	}
	if (packet->ack != LT8722_ACK_ACKNOWLEDGE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	7d5b      	ldrb	r3, [r3, #21]
 8001ac2:	2ba5      	cmp	r3, #165	@ 0xa5
 8001ac4:	d002      	beq.n	8001acc <lt8722_transaction+0xf0>
		return -1;
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aca:	e000      	b.n	8001ace <lt8722_transaction+0xf2>
	return 0;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <lt8722_reg_read>:
 * @param address - Register address.
 * @param data - Received data.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reg_read(uint8_t address, uint32_t *data)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	@ 0x28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	6039      	str	r1, [r7, #0]
 8001ae2:	71fb      	strb	r3, [r7, #7]
	int8_t ret = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	struct lt8722_packet packet;
	struct lt8722_command command = {
 8001aea:	4b14      	ldr	r3, [pc, #80]	@ (8001b3c <lt8722_reg_read+0x64>)
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	813b      	strh	r3, [r7, #8]
		LT8722_DATA_READ_COMMAND,
		LT8722_DATA_READ_COMMAND_SIZE
	};
	packet.command = command;
 8001af0:	893b      	ldrh	r3, [r7, #8]
 8001af2:	81bb      	strh	r3, [r7, #12]
	packet.reg = lt8722_regs[address];
 8001af4:	79fa      	ldrb	r2, [r7, #7]
 8001af6:	4912      	ldr	r1, [pc, #72]	@ (8001b40 <lt8722_reg_read+0x68>)
 8001af8:	4613      	mov	r3, r2
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	4413      	add	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	18ca      	adds	r2, r1, r3
 8001b02:	f107 0310 	add.w	r3, r7, #16
 8001b06:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	ret = lt8722_transaction(&packet);
 8001b0c:	f107 030c 	add.w	r3, r7, #12
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff ff63 	bl	80019dc <lt8722_transaction>
 8001b16:	4603      	mov	r3, r0
 8001b18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (ret)
 8001b1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d002      	beq.n	8001b2a <lt8722_reg_read+0x52>
		return ret;
 8001b24:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001b28:	e003      	b.n	8001b32 <lt8722_reg_read+0x5a>
	*data = packet.data;
 8001b2a:	69fa      	ldr	r2, [r7, #28]
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	601a      	str	r2, [r3, #0]
	return 0;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3728      	adds	r7, #40	@ 0x28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	0800541c 	.word	0x0800541c
 8001b40:	200000d4 	.word	0x200000d4

08001b44 <lt8722_reg_write>:
 * @param address - Register address.
 * @param data - Data to be written.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reg_write(uint8_t address, uint32_t data)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08a      	sub	sp, #40	@ 0x28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	6039      	str	r1, [r7, #0]
 8001b4e:	71fb      	strb	r3, [r7, #7]
	struct lt8722_packet packet;
	struct lt8722_command command = {
 8001b50:	4b0e      	ldr	r3, [pc, #56]	@ (8001b8c <lt8722_reg_write+0x48>)
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	81bb      	strh	r3, [r7, #12]
		LT8722_DATA_WRITE_COMMAND,
		LT8722_DATA_WRITE_COMMAND_SIZE
	};
	packet.command = command;
 8001b56:	89bb      	ldrh	r3, [r7, #12]
 8001b58:	823b      	strh	r3, [r7, #16]
	packet.reg = lt8722_regs[address];
 8001b5a:	79fa      	ldrb	r2, [r7, #7]
 8001b5c:	490c      	ldr	r1, [pc, #48]	@ (8001b90 <lt8722_reg_write+0x4c>)
 8001b5e:	4613      	mov	r3, r2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4413      	add	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	18ca      	adds	r2, r1, r3
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	packet.data = data;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	623b      	str	r3, [r7, #32]
	return lt8722_transaction(&packet);
 8001b76:	f107 0310 	add.w	r3, r7, #16
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff ff2e 	bl	80019dc <lt8722_transaction>
 8001b80:	4603      	mov	r3, r0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3728      	adds	r7, #40	@ 0x28
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	08005420 	.word	0x08005420
 8001b90:	200000d4 	.word	0x200000d4

08001b94 <lt8722_reg_write_mask>:
 * @param mask - Mask to be applied.
 * @param data - Data to be written.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reg_write_mask(uint8_t address, uint32_t mask, uint32_t data)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
 8001ba0:	73fb      	strb	r3, [r7, #15]
	uint32_t reg_data;
	lt8722_reg_read(address, &reg_data);
 8001ba2:	f107 0214 	add.w	r2, r7, #20
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	4611      	mov	r1, r2
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff ff94 	bl	8001ad8 <lt8722_reg_read>
	reg_data &= ~mask;
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	43da      	mvns	r2, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	617b      	str	r3, [r7, #20]
	reg_data |= field_prep(mask, data);
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	68b8      	ldr	r0, [r7, #8]
 8001bbe:	f000 fa5e 	bl	800207e <field_prep>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	617b      	str	r3, [r7, #20]
	return lt8722_reg_write(address, reg_data);
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ffb7 	bl	8001b44 <lt8722_reg_write>
 8001bd6:	4603      	mov	r3, r0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <lt8722_set_enable_req>:
 * @brief Set ENABLE_REQ field in LT8722 device.
 * @param value - Enable if true, disabled otherwise
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_enable_req(bool value)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
	return lt8722_reg_write_mask(LT8722_SPIS_COMMAND, LT8722_ENABLE_REQ_MASK, value);
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	461a      	mov	r2, r3
 8001bee:	2101      	movs	r1, #1
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f7ff ffcf 	bl	8001b94 <lt8722_reg_write_mask>
 8001bf6:	4603      	mov	r3, r0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <lt8722_set_swen_req>:
 * @brief Set switching enable of LT8722 device.
 * @param value - Enable if true, disabled otherwise
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_swen_req(bool value)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
	return lt8722_reg_write_mask(LT8722_SPIS_COMMAND, LT8722_SWEN_REQ_MASK, value);
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	2102      	movs	r1, #2
 8001c10:	2000      	movs	r0, #0
 8001c12:	f7ff ffbf 	bl	8001b94 <lt8722_reg_write_mask>
 8001c16:	4603      	mov	r3, r0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <lt8722_reset>:
/**
 * @brief Shutdown the LT8722 device.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reset(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
	return lt8722_reg_write_mask(LT8722_SPIS_COMMAND, LT8722_SPI_RST_MASK, LT8722_SPI_RST_RESET);
 8001c24:	2201      	movs	r2, #1
 8001c26:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	f7ff ffb2 	bl	8001b94 <lt8722_reg_write_mask>
 8001c30:	4603      	mov	r3, r0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <lt8722_clear_faults>:
/**
 * @brief Clear LT8722 device faults.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_clear_faults(void)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
	return lt8722_reg_write_mask(LT8722_SPIS_STATUS, LT8722_FAULTS_MASK, 0);
 8001c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	069b      	lsls	r3, r3, #26
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	0d5b      	lsrs	r3, r3, #21
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	4619      	mov	r1, r3
 8001c54:	2001      	movs	r0, #1
 8001c56:	f7ff ff9d 	bl	8001b94 <lt8722_reg_write_mask>
 8001c5a:	4603      	mov	r3, r0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <lt8722_get_status>:
 * @brief Get LT8722 device status.
 * @param status - Status value to be returned.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_get_status(uint16_t *status)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08a      	sub	sp, #40	@ 0x28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
	int8_t ret;
	struct lt8722_packet packet;
	struct lt8722_command command = {
 8001c6c:	4b11      	ldr	r3, [pc, #68]	@ (8001cb4 <lt8722_get_status+0x50>)
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	813b      	strh	r3, [r7, #8]
		LT8722_STATUS_ACQUISITION_COMMAND,
		LT8722_STATUS_ACQUISITION_COMMAND_SIZE
	};
	packet.command = command;
 8001c72:	893b      	ldrh	r3, [r7, #8]
 8001c74:	81bb      	strh	r3, [r7, #12]
	packet.reg = lt8722_regs[LT8722_SPIS_STATUS];
 8001c76:	4a10      	ldr	r2, [pc, #64]	@ (8001cb8 <lt8722_get_status+0x54>)
 8001c78:	f107 0310 	add.w	r3, r7, #16
 8001c7c:	320c      	adds	r2, #12
 8001c7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c80:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	ret = lt8722_transaction(&packet);
 8001c84:	f107 030c 	add.w	r3, r7, #12
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff fea7 	bl	80019dc <lt8722_transaction>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (ret)
 8001c94:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d002      	beq.n	8001ca2 <lt8722_get_status+0x3e>
		return ret;
 8001c9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001ca0:	e003      	b.n	8001caa <lt8722_get_status+0x46>
	*status = packet.status;
 8001ca2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	801a      	strh	r2, [r3, #0]
	return 0;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3728      	adds	r7, #40	@ 0x28
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	08005424 	.word	0x08005424
 8001cb8:	200000d4 	.word	0x200000d4

08001cbc <lt8722_set_dac>:
 * @brief Set DAC code of LT8722 device.
 * @param value - DAC value
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_dac(uint32_t value)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
	return lt8722_reg_write_mask(LT8722_SPIS_DAC, LT8722_SPIS_DAC_MASK, value);
 8001cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	4619      	mov	r1, r3
 8001cd0:	2004      	movs	r0, #4
 8001cd2:	f7ff ff5f 	bl	8001b94 <lt8722_reg_write_mask>
 8001cd6:	4603      	mov	r3, r0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <lt8722_set_spis_ov_clamp>:
 * @brief Set positive output voltage limit of LT8722 device.
 * @param value - Positive output voltage limit value
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_spis_ov_clamp(uint8_t value)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
	return lt8722_reg_write_mask(LT8722_SPIS_OV_CLAMP, LT8722_SPIS_OV_CLAMP_MASK, value);
 8001cea:	f04f 33ff 	mov.w	r3, #4294967295
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	071b      	lsls	r3, r3, #28
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	0f1b      	lsrs	r3, r3, #28
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	79fa      	ldrb	r2, [r7, #7]
 8001d00:	4619      	mov	r1, r3
 8001d02:	2005      	movs	r0, #5
 8001d04:	f7ff ff46 	bl	8001b94 <lt8722_reg_write_mask>
 8001d08:	4603      	mov	r3, r0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <lt8722_set_spis_uv_clamp>:
 * @brief Set negative output voltage limit of LT8722 device.
 * @param value - Negative output voltage limit value
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_spis_uv_clamp(uint8_t value)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b084      	sub	sp, #16
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	4603      	mov	r3, r0
 8001d1a:	71fb      	strb	r3, [r7, #7]
	return lt8722_reg_write_mask(LT8722_SPIS_UV_CLAMP, LT8722_SPIS_UV_CLAMP_MASK, value);
 8001d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	071b      	lsls	r3, r3, #28
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	0f1b      	lsrs	r3, r3, #28
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	79fa      	ldrb	r2, [r7, #7]
 8001d32:	4619      	mov	r1, r3
 8001d34:	2006      	movs	r0, #6
 8001d36:	f7ff ff2d 	bl	8001b94 <lt8722_reg_write_mask>
 8001d3a:	4603      	mov	r3, r0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <lt8722_init>:
 * @param init_param - Initialization parameter containing information about the
 * 		LT8722 device to be initialized.
 * @return 0 in case of succes, negative error code otherwise
*/
int8_t lt8722_init(void)
{
 8001d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d48:	b08f      	sub	sp, #60	@ 0x3c
 8001d4a:	af00      	add	r7, sp, #0
	int8_t ret = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	int32_t dac;
	int64_t voltage;
	int64_t start_voltage;
	int64_t end_voltage;

	LL_GPIO_ResetOutputPin(TEC_1_EN_GPIO_Port, TEC_1_EN_Pin);
 8001d52:	2120      	movs	r1, #32
 8001d54:	4852      	ldr	r0, [pc, #328]	@ (8001ea0 <lt8722_init+0x15c>)
 8001d56:	f7ff fd6c 	bl	8001832 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(TEC_1_SWEN_GPIO_Port, TEC_1_SWEN_Pin);
 8001d5a:	2104      	movs	r1, #4
 8001d5c:	4850      	ldr	r0, [pc, #320]	@ (8001ea0 <lt8722_init+0x15c>)
 8001d5e:	f7ff fd68 	bl	8001832 <LL_GPIO_ResetOutputPin>
	/*
	 * Reset LT8722
	 */
	lt8722_reset();
 8001d62:	f7ff ff5d 	bl	8001c20 <lt8722_reset>
	 * Start-up sequence
	 * 1. Apply proper VIN and VDDIO voltages
	 *
	 * 2. Enable VCC LDO and other LT8722 circuitry
	 */
	ret = lt8722_clear_faults();
 8001d66:	f7ff ff66 	bl	8001c36 <lt8722_clear_faults>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	LL_GPIO_SetOutputPin(TEC_1_EN_GPIO_Port, TEC_1_EN_Pin);
 8001d70:	2120      	movs	r1, #32
 8001d72:	484b      	ldr	r0, [pc, #300]	@ (8001ea0 <lt8722_init+0x15c>)
 8001d74:	f7ff fd4f 	bl	8001816 <LL_GPIO_SetOutputPin>
	ret = lt8722_set_enable_req(LT8722_ENABLE_REQ_ENABLED);
 8001d78:	2001      	movs	r0, #1
 8001d7a:	f7ff ff31 	bl	8001be0 <lt8722_set_enable_req>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	ret = lt8722_reg_write(LT8722_SPIS_COMMAND, 0x00003A01);
 8001d84:	f643 2101 	movw	r1, #14849	@ 0x3a01
 8001d88:	2000      	movs	r0, #0
 8001d8a:	f7ff fedb 	bl	8001b44 <lt8722_reg_write>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	/*
	 * 3. Configure output voltage control DAC to 0xFF000000
	 */
	ret = lt8722_set_dac(0xFF000000);
 8001d94:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001d98:	f7ff ff90 	bl	8001cbc <lt8722_set_dac>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	/*
	 * 4. Write all SPIS_STATUS registers to 0
	 */
	ret = lt8722_reg_write(LT8722_SPIS_STATUS, 0);
 8001da2:	2100      	movs	r1, #0
 8001da4:	2001      	movs	r0, #1
 8001da6:	f7ff fecd 	bl	8001b44 <lt8722_reg_write>
 8001daa:	4603      	mov	r3, r0
 8001dac:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	LL_mDelay(1);
 8001db0:	2001      	movs	r0, #1
 8001db2:	f002 fec1 	bl	8004b38 <LL_mDelay>
	ret = lt8722_reg_write(LT8722_SPIS_COMMAND, 0x00003A01);
 8001db6:	f643 2101 	movw	r1, #14849	@ 0x3a01
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f7ff fec2 	bl	8001b44 <lt8722_reg_write>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	/*
	 * 5. Ramp the output voltage control DAC from 0xFF000000 to 0x00000000
	 */
	start_voltage = lt8722_dac_to_voltage(0xFF000000);
 8001dc6:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001dca:	f7ff fdc3 	bl	8001954 <lt8722_dac_to_voltage>
 8001dce:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
	end_voltage = lt8722_dac_to_voltage(0x00000000);
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f7ff fdbe 	bl	8001954 <lt8722_dac_to_voltage>
 8001dd8:	e9c7 0108 	strd	r0, r1, [r7, #32]
	for (uint8_t i = 0;  i < 5; i++)
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001de2:	e045      	b.n	8001e70 <lt8722_init+0x12c>
	{
		voltage = (start_voltage + (end_voltage - start_voltage) * i / 4);
 8001de4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001de8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001dec:	1a84      	subs	r4, r0, r2
 8001dee:	eb61 0503 	sbc.w	r5, r1, r3
 8001df2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001df6:	2200      	movs	r2, #0
 8001df8:	4698      	mov	r8, r3
 8001dfa:	4691      	mov	r9, r2
 8001dfc:	fb08 f205 	mul.w	r2, r8, r5
 8001e00:	fb04 f309 	mul.w	r3, r4, r9
 8001e04:	4413      	add	r3, r2
 8001e06:	fba4 ab08 	umull	sl, fp, r4, r8
 8001e0a:	445b      	add	r3, fp
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	4652      	mov	r2, sl
 8001e10:	465b      	mov	r3, fp
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	da06      	bge.n	8001e24 <lt8722_init+0xe0>
 8001e16:	1cd1      	adds	r1, r2, #3
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	f143 0300 	adc.w	r3, r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e24:	f04f 0000 	mov.w	r0, #0
 8001e28:	f04f 0100 	mov.w	r1, #0
 8001e2c:	0890      	lsrs	r0, r2, #2
 8001e2e:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8001e32:	1099      	asrs	r1, r3, #2
 8001e34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e38:	1816      	adds	r6, r2, r0
 8001e3a:	603e      	str	r6, [r7, #0]
 8001e3c:	414b      	adcs	r3, r1
 8001e3e:	607b      	str	r3, [r7, #4]
 8001e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e44:	e9c7 2306 	strd	r2, r3, [r7, #24]
		dac = lt8722_voltage_to_dac(voltage);
 8001e48:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e4c:	f7ff fd5c 	bl	8001908 <lt8722_voltage_to_dac>
 8001e50:	6178      	str	r0, [r7, #20]
		ret = lt8722_set_dac(dac);
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff31 	bl	8001cbc <lt8722_set_dac>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
		LL_mDelay(1);
 8001e60:	2001      	movs	r0, #1
 8001e62:	f002 fe69 	bl	8004b38 <LL_mDelay>
	for (uint8_t i = 0;  i < 5; i++)
 8001e66:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001e70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d9b5      	bls.n	8001de4 <lt8722_init+0xa0>
	}
	/*
	 * 6. Enable the PWM switching behavior
	 */
	LL_GPIO_SetOutputPin(TEC_1_SWEN_GPIO_Port, TEC_1_SWEN_Pin);
 8001e78:	2104      	movs	r1, #4
 8001e7a:	4809      	ldr	r0, [pc, #36]	@ (8001ea0 <lt8722_init+0x15c>)
 8001e7c:	f7ff fccb 	bl	8001816 <LL_GPIO_SetOutputPin>
	ret = lt8722_set_swen_req(LT8722_SWEN_REQ_ENABLED);
 8001e80:	2001      	movs	r0, #1
 8001e82:	f7ff febd 	bl	8001c00 <lt8722_set_swen_req>
 8001e86:	4603      	mov	r3, r0
 8001e88:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	delay_us(180);
 8001e8c:	20b4      	movs	r0, #180	@ 0xb4
 8001e8e:	f7fe fb89 	bl	80005a4 <delay_us>
	/*
	 * 7. Set the desired output voltage
	 */
	return ret;
 8001e92:	f997 3036 	ldrsb.w	r3, [r7, #54]	@ 0x36
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	373c      	adds	r7, #60	@ 0x3c
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ea0:	40021000 	.word	0x40021000

08001ea4 <lt8722_set_output_voltage>:
 * @brief Set output volatge of LT8722 device.
 * @param value - Output voltage value in nanovolts.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_output_voltage(int64_t value)
{
 8001ea4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ea8:	b088      	sub	sp, #32
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t ret = 0;
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	77f9      	strb	r1, [r7, #31]
	int64_t vdac = 0;
 8001eb4:	f04f 0000 	mov.w	r0, #0
 8001eb8:	f04f 0100 	mov.w	r1, #0
 8001ebc:	e9c7 0104 	strd	r0, r1, [r7, #16]
	int32_t dac = 0x0;
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	60f9      	str	r1, [r7, #12]

	vdac = LT8722_DAC_OFFSET - value / 16;
 8001ec4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ec8:	2900      	cmp	r1, #0
 8001eca:	da05      	bge.n	8001ed8 <lt8722_set_output_voltage+0x34>
 8001ecc:	f110 020f 	adds.w	r2, r0, #15
 8001ed0:	f141 0300 	adc.w	r3, r1, #0
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	f04f 0300 	mov.w	r3, #0
 8001ee0:	0902      	lsrs	r2, r0, #4
 8001ee2:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8001ee6:	110b      	asrs	r3, r1, #4
 8001ee8:	2100      	movs	r1, #0
 8001eea:	f1d2 0800 	rsbs	r8, r2, #0
 8001eee:	eb61 0903 	sbc.w	r9, r1, r3
 8001ef2:	4642      	mov	r2, r8
 8001ef4:	464b      	mov	r3, r9
 8001ef6:	490c      	ldr	r1, [pc, #48]	@ (8001f28 <lt8722_set_output_voltage+0x84>)
 8001ef8:	1854      	adds	r4, r2, r1
 8001efa:	f143 0500 	adc.w	r5, r3, #0
 8001efe:	e9c7 4504 	strd	r4, r5, [r7, #16]
	dac = lt8722_voltage_to_dac(vdac);
 8001f02:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f06:	f7ff fcff 	bl	8001908 <lt8722_voltage_to_dac>
 8001f0a:	60f8      	str	r0, [r7, #12]
	ret = lt8722_set_dac(dac);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fed4 	bl	8001cbc <lt8722_set_dac>
 8001f14:	4603      	mov	r3, r0
 8001f16:	77fb      	strb	r3, [r7, #31]
	return ret;
 8001f18:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3720      	adds	r7, #32
 8001f20:	46bd      	mov	sp, r7
 8001f22:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f26:	bf00      	nop
 8001f28:	4a817c80 	.word	0x4a817c80

08001f2c <Calculate_CRC8>:

/* Private support function definition ------------------------------------*/
uint8_t Calculate_CRC8(uint8_t *data, uint8_t length) {
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0x00;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	73fb      	strb	r3, [r7, #15]
    uint8_t poly = 0x07;
 8001f3c:	2307      	movs	r3, #7
 8001f3e:	733b      	strb	r3, [r7, #12]
    for (uint8_t i = 0; i < length; i++)
 8001f40:	2300      	movs	r3, #0
 8001f42:	73bb      	strb	r3, [r7, #14]
 8001f44:	e022      	b.n	8001f8c <Calculate_CRC8+0x60>
    {
        crc ^= data[i];
 8001f46:	7bbb      	ldrb	r3, [r7, #14]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	781a      	ldrb	r2, [r3, #0]
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
 8001f50:	4053      	eors	r3, r2
 8001f52:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 0; bit < 8; bit++)
 8001f54:	2300      	movs	r3, #0
 8001f56:	737b      	strb	r3, [r7, #13]
 8001f58:	e012      	b.n	8001f80 <Calculate_CRC8+0x54>
        {
            if (crc & 0x80)
 8001f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	da08      	bge.n	8001f74 <Calculate_CRC8+0x48>
                crc = (crc << 1) ^ poly;
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	b25a      	sxtb	r2, r3
 8001f68:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001f6c:	4053      	eors	r3, r2
 8001f6e:	b25b      	sxtb	r3, r3
 8001f70:	73fb      	strb	r3, [r7, #15]
 8001f72:	e002      	b.n	8001f7a <Calculate_CRC8+0x4e>
            else
                crc <<= 1;
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 0; bit < 8; bit++)
 8001f7a:	7b7b      	ldrb	r3, [r7, #13]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	737b      	strb	r3, [r7, #13]
 8001f80:	7b7b      	ldrb	r3, [r7, #13]
 8001f82:	2b07      	cmp	r3, #7
 8001f84:	d9e9      	bls.n	8001f5a <Calculate_CRC8+0x2e>
    for (uint8_t i = 0; i < length; i++)
 8001f86:	7bbb      	ldrb	r3, [r7, #14]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	73bb      	strb	r3, [r7, #14]
 8001f8c:	7bba      	ldrb	r2, [r7, #14]
 8001f8e:	78fb      	ldrb	r3, [r7, #3]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d3d8      	bcc.n	8001f46 <Calculate_CRC8+0x1a>
        }
    }
    return crc;
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <put_unaligned_be32>:

void put_unaligned_be32(uint32_t val, uint8_t *buf)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
 8001faa:	6039      	str	r1, [r7, #0]
	buf[3] = val & 0xFF;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	3303      	adds	r3, #3
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	701a      	strb	r2, [r3, #0]
	buf[2] = (val >> 8) & 0xFF;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	0a1a      	lsrs	r2, r3, #8
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	3302      	adds	r3, #2
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	701a      	strb	r2, [r3, #0]
	buf[1] = (val >> 16) & 0xFF;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	0c1a      	lsrs	r2, r3, #16
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	701a      	strb	r2, [r3, #0]
	buf[0] = val >> 24;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	0e1b      	lsrs	r3, r3, #24
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	701a      	strb	r2, [r3, #0]
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <get_unaligned_be32>:
{
	buf[1] = val & 0xFF;
	buf[0] = val >> 8;
}
uint32_t get_unaligned_be32(uint8_t *buf)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
	return buf[3] | ((uint16_t)buf[2] << 8) | ((uint32_t)buf[1] << 16) | ((uint32_t)buf[0] << 24);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3303      	adds	r3, #3
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3302      	adds	r3, #2
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	021b      	lsls	r3, r3, #8
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	461a      	mov	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3301      	adds	r3, #1
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	041b      	lsls	r3, r3, #16
 8002008:	431a      	orrs	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	061b      	lsls	r3, r3, #24
 8002010:	4313      	orrs	r3, r2
}
 8002012:	4618      	mov	r0, r3
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <get_unaligned_be16>:
uint32_t get_unaligned_be16(uint8_t *buf)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
	return buf[1] | ((uint16_t)buf[0] << 8);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3301      	adds	r3, #1
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	021b      	lsls	r3, r3, #8
 8002034:	4313      	orrs	r3, r2
}
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <find_first_set_bit>:
uint32_t find_first_set_bit(uint32_t word)
{
 8002042:	b480      	push	{r7}
 8002044:	b085      	sub	sp, #20
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
	uint32_t first_set_bit = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
	while (word) {
 800204e:	e00c      	b.n	800206a <find_first_set_bit+0x28>
		if (word & 0x1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <find_first_set_bit+0x1c>
			return first_set_bit;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	e009      	b.n	8002072 <find_first_set_bit+0x30>
		word >>= 1;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	085b      	lsrs	r3, r3, #1
 8002062:	607b      	str	r3, [r7, #4]
		first_set_bit ++;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	3301      	adds	r3, #1
 8002068:	60fb      	str	r3, [r7, #12]
	while (word) {
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1ef      	bne.n	8002050 <find_first_set_bit+0xe>
	}
	return 32;
 8002070:	2320      	movs	r3, #32
}
 8002072:	4618      	mov	r0, r3
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <field_prep>:
uint32_t field_prep(uint32_t mask, uint32_t val)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	6039      	str	r1, [r7, #0]
	return (val << find_first_set_bit(mask)) & mask;
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff ffda 	bl	8002042 <find_first_set_bit>
 800208e:	4602      	mov	r2, r0
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	fa03 f202 	lsl.w	r2, r3, r2
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4013      	ands	r3, r2
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b089      	sub	sp, #36	@ 0x24
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	60f8      	str	r0, [r7, #12]
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	332c      	adds	r3, #44	@ 0x2c
 80020b2:	4619      	mov	r1, r3
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020ba:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80020be:	617a      	str	r2, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	fa92 f2a2 	rbit	r2, r2
 80020c6:	613a      	str	r2, [r7, #16]
  return result;
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	61ba      	str	r2, [r7, #24]
  if (value == 0U)
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	2a00      	cmp	r2, #0
 80020d0:	d101      	bne.n	80020d6 <LL_ADC_REG_SetSequencerRanks+0x34>
    return 32U;
 80020d2:	2220      	movs	r2, #32
 80020d4:	e003      	b.n	80020de <LL_ADC_REG_SetSequencerRanks+0x3c>
  return __builtin_clz(value);
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	fab2 f282 	clz	r2, r2
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	40d3      	lsrs	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	61fb      	str	r3, [r7, #28]

  MODIFY_REG(*preg,
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	f003 031f 	and.w	r3, r3, #31
 80020f0:	211f      	movs	r1, #31
 80020f2:	fa01 f303 	lsl.w	r3, r1, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	401a      	ands	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f003 011f 	and.w	r1, r3, #31
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	f003 031f 	and.w	r3, r3, #31
 8002106:	fa01 f303 	lsl.w	r3, r1, r3
 800210a:	431a      	orrs	r2, r3
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002110:	bf00      	nop
 8002112:	3724      	adds	r7, #36	@ 0x24
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <LL_ADC_REG_SetContinuousMode>:
  *         @arg @ref LL_ADC_REG_CONV_SINGLE
  *         @arg @ref LL_ADC_REG_CONV_CONTINUOUS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetContinuousMode(ADC_TypeDef *ADCx, uint32_t Continuous)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_CONT, Continuous);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f023 0202 	bic.w	r2, r3, #2
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	609a      	str	r2, [r3, #8]
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f043 0201 	orr.w	r2, r3, #1
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	609a      	str	r2, [r3, #8]
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b01      	cmp	r3, #1
 8002174:	bf0c      	ite	eq
 8002176:	2301      	moveq	r3, #1
 8002178:	2300      	movne	r3, #0
 800217a:	b2db      	uxtb	r3, r3
}
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	609a      	str	r2, [r3, #8]
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80021b2:	4a0c      	ldr	r2, [pc, #48]	@ (80021e4 <LL_DMA_EnableStream+0x3c>)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	4413      	add	r3, r2
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	461a      	mov	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4413      	add	r3, r2
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4908      	ldr	r1, [pc, #32]	@ (80021e4 <LL_DMA_EnableStream+0x3c>)
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	440a      	add	r2, r1
 80021c8:	7812      	ldrb	r2, [r2, #0]
 80021ca:	4611      	mov	r1, r2
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	440a      	add	r2, r1
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	6013      	str	r3, [r2, #0]
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	08005448 	.word	0x08005448

080021e8 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80021f4:	4a0d      	ldr	r2, [pc, #52]	@ (800222c <LL_DMA_SetDataTransferDirection+0x44>)
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	4413      	add	r3, r2
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4413      	add	r3, r2
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002208:	4908      	ldr	r1, [pc, #32]	@ (800222c <LL_DMA_SetDataTransferDirection+0x44>)
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	440b      	add	r3, r1
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	4619      	mov	r1, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	440b      	add	r3, r1
 8002216:	4619      	mov	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4313      	orrs	r3, r2
 800221c:	600b      	str	r3, [r1, #0]
}
 800221e:	bf00      	nop
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	08005448 	.word	0x08005448

08002230 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 800223c:	4a0d      	ldr	r2, [pc, #52]	@ (8002274 <LL_DMA_SetMode+0x44>)
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	4413      	add	r3, r2
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	461a      	mov	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4413      	add	r3, r2
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 8002250:	4908      	ldr	r1, [pc, #32]	@ (8002274 <LL_DMA_SetMode+0x44>)
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	440b      	add	r3, r1
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	4619      	mov	r1, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	440b      	add	r3, r1
 800225e:	4619      	mov	r1, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4313      	orrs	r3, r2
 8002264:	600b      	str	r3, [r1, #0]
}
 8002266:	bf00      	nop
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	08005448 	.word	0x08005448

08002278 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8002284:	4a0d      	ldr	r2, [pc, #52]	@ (80022bc <LL_DMA_SetPeriphIncMode+0x44>)
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	4413      	add	r3, r2
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	461a      	mov	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4413      	add	r3, r2
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002298:	4908      	ldr	r1, [pc, #32]	@ (80022bc <LL_DMA_SetPeriphIncMode+0x44>)
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	440b      	add	r3, r1
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	4619      	mov	r1, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	440b      	add	r3, r1
 80022a6:	4619      	mov	r1, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	600b      	str	r3, [r1, #0]
}
 80022ae:	bf00      	nop
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	08005448 	.word	0x08005448

080022c0 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80022cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002304 <LL_DMA_SetMemoryIncMode+0x44>)
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	4413      	add	r3, r2
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	461a      	mov	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	4413      	add	r3, r2
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80022e0:	4908      	ldr	r1, [pc, #32]	@ (8002304 <LL_DMA_SetMemoryIncMode+0x44>)
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	440b      	add	r3, r1
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	4619      	mov	r1, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	440b      	add	r3, r1
 80022ee:	4619      	mov	r1, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	600b      	str	r3, [r1, #0]
}
 80022f6:	bf00      	nop
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	08005448 	.word	0x08005448

08002308 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8002314:	4a0d      	ldr	r2, [pc, #52]	@ (800234c <LL_DMA_SetPeriphSize+0x44>)
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	4413      	add	r3, r2
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	461a      	mov	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	4413      	add	r3, r2
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8002328:	4908      	ldr	r1, [pc, #32]	@ (800234c <LL_DMA_SetPeriphSize+0x44>)
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	440b      	add	r3, r1
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	4619      	mov	r1, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	440b      	add	r3, r1
 8002336:	4619      	mov	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4313      	orrs	r3, r2
 800233c:	600b      	str	r3, [r1, #0]
}
 800233e:	bf00      	nop
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	08005448 	.word	0x08005448

08002350 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 800235c:	4a0d      	ldr	r2, [pc, #52]	@ (8002394 <LL_DMA_SetMemorySize+0x44>)
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	4413      	add	r3, r2
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	461a      	mov	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4413      	add	r3, r2
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8002370:	4908      	ldr	r1, [pc, #32]	@ (8002394 <LL_DMA_SetMemorySize+0x44>)
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	440b      	add	r3, r1
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	4619      	mov	r1, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	440b      	add	r3, r1
 800237e:	4619      	mov	r1, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4313      	orrs	r3, r2
 8002384:	600b      	str	r3, [r1, #0]
}
 8002386:	bf00      	nop
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	08005448 	.word	0x08005448

08002398 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 80023a4:	4a0d      	ldr	r2, [pc, #52]	@ (80023dc <LL_DMA_SetDataLength+0x44>)
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	4413      	add	r3, r2
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	461a      	mov	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	4413      	add	r3, r2
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	0c1b      	lsrs	r3, r3, #16
 80023b6:	041b      	lsls	r3, r3, #16
 80023b8:	4908      	ldr	r1, [pc, #32]	@ (80023dc <LL_DMA_SetDataLength+0x44>)
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	440a      	add	r2, r1
 80023be:	7812      	ldrb	r2, [r2, #0]
 80023c0:	4611      	mov	r1, r2
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	440a      	add	r2, r1
 80023c6:	4611      	mov	r1, r2
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	604b      	str	r3, [r1, #4]
}
 80023ce:	bf00      	nop
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	08005448 	.word	0x08005448

080023e0 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80023ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002424 <LL_DMA_SetChannelSelection+0x44>)
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	4413      	add	r3, r2
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	461a      	mov	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	4413      	add	r3, r2
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8002400:	4908      	ldr	r1, [pc, #32]	@ (8002424 <LL_DMA_SetChannelSelection+0x44>)
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	440b      	add	r3, r1
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	4619      	mov	r1, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	440b      	add	r3, r1
 800240e:	4619      	mov	r1, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4313      	orrs	r3, r2
 8002414:	600b      	str	r3, [r1, #0]
}
 8002416:	bf00      	nop
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	08005448 	.word	0x08005448

08002428 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8002434:	4a07      	ldr	r2, [pc, #28]	@ (8002454 <LL_DMA_SetMemoryAddress+0x2c>)
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	4413      	add	r3, r2
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	461a      	mov	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4413      	add	r3, r2
 8002442:	461a      	mov	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	60d3      	str	r3, [r2, #12]
}
 8002448:	bf00      	nop
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	08005448 	.word	0x08005448

08002458 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8002464:	4a07      	ldr	r2, [pc, #28]	@ (8002484 <LL_DMA_SetPeriphAddress+0x2c>)
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	4413      	add	r3, r2
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	4413      	add	r3, r2
 8002472:	461a      	mov	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6093      	str	r3, [r2, #8]
}
 8002478:	bf00      	nop
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	08005448 	.word	0x08005448

08002488 <NTC_DMA_ADC_init>:
  3143, 3307, 3521, 3819, 4292, 5279, 6266
};


void NTC_DMA_ADC_init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
    // Cấu hình DMA
    LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_0, LL_DMA_CHANNEL_0);
 800248e:	2200      	movs	r2, #0
 8002490:	2100      	movs	r1, #0
 8002492:	483b      	ldr	r0, [pc, #236]	@ (8002580 <NTC_DMA_ADC_init+0xf8>)
 8002494:	f7ff ffa4 	bl	80023e0 <LL_DMA_SetChannelSelection>
    LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002498:	2200      	movs	r2, #0
 800249a:	2100      	movs	r1, #0
 800249c:	4838      	ldr	r0, [pc, #224]	@ (8002580 <NTC_DMA_ADC_init+0xf8>)
 800249e:	f7ff fea3 	bl	80021e8 <LL_DMA_SetDataTransferDirection>
    LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 80024a2:	2200      	movs	r2, #0
 80024a4:	2100      	movs	r1, #0
 80024a6:	4836      	ldr	r0, [pc, #216]	@ (8002580 <NTC_DMA_ADC_init+0xf8>)
 80024a8:	f7ff fee6 	bl	8002278 <LL_DMA_SetPeriphIncMode>
    LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 80024ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024b0:	2100      	movs	r1, #0
 80024b2:	4833      	ldr	r0, [pc, #204]	@ (8002580 <NTC_DMA_ADC_init+0xf8>)
 80024b4:	f7ff ff04 	bl	80022c0 <LL_DMA_SetMemoryIncMode>
    LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_HALFWORD);
 80024b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80024bc:	2100      	movs	r1, #0
 80024be:	4830      	ldr	r0, [pc, #192]	@ (8002580 <NTC_DMA_ADC_init+0xf8>)
 80024c0:	f7ff ff22 	bl	8002308 <LL_DMA_SetPeriphSize>
    LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_HALFWORD);
 80024c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024c8:	2100      	movs	r1, #0
 80024ca:	482d      	ldr	r0, [pc, #180]	@ (8002580 <NTC_DMA_ADC_init+0xf8>)
 80024cc:	f7ff ff40 	bl	8002350 <LL_DMA_SetMemorySize>
    LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_0, 4); // 4 kênh
 80024d0:	2204      	movs	r2, #4
 80024d2:	2100      	movs	r1, #0
 80024d4:	482a      	ldr	r0, [pc, #168]	@ (8002580 <NTC_DMA_ADC_init+0xf8>)
 80024d6:	f7ff ff5f 	bl	8002398 <LL_DMA_SetDataLength>

    // Địa chỉ của ADC data register
    LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_0, (uint32_t)&ADC1->DR);
 80024da:	4a2a      	ldr	r2, [pc, #168]	@ (8002584 <NTC_DMA_ADC_init+0xfc>)
 80024dc:	2100      	movs	r1, #0
 80024de:	4828      	ldr	r0, [pc, #160]	@ (8002580 <NTC_DMA_ADC_init+0xf8>)
 80024e0:	f7ff ffba 	bl	8002458 <LL_DMA_SetPeriphAddress>

    // Địa chỉ bộ nhớ DMA
    LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_0, (uint32_t)NTC_ADC_value);
 80024e4:	4b28      	ldr	r3, [pc, #160]	@ (8002588 <NTC_DMA_ADC_init+0x100>)
 80024e6:	461a      	mov	r2, r3
 80024e8:	2100      	movs	r1, #0
 80024ea:	4825      	ldr	r0, [pc, #148]	@ (8002580 <NTC_DMA_ADC_init+0xf8>)
 80024ec:	f7ff ff9c 	bl	8002428 <LL_DMA_SetMemoryAddress>

    // Cấu hình DMA ở chế độ vòng lặp (Circular Mode)
    LL_DMA_SetMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
 80024f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024f4:	2100      	movs	r1, #0
 80024f6:	4822      	ldr	r0, [pc, #136]	@ (8002580 <NTC_DMA_ADC_init+0xf8>)
 80024f8:	f7ff fe9a 	bl	8002230 <LL_DMA_SetMode>

    // Bật DMA stream
    LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_0);
 80024fc:	2100      	movs	r1, #0
 80024fe:	4820      	ldr	r0, [pc, #128]	@ (8002580 <NTC_DMA_ADC_init+0xf8>)
 8002500:	f7ff fe52 	bl	80021a8 <LL_DMA_EnableStream>


    // Cấu hình ADC
    LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8002504:	1d3b      	adds	r3, r7, #4
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	605a      	str	r2, [r3, #4]
 800250c:	609a      	str	r2, [r3, #8]
    ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 800250e:	2300      	movs	r3, #0
 8002510:	607b      	str	r3, [r7, #4]
    ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8002512:	2300      	movs	r3, #0
 8002514:	60bb      	str	r3, [r7, #8]
    ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8002516:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800251a:	60fb      	str	r3, [r7, #12]
    LL_ADC_Init(ADC1, &ADC_InitStruct);
 800251c:	1d3b      	adds	r3, r7, #4
 800251e:	4619      	mov	r1, r3
 8002520:	481a      	ldr	r0, [pc, #104]	@ (800258c <NTC_DMA_ADC_init+0x104>)
 8002522:	f001 fae7 	bl	8003af4 <LL_ADC_Init>

    // Cấu hình chế độ liên tục cho ADC
    LL_ADC_REG_SetContinuousMode(ADC1, LL_ADC_REG_CONV_CONTINUOUS);
 8002526:	2102      	movs	r1, #2
 8002528:	4818      	ldr	r0, [pc, #96]	@ (800258c <NTC_DMA_ADC_init+0x104>)
 800252a:	f7ff fdf7 	bl	800211c <LL_ADC_REG_SetContinuousMode>

    // Cấu hình các kênh ADC
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_14);
 800252e:	4a18      	ldr	r2, [pc, #96]	@ (8002590 <NTC_DMA_ADC_init+0x108>)
 8002530:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002534:	4815      	ldr	r0, [pc, #84]	@ (800258c <NTC_DMA_ADC_init+0x104>)
 8002536:	f7ff fdb4 	bl	80020a2 <LL_ADC_REG_SetSequencerRanks>
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_15);
 800253a:	4a16      	ldr	r2, [pc, #88]	@ (8002594 <NTC_DMA_ADC_init+0x10c>)
 800253c:	f240 2105 	movw	r1, #517	@ 0x205
 8002540:	4812      	ldr	r0, [pc, #72]	@ (800258c <NTC_DMA_ADC_init+0x104>)
 8002542:	f7ff fdae 	bl	80020a2 <LL_ADC_REG_SetSequencerRanks>
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_8);
 8002546:	4a14      	ldr	r2, [pc, #80]	@ (8002598 <NTC_DMA_ADC_init+0x110>)
 8002548:	f240 210a 	movw	r1, #522	@ 0x20a
 800254c:	480f      	ldr	r0, [pc, #60]	@ (800258c <NTC_DMA_ADC_init+0x104>)
 800254e:	f7ff fda8 	bl	80020a2 <LL_ADC_REG_SetSequencerRanks>
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_9);
 8002552:	4a12      	ldr	r2, [pc, #72]	@ (800259c <NTC_DMA_ADC_init+0x114>)
 8002554:	f240 210f 	movw	r1, #527	@ 0x20f
 8002558:	480c      	ldr	r0, [pc, #48]	@ (800258c <NTC_DMA_ADC_init+0x104>)
 800255a:	f7ff fda2 	bl	80020a2 <LL_ADC_REG_SetSequencerRanks>

    // Bật ADC
    LL_ADC_Enable(ADC1);
 800255e:	480b      	ldr	r0, [pc, #44]	@ (800258c <NTC_DMA_ADC_init+0x104>)
 8002560:	f7ff fdef 	bl	8002142 <LL_ADC_Enable>
    while (!LL_ADC_IsEnabled(ADC1));
 8002564:	bf00      	nop
 8002566:	4809      	ldr	r0, [pc, #36]	@ (800258c <NTC_DMA_ADC_init+0x104>)
 8002568:	f7ff fdfb 	bl	8002162 <LL_ADC_IsEnabled>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f9      	beq.n	8002566 <NTC_DMA_ADC_init+0xde>

    // Bắt đầu chuyển đổi ADC
    LL_ADC_REG_StartConversionSWStart(ADC1);
 8002572:	4806      	ldr	r0, [pc, #24]	@ (800258c <NTC_DMA_ADC_init+0x104>)
 8002574:	f7ff fe08 	bl	8002188 <LL_ADC_REG_StartConversionSWStart>
}
 8002578:	bf00      	nop
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40026400 	.word	0x40026400
 8002584:	4001204c 	.word	0x4001204c
 8002588:	200022e0 	.word	0x200022e0
 800258c:	40012000 	.word	0x40012000
 8002590:	00c0000e 	.word	0x00c0000e
 8002594:	00f0000f 	.word	0x00f0000f
 8002598:	03800008 	.word	0x03800008
 800259c:	03b00009 	.word	0x03b00009

080025a0 <NTC_get_temperature_using_table>:
//	LL_ADC_REG_SetContinuousMode(ADC1, LL_ADC_REG_CONV_CONTINUOUS);
//	LL_ADC_REG_StartConversionSWStart(ADC1);
//}

void NTC_get_temperature_using_table(int16_t* temp)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < 4; i++)
 80025a8:	2300      	movs	r3, #0
 80025aa:	73fb      	strb	r3, [r7, #15]
 80025ac:	e028      	b.n	8002600 <NTC_get_temperature_using_table+0x60>
	{
		temp[i] = NTC_table[NTC_ADC_value[i]];
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
 80025b0:	4a18      	ldr	r2, [pc, #96]	@ (8002614 <NTC_get_temperature_using_table+0x74>)
 80025b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025b6:	4619      	mov	r1, r3
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	4413      	add	r3, r2
 80025c0:	4a15      	ldr	r2, [pc, #84]	@ (8002618 <NTC_get_temperature_using_table+0x78>)
 80025c2:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80025c6:	801a      	strh	r2, [r3, #0]
		if (temp[i] < -500 || temp[i] >  2000)  temp[i] = 0x7FFF;
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	4413      	add	r3, r2
 80025d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025d4:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 80025d8:	db08      	blt.n	80025ec <NTC_get_temperature_using_table+0x4c>
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025e6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80025ea:	dd06      	ble.n	80025fa <NTC_get_temperature_using_table+0x5a>
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	4413      	add	r3, r2
 80025f4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80025f8:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++)
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
 80025fc:	3301      	adds	r3, #1
 80025fe:	73fb      	strb	r3, [r7, #15]
 8002600:	7bfb      	ldrb	r3, [r7, #15]
 8002602:	2b03      	cmp	r3, #3
 8002604:	d9d3      	bls.n	80025ae <NTC_get_temperature_using_table+0xe>
	}
};
 8002606:	bf00      	nop
 8002608:	bf00      	nop
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	200022e0 	.word	0x200022e0
 8002618:	20000134 	.word	0x20000134

0800261c <LL_GPIO_SetOutputPin>:
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	619a      	str	r2, [r3, #24]
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <LL_GPIO_ResetOutputPin>:
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	041a      	lsls	r2, r3, #16
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	619a      	str	r2, [r3, #24]
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
	...

08002658 <status_led_init>:
		480									// taskTick
	},
};

void status_led_init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
    s_led_display_status.led_green = 0;
 800265c:	4a0a      	ldr	r2, [pc, #40]	@ (8002688 <status_led_init+0x30>)
 800265e:	7813      	ldrb	r3, [r2, #0]
 8002660:	f36f 0300 	bfc	r3, #0, #1
 8002664:	7013      	strb	r3, [r2, #0]
    s_led_display_status.led_blue = 0;
 8002666:	4a08      	ldr	r2, [pc, #32]	@ (8002688 <status_led_init+0x30>)
 8002668:	7813      	ldrb	r3, [r2, #0]
 800266a:	f36f 0341 	bfc	r3, #1, #1
 800266e:	7013      	strb	r3, [r2, #0]
    s_led_display_status.state = EXP_POWERUP;
 8002670:	4a05      	ldr	r2, [pc, #20]	@ (8002688 <status_led_init+0x30>)
 8002672:	7813      	ldrb	r3, [r2, #0]
 8002674:	f36f 0387 	bfc	r3, #2, #6
 8002678:	7013      	strb	r3, [r2, #0]
	status_led_led_green_off();
 800267a:	f000 f91b 	bl	80028b4 <status_led_led_green_off>
	status_led_led_blue_off();
 800267e:	f000 f931 	bl	80028e4 <status_led_led_blue_off>
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	200022f0 	.word	0x200022f0

0800268c <status_led_update>:
#include "uart.h"
#include "ntc.h"


void	status_led_update(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af02      	add	r7, sp, #8
	NTC_get_temperature_using_table(NTC_Temperature);
 8002692:	4824      	ldr	r0, [pc, #144]	@ (8002724 <status_led_update+0x98>)
 8002694:	f7ff ff84 	bl	80025a0 <NTC_get_temperature_using_table>
	UART_Printf(&EXP_UART, "%d %d %d %d ", NTC_ADC_value[0], NTC_ADC_value[1], NTC_ADC_value[2], NTC_ADC_value[3]);
 8002698:	4b23      	ldr	r3, [pc, #140]	@ (8002728 <status_led_update+0x9c>)
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	4619      	mov	r1, r3
 800269e:	4b22      	ldr	r3, [pc, #136]	@ (8002728 <status_led_update+0x9c>)
 80026a0:	885b      	ldrh	r3, [r3, #2]
 80026a2:	4618      	mov	r0, r3
 80026a4:	4b20      	ldr	r3, [pc, #128]	@ (8002728 <status_led_update+0x9c>)
 80026a6:	889b      	ldrh	r3, [r3, #4]
 80026a8:	461a      	mov	r2, r3
 80026aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002728 <status_led_update+0x9c>)
 80026ac:	88db      	ldrh	r3, [r3, #6]
 80026ae:	9301      	str	r3, [sp, #4]
 80026b0:	9200      	str	r2, [sp, #0]
 80026b2:	4603      	mov	r3, r0
 80026b4:	460a      	mov	r2, r1
 80026b6:	491d      	ldr	r1, [pc, #116]	@ (800272c <status_led_update+0xa0>)
 80026b8:	481d      	ldr	r0, [pc, #116]	@ (8002730 <status_led_update+0xa4>)
 80026ba:	f7fe f9bb 	bl	8000a34 <UART_Printf>
	UART_Printf(&EXP_UART, "%d %d %d %d \n", NTC_Temperature[0], NTC_Temperature[1], NTC_Temperature[2], NTC_Temperature[3]);
 80026be:	4b19      	ldr	r3, [pc, #100]	@ (8002724 <status_led_update+0x98>)
 80026c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026c4:	4619      	mov	r1, r3
 80026c6:	4b17      	ldr	r3, [pc, #92]	@ (8002724 <status_led_update+0x98>)
 80026c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80026cc:	4618      	mov	r0, r3
 80026ce:	4b15      	ldr	r3, [pc, #84]	@ (8002724 <status_led_update+0x98>)
 80026d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80026d4:	461a      	mov	r2, r3
 80026d6:	4b13      	ldr	r3, [pc, #76]	@ (8002724 <status_led_update+0x98>)
 80026d8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80026dc:	9301      	str	r3, [sp, #4]
 80026de:	9200      	str	r2, [sp, #0]
 80026e0:	4603      	mov	r3, r0
 80026e2:	460a      	mov	r2, r1
 80026e4:	4913      	ldr	r1, [pc, #76]	@ (8002734 <status_led_update+0xa8>)
 80026e6:	4812      	ldr	r0, [pc, #72]	@ (8002730 <status_led_update+0xa4>)
 80026e8:	f7fe f9a4 	bl	8000a34 <UART_Printf>
	switch (s_led_display_status.state) {
 80026ec:	4b12      	ldr	r3, [pc, #72]	@ (8002738 <status_led_update+0xac>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	f3c3 0385 	ubfx	r3, r3, #2, #6
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d00c      	beq.n	8002714 <status_led_update+0x88>
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	dc0d      	bgt.n	800271a <status_led_update+0x8e>
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d002      	beq.n	8002708 <status_led_update+0x7c>
 8002702:	2b01      	cmp	r3, #1
 8002704:	d003      	beq.n	800270e <status_led_update+0x82>
		break;
	case EXP_ERROR:
		status_led_error();
		break;
	default:
		break;
 8002706:	e008      	b.n	800271a <status_led_update+0x8e>
		status_led_powerup();
 8002708:	f000 f818 	bl	800273c <status_led_powerup>
		break;
 800270c:	e006      	b.n	800271c <status_led_update+0x90>
		status_led_normal();
 800270e:	f000 f85d 	bl	80027cc <status_led_normal>
		break;
 8002712:	e003      	b.n	800271c <status_led_update+0x90>
		status_led_error();
 8002714:	f000 f87c 	bl	8002810 <status_led_error>
		break;
 8002718:	e000      	b.n	800271c <status_led_update+0x90>
		break;
 800271a:	bf00      	nop
	}
}
 800271c:	bf00      	nop
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	200022e8 	.word	0x200022e8
 8002728:	200022e0 	.word	0x200022e0
 800272c:	08005428 	.word	0x08005428
 8002730:	200021f4 	.word	0x200021f4
 8002734:	08005438 	.word	0x08005438
 8002738:	200022f0 	.word	0x200022f0

0800273c <status_led_powerup>:

static void status_led_powerup(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
	if (s_led_display_status.led_green && s_led_display_status.led_blue) {
 8002740:	4b21      	ldr	r3, [pc, #132]	@ (80027c8 <status_led_powerup+0x8c>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d020      	beq.n	8002790 <status_led_powerup+0x54>
 800274e:	4b1e      	ldr	r3, [pc, #120]	@ (80027c8 <status_led_powerup+0x8c>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b00      	cmp	r3, #0
 800275a:	d019      	beq.n	8002790 <status_led_powerup+0x54>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 800275c:	2000      	movs	r0, #0
 800275e:	f002 fa61 	bl	8004c24 <SCH_TIM_HasCompleted>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d02d      	beq.n	80027c4 <status_led_powerup+0x88>
			s_led_display_status.led_green = 0;
 8002768:	4a17      	ldr	r2, [pc, #92]	@ (80027c8 <status_led_powerup+0x8c>)
 800276a:	7813      	ldrb	r3, [r2, #0]
 800276c:	f36f 0300 	bfc	r3, #0, #1
 8002770:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 0;
 8002772:	4a15      	ldr	r2, [pc, #84]	@ (80027c8 <status_led_powerup+0x8c>)
 8002774:	7813      	ldrb	r3, [r2, #0]
 8002776:	f36f 0341 	bfc	r3, #1, #1
 800277a:	7013      	strb	r3, [r2, #0]
			status_led_led_green_off();
 800277c:	f000 f89a 	bl	80028b4 <status_led_led_green_off>
			status_led_led_blue_off();
 8002780:	f000 f8b0 	bl	80028e4 <status_led_led_blue_off>
			SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD);
 8002784:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002788:	2000      	movs	r0, #0
 800278a:	f002 fa35 	bl	8004bf8 <SCH_TIM_Start>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 800278e:	e019      	b.n	80027c4 <status_led_powerup+0x88>
		}
	} else {
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 8002790:	2000      	movs	r0, #0
 8002792:	f002 fa47 	bl	8004c24 <SCH_TIM_HasCompleted>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d013      	beq.n	80027c4 <status_led_powerup+0x88>
			s_led_display_status.led_green = 1;
 800279c:	4a0a      	ldr	r2, [pc, #40]	@ (80027c8 <status_led_powerup+0x8c>)
 800279e:	7813      	ldrb	r3, [r2, #0]
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 1;
 80027a6:	4a08      	ldr	r2, [pc, #32]	@ (80027c8 <status_led_powerup+0x8c>)
 80027a8:	7813      	ldrb	r3, [r2, #0]
 80027aa:	f043 0302 	orr.w	r3, r3, #2
 80027ae:	7013      	strb	r3, [r2, #0]
			status_led_led_green_on();
 80027b0:	f000 f874 	bl	800289c <status_led_led_green_on>
			status_led_led_blue_on();
 80027b4:	f000 f88a 	bl	80028cc <status_led_led_blue_on>
			SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD);
 80027b8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80027bc:	2000      	movs	r0, #0
 80027be:	f002 fa1b 	bl	8004bf8 <SCH_TIM_Start>
		}
	}
}
 80027c2:	e7ff      	b.n	80027c4 <status_led_powerup+0x88>
 80027c4:	bf00      	nop
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	200022f0 	.word	0x200022f0

080027cc <status_led_normal>:

static void status_led_normal(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
	// viết tạm
	LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 80027d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80027d4:	480d      	ldr	r0, [pc, #52]	@ (800280c <status_led_normal+0x40>)
 80027d6:	f7ff ff2f 	bl	8002638 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 80027da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027de:	480b      	ldr	r0, [pc, #44]	@ (800280c <status_led_normal+0x40>)
 80027e0:	f7ff ff1c 	bl	800261c <LL_GPIO_SetOutputPin>
	LL_mDelay(500);
 80027e4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80027e8:	f002 f9a6 	bl	8004b38 <LL_mDelay>
	LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 80027ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027f0:	4806      	ldr	r0, [pc, #24]	@ (800280c <status_led_normal+0x40>)
 80027f2:	f7ff ff21 	bl	8002638 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 80027f6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80027fa:	4804      	ldr	r0, [pc, #16]	@ (800280c <status_led_normal+0x40>)
 80027fc:	f7ff ff0e 	bl	800261c <LL_GPIO_SetOutputPin>
	LL_mDelay(500);
 8002800:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002804:	f002 f998 	bl	8004b38 <LL_mDelay>
}
 8002808:	bf00      	nop
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40020c00 	.word	0x40020c00

08002810 <status_led_error>:

static void status_led_error(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
	if (s_led_display_status.led_green && s_led_display_status.led_blue) {
 8002814:	4b20      	ldr	r3, [pc, #128]	@ (8002898 <status_led_error+0x88>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d01f      	beq.n	8002862 <status_led_error+0x52>
 8002822:	4b1d      	ldr	r3, [pc, #116]	@ (8002898 <status_led_error+0x88>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	d018      	beq.n	8002862 <status_led_error+0x52>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 8002830:	2000      	movs	r0, #0
 8002832:	f002 f9f7 	bl	8004c24 <SCH_TIM_HasCompleted>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d02b      	beq.n	8002894 <status_led_error+0x84>
			s_led_display_status.led_green = 0;
 800283c:	4a16      	ldr	r2, [pc, #88]	@ (8002898 <status_led_error+0x88>)
 800283e:	7813      	ldrb	r3, [r2, #0]
 8002840:	f36f 0300 	bfc	r3, #0, #1
 8002844:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 0;
 8002846:	4a14      	ldr	r2, [pc, #80]	@ (8002898 <status_led_error+0x88>)
 8002848:	7813      	ldrb	r3, [r2, #0]
 800284a:	f36f 0341 	bfc	r3, #1, #1
 800284e:	7013      	strb	r3, [r2, #0]
			status_led_led_green_off();
 8002850:	f000 f830 	bl	80028b4 <status_led_led_green_off>
			status_led_led_blue_off();
 8002854:	f000 f846 	bl	80028e4 <status_led_led_blue_off>
			SCH_TIM_Start(SCH_TIM_LED, ERROR_PERIOD);
 8002858:	2132      	movs	r1, #50	@ 0x32
 800285a:	2000      	movs	r0, #0
 800285c:	f002 f9cc 	bl	8004bf8 <SCH_TIM_Start>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 8002860:	e018      	b.n	8002894 <status_led_error+0x84>
		}
	} else {
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 8002862:	2000      	movs	r0, #0
 8002864:	f002 f9de 	bl	8004c24 <SCH_TIM_HasCompleted>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d012      	beq.n	8002894 <status_led_error+0x84>
			s_led_display_status.led_green = 1;
 800286e:	4a0a      	ldr	r2, [pc, #40]	@ (8002898 <status_led_error+0x88>)
 8002870:	7813      	ldrb	r3, [r2, #0]
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 1;
 8002878:	4a07      	ldr	r2, [pc, #28]	@ (8002898 <status_led_error+0x88>)
 800287a:	7813      	ldrb	r3, [r2, #0]
 800287c:	f043 0302 	orr.w	r3, r3, #2
 8002880:	7013      	strb	r3, [r2, #0]
			status_led_led_green_on();
 8002882:	f000 f80b 	bl	800289c <status_led_led_green_on>
			status_led_led_blue_on();
 8002886:	f000 f821 	bl	80028cc <status_led_led_blue_on>
			SCH_TIM_Start(SCH_TIM_LED, ERROR_PERIOD);
 800288a:	2132      	movs	r1, #50	@ 0x32
 800288c:	2000      	movs	r0, #0
 800288e:	f002 f9b3 	bl	8004bf8 <SCH_TIM_Start>
		}
	}
}
 8002892:	e7ff      	b.n	8002894 <status_led_error+0x84>
 8002894:	bf00      	nop
 8002896:	bd80      	pop	{r7, pc}
 8002898:	200022f0 	.word	0x200022f0

0800289c <status_led_led_green_on>:

static void status_led_led_green_on(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 80028a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028a4:	4802      	ldr	r0, [pc, #8]	@ (80028b0 <status_led_led_green_on+0x14>)
 80028a6:	f7ff feb9 	bl	800261c <LL_GPIO_SetOutputPin>
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40020c00 	.word	0x40020c00

080028b4 <status_led_led_green_off>:
static void status_led_led_green_off(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 80028b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028bc:	4802      	ldr	r0, [pc, #8]	@ (80028c8 <status_led_led_green_off+0x14>)
 80028be:	f7ff febb 	bl	8002638 <LL_GPIO_ResetOutputPin>
}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40020c00 	.word	0x40020c00

080028cc <status_led_led_blue_on>:
static void status_led_led_blue_on(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 80028d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80028d4:	4802      	ldr	r0, [pc, #8]	@ (80028e0 <status_led_led_blue_on+0x14>)
 80028d6:	f7ff fea1 	bl	800261c <LL_GPIO_SetOutputPin>
}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40020c00 	.word	0x40020c00

080028e4 <status_led_led_blue_off>:
static void status_led_led_blue_off(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 80028e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80028ec:	4802      	ldr	r0, [pc, #8]	@ (80028f8 <status_led_led_blue_off+0x14>)
 80028ee:	f7ff fea3 	bl	8002638 <LL_GPIO_ResetOutputPin>
}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40020c00 	.word	0x40020c00

080028fc <status_led_create_task>:

void	status_led_create_task(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_task_context.taskHandle, &s_task_context.taskProperty);
 8002900:	4902      	ldr	r1, [pc, #8]	@ (800290c <status_led_create_task+0x10>)
 8002902:	4803      	ldr	r0, [pc, #12]	@ (8002910 <status_led_create_task+0x14>)
 8002904:	f002 f9a4 	bl	8004c50 <SCH_TASK_CreateTask>
}
 8002908:	bf00      	nop
 800290a:	bd80      	pop	{r7, pc}
 800290c:	20002138 	.word	0x20002138
 8002910:	20002134 	.word	0x20002134

08002914 <__NVIC_SetPriorityGrouping>:
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002924:	4b0c      	ldr	r3, [pc, #48]	@ (8002958 <__NVIC_SetPriorityGrouping+0x44>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002930:	4013      	ands	r3, r2
 8002932:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800293c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002940:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002946:	4a04      	ldr	r2, [pc, #16]	@ (8002958 <__NVIC_SetPriorityGrouping+0x44>)
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	60d3      	str	r3, [r2, #12]
}
 800294c:	bf00      	nop
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	e000ed00 	.word	0xe000ed00

0800295c <__NVIC_GetPriorityGrouping>:
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002960:	4b04      	ldr	r3, [pc, #16]	@ (8002974 <__NVIC_GetPriorityGrouping+0x18>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	0a1b      	lsrs	r3, r3, #8
 8002966:	f003 0307 	and.w	r3, r3, #7
}
 800296a:	4618      	mov	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	e000ed00 	.word	0xe000ed00

08002978 <__NVIC_EnableIRQ>:
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002986:	2b00      	cmp	r3, #0
 8002988:	db0b      	blt.n	80029a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	f003 021f 	and.w	r2, r3, #31
 8002990:	4907      	ldr	r1, [pc, #28]	@ (80029b0 <__NVIC_EnableIRQ+0x38>)
 8002992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	2001      	movs	r0, #1
 800299a:	fa00 f202 	lsl.w	r2, r0, r2
 800299e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	e000e100 	.word	0xe000e100

080029b4 <__NVIC_SetPriority>:
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	6039      	str	r1, [r7, #0]
 80029be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	db0a      	blt.n	80029de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	490c      	ldr	r1, [pc, #48]	@ (8002a00 <__NVIC_SetPriority+0x4c>)
 80029ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d2:	0112      	lsls	r2, r2, #4
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	440b      	add	r3, r1
 80029d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80029dc:	e00a      	b.n	80029f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	4908      	ldr	r1, [pc, #32]	@ (8002a04 <__NVIC_SetPriority+0x50>)
 80029e4:	79fb      	ldrb	r3, [r7, #7]
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	3b04      	subs	r3, #4
 80029ec:	0112      	lsls	r2, r2, #4
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	440b      	add	r3, r1
 80029f2:	761a      	strb	r2, [r3, #24]
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	e000e100 	.word	0xe000e100
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <NVIC_EncodePriority>:
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b089      	sub	sp, #36	@ 0x24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f1c3 0307 	rsb	r3, r3, #7
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	bf28      	it	cs
 8002a26:	2304      	movcs	r3, #4
 8002a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	2b06      	cmp	r3, #6
 8002a30:	d902      	bls.n	8002a38 <NVIC_EncodePriority+0x30>
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3b03      	subs	r3, #3
 8002a36:	e000      	b.n	8002a3a <NVIC_EncodePriority+0x32>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43da      	mvns	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	401a      	ands	r2, r3
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a50:	f04f 31ff 	mov.w	r1, #4294967295
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5a:	43d9      	mvns	r1, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a60:	4313      	orrs	r3, r2
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3724      	adds	r7, #36	@ 0x24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <LL_ADC_REG_SetSequencerRanks>:
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b089      	sub	sp, #36	@ 0x24
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	60f8      	str	r0, [r7, #12]
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	332c      	adds	r3, #44	@ 0x2c
 8002a7e:	4619      	mov	r1, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a86:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002a8a:	617a      	str	r2, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	fa92 f2a2 	rbit	r2, r2
 8002a92:	613a      	str	r2, [r7, #16]
  return result;
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	61ba      	str	r2, [r7, #24]
  if (value == 0U)
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	2a00      	cmp	r2, #0
 8002a9c:	d101      	bne.n	8002aa2 <LL_ADC_REG_SetSequencerRanks+0x34>
    return 32U;
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	e003      	b.n	8002aaa <LL_ADC_REG_SetSequencerRanks+0x3c>
  return __builtin_clz(value);
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	fab2 f282 	clz	r2, r2
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	40d3      	lsrs	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	440b      	add	r3, r1
 8002ab0:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f003 031f 	and.w	r3, r3, #31
 8002abc:	211f      	movs	r1, #31
 8002abe:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	401a      	ands	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f003 011f 	and.w	r1, r3, #31
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f003 031f 	and.w	r3, r3, #31
 8002ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	601a      	str	r2, [r3, #0]
}
 8002adc:	bf00      	nop
 8002ade:	3724      	adds	r7, #36	@ 0x24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <LL_ADC_REG_SetFlagEndOfConversion>:
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	431a      	orrs	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	609a      	str	r2, [r3, #8]
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <LL_ADC_SetChannelSamplingTime>:
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b08f      	sub	sp, #60	@ 0x3c
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	330c      	adds	r3, #12
 8002b1e:	4619      	mov	r1, r3
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b26:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b2a:	617a      	str	r2, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	fa92 f2a2 	rbit	r2, r2
 8002b32:	613a      	str	r2, [r7, #16]
  return result;
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	61ba      	str	r2, [r7, #24]
  if (value == 0U)
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	2a00      	cmp	r2, #0
 8002b3c:	d101      	bne.n	8002b42 <LL_ADC_SetChannelSamplingTime+0x34>
    return 32U;
 8002b3e:	2220      	movs	r2, #32
 8002b40:	e003      	b.n	8002b4a <LL_ADC_SetChannelSamplingTime+0x3c>
  return __builtin_clz(value);
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	fab2 f282 	clz	r2, r2
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	40d3      	lsrs	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	440b      	add	r3, r1
 8002b50:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(*preg,
 8002b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8002b5c:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8002b60:	6239      	str	r1, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b62:	6a39      	ldr	r1, [r7, #32]
 8002b64:	fa91 f1a1 	rbit	r1, r1
 8002b68:	61f9      	str	r1, [r7, #28]
  return result;
 8002b6a:	69f9      	ldr	r1, [r7, #28]
 8002b6c:	6279      	str	r1, [r7, #36]	@ 0x24
  if (value == 0U)
 8002b6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b70:	2900      	cmp	r1, #0
 8002b72:	d101      	bne.n	8002b78 <LL_ADC_SetChannelSamplingTime+0x6a>
    return 32U;
 8002b74:	2120      	movs	r1, #32
 8002b76:	e003      	b.n	8002b80 <LL_ADC_SetChannelSamplingTime+0x72>
  return __builtin_clz(value);
 8002b78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b7a:	fab1 f181 	clz	r1, r1
 8002b7e:	b2c9      	uxtb	r1, r1
 8002b80:	40cb      	lsrs	r3, r1
 8002b82:	2107      	movs	r1, #7
 8002b84:	fa01 f303 	lsl.w	r3, r1, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	401a      	ands	r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8002b92:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8002b96:	62f9      	str	r1, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b9a:	fa91 f1a1 	rbit	r1, r1
 8002b9e:	62b9      	str	r1, [r7, #40]	@ 0x28
  return result;
 8002ba0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ba2:	6339      	str	r1, [r7, #48]	@ 0x30
  if (value == 0U)
 8002ba4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002ba6:	2900      	cmp	r1, #0
 8002ba8:	d101      	bne.n	8002bae <LL_ADC_SetChannelSamplingTime+0xa0>
    return 32U;
 8002baa:	2120      	movs	r1, #32
 8002bac:	e003      	b.n	8002bb6 <LL_ADC_SetChannelSamplingTime+0xa8>
  return __builtin_clz(value);
 8002bae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002bb0:	fab1 f181 	clz	r1, r1
 8002bb4:	b2c9      	uxtb	r1, r1
 8002bb6:	40cb      	lsrs	r3, r1
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bc2:	601a      	str	r2, [r3, #0]
}
 8002bc4:	bf00      	nop
 8002bc6:	373c      	adds	r7, #60	@ 0x3c
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <LL_DMA_SetDataTransferDirection>:
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8002bdc:	4a0d      	ldr	r2, [pc, #52]	@ (8002c14 <LL_DMA_SetDataTransferDirection+0x44>)
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	4413      	add	r3, r2
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	461a      	mov	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4413      	add	r3, r2
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002bf0:	4908      	ldr	r1, [pc, #32]	@ (8002c14 <LL_DMA_SetDataTransferDirection+0x44>)
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	440b      	add	r3, r1
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	440b      	add	r3, r1
 8002bfe:	4619      	mov	r1, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	600b      	str	r3, [r1, #0]
}
 8002c06:	bf00      	nop
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	08005450 	.word	0x08005450

08002c18 <LL_DMA_SetMode>:
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8002c24:	4a0d      	ldr	r2, [pc, #52]	@ (8002c5c <LL_DMA_SetMode+0x44>)
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	4413      	add	r3, r2
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	4413      	add	r3, r2
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 8002c38:	4908      	ldr	r1, [pc, #32]	@ (8002c5c <LL_DMA_SetMode+0x44>)
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	440b      	add	r3, r1
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	4619      	mov	r1, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	440b      	add	r3, r1
 8002c46:	4619      	mov	r1, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	600b      	str	r3, [r1, #0]
}
 8002c4e:	bf00      	nop
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	08005450 	.word	0x08005450

08002c60 <LL_DMA_SetPeriphIncMode>:
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8002c6c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ca4 <LL_DMA_SetPeriphIncMode+0x44>)
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	4413      	add	r3, r2
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	461a      	mov	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	4413      	add	r3, r2
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002c80:	4908      	ldr	r1, [pc, #32]	@ (8002ca4 <LL_DMA_SetPeriphIncMode+0x44>)
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	440b      	add	r3, r1
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	4619      	mov	r1, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	440b      	add	r3, r1
 8002c8e:	4619      	mov	r1, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	600b      	str	r3, [r1, #0]
}
 8002c96:	bf00      	nop
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	08005450 	.word	0x08005450

08002ca8 <LL_DMA_SetMemoryIncMode>:
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8002cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8002cec <LL_DMA_SetMemoryIncMode+0x44>)
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	4413      	add	r3, r2
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002cc8:	4908      	ldr	r1, [pc, #32]	@ (8002cec <LL_DMA_SetMemoryIncMode+0x44>)
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	440b      	add	r3, r1
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	440b      	add	r3, r1
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	600b      	str	r3, [r1, #0]
}
 8002cde:	bf00      	nop
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	08005450 	.word	0x08005450

08002cf0 <LL_DMA_SetPeriphSize>:
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8002cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8002d34 <LL_DMA_SetPeriphSize+0x44>)
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	4413      	add	r3, r2
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	4413      	add	r3, r2
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8002d10:	4908      	ldr	r1, [pc, #32]	@ (8002d34 <LL_DMA_SetPeriphSize+0x44>)
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	440b      	add	r3, r1
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	4619      	mov	r1, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	440b      	add	r3, r1
 8002d1e:	4619      	mov	r1, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	600b      	str	r3, [r1, #0]
}
 8002d26:	bf00      	nop
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	08005450 	.word	0x08005450

08002d38 <LL_DMA_SetMemorySize>:
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8002d44:	4a0d      	ldr	r2, [pc, #52]	@ (8002d7c <LL_DMA_SetMemorySize+0x44>)
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	4413      	add	r3, r2
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	4413      	add	r3, r2
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8002d58:	4908      	ldr	r1, [pc, #32]	@ (8002d7c <LL_DMA_SetMemorySize+0x44>)
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	440b      	add	r3, r1
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	4619      	mov	r1, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	440b      	add	r3, r1
 8002d66:	4619      	mov	r1, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	600b      	str	r3, [r1, #0]
}
 8002d6e:	bf00      	nop
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	08005450 	.word	0x08005450

08002d80 <LL_DMA_SetStreamPriorityLevel>:
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8002d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002dc4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	4413      	add	r3, r2
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4413      	add	r3, r2
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002da0:	4908      	ldr	r1, [pc, #32]	@ (8002dc4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	440b      	add	r3, r1
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	4619      	mov	r1, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	440b      	add	r3, r1
 8002dae:	4619      	mov	r1, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	600b      	str	r3, [r1, #0]
}
 8002db6:	bf00      	nop
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	08005450 	.word	0x08005450

08002dc8 <LL_DMA_SetChannelSelection>:
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8002dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8002e0c <LL_DMA_SetChannelSelection+0x44>)
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	4413      	add	r3, r2
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	4413      	add	r3, r2
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8002de8:	4908      	ldr	r1, [pc, #32]	@ (8002e0c <LL_DMA_SetChannelSelection+0x44>)
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	440b      	add	r3, r1
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	4619      	mov	r1, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	440b      	add	r3, r1
 8002df6:	4619      	mov	r1, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	600b      	str	r3, [r1, #0]
}
 8002dfe:	bf00      	nop
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	08005450 	.word	0x08005450

08002e10 <LL_DMA_DisableFifoMode>:
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8002e1a:	4a0c      	ldr	r2, [pc, #48]	@ (8002e4c <LL_DMA_DisableFifoMode+0x3c>)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	4413      	add	r3, r2
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	461a      	mov	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4413      	add	r3, r2
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	4908      	ldr	r1, [pc, #32]	@ (8002e4c <LL_DMA_DisableFifoMode+0x3c>)
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	440a      	add	r2, r1
 8002e30:	7812      	ldrb	r2, [r2, #0]
 8002e32:	4611      	mov	r1, r2
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	440a      	add	r2, r1
 8002e38:	f023 0304 	bic.w	r3, r3, #4
 8002e3c:	6153      	str	r3, [r2, #20]
}
 8002e3e:	bf00      	nop
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	08005450 	.word	0x08005450

08002e50 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f043 0201 	orr.w	r2, r3, #1
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	601a      	str	r2, [r3, #0]
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	601a      	str	r2, [r3, #0]
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	601a      	str	r2, [r3, #0]
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f023 02fe 	bic.w	r2, r3, #254	@ 0xfe
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	60da      	str	r2, [r3, #12]
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f023 0201 	bic.w	r2, r3, #1
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	60da      	str	r2, [r3, #12]
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
	...

08002ef8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002efc:	4b05      	ldr	r3, [pc, #20]	@ (8002f14 <LL_RCC_HSI_Enable+0x1c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a04      	ldr	r2, [pc, #16]	@ (8002f14 <LL_RCC_HSI_Enable+0x1c>)
 8002f02:	f043 0301 	orr.w	r3, r3, #1
 8002f06:	6013      	str	r3, [r2, #0]
}
 8002f08:	bf00      	nop
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40023800 	.word	0x40023800

08002f18 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002f1c:	4b06      	ldr	r3, [pc, #24]	@ (8002f38 <LL_RCC_HSI_IsReady+0x20>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	bf0c      	ite	eq
 8002f28:	2301      	moveq	r3, #1
 8002f2a:	2300      	movne	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	40023800 	.word	0x40023800

08002f3c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8002f44:	4b07      	ldr	r3, [pc, #28]	@ (8002f64 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	4904      	ldr	r1, [pc, #16]	@ (8002f64 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	600b      	str	r3, [r1, #0]
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	40023800 	.word	0x40023800

08002f68 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002f70:	4b06      	ldr	r3, [pc, #24]	@ (8002f8c <LL_RCC_SetSysClkSource+0x24>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f023 0203 	bic.w	r2, r3, #3
 8002f78:	4904      	ldr	r1, [pc, #16]	@ (8002f8c <LL_RCC_SetSysClkSource+0x24>)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	608b      	str	r3, [r1, #8]
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	40023800 	.word	0x40023800

08002f90 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002f94:	4b04      	ldr	r3, [pc, #16]	@ (8002fa8 <LL_RCC_GetSysClkSource+0x18>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 030c 	and.w	r3, r3, #12
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40023800 	.word	0x40023800

08002fac <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002fb4:	4b06      	ldr	r3, [pc, #24]	@ (8002fd0 <LL_RCC_SetAHBPrescaler+0x24>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fbc:	4904      	ldr	r1, [pc, #16]	@ (8002fd0 <LL_RCC_SetAHBPrescaler+0x24>)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	608b      	str	r3, [r1, #8]
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	40023800 	.word	0x40023800

08002fd4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002fdc:	4b06      	ldr	r3, [pc, #24]	@ (8002ff8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002fe4:	4904      	ldr	r1, [pc, #16]	@ (8002ff8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	608b      	str	r3, [r1, #8]
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	40023800 	.word	0x40023800

08002ffc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003004:	4b06      	ldr	r3, [pc, #24]	@ (8003020 <LL_RCC_SetAPB2Prescaler+0x24>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800300c:	4904      	ldr	r1, [pc, #16]	@ (8003020 <LL_RCC_SetAPB2Prescaler+0x24>)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4313      	orrs	r3, r2
 8003012:	608b      	str	r3, [r1, #8]
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	40023800 	.word	0x40023800

08003024 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800302c:	4b08      	ldr	r3, [pc, #32]	@ (8003050 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800302e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003030:	4907      	ldr	r1, [pc, #28]	@ (8003050 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4313      	orrs	r3, r2
 8003036:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003038:	4b05      	ldr	r3, [pc, #20]	@ (8003050 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800303a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4013      	ands	r3, r2
 8003040:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003042:	68fb      	ldr	r3, [r7, #12]
}
 8003044:	bf00      	nop
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	40023800 	.word	0x40023800

08003054 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800305c:	4b08      	ldr	r3, [pc, #32]	@ (8003080 <LL_APB1_GRP1_EnableClock+0x2c>)
 800305e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003060:	4907      	ldr	r1, [pc, #28]	@ (8003080 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4313      	orrs	r3, r2
 8003066:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003068:	4b05      	ldr	r3, [pc, #20]	@ (8003080 <LL_APB1_GRP1_EnableClock+0x2c>)
 800306a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4013      	ands	r3, r2
 8003070:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003072:	68fb      	ldr	r3, [r7, #12]
}
 8003074:	bf00      	nop
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	40023800 	.word	0x40023800

08003084 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800308c:	4b08      	ldr	r3, [pc, #32]	@ (80030b0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800308e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003090:	4907      	ldr	r1, [pc, #28]	@ (80030b0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4313      	orrs	r3, r2
 8003096:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003098:	4b05      	ldr	r3, [pc, #20]	@ (80030b0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800309a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4013      	ands	r3, r2
 80030a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80030a2:	68fb      	ldr	r3, [r7, #12]
}
 80030a4:	bf00      	nop
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	40023800 	.word	0x40023800

080030b4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80030bc:	4b06      	ldr	r3, [pc, #24]	@ (80030d8 <LL_FLASH_SetLatency+0x24>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f023 0207 	bic.w	r2, r3, #7
 80030c4:	4904      	ldr	r1, [pc, #16]	@ (80030d8 <LL_FLASH_SetLatency+0x24>)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	600b      	str	r3, [r1, #0]
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	40023c00 	.word	0x40023c00

080030dc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80030e0:	4b04      	ldr	r3, [pc, #16]	@ (80030f4 <LL_FLASH_GetLatency+0x18>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0307 	and.w	r3, r3, #7
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	40023c00 	.word	0x40023c00

080030f8 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8003100:	4b06      	ldr	r3, [pc, #24]	@ (800311c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003108:	4904      	ldr	r1, [pc, #16]	@ (800311c <LL_PWR_SetRegulVoltageScaling+0x24>)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4313      	orrs	r3, r2
 800310e:	600b      	str	r3, [r1, #0]
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	40007000 	.word	0x40007000

08003120 <LL_SPI_Enable>:
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	601a      	str	r2, [r3, #0]
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <LL_SPI_SetStandard>:
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f023 0210 	bic.w	r2, r3, #16
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	431a      	orrs	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	605a      	str	r2, [r3, #4]
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <LL_USART_Enable>:
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	60da      	str	r2, [r3, #12]
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <LL_USART_ConfigAsyncMode>:
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	615a      	str	r2, [r3, #20]
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <LL_GPIO_SetOutputPin>:
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	619a      	str	r2, [r3, #24]
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <LL_GPIO_ResetOutputPin>:
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	041a      	lsls	r2, r3, #16
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	619a      	str	r2, [r3, #24]
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80031f0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80031f4:	f7ff ff46 	bl	8003084 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80031f8:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80031fc:	f7ff ff2a 	bl	8003054 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003200:	2003      	movs	r0, #3
 8003202:	f7ff fb87 	bl	8002914 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8003206:	f7ff fba9 	bl	800295c <__NVIC_GetPriorityGrouping>
 800320a:	4603      	mov	r3, r0
 800320c:	2200      	movs	r2, #0
 800320e:	210f      	movs	r1, #15
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff fbf9 	bl	8002a08 <NVIC_EncodePriority>
 8003216:	4603      	mov	r3, r0
 8003218:	4619      	mov	r1, r3
 800321a:	f04f 30ff 	mov.w	r0, #4294967295
 800321e:	f7ff fbc9 	bl	80029b4 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003222:	f000 f821 	bl	8003268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003226:	f000 fa63 	bl	80036f0 <MX_GPIO_Init>
  MX_DMA_Init();
 800322a:	f000 fa49 	bl	80036c0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800322e:	f000 f9e5 	bl	80035fc <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8003232:	f000 f98d 	bl	8003550 <MX_SPI1_Init>
  MX_I2C2_Init();
 8003236:	f000 f92f 	bl	8003498 <MX_I2C2_Init>
  MX_ADC1_Init();
 800323a:	f000 f84b 	bl	80032d4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
    WDT_init();
 800323e:	f000 fba3 	bl	8003988 <WDT_init>
    status_led_init();
 8003242:	f7ff fa09 	bl	8002658 <status_led_init>
    command_init();
 8003246:	f7fd ff6f 	bl	8001128 <command_init>
    NTC_DMA_ADC_init();
 800324a:	f7ff f91d 	bl	8002488 <NTC_DMA_ADC_init>

    SCH_Initialize();
 800324e:	f001 fca9 	bl	8004ba4 <SCH_Initialize>
    WDT_create_task();
 8003252:	f000 fba5 	bl	80039a0 <WDT_create_task>
    status_led_create_task();
 8003256:	f7ff fb51 	bl	80028fc <status_led_create_task>
    command_create_task();
 800325a:	f7fe fa33 	bl	80016c4 <command_create_task>

    SCH_StartSchedular();
 800325e:	f001 fdcb 	bl	8004df8 <SCH_StartSchedular>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_HandleScheduledTask();
 8003262:	f001 fdcf 	bl	8004e04 <SCH_HandleScheduledTask>
 8003266:	e7fc      	b.n	8003262 <main+0x76>

08003268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800326c:	2000      	movs	r0, #0
 800326e:	f7ff ff21 	bl	80030b4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8003272:	bf00      	nop
 8003274:	f7ff ff32 	bl	80030dc <LL_FLASH_GetLatency>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1fa      	bne.n	8003274 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800327e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003282:	f7ff ff39 	bl	80030f8 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8003286:	2010      	movs	r0, #16
 8003288:	f7ff fe58 	bl	8002f3c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 800328c:	f7ff fe34 	bl	8002ef8 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8003290:	bf00      	nop
 8003292:	f7ff fe41 	bl	8002f18 <LL_RCC_HSI_IsReady>
 8003296:	4603      	mov	r3, r0
 8003298:	2b01      	cmp	r3, #1
 800329a:	d1fa      	bne.n	8003292 <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 800329c:	2080      	movs	r0, #128	@ 0x80
 800329e:	f7ff fe85 	bl	8002fac <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80032a2:	2000      	movs	r0, #0
 80032a4:	f7ff fe96 	bl	8002fd4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80032a8:	2000      	movs	r0, #0
 80032aa:	f7ff fea7 	bl	8002ffc <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80032ae:	2000      	movs	r0, #0
 80032b0:	f7ff fe5a 	bl	8002f68 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80032b4:	bf00      	nop
 80032b6:	f7ff fe6b 	bl	8002f90 <LL_RCC_GetSysClkSource>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1fa      	bne.n	80032b6 <SystemClock_Config+0x4e>
  {

  }
  LL_Init1msTick(8000000);
 80032c0:	4803      	ldr	r0, [pc, #12]	@ (80032d0 <SystemClock_Config+0x68>)
 80032c2:	f001 fc2b 	bl	8004b1c <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 80032c6:	4802      	ldr	r0, [pc, #8]	@ (80032d0 <SystemClock_Config+0x68>)
 80032c8:	f001 fc5c 	bl	8004b84 <LL_SetSystemCoreClock>
}
 80032cc:	bf00      	nop
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	007a1200 	.word	0x007a1200

080032d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b092      	sub	sp, #72	@ 0x48
 80032d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80032da:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	605a      	str	r2, [r3, #4]
 80032e4:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80032e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	605a      	str	r2, [r3, #4]
 80032f0:	609a      	str	r2, [r3, #8]
 80032f2:	60da      	str	r2, [r3, #12]
 80032f4:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80032f6:	f107 0318 	add.w	r3, r7, #24
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	605a      	str	r2, [r3, #4]
 8003300:	609a      	str	r2, [r3, #8]
 8003302:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003304:	463b      	mov	r3, r7
 8003306:	2200      	movs	r2, #0
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	605a      	str	r2, [r3, #4]
 800330c:	609a      	str	r2, [r3, #8]
 800330e:	60da      	str	r2, [r3, #12]
 8003310:	611a      	str	r2, [r3, #16]
 8003312:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8003314:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003318:	f7ff feb4 	bl	8003084 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800331c:	2004      	movs	r0, #4
 800331e:	f7ff fe81 	bl	8003024 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003322:	2002      	movs	r0, #2
 8003324:	f7ff fe7e 	bl	8003024 <LL_AHB1_GRP1_EnableClock>
  PC4   ------> ADC1_IN14
  PC5   ------> ADC1_IN15
  PB0   ------> ADC1_IN8
  PB1   ------> ADC1_IN9
  */
  GPIO_InitStruct.Pin = ADC_TEMP1_Pin|ADC_TEMP2_Pin;
 8003328:	2330      	movs	r3, #48	@ 0x30
 800332a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800332c:	2303      	movs	r3, #3
 800332e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003330:	2300      	movs	r3, #0
 8003332:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003334:	463b      	mov	r3, r7
 8003336:	4619      	mov	r1, r3
 8003338:	484e      	ldr	r0, [pc, #312]	@ (8003474 <MX_ADC1_Init+0x1a0>)
 800333a:	f000 fd94 	bl	8003e66 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ADC_TEMP3_Pin|ADC_TEMP4_Pin;
 800333e:	2303      	movs	r3, #3
 8003340:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003342:	2303      	movs	r3, #3
 8003344:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003346:	2300      	movs	r3, #0
 8003348:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800334a:	463b      	mov	r3, r7
 800334c:	4619      	mov	r1, r3
 800334e:	484a      	ldr	r0, [pc, #296]	@ (8003478 <MX_ADC1_Init+0x1a4>)
 8003350:	f000 fd89 	bl	8003e66 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_0, LL_DMA_CHANNEL_0);
 8003354:	2200      	movs	r2, #0
 8003356:	2100      	movs	r1, #0
 8003358:	4848      	ldr	r0, [pc, #288]	@ (800347c <MX_ADC1_Init+0x1a8>)
 800335a:	f7ff fd35 	bl	8002dc8 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800335e:	2200      	movs	r2, #0
 8003360:	2100      	movs	r1, #0
 8003362:	4846      	ldr	r0, [pc, #280]	@ (800347c <MX_ADC1_Init+0x1a8>)
 8003364:	f7ff fc34 	bl	8002bd0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_0, LL_DMA_PRIORITY_MEDIUM);
 8003368:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800336c:	2100      	movs	r1, #0
 800336e:	4843      	ldr	r0, [pc, #268]	@ (800347c <MX_ADC1_Init+0x1a8>)
 8003370:	f7ff fd06 	bl	8002d80 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
 8003374:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003378:	2100      	movs	r1, #0
 800337a:	4840      	ldr	r0, [pc, #256]	@ (800347c <MX_ADC1_Init+0x1a8>)
 800337c:	f7ff fc4c 	bl	8002c18 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 8003380:	2200      	movs	r2, #0
 8003382:	2100      	movs	r1, #0
 8003384:	483d      	ldr	r0, [pc, #244]	@ (800347c <MX_ADC1_Init+0x1a8>)
 8003386:	f7ff fc6b 	bl	8002c60 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 800338a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800338e:	2100      	movs	r1, #0
 8003390:	483a      	ldr	r0, [pc, #232]	@ (800347c <MX_ADC1_Init+0x1a8>)
 8003392:	f7ff fc89 	bl	8002ca8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_HALFWORD);
 8003396:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800339a:	2100      	movs	r1, #0
 800339c:	4837      	ldr	r0, [pc, #220]	@ (800347c <MX_ADC1_Init+0x1a8>)
 800339e:	f7ff fca7 	bl	8002cf0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_HALFWORD);
 80033a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80033a6:	2100      	movs	r1, #0
 80033a8:	4834      	ldr	r0, [pc, #208]	@ (800347c <MX_ADC1_Init+0x1a8>)
 80033aa:	f7ff fcc5 	bl	8002d38 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_0);
 80033ae:	2100      	movs	r1, #0
 80033b0:	4832      	ldr	r0, [pc, #200]	@ (800347c <MX_ADC1_Init+0x1a8>)
 80033b2:	f7ff fd2d 	bl	8002e10 <LL_DMA_DisableFifoMode>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80033b6:	2300      	movs	r3, #0
 80033b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80033ba:	2300      	movs	r3, #0
 80033bc:	643b      	str	r3, [r7, #64]	@ 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 80033be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033c2:	647b      	str	r3, [r7, #68]	@ 0x44
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80033c4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80033c8:	4619      	mov	r1, r3
 80033ca:	482d      	ldr	r0, [pc, #180]	@ (8003480 <MX_ADC1_Init+0x1ac>)
 80033cc:	f000 fb92 	bl	8003af4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80033d0:	2300      	movs	r3, #0
 80033d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS;
 80033d4:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 80033d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80033da:	2300      	movs	r3, #0
 80033dc:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 80033de:	2302      	movs	r3, #2
 80033e0:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 80033e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80033e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80033ec:	4619      	mov	r1, r3
 80033ee:	4824      	ldr	r0, [pc, #144]	@ (8003480 <MX_ADC1_Init+0x1ac>)
 80033f0:	f000 fbac 	bl	8003b4c <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 80033f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80033f8:	4821      	ldr	r0, [pc, #132]	@ (8003480 <MX_ADC1_Init+0x1ac>)
 80033fa:	f7ff fb75 	bl	8002ae8 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 80033fe:	2300      	movs	r3, #0
 8003400:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8003402:	2300      	movs	r3, #0
 8003404:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8003406:	f107 0318 	add.w	r3, r7, #24
 800340a:	4619      	mov	r1, r3
 800340c:	481d      	ldr	r0, [pc, #116]	@ (8003484 <MX_ADC1_Init+0x1b0>)
 800340e:	f000 fb29 	bl	8003a64 <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_14);
 8003412:	4a1d      	ldr	r2, [pc, #116]	@ (8003488 <MX_ADC1_Init+0x1b4>)
 8003414:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003418:	4819      	ldr	r0, [pc, #100]	@ (8003480 <MX_ADC1_Init+0x1ac>)
 800341a:	f7ff fb28 	bl	8002a6e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_14, LL_ADC_SAMPLINGTIME_15CYCLES);
 800341e:	2201      	movs	r2, #1
 8003420:	4919      	ldr	r1, [pc, #100]	@ (8003488 <MX_ADC1_Init+0x1b4>)
 8003422:	4817      	ldr	r0, [pc, #92]	@ (8003480 <MX_ADC1_Init+0x1ac>)
 8003424:	f7ff fb73 	bl	8002b0e <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_15);
 8003428:	4a18      	ldr	r2, [pc, #96]	@ (800348c <MX_ADC1_Init+0x1b8>)
 800342a:	f240 2105 	movw	r1, #517	@ 0x205
 800342e:	4814      	ldr	r0, [pc, #80]	@ (8003480 <MX_ADC1_Init+0x1ac>)
 8003430:	f7ff fb1d 	bl	8002a6e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_15, LL_ADC_SAMPLINGTIME_15CYCLES);
 8003434:	2201      	movs	r2, #1
 8003436:	4915      	ldr	r1, [pc, #84]	@ (800348c <MX_ADC1_Init+0x1b8>)
 8003438:	4811      	ldr	r0, [pc, #68]	@ (8003480 <MX_ADC1_Init+0x1ac>)
 800343a:	f7ff fb68 	bl	8002b0e <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_8);
 800343e:	4a14      	ldr	r2, [pc, #80]	@ (8003490 <MX_ADC1_Init+0x1bc>)
 8003440:	f240 210a 	movw	r1, #522	@ 0x20a
 8003444:	480e      	ldr	r0, [pc, #56]	@ (8003480 <MX_ADC1_Init+0x1ac>)
 8003446:	f7ff fb12 	bl	8002a6e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_8, LL_ADC_SAMPLINGTIME_15CYCLES);
 800344a:	2201      	movs	r2, #1
 800344c:	4910      	ldr	r1, [pc, #64]	@ (8003490 <MX_ADC1_Init+0x1bc>)
 800344e:	480c      	ldr	r0, [pc, #48]	@ (8003480 <MX_ADC1_Init+0x1ac>)
 8003450:	f7ff fb5d 	bl	8002b0e <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_9);
 8003454:	4a0f      	ldr	r2, [pc, #60]	@ (8003494 <MX_ADC1_Init+0x1c0>)
 8003456:	f240 210f 	movw	r1, #527	@ 0x20f
 800345a:	4809      	ldr	r0, [pc, #36]	@ (8003480 <MX_ADC1_Init+0x1ac>)
 800345c:	f7ff fb07 	bl	8002a6e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_15CYCLES);
 8003460:	2201      	movs	r2, #1
 8003462:	490c      	ldr	r1, [pc, #48]	@ (8003494 <MX_ADC1_Init+0x1c0>)
 8003464:	4806      	ldr	r0, [pc, #24]	@ (8003480 <MX_ADC1_Init+0x1ac>)
 8003466:	f7ff fb52 	bl	8002b0e <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800346a:	bf00      	nop
 800346c:	3748      	adds	r7, #72	@ 0x48
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40020800 	.word	0x40020800
 8003478:	40020400 	.word	0x40020400
 800347c:	40026400 	.word	0x40026400
 8003480:	40012000 	.word	0x40012000
 8003484:	40012300 	.word	0x40012300
 8003488:	00c0000e 	.word	0x00c0000e
 800348c:	00f0000f 	.word	0x00f0000f
 8003490:	03800008 	.word	0x03800008
 8003494:	03b00009 	.word	0x03b00009

08003498 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b08c      	sub	sp, #48	@ 0x30
 800349c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800349e:	f107 0318 	add.w	r3, r7, #24
 80034a2:	2200      	movs	r2, #0
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	605a      	str	r2, [r3, #4]
 80034a8:	609a      	str	r2, [r3, #8]
 80034aa:	60da      	str	r2, [r3, #12]
 80034ac:	611a      	str	r2, [r3, #16]
 80034ae:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b0:	463b      	mov	r3, r7
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	605a      	str	r2, [r3, #4]
 80034b8:	609a      	str	r2, [r3, #8]
 80034ba:	60da      	str	r2, [r3, #12]
 80034bc:	611a      	str	r2, [r3, #16]
 80034be:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80034c0:	2002      	movs	r0, #2
 80034c2:	f7ff fdaf 	bl	8003024 <LL_AHB1_GRP1_EnableClock>
  /**I2C2 GPIO Configuration
  PB10   ------> I2C2_SCL
  PB11   ------> I2C2_SDA
  */
  GPIO_InitStruct.Pin = EXP_SCL_Pin|EXP_SDA_Pin;
 80034c6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80034ca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80034cc:	2302      	movs	r3, #2
 80034ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80034d0:	2303      	movs	r3, #3
 80034d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80034d4:	2301      	movs	r3, #1
 80034d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80034d8:	2300      	movs	r3, #0
 80034da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80034dc:	2304      	movs	r3, #4
 80034de:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034e0:	463b      	mov	r3, r7
 80034e2:	4619      	mov	r1, r3
 80034e4:	4817      	ldr	r0, [pc, #92]	@ (8003544 <MX_I2C2_Init+0xac>)
 80034e6:	f000 fcbe 	bl	8003e66 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 80034ea:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80034ee:	f7ff fdb1 	bl	8003054 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C2_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C2);
 80034f2:	4815      	ldr	r0, [pc, #84]	@ (8003548 <MX_I2C2_Init+0xb0>)
 80034f4:	f7ff fcef 	bl	8002ed6 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 80034f8:	4813      	ldr	r0, [pc, #76]	@ (8003548 <MX_I2C2_Init+0xb0>)
 80034fa:	f7ff fcc9 	bl	8002e90 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 80034fe:	4812      	ldr	r0, [pc, #72]	@ (8003548 <MX_I2C2_Init+0xb0>)
 8003500:	f7ff fcb6 	bl	8002e70 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8003504:	2300      	movs	r3, #0
 8003506:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8003508:	4b10      	ldr	r3, [pc, #64]	@ (800354c <MX_I2C2_Init+0xb4>)
 800350a:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 800350c:	2300      	movs	r3, #0
 800350e:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8003514:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003518:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800351a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800351e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 8003520:	f107 0318 	add.w	r3, r7, #24
 8003524:	4619      	mov	r1, r3
 8003526:	4808      	ldr	r0, [pc, #32]	@ (8003548 <MX_I2C2_Init+0xb0>)
 8003528:	f000 fe14 	bl	8004154 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C2, 0);
 800352c:	2100      	movs	r1, #0
 800352e:	4806      	ldr	r0, [pc, #24]	@ (8003548 <MX_I2C2_Init+0xb0>)
 8003530:	f7ff fcbe 	bl	8002eb0 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C2_Init 2 */
  LL_I2C_Enable(I2C2);
 8003534:	4804      	ldr	r0, [pc, #16]	@ (8003548 <MX_I2C2_Init+0xb0>)
 8003536:	f7ff fc8b 	bl	8002e50 <LL_I2C_Enable>
  /* USER CODE END I2C2_Init 2 */

}
 800353a:	bf00      	nop
 800353c:	3730      	adds	r7, #48	@ 0x30
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40020400 	.word	0x40020400
 8003548:	40005800 	.word	0x40005800
 800354c:	000186a0 	.word	0x000186a0

08003550 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b090      	sub	sp, #64	@ 0x40
 8003554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003556:	f107 0318 	add.w	r3, r7, #24
 800355a:	2228      	movs	r2, #40	@ 0x28
 800355c:	2100      	movs	r1, #0
 800355e:	4618      	mov	r0, r3
 8003560:	f001 fd32 	bl	8004fc8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003564:	463b      	mov	r3, r7
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	605a      	str	r2, [r3, #4]
 800356c:	609a      	str	r2, [r3, #8]
 800356e:	60da      	str	r2, [r3, #12]
 8003570:	611a      	str	r2, [r3, #16]
 8003572:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8003574:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003578:	f7ff fd84 	bl	8003084 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800357c:	2002      	movs	r0, #2
 800357e:	f7ff fd51 	bl	8003024 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PB3   ------> SPI1_SCK
  PB4   ------> SPI1_MISO
  PB5   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = TEC_SCK_Pin|TEC_MISO_Pin|TEC_MOSI_Pin;
 8003582:	2338      	movs	r3, #56	@ 0x38
 8003584:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003586:	2302      	movs	r3, #2
 8003588:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800358a:	2303      	movs	r3, #3
 800358c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003592:	2300      	movs	r3, #0
 8003594:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003596:	2305      	movs	r3, #5
 8003598:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800359a:	463b      	mov	r3, r7
 800359c:	4619      	mov	r1, r3
 800359e:	4815      	ldr	r0, [pc, #84]	@ (80035f4 <MX_SPI1_Init+0xa4>)
 80035a0:	f000 fc61 	bl	8003e66 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80035a4:	2300      	movs	r3, #0
 80035a6:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80035a8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80035ac:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80035ae:	2300      	movs	r3, #0
 80035b0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80035b2:	2300      	movs	r3, #0
 80035b4:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80035b6:	2300      	movs	r3, #0
 80035b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80035ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80035be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80035c0:	2318      	movs	r3, #24
 80035c2:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80035c4:	2300      	movs	r3, #0
 80035c6:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80035c8:	2300      	movs	r3, #0
 80035ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 80035cc:	230a      	movs	r3, #10
 80035ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80035d0:	f107 0318 	add.w	r3, r7, #24
 80035d4:	4619      	mov	r1, r3
 80035d6:	4808      	ldr	r0, [pc, #32]	@ (80035f8 <MX_SPI1_Init+0xa8>)
 80035d8:	f000 ff4b 	bl	8004472 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 80035dc:	2100      	movs	r1, #0
 80035de:	4806      	ldr	r0, [pc, #24]	@ (80035f8 <MX_SPI1_Init+0xa8>)
 80035e0:	f7ff fdae 	bl	8003140 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */
  LL_SPI_Enable(SPI1);
 80035e4:	4804      	ldr	r0, [pc, #16]	@ (80035f8 <MX_SPI1_Init+0xa8>)
 80035e6:	f7ff fd9b 	bl	8003120 <LL_SPI_Enable>
  /* USER CODE END SPI1_Init 2 */

}
 80035ea:	bf00      	nop
 80035ec:	3740      	adds	r7, #64	@ 0x40
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40020400 	.word	0x40020400
 80035f8:	40013000 	.word	0x40013000

080035fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08e      	sub	sp, #56	@ 0x38
 8003600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003602:	f107 031c 	add.w	r3, r7, #28
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	605a      	str	r2, [r3, #4]
 800360c:	609a      	str	r2, [r3, #8]
 800360e:	60da      	str	r2, [r3, #12]
 8003610:	611a      	str	r2, [r3, #16]
 8003612:	615a      	str	r2, [r3, #20]
 8003614:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003616:	1d3b      	adds	r3, r7, #4
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	605a      	str	r2, [r3, #4]
 800361e:	609a      	str	r2, [r3, #8]
 8003620:	60da      	str	r2, [r3, #12]
 8003622:	611a      	str	r2, [r3, #16]
 8003624:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8003626:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800362a:	f7ff fd13 	bl	8003054 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800362e:	2008      	movs	r0, #8
 8003630:	f7ff fcf8 	bl	8003024 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = EXP_URRT_TX_Pin|EXP_UART_RX_Pin;
 8003634:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003638:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800363a:	2302      	movs	r3, #2
 800363c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800363e:	2303      	movs	r3, #3
 8003640:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003642:	2300      	movs	r3, #0
 8003644:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800364a:	2307      	movs	r3, #7
 800364c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800364e:	1d3b      	adds	r3, r7, #4
 8003650:	4619      	mov	r1, r3
 8003652:	4819      	ldr	r0, [pc, #100]	@ (80036b8 <MX_USART3_UART_Init+0xbc>)
 8003654:	f000 fc07 	bl	8003e66 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003658:	f7ff f980 	bl	800295c <__NVIC_GetPriorityGrouping>
 800365c:	4603      	mov	r3, r0
 800365e:	2200      	movs	r2, #0
 8003660:	2100      	movs	r1, #0
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff f9d0 	bl	8002a08 <NVIC_EncodePriority>
 8003668:	4603      	mov	r3, r0
 800366a:	4619      	mov	r1, r3
 800366c:	2027      	movs	r0, #39	@ 0x27
 800366e:	f7ff f9a1 	bl	80029b4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8003672:	2027      	movs	r0, #39	@ 0x27
 8003674:	f7ff f980 	bl	8002978 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003678:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800367c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800367e:	2300      	movs	r3, #0
 8003680:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003682:	2300      	movs	r3, #0
 8003684:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003686:	2300      	movs	r3, #0
 8003688:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800368a:	230c      	movs	r3, #12
 800368c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800368e:	2300      	movs	r3, #0
 8003690:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003692:	2300      	movs	r3, #0
 8003694:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8003696:	f107 031c 	add.w	r3, r7, #28
 800369a:	4619      	mov	r1, r3
 800369c:	4807      	ldr	r0, [pc, #28]	@ (80036bc <MX_USART3_UART_Init+0xc0>)
 800369e:	f001 f9a3 	bl	80049e8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 80036a2:	4806      	ldr	r0, [pc, #24]	@ (80036bc <MX_USART3_UART_Init+0xc0>)
 80036a4:	f7ff fd6f 	bl	8003186 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 80036a8:	4804      	ldr	r0, [pc, #16]	@ (80036bc <MX_USART3_UART_Init+0xc0>)
 80036aa:	f7ff fd5c 	bl	8003166 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80036ae:	bf00      	nop
 80036b0:	3738      	adds	r7, #56	@ 0x38
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40020c00 	.word	0x40020c00
 80036bc:	40004800 	.word	0x40004800

080036c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 80036c4:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80036c8:	f7ff fcac 	bl	8003024 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80036cc:	f7ff f946 	bl	800295c <__NVIC_GetPriorityGrouping>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2200      	movs	r2, #0
 80036d4:	2100      	movs	r1, #0
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff f996 	bl	8002a08 <NVIC_EncodePriority>
 80036dc:	4603      	mov	r3, r0
 80036de:	4619      	mov	r1, r3
 80036e0:	2038      	movs	r0, #56	@ 0x38
 80036e2:	f7ff f967 	bl	80029b4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80036e6:	2038      	movs	r0, #56	@ 0x38
 80036e8:	f7ff f946 	bl	8002978 <__NVIC_EnableIRQ>
}
 80036ec:	bf00      	nop
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f6:	463b      	mov	r3, r7
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	605a      	str	r2, [r3, #4]
 80036fe:	609a      	str	r2, [r3, #8]
 8003700:	60da      	str	r2, [r3, #12]
 8003702:	611a      	str	r2, [r3, #16]
 8003704:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8003706:	2010      	movs	r0, #16
 8003708:	f7ff fc8c 	bl	8003024 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800370c:	2004      	movs	r0, #4
 800370e:	f7ff fc89 	bl	8003024 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8003712:	2080      	movs	r0, #128	@ 0x80
 8003714:	f7ff fc86 	bl	8003024 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003718:	2001      	movs	r0, #1
 800371a:	f7ff fc83 	bl	8003024 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800371e:	2002      	movs	r0, #2
 8003720:	f7ff fc80 	bl	8003024 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8003724:	2008      	movs	r0, #8
 8003726:	f7ff fc7d 	bl	8003024 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, TEC_1_SWEN_Pin|TEC_1_EN_Pin);
 800372a:	2124      	movs	r1, #36	@ 0x24
 800372c:	4842      	ldr	r0, [pc, #264]	@ (8003838 <MX_GPIO_Init+0x148>)
 800372e:	f7ff fd4e 	bl	80031ce <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(EF_TEC_EN_GPIO_Port, EF_TEC_EN_Pin);
 8003732:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003736:	4841      	ldr	r0, [pc, #260]	@ (800383c <MX_GPIO_Init+0x14c>)
 8003738:	f7ff fd49 	bl	80031ce <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 800373c:	2102      	movs	r1, #2
 800373e:	4840      	ldr	r0, [pc, #256]	@ (8003840 <MX_GPIO_Init+0x150>)
 8003740:	f7ff fd45 	bl	80031ce <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LED_B_Pin|LED_G_Pin);
 8003744:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8003748:	483e      	ldr	r0, [pc, #248]	@ (8003844 <MX_GPIO_Init+0x154>)
 800374a:	f7ff fd40 	bl	80031ce <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOB, TEC_4_CS_Pin|TEC_3_CS_Pin);
 800374e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8003752:	483d      	ldr	r0, [pc, #244]	@ (8003848 <MX_GPIO_Init+0x158>)
 8003754:	f7ff fd2d 	bl	80031b2 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOE, TEC_2_CS_Pin|TEC_1_CS_Pin);
 8003758:	2103      	movs	r1, #3
 800375a:	4837      	ldr	r0, [pc, #220]	@ (8003838 <MX_GPIO_Init+0x148>)
 800375c:	f7ff fd29 	bl	80031b2 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = TEC_1_SWEN_Pin|TEC_1_EN_Pin;
 8003760:	2324      	movs	r3, #36	@ 0x24
 8003762:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003764:	2301      	movs	r3, #1
 8003766:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003768:	2300      	movs	r3, #0
 800376a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800376c:	2300      	movs	r3, #0
 800376e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8003770:	2302      	movs	r3, #2
 8003772:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003774:	463b      	mov	r3, r7
 8003776:	4619      	mov	r1, r3
 8003778:	482f      	ldr	r0, [pc, #188]	@ (8003838 <MX_GPIO_Init+0x148>)
 800377a:	f000 fb74 	bl	8003e66 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EF_TEC_AUX_Pin;
 800377e:	2340      	movs	r3, #64	@ 0x40
 8003780:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003782:	2300      	movs	r3, #0
 8003784:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003786:	2300      	movs	r3, #0
 8003788:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(EF_TEC_AUX_GPIO_Port, &GPIO_InitStruct);
 800378a:	463b      	mov	r3, r7
 800378c:	4619      	mov	r1, r3
 800378e:	482a      	ldr	r0, [pc, #168]	@ (8003838 <MX_GPIO_Init+0x148>)
 8003790:	f000 fb69 	bl	8003e66 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EF_TEC_EN_Pin;
 8003794:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003798:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800379a:	2301      	movs	r3, #1
 800379c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800379e:	2300      	movs	r3, #0
 80037a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80037a2:	2300      	movs	r3, #0
 80037a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80037a6:	2300      	movs	r3, #0
 80037a8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(EF_TEC_EN_GPIO_Port, &GPIO_InitStruct);
 80037aa:	463b      	mov	r3, r7
 80037ac:	4619      	mov	r1, r3
 80037ae:	4823      	ldr	r0, [pc, #140]	@ (800383c <MX_GPIO_Init+0x14c>)
 80037b0:	f000 fb59 	bl	8003e66 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = WD_DONE_Pin;
 80037b4:	2302      	movs	r3, #2
 80037b6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80037b8:	2301      	movs	r3, #1
 80037ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80037bc:	2300      	movs	r3, #0
 80037be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80037c0:	2300      	movs	r3, #0
 80037c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80037c4:	2300      	movs	r3, #0
 80037c6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(WD_DONE_GPIO_Port, &GPIO_InitStruct);
 80037c8:	463b      	mov	r3, r7
 80037ca:	4619      	mov	r1, r3
 80037cc:	481c      	ldr	r0, [pc, #112]	@ (8003840 <MX_GPIO_Init+0x150>)
 80037ce:	f000 fb4a 	bl	8003e66 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_B_Pin|LED_G_Pin;
 80037d2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80037d6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80037d8:	2301      	movs	r3, #1
 80037da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80037dc:	2300      	movs	r3, #0
 80037de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80037e0:	2300      	movs	r3, #0
 80037e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80037e4:	2300      	movs	r3, #0
 80037e6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037e8:	463b      	mov	r3, r7
 80037ea:	4619      	mov	r1, r3
 80037ec:	4815      	ldr	r0, [pc, #84]	@ (8003844 <MX_GPIO_Init+0x154>)
 80037ee:	f000 fb3a 	bl	8003e66 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_4_CS_Pin|TEC_3_CS_Pin;
 80037f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80037f6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80037f8:	2301      	movs	r3, #1
 80037fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80037fc:	2300      	movs	r3, #0
 80037fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003800:	2300      	movs	r3, #0
 8003802:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003804:	2300      	movs	r3, #0
 8003806:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003808:	463b      	mov	r3, r7
 800380a:	4619      	mov	r1, r3
 800380c:	480e      	ldr	r0, [pc, #56]	@ (8003848 <MX_GPIO_Init+0x158>)
 800380e:	f000 fb2a 	bl	8003e66 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_2_CS_Pin|TEC_1_CS_Pin;
 8003812:	2303      	movs	r3, #3
 8003814:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003816:	2301      	movs	r3, #1
 8003818:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800381a:	2300      	movs	r3, #0
 800381c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800381e:	2300      	movs	r3, #0
 8003820:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003822:	2300      	movs	r3, #0
 8003824:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003826:	463b      	mov	r3, r7
 8003828:	4619      	mov	r1, r3
 800382a:	4803      	ldr	r0, [pc, #12]	@ (8003838 <MX_GPIO_Init+0x148>)
 800382c:	f000 fb1b 	bl	8003e66 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003830:	bf00      	nop
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40021000 	.word	0x40021000
 800383c:	40020800 	.word	0x40020800
 8003840:	40020000 	.word	0x40020000
 8003844:	40020c00 	.word	0x40020c00
 8003848:	40020400 	.word	0x40020400

0800384c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003850:	bf00      	nop
 8003852:	e7fd      	b.n	8003850 <NMI_Handler+0x4>

08003854 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003858:	bf00      	nop
 800385a:	e7fd      	b.n	8003858 <HardFault_Handler+0x4>

0800385c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003860:	bf00      	nop
 8003862:	e7fd      	b.n	8003860 <MemManage_Handler+0x4>

08003864 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003868:	bf00      	nop
 800386a:	e7fd      	b.n	8003868 <BusFault_Handler+0x4>

0800386c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003870:	bf00      	nop
 8003872:	e7fd      	b.n	8003870 <UsageFault_Handler+0x4>

08003874 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003878:	bf00      	nop
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003882:	b480      	push	{r7}
 8003884:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003886:	bf00      	nop
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003894:	bf00      	nop
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
	...

080038a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	g_systick_count++;
 80038a4:	4b04      	ldr	r3, [pc, #16]	@ (80038b8 <SysTick_Handler+0x18>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	3301      	adds	r3, #1
 80038aa:	4a03      	ldr	r2, [pc, #12]	@ (80038b8 <SysTick_Handler+0x18>)
 80038ac:	6013      	str	r3, [r2, #0]
	SCH_RunSystemTickTimer();
 80038ae:	f001 fa0f 	bl	8004cd0 <SCH_RunSystemTickTimer>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038b2:	bf00      	nop
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	200022f4 	.word	0x200022f4

080038bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	CONSOLE_UART_IRQHandler();
 80038c0:	f7fd ff0c 	bl	80016dc <CONSOLE_UART_IRQHandler>
  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80038c4:	bf00      	nop
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Stream0_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80038cc:	bf00      	nop
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
	...

080038d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038dc:	4b06      	ldr	r3, [pc, #24]	@ (80038f8 <SystemInit+0x20>)
 80038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038e2:	4a05      	ldr	r2, [pc, #20]	@ (80038f8 <SystemInit+0x20>)
 80038e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80038e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038ec:	bf00      	nop
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	e000ed00 	.word	0xe000ed00

080038fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80038fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003934 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003900:	f7ff ffea 	bl	80038d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003904:	480c      	ldr	r0, [pc, #48]	@ (8003938 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003906:	490d      	ldr	r1, [pc, #52]	@ (800393c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003908:	4a0d      	ldr	r2, [pc, #52]	@ (8003940 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800390a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800390c:	e002      	b.n	8003914 <LoopCopyDataInit>

0800390e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800390e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003912:	3304      	adds	r3, #4

08003914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003918:	d3f9      	bcc.n	800390e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800391a:	4a0a      	ldr	r2, [pc, #40]	@ (8003944 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800391c:	4c0a      	ldr	r4, [pc, #40]	@ (8003948 <LoopFillZerobss+0x22>)
  movs r3, #0
 800391e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003920:	e001      	b.n	8003926 <LoopFillZerobss>

08003922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003924:	3204      	adds	r2, #4

08003926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003928:	d3fb      	bcc.n	8003922 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800392a:	f001 fb5b 	bl	8004fe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800392e:	f7ff fc5d 	bl	80031ec <main>
  bx  lr    
 8003932:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003934:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800393c:	200021b4 	.word	0x200021b4
  ldr r2, =_sidata
 8003940:	08005584 	.word	0x08005584
  ldr r2, =_sbss
 8003944:	200021b4 	.word	0x200021b4
  ldr r4, =_ebss
 8003948:	20002648 	.word	0x20002648

0800394c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800394c:	e7fe      	b.n	800394c <ADC_IRQHandler>

0800394e <LL_GPIO_SetOutputPin>:
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
 8003956:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	619a      	str	r2, [r3, #24]
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <LL_GPIO_ResetOutputPin>:
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
 8003972:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	041a      	lsls	r2, r3, #16
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	619a      	str	r2, [r3, #24]
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <WDT_init>:
		181
	}
};

void WDT_init(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
	WDT_Current = 0;
 800398c:	4b03      	ldr	r3, [pc, #12]	@ (800399c <WDT_init+0x14>)
 800398e:	2200      	movs	r2, #0
 8003990:	701a      	strb	r2, [r3, #0]
}
 8003992:	bf00      	nop
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	200022f8 	.word	0x200022f8

080039a0 <WDT_create_task>:

void WDT_create_task(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&wdt_task_context.taskHandle, &wdt_task_context.taskProperty);
 80039a4:	4902      	ldr	r1, [pc, #8]	@ (80039b0 <WDT_create_task+0x10>)
 80039a6:	4803      	ldr	r0, [pc, #12]	@ (80039b4 <WDT_create_task+0x14>)
 80039a8:	f001 f952 	bl	8004c50 <SCH_TASK_CreateTask>
}
 80039ac:	bf00      	nop
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	20002154 	.word	0x20002154
 80039b4:	20002150 	.word	0x20002150

080039b8 <status_wdt_update>:

void status_wdt_update(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
	if (WDT_Current)
 80039bc:	4b14      	ldr	r3, [pc, #80]	@ (8003a10 <status_wdt_update+0x58>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d012      	beq.n	80039ea <status_wdt_update+0x32>
	{
		if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 80039c4:	2001      	movs	r0, #1
 80039c6:	f001 f92d 	bl	8004c24 <SCH_TIM_HasCompleted>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d01d      	beq.n	8003a0c <status_wdt_update+0x54>
		{
			WDT_Current = 0;
 80039d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003a10 <status_wdt_update+0x58>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	701a      	strb	r2, [r3, #0]
			LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 80039d6:	2102      	movs	r1, #2
 80039d8:	480e      	ldr	r0, [pc, #56]	@ (8003a14 <status_wdt_update+0x5c>)
 80039da:	f7ff ffc6 	bl	800396a <LL_GPIO_ResetOutputPin>
			SCH_TIM_Start(SCH_TIM_WDT,LOW_PERIOD);	//restart
 80039de:	f44f 7116 	mov.w	r1, #600	@ 0x258
 80039e2:	2001      	movs	r0, #1
 80039e4:	f001 f908 	bl	8004bf8 <SCH_TIM_Start>
			WDT_Current = 1;
			LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
			SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
		}
	}
}
 80039e8:	e010      	b.n	8003a0c <status_wdt_update+0x54>
		if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 80039ea:	2001      	movs	r0, #1
 80039ec:	f001 f91a 	bl	8004c24 <SCH_TIM_HasCompleted>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00a      	beq.n	8003a0c <status_wdt_update+0x54>
			WDT_Current = 1;
 80039f6:	4b06      	ldr	r3, [pc, #24]	@ (8003a10 <status_wdt_update+0x58>)
 80039f8:	2201      	movs	r2, #1
 80039fa:	701a      	strb	r2, [r3, #0]
			LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 80039fc:	2102      	movs	r1, #2
 80039fe:	4805      	ldr	r0, [pc, #20]	@ (8003a14 <status_wdt_update+0x5c>)
 8003a00:	f7ff ffa5 	bl	800394e <LL_GPIO_SetOutputPin>
			SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
 8003a04:	21c8      	movs	r1, #200	@ 0xc8
 8003a06:	2001      	movs	r0, #1
 8003a08:	f001 f8f6 	bl	8004bf8 <SCH_TIM_Start>
}
 8003a0c:	bf00      	nop
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	200022f8 	.word	0x200022f8
 8003a14:	40020000 	.word	0x40020000

08003a18 <LL_ADC_REG_SetSequencerLength>:
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a26:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <LL_ADC_IsEnabled>:
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	bf0c      	ite	eq
 8003a52:	2301      	moveq	r3, #1
 8003a54:	2300      	movne	r3, #0
 8003a56:	b2db      	uxtb	r3, r3
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8003a64:	b590      	push	{r4, r7, lr}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8003a72:	481c      	ldr	r0, [pc, #112]	@ (8003ae4 <LL_ADC_CommonInit+0x80>)
 8003a74:	f7ff ffe3 	bl	8003a3e <LL_ADC_IsEnabled>
 8003a78:	4604      	mov	r4, r0
 8003a7a:	481b      	ldr	r0, [pc, #108]	@ (8003ae8 <LL_ADC_CommonInit+0x84>)
 8003a7c:	f7ff ffdf 	bl	8003a3e <LL_ADC_IsEnabled>
 8003a80:	4603      	mov	r3, r0
 8003a82:	431c      	orrs	r4, r3
 8003a84:	4819      	ldr	r0, [pc, #100]	@ (8003aec <LL_ADC_CommonInit+0x88>)
 8003a86:	f7ff ffda 	bl	8003a3e <LL_ADC_IsEnabled>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	4323      	orrs	r3, r4
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d120      	bne.n	8003ad4 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d012      	beq.n	8003ac0 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	4b14      	ldr	r3, [pc, #80]	@ (8003af0 <LL_ADC_CommonInit+0x8c>)
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	6811      	ldr	r1, [r2, #0]
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	6852      	ldr	r2, [r2, #4]
 8003aaa:	4311      	orrs	r1, r2
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	6892      	ldr	r2, [r2, #8]
 8003ab0:	4311      	orrs	r1, r2
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	68d2      	ldr	r2, [r2, #12]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	605a      	str	r2, [r3, #4]
 8003abe:	e00b      	b.n	8003ad8 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8003af0 <LL_ADC_CommonInit+0x8c>)
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	6812      	ldr	r2, [r2, #0]
 8003acc:	431a      	orrs	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	605a      	str	r2, [r3, #4]
 8003ad2:	e001      	b.n	8003ad8 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3714      	adds	r7, #20
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd90      	pop	{r4, r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	40012000 	.word	0x40012000
 8003ae8:	40012100 	.word	0x40012100
 8003aec:	40012200 	.word	0x40012200
 8003af0:	fffc10e0 	.word	0xfffc10e0

08003af4 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003afe:	2300      	movs	r3, #0
 8003b00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7ff ff9b 	bl	8003a3e <LL_ADC_IsEnabled>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d117      	bne.n	8003b3e <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8003b16:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	6811      	ldr	r1, [r2, #0]
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	6892      	ldr	r2, [r2, #8]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	431a      	orrs	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	605a      	str	r2, [r3, #4]
               ,
               ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );

    MODIFY_REG(ADCx->CR2,
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	609a      	str	r2, [r3, #8]
 8003b3c:	e001      	b.n	8003b42 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003b56:	2300      	movs	r3, #0
 8003b58:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7ff ff6f 	bl	8003a3e <LL_ADC_IsEnabled>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d12b      	bne.n	8003bbe <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d009      	beq.n	8003b82 <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	605a      	str	r2, [r3, #4]
 8003b80:	e005      	b.n	8003b8e <LL_ADC_REG_Init+0x42>
                 ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	605a      	str	r2, [r3, #4]
                 ,
                 LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }

    MODIFY_REG(ADCx->CR2,
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	4b0e      	ldr	r3, [pc, #56]	@ (8003bcc <LL_ADC_REG_Init+0x80>)
 8003b94:	4013      	ands	r3, r2
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	6812      	ldr	r2, [r2, #0]
 8003b9a:	f002 6170 	and.w	r1, r2, #251658240	@ 0xf000000
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	68d2      	ldr	r2, [r2, #12]
 8003ba2:	4311      	orrs	r1, r2
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	6912      	ldr	r2, [r2, #16]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7ff ff2e 	bl	8003a18 <LL_ADC_REG_SetSequencerLength>
 8003bbc:	e001      	b.n	8003bc2 <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	c0fffcfd 	.word	0xc0fffcfd

08003bd0 <LL_GPIO_SetPinMode>:
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b08b      	sub	sp, #44	@ 0x2c
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	fa93 f3a3 	rbit	r3, r3
 8003bea:	613b      	str	r3, [r7, #16]
  return result;
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8003bf6:	2320      	movs	r3, #32
 8003bf8:	e003      	b.n	8003c02 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	fab3 f383 	clz	r3, r3
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	2103      	movs	r1, #3
 8003c06:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0a:	43db      	mvns	r3, r3
 8003c0c:	401a      	ands	r2, r3
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	fa93 f3a3 	rbit	r3, r3
 8003c18:	61fb      	str	r3, [r7, #28]
  return result;
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8003c24:	2320      	movs	r3, #32
 8003c26:	e003      	b.n	8003c30 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8003c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2a:	fab3 f383 	clz	r3, r3
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	6879      	ldr	r1, [r7, #4]
 8003c34:	fa01 f303 	lsl.w	r3, r1, r3
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	601a      	str	r2, [r3, #0]
}
 8003c3e:	bf00      	nop
 8003c40:	372c      	adds	r7, #44	@ 0x2c
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <LL_GPIO_SetPinOutputType>:
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b085      	sub	sp, #20
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	401a      	ands	r2, r3
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	fb01 f303 	mul.w	r3, r1, r3
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	605a      	str	r2, [r3, #4]
}
 8003c6e:	bf00      	nop
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <LL_GPIO_SetPinSpeed>:
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b08b      	sub	sp, #44	@ 0x2c
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	60f8      	str	r0, [r7, #12]
 8003c82:	60b9      	str	r1, [r7, #8]
 8003c84:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	fa93 f3a3 	rbit	r3, r3
 8003c94:	613b      	str	r3, [r7, #16]
  return result;
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8003ca0:	2320      	movs	r3, #32
 8003ca2:	e003      	b.n	8003cac <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	fab3 f383 	clz	r3, r3
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	2103      	movs	r1, #3
 8003cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	401a      	ands	r2, r3
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	fa93 f3a3 	rbit	r3, r3
 8003cc2:	61fb      	str	r3, [r7, #28]
  return result;
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8003cce:	2320      	movs	r3, #32
 8003cd0:	e003      	b.n	8003cda <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd4:	fab3 f383 	clz	r3, r3
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	609a      	str	r2, [r3, #8]
}
 8003ce8:	bf00      	nop
 8003cea:	372c      	adds	r7, #44	@ 0x2c
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <LL_GPIO_SetPinPull>:
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b08b      	sub	sp, #44	@ 0x2c
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	fa93 f3a3 	rbit	r3, r3
 8003d0e:	613b      	str	r3, [r7, #16]
  return result;
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8003d1a:	2320      	movs	r3, #32
 8003d1c:	e003      	b.n	8003d26 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	fab3 f383 	clz	r3, r3
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	2103      	movs	r1, #3
 8003d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	401a      	ands	r2, r3
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d36:	6a3b      	ldr	r3, [r7, #32]
 8003d38:	fa93 f3a3 	rbit	r3, r3
 8003d3c:	61fb      	str	r3, [r7, #28]
  return result;
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8003d48:	2320      	movs	r3, #32
 8003d4a:	e003      	b.n	8003d54 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4e:	fab3 f383 	clz	r3, r3
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	60da      	str	r2, [r3, #12]
}
 8003d62:	bf00      	nop
 8003d64:	372c      	adds	r7, #44	@ 0x2c
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <LL_GPIO_SetAFPin_0_7>:
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b08b      	sub	sp, #44	@ 0x2c
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a1a      	ldr	r2, [r3, #32]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	fa93 f3a3 	rbit	r3, r3
 8003d88:	613b      	str	r3, [r7, #16]
  return result;
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8003d94:	2320      	movs	r3, #32
 8003d96:	e003      	b.n	8003da0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	fab3 f383 	clz	r3, r3
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	210f      	movs	r1, #15
 8003da4:	fa01 f303 	lsl.w	r3, r1, r3
 8003da8:	43db      	mvns	r3, r3
 8003daa:	401a      	ands	r2, r3
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db0:	6a3b      	ldr	r3, [r7, #32]
 8003db2:	fa93 f3a3 	rbit	r3, r3
 8003db6:	61fb      	str	r3, [r7, #28]
  return result;
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8003dc2:	2320      	movs	r3, #32
 8003dc4:	e003      	b.n	8003dce <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc8:	fab3 f383 	clz	r3, r3
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	621a      	str	r2, [r3, #32]
}
 8003ddc:	bf00      	nop
 8003dde:	372c      	adds	r7, #44	@ 0x2c
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <LL_GPIO_SetAFPin_8_15>:
{
 8003de8:	b480      	push	{r7}
 8003dea:	b08b      	sub	sp, #44	@ 0x2c
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	0a1b      	lsrs	r3, r3, #8
 8003dfc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	fa93 f3a3 	rbit	r3, r3
 8003e04:	613b      	str	r3, [r7, #16]
  return result;
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8003e10:	2320      	movs	r3, #32
 8003e12:	e003      	b.n	8003e1c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	fab3 f383 	clz	r3, r3
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	210f      	movs	r1, #15
 8003e20:	fa01 f303 	lsl.w	r3, r1, r3
 8003e24:	43db      	mvns	r3, r3
 8003e26:	401a      	ands	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	0a1b      	lsrs	r3, r3, #8
 8003e2c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	fa93 f3a3 	rbit	r3, r3
 8003e34:	61fb      	str	r3, [r7, #28]
  return result;
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8003e40:	2320      	movs	r3, #32
 8003e42:	e003      	b.n	8003e4c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8003e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e46:	fab3 f383 	clz	r3, r3
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	fa01 f303 	lsl.w	r3, r1, r3
 8003e54:	431a      	orrs	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003e5a:	bf00      	nop
 8003e5c:	372c      	adds	r7, #44	@ 0x2c
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b08a      	sub	sp, #40	@ 0x28
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
 8003e6e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	fa93 f3a3 	rbit	r3, r3
 8003e84:	617b      	str	r3, [r7, #20]
  return result;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <LL_GPIO_Init+0x2e>
    return 32U;
 8003e90:	2320      	movs	r3, #32
 8003e92:	e003      	b.n	8003e9c <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	fab3 f383 	clz	r3, r3
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003e9e:	e057      	b.n	8003f50 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8003eac:	4013      	ands	r3, r2
 8003eae:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d049      	beq.n	8003f4a <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d003      	beq.n	8003ec6 <LL_GPIO_Init+0x60>
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d10d      	bne.n	8003ee2 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	6a39      	ldr	r1, [r7, #32]
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff fed3 	bl	8003c7a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	6a39      	ldr	r1, [r7, #32]
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7ff feb4 	bl	8003c4a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	6a39      	ldr	r1, [r7, #32]
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7ff ff02 	bl	8003cf4 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d121      	bne.n	8003f3c <LL_GPIO_Init+0xd6>
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	fa93 f3a3 	rbit	r3, r3
 8003f02:	60bb      	str	r3, [r7, #8]
  return result;
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <LL_GPIO_Init+0xac>
    return 32U;
 8003f0e:	2320      	movs	r3, #32
 8003f10:	e003      	b.n	8003f1a <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	fab3 f383 	clz	r3, r3
 8003f18:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003f1a:	2b07      	cmp	r3, #7
 8003f1c:	d807      	bhi.n	8003f2e <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	461a      	mov	r2, r3
 8003f24:	6a39      	ldr	r1, [r7, #32]
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7ff ff21 	bl	8003d6e <LL_GPIO_SetAFPin_0_7>
 8003f2c:	e006      	b.n	8003f3c <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	461a      	mov	r2, r3
 8003f34:	6a39      	ldr	r1, [r7, #32]
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7ff ff56 	bl	8003de8 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	461a      	mov	r2, r3
 8003f42:	6a39      	ldr	r1, [r7, #32]
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7ff fe43 	bl	8003bd0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f56:	fa22 f303 	lsr.w	r3, r2, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1a0      	bne.n	8003ea0 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3728      	adds	r7, #40	@ 0x28
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <LL_I2C_Enable>:
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f043 0201 	orr.w	r2, r3, #1
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	601a      	str	r2, [r3, #0]
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <LL_I2C_Disable>:
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f023 0201 	bic.w	r2, r3, #1
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	601a      	str	r2, [r3, #0]
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <LL_I2C_SetOwnAddress1>:
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003fbc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003fc0:	68b9      	ldr	r1, [r7, #8]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	609a      	str	r2, [r3, #8]
}
 8003fcc:	bf00      	nop
 8003fce:	3714      	adds	r7, #20
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
 8003fe4:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	617b      	str	r3, [r7, #20]

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	4a42      	ldr	r2, [pc, #264]	@ (80040fc <LL_I2C_ConfigSpeed+0x124>)
 8003ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff6:	0c9b      	lsrs	r3, r3, #18
 8003ff8:	613b      	str	r3, [r7, #16]

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	431a      	orrs	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	493a      	ldr	r1, [pc, #232]	@ (8004100 <LL_I2C_ConfigSpeed+0x128>)
 8004016:	428b      	cmp	r3, r1
 8004018:	d802      	bhi.n	8004020 <LL_I2C_ConfigSpeed+0x48>
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	3301      	adds	r3, #1
 800401e:	e009      	b.n	8004034 <LL_I2C_ConfigSpeed+0x5c>
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8004026:	fb01 f303 	mul.w	r3, r1, r3
 800402a:	4936      	ldr	r1, [pc, #216]	@ (8004104 <LL_I2C_ConfigSpeed+0x12c>)
 800402c:	fba1 1303 	umull	r1, r3, r1, r3
 8004030:	099b      	lsrs	r3, r3, #6
 8004032:	3301      	adds	r3, #1
 8004034:	431a      	orrs	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a30      	ldr	r2, [pc, #192]	@ (8004100 <LL_I2C_ConfigSpeed+0x128>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d939      	bls.n	80040b6 <LL_I2C_ConfigSpeed+0xde>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d117      	bne.n	8004078 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	4613      	mov	r3, r2
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	4413      	add	r3, r2
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	fbb2 f3f3 	udiv	r3, r2, r3
 8004056:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800405a:	2b00      	cmp	r3, #0
 800405c:	d009      	beq.n	8004072 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	4613      	mov	r3, r2
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	4413      	add	r3, r2
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800406c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004070:	e01d      	b.n	80040ae <LL_I2C_ConfigSpeed+0xd6>
 8004072:	f248 0301 	movw	r3, #32769	@ 0x8001
 8004076:	e01a      	b.n	80040ae <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	4613      	mov	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	009a      	lsls	r2, r3, #2
 8004082:	4413      	add	r3, r2
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	fbb2 f3f3 	udiv	r3, r2, r3
 800408a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00b      	beq.n	80040aa <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	4613      	mov	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	009a      	lsls	r2, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80040a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040a8:	e001      	b.n	80040ae <LL_I2C_ConfigSpeed+0xd6>
 80040aa:	f248 0301 	movw	r3, #32769	@ 0x8001
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]
 80040b4:	e011      	b.n	80040da <LL_I2C_ConfigSpeed+0x102>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80040c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80040c4:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d005      	beq.n	80040d6 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d4:	e000      	b.n	80040d8 <LL_I2C_ConfigSpeed+0x100>
 80040d6:	2304      	movs	r3, #4
 80040d8:	617b      	str	r3, [r7, #20]
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	f423 434f 	bic.w	r3, r3, #52992	@ 0xcf00
 80040e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	431a      	orrs	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	61da      	str	r2, [r3, #28]
}
 80040ee:	bf00      	nop
 80040f0:	371c      	adds	r7, #28
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	431bde83 	.word	0x431bde83
 8004100:	000186a0 	.word	0x000186a0
 8004104:	10624dd3 	.word	0x10624dd3

08004108 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f023 021a 	bic.w	r2, r3, #26
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	601a      	str	r2, [r3, #0]
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
 8004136:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	601a      	str	r2, [r3, #0]
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7ff ff12 	bl	8003f88 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004164:	f107 0308 	add.w	r3, r7, #8
 8004168:	4618      	mov	r0, r3
 800416a:	f000 f895 	bl	8004298 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 800416e:	6939      	ldr	r1, [r7, #16]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7ff ff2d 	bl	8003fd8 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	68d9      	ldr	r1, [r3, #12]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	461a      	mov	r2, r3
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f7ff ff0d 	bl	8003fa8 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4619      	mov	r1, r3
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f7ff ffb7 	bl	8004108 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7ff fee4 	bl	8003f68 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	4619      	mov	r1, r3
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7ff ffc1 	bl	800412e <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
	...

080041b8 <LL_RCC_GetSysClkSource>:
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80041bc:	4b04      	ldr	r3, [pc, #16]	@ (80041d0 <LL_RCC_GetSysClkSource+0x18>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 030c 	and.w	r3, r3, #12
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	40023800 	.word	0x40023800

080041d4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80041d8:	4b04      	ldr	r3, [pc, #16]	@ (80041ec <LL_RCC_GetAHBPrescaler+0x18>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	40023800 	.word	0x40023800

080041f0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80041f4:	4b04      	ldr	r3, [pc, #16]	@ (8004208 <LL_RCC_GetAPB1Prescaler+0x18>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	40023800 	.word	0x40023800

0800420c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004210:	4b04      	ldr	r3, [pc, #16]	@ (8004224 <LL_RCC_GetAPB2Prescaler+0x18>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8004218:	4618      	mov	r0, r3
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	40023800 	.word	0x40023800

08004228 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800422c:	4b04      	ldr	r3, [pc, #16]	@ (8004240 <LL_RCC_PLL_GetMainSource+0x18>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8004234:	4618      	mov	r0, r3
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	40023800 	.word	0x40023800

08004244 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004248:	4b04      	ldr	r3, [pc, #16]	@ (800425c <LL_RCC_PLL_GetN+0x18>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	099b      	lsrs	r3, r3, #6
 800424e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8004252:	4618      	mov	r0, r3
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	40023800 	.word	0x40023800

08004260 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004264:	4b04      	ldr	r3, [pc, #16]	@ (8004278 <LL_RCC_PLL_GetP+0x18>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800426c:	4618      	mov	r0, r3
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40023800 	.word	0x40023800

0800427c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004280:	4b04      	ldr	r3, [pc, #16]	@ (8004294 <LL_RCC_PLL_GetDivider+0x18>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8004288:	4618      	mov	r0, r3
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	40023800 	.word	0x40023800

08004298 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80042a0:	f000 f820 	bl	80042e4 <RCC_GetSystemClockFreq>
 80042a4:	4602      	mov	r2, r0
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 f840 	bl	8004334 <RCC_GetHCLKClockFreq>
 80042b4:	4602      	mov	r2, r0
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 f84e 	bl	8004360 <RCC_GetPCLK1ClockFreq>
 80042c4:	4602      	mov	r2, r0
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 f85a 	bl	8004388 <RCC_GetPCLK2ClockFreq>
 80042d4:	4602      	mov	r2, r0
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	60da      	str	r2, [r3, #12]
}
 80042da:	bf00      	nop
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
	...

080042e4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80042ee:	f7ff ff63 	bl	80041b8 <LL_RCC_GetSysClkSource>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	d00c      	beq.n	8004312 <RCC_GetSystemClockFreq+0x2e>
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d80f      	bhi.n	800431c <RCC_GetSystemClockFreq+0x38>
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d002      	beq.n	8004306 <RCC_GetSystemClockFreq+0x22>
 8004300:	2b04      	cmp	r3, #4
 8004302:	d003      	beq.n	800430c <RCC_GetSystemClockFreq+0x28>
 8004304:	e00a      	b.n	800431c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004306:	4b09      	ldr	r3, [pc, #36]	@ (800432c <RCC_GetSystemClockFreq+0x48>)
 8004308:	607b      	str	r3, [r7, #4]
      break;
 800430a:	e00a      	b.n	8004322 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800430c:	4b08      	ldr	r3, [pc, #32]	@ (8004330 <RCC_GetSystemClockFreq+0x4c>)
 800430e:	607b      	str	r3, [r7, #4]
      break;
 8004310:	e007      	b.n	8004322 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8004312:	2008      	movs	r0, #8
 8004314:	f000 f84c 	bl	80043b0 <RCC_PLL_GetFreqDomain_SYS>
 8004318:	6078      	str	r0, [r7, #4]
      break;
 800431a:	e002      	b.n	8004322 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800431c:	4b03      	ldr	r3, [pc, #12]	@ (800432c <RCC_GetSystemClockFreq+0x48>)
 800431e:	607b      	str	r3, [r7, #4]
      break;
 8004320:	bf00      	nop
  }

  return frequency;
 8004322:	687b      	ldr	r3, [r7, #4]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	00f42400 	.word	0x00f42400
 8004330:	007a1200 	.word	0x007a1200

08004334 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800433c:	f7ff ff4a 	bl	80041d4 <LL_RCC_GetAHBPrescaler>
 8004340:	4603      	mov	r3, r0
 8004342:	091b      	lsrs	r3, r3, #4
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	4a04      	ldr	r2, [pc, #16]	@ (800435c <RCC_GetHCLKClockFreq+0x28>)
 800434a:	5cd3      	ldrb	r3, [r2, r3]
 800434c:	461a      	mov	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	40d3      	lsrs	r3, r2
}
 8004352:	4618      	mov	r0, r3
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	08005458 	.word	0x08005458

08004360 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004368:	f7ff ff42 	bl	80041f0 <LL_RCC_GetAPB1Prescaler>
 800436c:	4603      	mov	r3, r0
 800436e:	0a9b      	lsrs	r3, r3, #10
 8004370:	4a04      	ldr	r2, [pc, #16]	@ (8004384 <RCC_GetPCLK1ClockFreq+0x24>)
 8004372:	5cd3      	ldrb	r3, [r2, r3]
 8004374:	461a      	mov	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	40d3      	lsrs	r3, r2
}
 800437a:	4618      	mov	r0, r3
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	08005468 	.word	0x08005468

08004388 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004390:	f7ff ff3c 	bl	800420c <LL_RCC_GetAPB2Prescaler>
 8004394:	4603      	mov	r3, r0
 8004396:	0b5b      	lsrs	r3, r3, #13
 8004398:	4a04      	ldr	r2, [pc, #16]	@ (80043ac <RCC_GetPCLK2ClockFreq+0x24>)
 800439a:	5cd3      	ldrb	r3, [r2, r3]
 800439c:	461a      	mov	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	40d3      	lsrs	r3, r2
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	08005468 	.word	0x08005468

080043b0 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80043b0:	b590      	push	{r4, r7, lr}
 80043b2:	b087      	sub	sp, #28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80043c4:	f7ff ff30 	bl	8004228 <LL_RCC_PLL_GetMainSource>
 80043c8:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d004      	beq.n	80043da <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043d6:	d003      	beq.n	80043e0 <RCC_PLL_GetFreqDomain_SYS+0x30>
 80043d8:	e005      	b.n	80043e6 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80043da:	4b12      	ldr	r3, [pc, #72]	@ (8004424 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80043dc:	617b      	str	r3, [r7, #20]
      break;
 80043de:	e005      	b.n	80043ec <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80043e0:	4b11      	ldr	r3, [pc, #68]	@ (8004428 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80043e2:	617b      	str	r3, [r7, #20]
      break;
 80043e4:	e002      	b.n	80043ec <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80043e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004424 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80043e8:	617b      	str	r3, [r7, #20]
      break;
 80043ea:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b08      	cmp	r3, #8
 80043f0:	d113      	bne.n	800441a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80043f2:	f7ff ff43 	bl	800427c <LL_RCC_PLL_GetDivider>
 80043f6:	4602      	mov	r2, r0
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	fbb3 f4f2 	udiv	r4, r3, r2
 80043fe:	f7ff ff21 	bl	8004244 <LL_RCC_PLL_GetN>
 8004402:	4603      	mov	r3, r0
 8004404:	fb03 f404 	mul.w	r4, r3, r4
 8004408:	f7ff ff2a 	bl	8004260 <LL_RCC_PLL_GetP>
 800440c:	4603      	mov	r3, r0
 800440e:	0c1b      	lsrs	r3, r3, #16
 8004410:	3301      	adds	r3, #1
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	fbb4 f3f3 	udiv	r3, r4, r3
 8004418:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800441a:	693b      	ldr	r3, [r7, #16]
}
 800441c:	4618      	mov	r0, r3
 800441e:	371c      	adds	r7, #28
 8004420:	46bd      	mov	sp, r7
 8004422:	bd90      	pop	{r4, r7, pc}
 8004424:	00f42400 	.word	0x00f42400
 8004428:	007a1200 	.word	0x007a1200

0800442c <LL_SPI_IsEnabled>:
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800443c:	2b40      	cmp	r3, #64	@ 0x40
 800443e:	d101      	bne.n	8004444 <LL_SPI_IsEnabled+0x18>
 8004440:	2301      	movs	r3, #1
 8004442:	e000      	b.n	8004446 <LL_SPI_IsEnabled+0x1a>
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <LL_SPI_SetCRCPolynomial>:
{
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
 800445a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	b29b      	uxth	r3, r3
 8004460:	461a      	mov	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	611a      	str	r2, [r3, #16]
}
 8004466:	bf00      	nop
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b084      	sub	sp, #16
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
 800447a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7ff ffd3 	bl	800442c <LL_SPI_IsEnabled>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d139      	bne.n	8004500 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004494:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	6811      	ldr	r1, [r2, #0]
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	6852      	ldr	r2, [r2, #4]
 80044a0:	4311      	orrs	r1, r2
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	6892      	ldr	r2, [r2, #8]
 80044a6:	4311      	orrs	r1, r2
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	68d2      	ldr	r2, [r2, #12]
 80044ac:	4311      	orrs	r1, r2
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	6912      	ldr	r2, [r2, #16]
 80044b2:	4311      	orrs	r1, r2
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	6952      	ldr	r2, [r2, #20]
 80044b8:	4311      	orrs	r1, r2
 80044ba:	683a      	ldr	r2, [r7, #0]
 80044bc:	6992      	ldr	r2, [r2, #24]
 80044be:	4311      	orrs	r1, r2
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	69d2      	ldr	r2, [r2, #28]
 80044c4:	4311      	orrs	r1, r2
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	6a12      	ldr	r2, [r2, #32]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	431a      	orrs	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f023 0204 	bic.w	r2, r3, #4
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	0c1b      	lsrs	r3, r3, #16
 80044e0:	431a      	orrs	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044ee:	d105      	bne.n	80044fc <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f4:	4619      	mov	r1, r3
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7ff ffab 	bl	8004452 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80044fc:	2300      	movs	r3, #0
 80044fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	61da      	str	r2, [r3, #28]
  return status;
 800450c:	7bfb      	ldrb	r3, [r7, #15]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <LL_USART_IsEnabled>:
{
 8004516:	b480      	push	{r7}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004526:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800452a:	bf0c      	ite	eq
 800452c:	2301      	moveq	r3, #1
 800452e:	2300      	movne	r3, #0
 8004530:	b2db      	uxtb	r3, r3
}
 8004532:	4618      	mov	r0, r3
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <LL_USART_SetStopBitsLength>:
{
 800453e:	b480      	push	{r7}
 8004540:	b083      	sub	sp, #12
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
 8004546:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	611a      	str	r2, [r3, #16]
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <LL_USART_SetHWFlowCtrl>:
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	431a      	orrs	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	615a      	str	r2, [r3, #20]
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
	...

0800458c <LL_USART_SetBaudRate>:
{
 800458c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004590:	b0c0      	sub	sp, #256	@ 0x100
 8004592:	af00      	add	r7, sp, #0
 8004594:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004598:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 800459c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80045a0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80045a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045ac:	f040 810c 	bne.w	80047c8 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80045b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80045b4:	2200      	movs	r2, #0
 80045b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80045ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80045be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80045c2:	4622      	mov	r2, r4
 80045c4:	462b      	mov	r3, r5
 80045c6:	1891      	adds	r1, r2, r2
 80045c8:	6639      	str	r1, [r7, #96]	@ 0x60
 80045ca:	415b      	adcs	r3, r3
 80045cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80045ce:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80045d2:	4621      	mov	r1, r4
 80045d4:	eb12 0801 	adds.w	r8, r2, r1
 80045d8:	4629      	mov	r1, r5
 80045da:	eb43 0901 	adc.w	r9, r3, r1
 80045de:	f04f 0200 	mov.w	r2, #0
 80045e2:	f04f 0300 	mov.w	r3, #0
 80045e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045f2:	4690      	mov	r8, r2
 80045f4:	4699      	mov	r9, r3
 80045f6:	4623      	mov	r3, r4
 80045f8:	eb18 0303 	adds.w	r3, r8, r3
 80045fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004600:	462b      	mov	r3, r5
 8004602:	eb49 0303 	adc.w	r3, r9, r3
 8004606:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800460a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800460e:	2200      	movs	r2, #0
 8004610:	469a      	mov	sl, r3
 8004612:	4693      	mov	fp, r2
 8004614:	eb1a 030a 	adds.w	r3, sl, sl
 8004618:	65bb      	str	r3, [r7, #88]	@ 0x58
 800461a:	eb4b 030b 	adc.w	r3, fp, fp
 800461e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004620:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004624:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004628:	f7fb fe30 	bl	800028c <__aeabi_uldivmod>
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	4b64      	ldr	r3, [pc, #400]	@ (80047c4 <LL_USART_SetBaudRate+0x238>)
 8004632:	fba3 2302 	umull	r2, r3, r3, r2
 8004636:	095b      	lsrs	r3, r3, #5
 8004638:	b29b      	uxth	r3, r3
 800463a:	011b      	lsls	r3, r3, #4
 800463c:	b29c      	uxth	r4, r3
 800463e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004642:	2200      	movs	r2, #0
 8004644:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004648:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800464c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8004650:	4642      	mov	r2, r8
 8004652:	464b      	mov	r3, r9
 8004654:	1891      	adds	r1, r2, r2
 8004656:	6539      	str	r1, [r7, #80]	@ 0x50
 8004658:	415b      	adcs	r3, r3
 800465a:	657b      	str	r3, [r7, #84]	@ 0x54
 800465c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004660:	4641      	mov	r1, r8
 8004662:	1851      	adds	r1, r2, r1
 8004664:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004666:	4649      	mov	r1, r9
 8004668:	414b      	adcs	r3, r1
 800466a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800466c:	f04f 0200 	mov.w	r2, #0
 8004670:	f04f 0300 	mov.w	r3, #0
 8004674:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8004678:	4659      	mov	r1, fp
 800467a:	00cb      	lsls	r3, r1, #3
 800467c:	4651      	mov	r1, sl
 800467e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004682:	4651      	mov	r1, sl
 8004684:	00ca      	lsls	r2, r1, #3
 8004686:	4610      	mov	r0, r2
 8004688:	4619      	mov	r1, r3
 800468a:	4603      	mov	r3, r0
 800468c:	4642      	mov	r2, r8
 800468e:	189b      	adds	r3, r3, r2
 8004690:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004694:	464b      	mov	r3, r9
 8004696:	460a      	mov	r2, r1
 8004698:	eb42 0303 	adc.w	r3, r2, r3
 800469c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80046a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80046a4:	2200      	movs	r2, #0
 80046a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046aa:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80046ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80046b2:	460b      	mov	r3, r1
 80046b4:	18db      	adds	r3, r3, r3
 80046b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80046b8:	4613      	mov	r3, r2
 80046ba:	eb42 0303 	adc.w	r3, r2, r3
 80046be:	647b      	str	r3, [r7, #68]	@ 0x44
 80046c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80046c4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80046c8:	f7fb fde0 	bl	800028c <__aeabi_uldivmod>
 80046cc:	4602      	mov	r2, r0
 80046ce:	460b      	mov	r3, r1
 80046d0:	4611      	mov	r1, r2
 80046d2:	4b3c      	ldr	r3, [pc, #240]	@ (80047c4 <LL_USART_SetBaudRate+0x238>)
 80046d4:	fba3 2301 	umull	r2, r3, r3, r1
 80046d8:	095b      	lsrs	r3, r3, #5
 80046da:	2264      	movs	r2, #100	@ 0x64
 80046dc:	fb02 f303 	mul.w	r3, r2, r3
 80046e0:	1acb      	subs	r3, r1, r3
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80046e8:	4b36      	ldr	r3, [pc, #216]	@ (80047c4 <LL_USART_SetBaudRate+0x238>)
 80046ea:	fba3 2302 	umull	r2, r3, r3, r2
 80046ee:	095b      	lsrs	r3, r3, #5
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	005b      	lsls	r3, r3, #1
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	4423      	add	r3, r4
 80046fe:	b29c      	uxth	r4, r3
 8004700:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004704:	2200      	movs	r2, #0
 8004706:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800470a:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800470e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8004712:	4642      	mov	r2, r8
 8004714:	464b      	mov	r3, r9
 8004716:	1891      	adds	r1, r2, r2
 8004718:	63b9      	str	r1, [r7, #56]	@ 0x38
 800471a:	415b      	adcs	r3, r3
 800471c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800471e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004722:	4641      	mov	r1, r8
 8004724:	1851      	adds	r1, r2, r1
 8004726:	6339      	str	r1, [r7, #48]	@ 0x30
 8004728:	4649      	mov	r1, r9
 800472a:	414b      	adcs	r3, r1
 800472c:	637b      	str	r3, [r7, #52]	@ 0x34
 800472e:	f04f 0200 	mov.w	r2, #0
 8004732:	f04f 0300 	mov.w	r3, #0
 8004736:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800473a:	4659      	mov	r1, fp
 800473c:	00cb      	lsls	r3, r1, #3
 800473e:	4651      	mov	r1, sl
 8004740:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004744:	4651      	mov	r1, sl
 8004746:	00ca      	lsls	r2, r1, #3
 8004748:	4610      	mov	r0, r2
 800474a:	4619      	mov	r1, r3
 800474c:	4603      	mov	r3, r0
 800474e:	4642      	mov	r2, r8
 8004750:	189b      	adds	r3, r3, r2
 8004752:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004756:	464b      	mov	r3, r9
 8004758:	460a      	mov	r2, r1
 800475a:	eb42 0303 	adc.w	r3, r2, r3
 800475e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004762:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004766:	2200      	movs	r2, #0
 8004768:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800476c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8004770:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004774:	460b      	mov	r3, r1
 8004776:	18db      	adds	r3, r3, r3
 8004778:	62bb      	str	r3, [r7, #40]	@ 0x28
 800477a:	4613      	mov	r3, r2
 800477c:	eb42 0303 	adc.w	r3, r2, r3
 8004780:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004782:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004786:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800478a:	f7fb fd7f 	bl	800028c <__aeabi_uldivmod>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	4b0c      	ldr	r3, [pc, #48]	@ (80047c4 <LL_USART_SetBaudRate+0x238>)
 8004794:	fba3 1302 	umull	r1, r3, r3, r2
 8004798:	095b      	lsrs	r3, r3, #5
 800479a:	2164      	movs	r1, #100	@ 0x64
 800479c:	fb01 f303 	mul.w	r3, r1, r3
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	3332      	adds	r3, #50	@ 0x32
 80047a6:	4a07      	ldr	r2, [pc, #28]	@ (80047c4 <LL_USART_SetBaudRate+0x238>)
 80047a8:	fba2 2303 	umull	r2, r3, r2, r3
 80047ac:	095b      	lsrs	r3, r3, #5
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	f003 0307 	and.w	r3, r3, #7
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	4423      	add	r3, r4
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	461a      	mov	r2, r3
 80047bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047c0:	609a      	str	r2, [r3, #8]
}
 80047c2:	e108      	b.n	80049d6 <LL_USART_SetBaudRate+0x44a>
 80047c4:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80047c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80047cc:	2200      	movs	r2, #0
 80047ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80047d2:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80047d6:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80047da:	4642      	mov	r2, r8
 80047dc:	464b      	mov	r3, r9
 80047de:	1891      	adds	r1, r2, r2
 80047e0:	6239      	str	r1, [r7, #32]
 80047e2:	415b      	adcs	r3, r3
 80047e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80047e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047ea:	4641      	mov	r1, r8
 80047ec:	1854      	adds	r4, r2, r1
 80047ee:	4649      	mov	r1, r9
 80047f0:	eb43 0501 	adc.w	r5, r3, r1
 80047f4:	f04f 0200 	mov.w	r2, #0
 80047f8:	f04f 0300 	mov.w	r3, #0
 80047fc:	00eb      	lsls	r3, r5, #3
 80047fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004802:	00e2      	lsls	r2, r4, #3
 8004804:	4614      	mov	r4, r2
 8004806:	461d      	mov	r5, r3
 8004808:	4643      	mov	r3, r8
 800480a:	18e3      	adds	r3, r4, r3
 800480c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004810:	464b      	mov	r3, r9
 8004812:	eb45 0303 	adc.w	r3, r5, r3
 8004816:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800481a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800481e:	2200      	movs	r2, #0
 8004820:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004824:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	f04f 0300 	mov.w	r3, #0
 8004830:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8004834:	4629      	mov	r1, r5
 8004836:	008b      	lsls	r3, r1, #2
 8004838:	4621      	mov	r1, r4
 800483a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800483e:	4621      	mov	r1, r4
 8004840:	008a      	lsls	r2, r1, #2
 8004842:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8004846:	f7fb fd21 	bl	800028c <__aeabi_uldivmod>
 800484a:	4602      	mov	r2, r0
 800484c:	460b      	mov	r3, r1
 800484e:	4b65      	ldr	r3, [pc, #404]	@ (80049e4 <LL_USART_SetBaudRate+0x458>)
 8004850:	fba3 2302 	umull	r2, r3, r3, r2
 8004854:	095b      	lsrs	r3, r3, #5
 8004856:	b29b      	uxth	r3, r3
 8004858:	011b      	lsls	r3, r3, #4
 800485a:	b29c      	uxth	r4, r3
 800485c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004860:	2200      	movs	r2, #0
 8004862:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004866:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800486a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800486e:	4642      	mov	r2, r8
 8004870:	464b      	mov	r3, r9
 8004872:	1891      	adds	r1, r2, r2
 8004874:	61b9      	str	r1, [r7, #24]
 8004876:	415b      	adcs	r3, r3
 8004878:	61fb      	str	r3, [r7, #28]
 800487a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800487e:	4641      	mov	r1, r8
 8004880:	1851      	adds	r1, r2, r1
 8004882:	6139      	str	r1, [r7, #16]
 8004884:	4649      	mov	r1, r9
 8004886:	414b      	adcs	r3, r1
 8004888:	617b      	str	r3, [r7, #20]
 800488a:	f04f 0200 	mov.w	r2, #0
 800488e:	f04f 0300 	mov.w	r3, #0
 8004892:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004896:	4659      	mov	r1, fp
 8004898:	00cb      	lsls	r3, r1, #3
 800489a:	4651      	mov	r1, sl
 800489c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048a0:	4651      	mov	r1, sl
 80048a2:	00ca      	lsls	r2, r1, #3
 80048a4:	4610      	mov	r0, r2
 80048a6:	4619      	mov	r1, r3
 80048a8:	4603      	mov	r3, r0
 80048aa:	4642      	mov	r2, r8
 80048ac:	189b      	adds	r3, r3, r2
 80048ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048b2:	464b      	mov	r3, r9
 80048b4:	460a      	mov	r2, r1
 80048b6:	eb42 0303 	adc.w	r3, r2, r3
 80048ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80048be:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80048c2:	2200      	movs	r2, #0
 80048c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048c8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80048cc:	f04f 0200 	mov.w	r2, #0
 80048d0:	f04f 0300 	mov.w	r3, #0
 80048d4:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 80048d8:	4649      	mov	r1, r9
 80048da:	008b      	lsls	r3, r1, #2
 80048dc:	4641      	mov	r1, r8
 80048de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048e2:	4641      	mov	r1, r8
 80048e4:	008a      	lsls	r2, r1, #2
 80048e6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80048ea:	f7fb fccf 	bl	800028c <__aeabi_uldivmod>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	4611      	mov	r1, r2
 80048f4:	4b3b      	ldr	r3, [pc, #236]	@ (80049e4 <LL_USART_SetBaudRate+0x458>)
 80048f6:	fba3 2301 	umull	r2, r3, r3, r1
 80048fa:	095b      	lsrs	r3, r3, #5
 80048fc:	2264      	movs	r2, #100	@ 0x64
 80048fe:	fb02 f303 	mul.w	r3, r2, r3
 8004902:	1acb      	subs	r3, r1, r3
 8004904:	011b      	lsls	r3, r3, #4
 8004906:	3332      	adds	r3, #50	@ 0x32
 8004908:	4a36      	ldr	r2, [pc, #216]	@ (80049e4 <LL_USART_SetBaudRate+0x458>)
 800490a:	fba2 2303 	umull	r2, r3, r2, r3
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	b29b      	uxth	r3, r3
 8004912:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004916:	b29b      	uxth	r3, r3
 8004918:	4423      	add	r3, r4
 800491a:	b29c      	uxth	r4, r3
 800491c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004920:	2200      	movs	r2, #0
 8004922:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004924:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004926:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800492a:	4642      	mov	r2, r8
 800492c:	464b      	mov	r3, r9
 800492e:	1891      	adds	r1, r2, r2
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	415b      	adcs	r3, r3
 8004934:	60fb      	str	r3, [r7, #12]
 8004936:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800493a:	4641      	mov	r1, r8
 800493c:	1851      	adds	r1, r2, r1
 800493e:	6039      	str	r1, [r7, #0]
 8004940:	4649      	mov	r1, r9
 8004942:	414b      	adcs	r3, r1
 8004944:	607b      	str	r3, [r7, #4]
 8004946:	f04f 0200 	mov.w	r2, #0
 800494a:	f04f 0300 	mov.w	r3, #0
 800494e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004952:	4659      	mov	r1, fp
 8004954:	00cb      	lsls	r3, r1, #3
 8004956:	4651      	mov	r1, sl
 8004958:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800495c:	4651      	mov	r1, sl
 800495e:	00ca      	lsls	r2, r1, #3
 8004960:	4610      	mov	r0, r2
 8004962:	4619      	mov	r1, r3
 8004964:	4603      	mov	r3, r0
 8004966:	4642      	mov	r2, r8
 8004968:	189b      	adds	r3, r3, r2
 800496a:	673b      	str	r3, [r7, #112]	@ 0x70
 800496c:	464b      	mov	r3, r9
 800496e:	460a      	mov	r2, r1
 8004970:	eb42 0303 	adc.w	r3, r2, r3
 8004974:	677b      	str	r3, [r7, #116]	@ 0x74
 8004976:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800497a:	2200      	movs	r2, #0
 800497c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800497e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	f04f 0300 	mov.w	r3, #0
 8004988:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 800498c:	4649      	mov	r1, r9
 800498e:	008b      	lsls	r3, r1, #2
 8004990:	4641      	mov	r1, r8
 8004992:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004996:	4641      	mov	r1, r8
 8004998:	008a      	lsls	r2, r1, #2
 800499a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800499e:	f7fb fc75 	bl	800028c <__aeabi_uldivmod>
 80049a2:	4602      	mov	r2, r0
 80049a4:	460b      	mov	r3, r1
 80049a6:	4b0f      	ldr	r3, [pc, #60]	@ (80049e4 <LL_USART_SetBaudRate+0x458>)
 80049a8:	fba3 1302 	umull	r1, r3, r3, r2
 80049ac:	095b      	lsrs	r3, r3, #5
 80049ae:	2164      	movs	r1, #100	@ 0x64
 80049b0:	fb01 f303 	mul.w	r3, r1, r3
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	3332      	adds	r3, #50	@ 0x32
 80049ba:	4a0a      	ldr	r2, [pc, #40]	@ (80049e4 <LL_USART_SetBaudRate+0x458>)
 80049bc:	fba2 2303 	umull	r2, r3, r2, r3
 80049c0:	095b      	lsrs	r3, r3, #5
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	f003 030f 	and.w	r3, r3, #15
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	4423      	add	r3, r4
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	461a      	mov	r2, r3
 80049d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049d4:	609a      	str	r2, [r3, #8]
}
 80049d6:	bf00      	nop
 80049d8:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80049dc:	46bd      	mov	sp, r7
 80049de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049e2:	bf00      	nop
 80049e4:	51eb851f 	.word	0x51eb851f

080049e8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b088      	sub	sp, #32
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80049f6:	2300      	movs	r3, #0
 80049f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7ff fd8b 	bl	8004516 <LL_USART_IsEnabled>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d15e      	bne.n	8004ac4 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004a0e:	f023 030c 	bic.w	r3, r3, #12
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	6851      	ldr	r1, [r2, #4]
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	68d2      	ldr	r2, [r2, #12]
 8004a1a:	4311      	orrs	r1, r2
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	6912      	ldr	r2, [r2, #16]
 8004a20:	4311      	orrs	r1, r2
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	6992      	ldr	r2, [r2, #24]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	4619      	mov	r1, r3
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f7ff fd82 	bl	800453e <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	4619      	mov	r1, r3
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f7ff fd8f 	bl	8004564 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004a46:	f107 0308 	add.w	r3, r7, #8
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7ff fc24 	bl	8004298 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a1f      	ldr	r2, [pc, #124]	@ (8004ad0 <LL_USART_Init+0xe8>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d102      	bne.n	8004a5e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	61bb      	str	r3, [r7, #24]
 8004a5c:	e021      	b.n	8004aa2 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a1c      	ldr	r2, [pc, #112]	@ (8004ad4 <LL_USART_Init+0xec>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d102      	bne.n	8004a6c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	61bb      	str	r3, [r7, #24]
 8004a6a:	e01a      	b.n	8004aa2 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a1a      	ldr	r2, [pc, #104]	@ (8004ad8 <LL_USART_Init+0xf0>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d102      	bne.n	8004a7a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	61bb      	str	r3, [r7, #24]
 8004a78:	e013      	b.n	8004aa2 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a17      	ldr	r2, [pc, #92]	@ (8004adc <LL_USART_Init+0xf4>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d102      	bne.n	8004a88 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	61bb      	str	r3, [r7, #24]
 8004a86:	e00c      	b.n	8004aa2 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a15      	ldr	r2, [pc, #84]	@ (8004ae0 <LL_USART_Init+0xf8>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d102      	bne.n	8004a96 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	61bb      	str	r3, [r7, #24]
 8004a94:	e005      	b.n	8004aa2 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a12      	ldr	r2, [pc, #72]	@ (8004ae4 <LL_USART_Init+0xfc>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d101      	bne.n	8004aa2 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00d      	beq.n	8004ac4 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d009      	beq.n	8004ac4 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8004abc:	69b9      	ldr	r1, [r7, #24]
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7ff fd64 	bl	800458c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004ac4:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3720      	adds	r7, #32
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	40011000 	.word	0x40011000
 8004ad4:	40004400 	.word	0x40004400
 8004ad8:	40004800 	.word	0x40004800
 8004adc:	40011400 	.word	0x40011400
 8004ae0:	40004c00 	.word	0x40004c00
 8004ae4:	40005000 	.word	0x40005000

08004ae8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afa:	4a07      	ldr	r2, [pc, #28]	@ (8004b18 <LL_InitTick+0x30>)
 8004afc:	3b01      	subs	r3, #1
 8004afe:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004b00:	4b05      	ldr	r3, [pc, #20]	@ (8004b18 <LL_InitTick+0x30>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b06:	4b04      	ldr	r3, [pc, #16]	@ (8004b18 <LL_InitTick+0x30>)
 8004b08:	2205      	movs	r2, #5
 8004b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	e000e010 	.word	0xe000e010

08004b1c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8004b24:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f7ff ffdd 	bl	8004ae8 <LL_InitTick>
}
 8004b2e:	bf00      	nop
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
	...

08004b38 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004b40:	4b0f      	ldr	r3, [pc, #60]	@ (8004b80 <LL_mDelay+0x48>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8004b46:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4e:	d00c      	beq.n	8004b6a <LL_mDelay+0x32>
  {
    Delay++;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3301      	adds	r3, #1
 8004b54:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8004b56:	e008      	b.n	8004b6a <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8004b58:	4b09      	ldr	r3, [pc, #36]	@ (8004b80 <LL_mDelay+0x48>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d002      	beq.n	8004b6a <LL_mDelay+0x32>
    {
      Delay--;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3b01      	subs	r3, #1
 8004b68:	607b      	str	r3, [r7, #4]
  while (Delay)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1f3      	bne.n	8004b58 <LL_mDelay+0x20>
    }
  }
}
 8004b70:	bf00      	nop
 8004b72:	bf00      	nop
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	e000e010 	.word	0xe000e010

08004b84 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004b8c:	4a04      	ldr	r2, [pc, #16]	@ (8004ba0 <LL_SetSystemCoreClock+0x1c>)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6013      	str	r3, [r2, #0]
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	2000214c 	.word	0x2000214c

08004ba4 <SCH_Initialize>:
  * @param  None
  * @retval None
  *****************************************************************************/

void SCH_Initialize(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  s_SystemTick = RESET;
 8004ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8004be0 <SCH_Initialize+0x3c>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	601a      	str	r2, [r3, #0]
  s_NumOfTaskScheduled = RESET;
 8004bae:	4b0d      	ldr	r3, [pc, #52]	@ (8004be4 <SCH_Initialize+0x40>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	701a      	strb	r2, [r3, #0]
  s_NumOfTimers = RESET;
 8004bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8004be8 <SCH_Initialize+0x44>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	701a      	strb	r2, [r3, #0]

  // Initial Scheduler Context
  memset((uint8_t*)&s_TaskContext[0], RESET, (sizeof(SCH_TaskContextTypedef) * MAX_TASK));
 8004bba:	22f0      	movs	r2, #240	@ 0xf0
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	480b      	ldr	r0, [pc, #44]	@ (8004bec <SCH_Initialize+0x48>)
 8004bc0:	f000 fa02 	bl	8004fc8 <memset>
  memset((uint8_t*)&s_TimerContext[0], RESET, (sizeof(SCH_TimerContextTypedef) * MAX_TIMERS));
 8004bc4:	22f0      	movs	r2, #240	@ 0xf0
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	4809      	ldr	r0, [pc, #36]	@ (8004bf0 <SCH_Initialize+0x4c>)
 8004bca:	f000 f9fd 	bl	8004fc8 <memset>
  memset((uint8_t*)&s_SoftTimers[0], RESET, (sizeof(uint32_t) * SCH_TIM_LAST));
 8004bce:	2228      	movs	r2, #40	@ 0x28
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	4808      	ldr	r0, [pc, #32]	@ (8004bf4 <SCH_Initialize+0x50>)
 8004bd4:	f000 f9f8 	bl	8004fc8 <memset>

    // Initialize Scheduler context
  systick_timer_init();
 8004bd8:	f7fb fd64 	bl	80006a4 <systick_timer_init>
}
 8004bdc:	bf00      	nop
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	200024e4 	.word	0x200024e4
 8004be4:	200023ec 	.word	0x200023ec
 8004be8:	200024e0 	.word	0x200024e0
 8004bec:	200022fc 	.word	0x200022fc
 8004bf0:	200023f0 	.word	0x200023f0
 8004bf4:	200024e8 	.word	0x200024e8

08004bf8 <SCH_TIM_Start>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  *         const uint32_t timeInMs - time in mSec
  * @retval None
  *****************************************************************************/
void SCH_TIM_Start(const SCH_SoftTimerTypedef timer, const uint32_t timeInMs)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	4603      	mov	r3, r0
 8004c00:	6039      	str	r1, [r7, #0]
 8004c02:	71fb      	strb	r3, [r7, #7]
  if(timer < SCH_TIM_LAST)
 8004c04:	79fb      	ldrb	r3, [r7, #7]
 8004c06:	2b09      	cmp	r3, #9
 8004c08:	d804      	bhi.n	8004c14 <SCH_TIM_Start+0x1c>
  {
	//s_SoftTimers[timer] = timeInMs + s_SystemTick;
    s_SoftTimers[timer] = timeInMs;
 8004c0a:	79fb      	ldrb	r3, [r7, #7]
 8004c0c:	4904      	ldr	r1, [pc, #16]	@ (8004c20 <SCH_TIM_Start+0x28>)
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	200024e8 	.word	0x200024e8

08004c24 <SCH_TIM_HasCompleted>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  * @retval TRUE / FALSE
  *****************************************************************************/

uint16_t SCH_TIM_HasCompleted(const SCH_SoftTimerTypedef timer)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	71fb      	strb	r3, [r7, #7]
  return (s_SoftTimers[timer] == 0 ? 1:0 ) ;
 8004c2e:	79fb      	ldrb	r3, [r7, #7]
 8004c30:	4a06      	ldr	r2, [pc, #24]	@ (8004c4c <SCH_TIM_HasCompleted+0x28>)
 8004c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	bf0c      	ite	eq
 8004c3a:	2301      	moveq	r3, #1
 8004c3c:	2300      	movne	r3, #0
 8004c3e:	b2db      	uxtb	r3, r3
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	200024e8 	.word	0x200024e8

08004c50 <SCH_TASK_CreateTask>:
  * @param  SCH_TASK_HANDLE* pHandle - pointer to task handle
  *         SCH_TaskPropertyTypedef* pTaskProperty - pointer to task property
  * @retval status
  *****************************************************************************/
t_Status SCH_TASK_CreateTask(SCH_TASK_HANDLE* pHandle, SCH_TaskPropertyTypedef* pTaskProperty)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  t_Status                      status = STS_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	73fb      	strb	r3, [r7, #15]

  // make sure that we have valid parameters
  if((pHandle) && (pTaskProperty))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d029      	beq.n	8004cb8 <SCH_TASK_CreateTask+0x68>
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d026      	beq.n	8004cb8 <SCH_TASK_CreateTask+0x68>
  {
    // Check for number of task defined
    if(s_NumOfTaskScheduled < (MAX_TASK - 1))
 8004c6a:	4b17      	ldr	r3, [pc, #92]	@ (8004cc8 <SCH_TASK_CreateTask+0x78>)
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	2b12      	cmp	r3, #18
 8004c70:	d822      	bhi.n	8004cb8 <SCH_TASK_CreateTask+0x68>
    {
      SCH_TaskContextTypedef* pTaskContext = &s_TaskContext[s_NumOfTaskScheduled];
 8004c72:	4b15      	ldr	r3, [pc, #84]	@ (8004cc8 <SCH_TASK_CreateTask+0x78>)
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	461a      	mov	r2, r3
 8004c78:	4613      	mov	r3, r2
 8004c7a:	005b      	lsls	r3, r3, #1
 8004c7c:	4413      	add	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4a12      	ldr	r2, [pc, #72]	@ (8004ccc <SCH_TASK_CreateTask+0x7c>)
 8004c82:	4413      	add	r3, r2
 8004c84:	60bb      	str	r3, [r7, #8]
      // get task context
      // memcpy((uint8_t*)pTaskContext->pTaskProperty, (uint8_t*)pTaskProperty, sizeof(SCH_TaskPropertyTypedef));
      pTaskContext->pTaskProperty = pTaskProperty;
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	609a      	str	r2, [r3, #8]
      // Make sure we are initializing other members of task context
      pTaskContext->taskFlag = FALSE;
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	805a      	strh	r2, [r3, #2]
      pTaskContext->taskTick = pTaskProperty->taskTick;;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	68da      	ldr	r2, [r3, #12]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	605a      	str	r2, [r3, #4]
      // Put task in Ready State
      pTaskContext->taskState = TASK_StateReady;
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	701a      	strb	r2, [r3, #0]

      // Give Task Handle back to caller
      *pHandle = s_NumOfTaskScheduled;
 8004ca0:	4b09      	ldr	r3, [pc, #36]	@ (8004cc8 <SCH_TASK_CreateTask+0x78>)
 8004ca2:	781a      	ldrb	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	701a      	strb	r2, [r3, #0]

      s_NumOfTaskScheduled++;
 8004ca8:	4b07      	ldr	r3, [pc, #28]	@ (8004cc8 <SCH_TASK_CreateTask+0x78>)
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	3301      	adds	r3, #1
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	4b05      	ldr	r3, [pc, #20]	@ (8004cc8 <SCH_TASK_CreateTask+0x78>)
 8004cb2:	701a      	strb	r2, [r3, #0]
      // We were able to register task with schedular
      status = STS_DONE;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8004cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	200023ec 	.word	0x200023ec
 8004ccc:	200022fc 	.word	0x200022fc

08004cd0 <SCH_RunSystemTickTimer>:
  * @brief  Function handles system tick timer
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_RunSystemTickTimer(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // Increment System Tick counter

  s_SystemTick++;
 8004cd6:	4b42      	ldr	r3, [pc, #264]	@ (8004de0 <SCH_RunSystemTickTimer+0x110>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	4a40      	ldr	r2, [pc, #256]	@ (8004de0 <SCH_RunSystemTickTimer+0x110>)
 8004cde:	6013      	str	r3, [r2, #0]
//  if(s_SystemTick > 100000){
//	  LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_15);
//  }
  // Check Status of other Periodic Task
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	73fb      	strb	r3, [r7, #15]
 8004ce4:	e025      	b.n	8004d32 <SCH_RunSystemTickTimer+0x62>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 8004ce6:	7bfa      	ldrb	r2, [r7, #15]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	005b      	lsls	r3, r3, #1
 8004cec:	4413      	add	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4a3c      	ldr	r2, [pc, #240]	@ (8004de4 <SCH_RunSystemTickTimer+0x114>)
 8004cf2:	4413      	add	r3, r2
 8004cf4:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((SCH_TASK_SYNC == pTaskContext->pTaskProperty->taskType) && (TASK_StateReady == pTaskContext->taskState))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d115      	bne.n	8004d2c <SCH_RunSystemTickTimer+0x5c>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d111      	bne.n	8004d2c <SCH_RunSystemTickTimer+0x5c>
    {
      // Increment task tick
      pTaskContext->taskTick += 1;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	1c5a      	adds	r2, r3, #1
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTaskContext->taskTick >= pTaskContext->pTaskProperty->taskPeriodInMS)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d305      	bcc.n	8004d2c <SCH_RunSystemTickTimer+0x5c>
      {
        // Yes
        // Reset Task tick timer
        pTaskContext->taskTick = RESET;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	605a      	str	r2, [r3, #4]
        // Enable Flag
        pTaskContext->taskFlag = TRUE;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	805a      	strh	r2, [r3, #2]
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8004d2c:	7bfb      	ldrb	r3, [r7, #15]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	73fb      	strb	r3, [r7, #15]
 8004d32:	4b2d      	ldr	r3, [pc, #180]	@ (8004de8 <SCH_RunSystemTickTimer+0x118>)
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	7bfa      	ldrb	r2, [r7, #15]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d3d4      	bcc.n	8004ce6 <SCH_RunSystemTickTimer+0x16>
      }
    }
  }

  // Check Status of other Periodic Task
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	73bb      	strb	r3, [r7, #14]
 8004d40:	e02b      	b.n	8004d9a <SCH_RunSystemTickTimer+0xca>
  {
    // Get Task Context
    pTimerContext = &s_TimerContext[timerIndex];
 8004d42:	7bba      	ldrb	r2, [r7, #14]
 8004d44:	4613      	mov	r3, r2
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	4413      	add	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4a27      	ldr	r2, [pc, #156]	@ (8004dec <SCH_RunSystemTickTimer+0x11c>)
 8004d4e:	4413      	add	r3, r2
 8004d50:	60bb      	str	r3, [r7, #8]

    // Check type and State of the task
    if(TIM_StateRun == pTimerContext->timerState)
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d11c      	bne.n	8004d94 <SCH_RunSystemTickTimer+0xc4>
    {
      // Increment task tick
      pTimerContext->timerTick += 1;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	1c5a      	adds	r2, r3, #1
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTimerContext->timerTick >= pTimerContext->pTimerProperty->timerPeriodInMS)
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d310      	bcc.n	8004d94 <SCH_RunSystemTickTimer+0xc4>
      {
        // Yes
        // Enable Flag
        pTimerContext->timerFlag = TRUE;
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	2201      	movs	r2, #1
 8004d76:	805a      	strh	r2, [r3, #2]
        // Reset tick timer
        pTimerContext->timerTick = RESET;
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	605a      	str	r2, [r3, #4]
        // Check timer type and change the state
        pTimerContext->timerState = (SCH_TIMER_PERIODIC == pTimerContext->pTimerProperty->timerType)?TIM_StateRun:TIM_StateStop;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	bf0c      	ite	eq
 8004d88:	2301      	moveq	r3, #1
 8004d8a:	2300      	movne	r3, #0
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	461a      	mov	r2, r3
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	701a      	strb	r2, [r3, #0]
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8004d94:	7bbb      	ldrb	r3, [r7, #14]
 8004d96:	3301      	adds	r3, #1
 8004d98:	73bb      	strb	r3, [r7, #14]
 8004d9a:	4b15      	ldr	r3, [pc, #84]	@ (8004df0 <SCH_RunSystemTickTimer+0x120>)
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	7bba      	ldrb	r2, [r7, #14]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d3ce      	bcc.n	8004d42 <SCH_RunSystemTickTimer+0x72>
      }
    }
  }
  // Update software timer
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 8004da4:	2300      	movs	r3, #0
 8004da6:	73bb      	strb	r3, [r7, #14]
 8004da8:	e010      	b.n	8004dcc <SCH_RunSystemTickTimer+0xfc>
 	if (s_SoftTimers[timerIndex] > 0)	s_SoftTimers[timerIndex] --;
 8004daa:	7bbb      	ldrb	r3, [r7, #14]
 8004dac:	4a11      	ldr	r2, [pc, #68]	@ (8004df4 <SCH_RunSystemTickTimer+0x124>)
 8004dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d007      	beq.n	8004dc6 <SCH_RunSystemTickTimer+0xf6>
 8004db6:	7bbb      	ldrb	r3, [r7, #14]
 8004db8:	4a0e      	ldr	r2, [pc, #56]	@ (8004df4 <SCH_RunSystemTickTimer+0x124>)
 8004dba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004dbe:	3a01      	subs	r2, #1
 8004dc0:	490c      	ldr	r1, [pc, #48]	@ (8004df4 <SCH_RunSystemTickTimer+0x124>)
 8004dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 8004dc6:	7bbb      	ldrb	r3, [r7, #14]
 8004dc8:	3301      	adds	r3, #1
 8004dca:	73bb      	strb	r3, [r7, #14]
 8004dcc:	7bbb      	ldrb	r3, [r7, #14]
 8004dce:	2b09      	cmp	r3, #9
 8004dd0:	d9eb      	bls.n	8004daa <SCH_RunSystemTickTimer+0xda>
}
 8004dd2:	bf00      	nop
 8004dd4:	bf00      	nop
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	200024e4 	.word	0x200024e4
 8004de4:	200022fc 	.word	0x200022fc
 8004de8:	200023ec 	.word	0x200023ec
 8004dec:	200023f0 	.word	0x200023f0
 8004df0:	200024e0 	.word	0x200024e0
 8004df4:	200024e8 	.word	0x200024e8

08004df8 <SCH_StartSchedular>:
  * @brief  Start schedular
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_StartSchedular(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
  // Start Schedular..i.e. start system tick timer
  SCH_START;
 8004dfc:	f7fb fc42 	bl	8000684 <systick_timer_start>
}
 8004e00:	bf00      	nop
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <SCH_HandleScheduledTask>:
  * @brief  Function handles scheduled task and timer events
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_HandleScheduledTask(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
  SCH_TaskContextTypedef*       pTaskContext;
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // check for schedule flag
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	73fb      	strb	r3, [r7, #15]
 8004e0e:	e01e      	b.n	8004e4e <SCH_HandleScheduledTask+0x4a>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 8004e10:	7bfa      	ldrb	r2, [r7, #15]
 8004e12:	4613      	mov	r3, r2
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	4413      	add	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4a23      	ldr	r2, [pc, #140]	@ (8004ea8 <SCH_HandleScheduledTask+0xa4>)
 8004e1c:	4413      	add	r3, r2
 8004e1e:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((TRUE == pTaskContext->taskFlag) && (TASK_StateReady == pTaskContext->taskState))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	885b      	ldrh	r3, [r3, #2]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d10f      	bne.n	8004e48 <SCH_HandleScheduledTask+0x44>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d10b      	bne.n	8004e48 <SCH_HandleScheduledTask+0x44>
    {
      pTaskContext->taskFlag = FALSE;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	805a      	strh	r2, [r3, #2]
      if(pTaskContext->pTaskProperty->taskFunction)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d003      	beq.n	8004e48 <SCH_HandleScheduledTask+0x44>
      {
        pTaskContext->pTaskProperty->taskFunction();
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	4798      	blx	r3
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	73fb      	strb	r3, [r7, #15]
 8004e4e:	4b17      	ldr	r3, [pc, #92]	@ (8004eac <SCH_HandleScheduledTask+0xa8>)
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	7bfa      	ldrb	r2, [r7, #15]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d3db      	bcc.n	8004e10 <SCH_HandleScheduledTask+0xc>
      }
    }
  }

  // check for timer flag
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8004e58:	2300      	movs	r3, #0
 8004e5a:	73bb      	strb	r3, [r7, #14]
 8004e5c:	e01a      	b.n	8004e94 <SCH_HandleScheduledTask+0x90>
  {
    // Get Timer Context
    pTimerContext = &s_TimerContext[timerIndex];
 8004e5e:	7bba      	ldrb	r2, [r7, #14]
 8004e60:	4613      	mov	r3, r2
 8004e62:	005b      	lsls	r3, r3, #1
 8004e64:	4413      	add	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4a11      	ldr	r2, [pc, #68]	@ (8004eb0 <SCH_HandleScheduledTask+0xac>)
 8004e6a:	4413      	add	r3, r2
 8004e6c:	60bb      	str	r3, [r7, #8]

    // Check timer flag
    if(TRUE == pTimerContext->timerFlag)
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	885b      	ldrh	r3, [r3, #2]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d10b      	bne.n	8004e8e <SCH_HandleScheduledTask+0x8a>
    {
      pTimerContext->timerFlag = FALSE;
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	805a      	strh	r2, [r3, #2]
      if(pTimerContext->pTimerProperty->timerCallbackFunction)
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <SCH_HandleScheduledTask+0x8a>
      {
        pTimerContext->pTimerProperty->timerCallbackFunction();
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	4798      	blx	r3
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8004e8e:	7bbb      	ldrb	r3, [r7, #14]
 8004e90:	3301      	adds	r3, #1
 8004e92:	73bb      	strb	r3, [r7, #14]
 8004e94:	4b07      	ldr	r3, [pc, #28]	@ (8004eb4 <SCH_HandleScheduledTask+0xb0>)
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	7bba      	ldrb	r2, [r7, #14]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d3df      	bcc.n	8004e5e <SCH_HandleScheduledTask+0x5a>
      }
    }
  }
}
 8004e9e:	bf00      	nop
 8004ea0:	bf00      	nop
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	200022fc 	.word	0x200022fc
 8004eac:	200023ec 	.word	0x200023ec
 8004eb0:	200023f0 	.word	0x200023f0
 8004eb4:	200024e0 	.word	0x200024e0

08004eb8 <atoi>:
 8004eb8:	220a      	movs	r2, #10
 8004eba:	2100      	movs	r1, #0
 8004ebc:	f000 b87a 	b.w	8004fb4 <strtol>

08004ec0 <_strtol_l.constprop.0>:
 8004ec0:	2b24      	cmp	r3, #36	@ 0x24
 8004ec2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec6:	4686      	mov	lr, r0
 8004ec8:	4690      	mov	r8, r2
 8004eca:	d801      	bhi.n	8004ed0 <_strtol_l.constprop.0+0x10>
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d106      	bne.n	8004ede <_strtol_l.constprop.0+0x1e>
 8004ed0:	f000 f882 	bl	8004fd8 <__errno>
 8004ed4:	2316      	movs	r3, #22
 8004ed6:	6003      	str	r3, [r0, #0]
 8004ed8:	2000      	movs	r0, #0
 8004eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ede:	4834      	ldr	r0, [pc, #208]	@ (8004fb0 <_strtol_l.constprop.0+0xf0>)
 8004ee0:	460d      	mov	r5, r1
 8004ee2:	462a      	mov	r2, r5
 8004ee4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004ee8:	5d06      	ldrb	r6, [r0, r4]
 8004eea:	f016 0608 	ands.w	r6, r6, #8
 8004eee:	d1f8      	bne.n	8004ee2 <_strtol_l.constprop.0+0x22>
 8004ef0:	2c2d      	cmp	r4, #45	@ 0x2d
 8004ef2:	d12d      	bne.n	8004f50 <_strtol_l.constprop.0+0x90>
 8004ef4:	782c      	ldrb	r4, [r5, #0]
 8004ef6:	2601      	movs	r6, #1
 8004ef8:	1c95      	adds	r5, r2, #2
 8004efa:	f033 0210 	bics.w	r2, r3, #16
 8004efe:	d109      	bne.n	8004f14 <_strtol_l.constprop.0+0x54>
 8004f00:	2c30      	cmp	r4, #48	@ 0x30
 8004f02:	d12a      	bne.n	8004f5a <_strtol_l.constprop.0+0x9a>
 8004f04:	782a      	ldrb	r2, [r5, #0]
 8004f06:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004f0a:	2a58      	cmp	r2, #88	@ 0x58
 8004f0c:	d125      	bne.n	8004f5a <_strtol_l.constprop.0+0x9a>
 8004f0e:	786c      	ldrb	r4, [r5, #1]
 8004f10:	2310      	movs	r3, #16
 8004f12:	3502      	adds	r5, #2
 8004f14:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004f18:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	fbbc f9f3 	udiv	r9, ip, r3
 8004f22:	4610      	mov	r0, r2
 8004f24:	fb03 ca19 	mls	sl, r3, r9, ip
 8004f28:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004f2c:	2f09      	cmp	r7, #9
 8004f2e:	d81b      	bhi.n	8004f68 <_strtol_l.constprop.0+0xa8>
 8004f30:	463c      	mov	r4, r7
 8004f32:	42a3      	cmp	r3, r4
 8004f34:	dd27      	ble.n	8004f86 <_strtol_l.constprop.0+0xc6>
 8004f36:	1c57      	adds	r7, r2, #1
 8004f38:	d007      	beq.n	8004f4a <_strtol_l.constprop.0+0x8a>
 8004f3a:	4581      	cmp	r9, r0
 8004f3c:	d320      	bcc.n	8004f80 <_strtol_l.constprop.0+0xc0>
 8004f3e:	d101      	bne.n	8004f44 <_strtol_l.constprop.0+0x84>
 8004f40:	45a2      	cmp	sl, r4
 8004f42:	db1d      	blt.n	8004f80 <_strtol_l.constprop.0+0xc0>
 8004f44:	fb00 4003 	mla	r0, r0, r3, r4
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004f4e:	e7eb      	b.n	8004f28 <_strtol_l.constprop.0+0x68>
 8004f50:	2c2b      	cmp	r4, #43	@ 0x2b
 8004f52:	bf04      	itt	eq
 8004f54:	782c      	ldrbeq	r4, [r5, #0]
 8004f56:	1c95      	addeq	r5, r2, #2
 8004f58:	e7cf      	b.n	8004efa <_strtol_l.constprop.0+0x3a>
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1da      	bne.n	8004f14 <_strtol_l.constprop.0+0x54>
 8004f5e:	2c30      	cmp	r4, #48	@ 0x30
 8004f60:	bf0c      	ite	eq
 8004f62:	2308      	moveq	r3, #8
 8004f64:	230a      	movne	r3, #10
 8004f66:	e7d5      	b.n	8004f14 <_strtol_l.constprop.0+0x54>
 8004f68:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004f6c:	2f19      	cmp	r7, #25
 8004f6e:	d801      	bhi.n	8004f74 <_strtol_l.constprop.0+0xb4>
 8004f70:	3c37      	subs	r4, #55	@ 0x37
 8004f72:	e7de      	b.n	8004f32 <_strtol_l.constprop.0+0x72>
 8004f74:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004f78:	2f19      	cmp	r7, #25
 8004f7a:	d804      	bhi.n	8004f86 <_strtol_l.constprop.0+0xc6>
 8004f7c:	3c57      	subs	r4, #87	@ 0x57
 8004f7e:	e7d8      	b.n	8004f32 <_strtol_l.constprop.0+0x72>
 8004f80:	f04f 32ff 	mov.w	r2, #4294967295
 8004f84:	e7e1      	b.n	8004f4a <_strtol_l.constprop.0+0x8a>
 8004f86:	1c53      	adds	r3, r2, #1
 8004f88:	d108      	bne.n	8004f9c <_strtol_l.constprop.0+0xdc>
 8004f8a:	2322      	movs	r3, #34	@ 0x22
 8004f8c:	f8ce 3000 	str.w	r3, [lr]
 8004f90:	4660      	mov	r0, ip
 8004f92:	f1b8 0f00 	cmp.w	r8, #0
 8004f96:	d0a0      	beq.n	8004eda <_strtol_l.constprop.0+0x1a>
 8004f98:	1e69      	subs	r1, r5, #1
 8004f9a:	e006      	b.n	8004faa <_strtol_l.constprop.0+0xea>
 8004f9c:	b106      	cbz	r6, 8004fa0 <_strtol_l.constprop.0+0xe0>
 8004f9e:	4240      	negs	r0, r0
 8004fa0:	f1b8 0f00 	cmp.w	r8, #0
 8004fa4:	d099      	beq.n	8004eda <_strtol_l.constprop.0+0x1a>
 8004fa6:	2a00      	cmp	r2, #0
 8004fa8:	d1f6      	bne.n	8004f98 <_strtol_l.constprop.0+0xd8>
 8004faa:	f8c8 1000 	str.w	r1, [r8]
 8004fae:	e794      	b.n	8004eda <_strtol_l.constprop.0+0x1a>
 8004fb0:	08005471 	.word	0x08005471

08004fb4 <strtol>:
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	460a      	mov	r2, r1
 8004fb8:	4601      	mov	r1, r0
 8004fba:	4802      	ldr	r0, [pc, #8]	@ (8004fc4 <strtol+0x10>)
 8004fbc:	6800      	ldr	r0, [r0, #0]
 8004fbe:	f7ff bf7f 	b.w	8004ec0 <_strtol_l.constprop.0>
 8004fc2:	bf00      	nop
 8004fc4:	20002164 	.word	0x20002164

08004fc8 <memset>:
 8004fc8:	4402      	add	r2, r0
 8004fca:	4603      	mov	r3, r0
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d100      	bne.n	8004fd2 <memset+0xa>
 8004fd0:	4770      	bx	lr
 8004fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8004fd6:	e7f9      	b.n	8004fcc <memset+0x4>

08004fd8 <__errno>:
 8004fd8:	4b01      	ldr	r3, [pc, #4]	@ (8004fe0 <__errno+0x8>)
 8004fda:	6818      	ldr	r0, [r3, #0]
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	20002164 	.word	0x20002164

08004fe4 <__libc_init_array>:
 8004fe4:	b570      	push	{r4, r5, r6, lr}
 8004fe6:	4d0d      	ldr	r5, [pc, #52]	@ (800501c <__libc_init_array+0x38>)
 8004fe8:	4c0d      	ldr	r4, [pc, #52]	@ (8005020 <__libc_init_array+0x3c>)
 8004fea:	1b64      	subs	r4, r4, r5
 8004fec:	10a4      	asrs	r4, r4, #2
 8004fee:	2600      	movs	r6, #0
 8004ff0:	42a6      	cmp	r6, r4
 8004ff2:	d109      	bne.n	8005008 <__libc_init_array+0x24>
 8004ff4:	4d0b      	ldr	r5, [pc, #44]	@ (8005024 <__libc_init_array+0x40>)
 8004ff6:	4c0c      	ldr	r4, [pc, #48]	@ (8005028 <__libc_init_array+0x44>)
 8004ff8:	f000 f818 	bl	800502c <_init>
 8004ffc:	1b64      	subs	r4, r4, r5
 8004ffe:	10a4      	asrs	r4, r4, #2
 8005000:	2600      	movs	r6, #0
 8005002:	42a6      	cmp	r6, r4
 8005004:	d105      	bne.n	8005012 <__libc_init_array+0x2e>
 8005006:	bd70      	pop	{r4, r5, r6, pc}
 8005008:	f855 3b04 	ldr.w	r3, [r5], #4
 800500c:	4798      	blx	r3
 800500e:	3601      	adds	r6, #1
 8005010:	e7ee      	b.n	8004ff0 <__libc_init_array+0xc>
 8005012:	f855 3b04 	ldr.w	r3, [r5], #4
 8005016:	4798      	blx	r3
 8005018:	3601      	adds	r6, #1
 800501a:	e7f2      	b.n	8005002 <__libc_init_array+0x1e>
 800501c:	0800557c 	.word	0x0800557c
 8005020:	0800557c 	.word	0x0800557c
 8005024:	0800557c 	.word	0x0800557c
 8005028:	08005580 	.word	0x08005580

0800502c <_init>:
 800502c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800502e:	bf00      	nop
 8005030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005032:	bc08      	pop	{r3}
 8005034:	469e      	mov	lr, r3
 8005036:	4770      	bx	lr

08005038 <_fini>:
 8005038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800503a:	bf00      	nop
 800503c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800503e:	bc08      	pop	{r3}
 8005040:	469e      	mov	lr, r3
 8005042:	4770      	bx	lr
