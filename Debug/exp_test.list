
exp_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075bc  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000960  08007744  08007744  00008744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080a4  080080a4  0000a2e4  2**0
                  CONTENTS
  4 .ARM          00000008  080080a4  080080a4  000090a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080ac  080080ac  0000a2e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080ac  080080ac  000090ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080080b0  080080b0  000090b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002e4  20000000  080080b4  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a2e4  2**0
                  CONTENTS
 10 .bss          000005f0  200002e4  200002e4  0000a2e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008d4  200008d4  0000a2e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a2e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f04c  00000000  00000000  0000a314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034c3  00000000  00000000  00019360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001050  00000000  00000000  0001c828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c05  00000000  00000000  0001d878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002124c  00000000  00000000  0001e47d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000108d6  00000000  00000000  0003f6c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b030d  00000000  00000000  0004ff9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001002ac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000043a8  00000000  00000000  001002f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  00104698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200002e4 	.word	0x200002e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800772c 	.word	0x0800772c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200002e8 	.word	0x200002e8
 80001c4:	0800772c 	.word	0x0800772c

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_ldivmod>:
 80001ec:	b97b      	cbnz	r3, 800020e <__aeabi_ldivmod+0x22>
 80001ee:	b972      	cbnz	r2, 800020e <__aeabi_ldivmod+0x22>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bfbe      	ittt	lt
 80001f4:	2000      	movlt	r0, #0
 80001f6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80001fa:	e006      	blt.n	800020a <__aeabi_ldivmod+0x1e>
 80001fc:	bf08      	it	eq
 80001fe:	2800      	cmpeq	r0, #0
 8000200:	bf1c      	itt	ne
 8000202:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000206:	f04f 30ff 	movne.w	r0, #4294967295
 800020a:	f000 b9b5 	b.w	8000578 <__aeabi_idiv0>
 800020e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000212:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000216:	2900      	cmp	r1, #0
 8000218:	db09      	blt.n	800022e <__aeabi_ldivmod+0x42>
 800021a:	2b00      	cmp	r3, #0
 800021c:	db1a      	blt.n	8000254 <__aeabi_ldivmod+0x68>
 800021e:	f000 f84d 	bl	80002bc <__udivmoddi4>
 8000222:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000226:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022a:	b004      	add	sp, #16
 800022c:	4770      	bx	lr
 800022e:	4240      	negs	r0, r0
 8000230:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000234:	2b00      	cmp	r3, #0
 8000236:	db1b      	blt.n	8000270 <__aeabi_ldivmod+0x84>
 8000238:	f000 f840 	bl	80002bc <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	4252      	negs	r2, r2
 800024e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000252:	4770      	bx	lr
 8000254:	4252      	negs	r2, r2
 8000256:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800025a:	f000 f82f 	bl	80002bc <__udivmoddi4>
 800025e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000262:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000266:	b004      	add	sp, #16
 8000268:	4240      	negs	r0, r0
 800026a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026e:	4770      	bx	lr
 8000270:	4252      	negs	r2, r2
 8000272:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000276:	f000 f821 	bl	80002bc <__udivmoddi4>
 800027a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800027e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000282:	b004      	add	sp, #16
 8000284:	4252      	negs	r2, r2
 8000286:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028a:	4770      	bx	lr

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b96a 	b.w	8000578 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c0:	9d08      	ldr	r5, [sp, #32]
 80002c2:	460c      	mov	r4, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14e      	bne.n	8000366 <__udivmoddi4+0xaa>
 80002c8:	4694      	mov	ip, r2
 80002ca:	458c      	cmp	ip, r1
 80002cc:	4686      	mov	lr, r0
 80002ce:	fab2 f282 	clz	r2, r2
 80002d2:	d962      	bls.n	800039a <__udivmoddi4+0xde>
 80002d4:	b14a      	cbz	r2, 80002ea <__udivmoddi4+0x2e>
 80002d6:	f1c2 0320 	rsb	r3, r2, #32
 80002da:	4091      	lsls	r1, r2
 80002dc:	fa20 f303 	lsr.w	r3, r0, r3
 80002e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e4:	4319      	orrs	r1, r3
 80002e6:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f f68c 	uxth.w	r6, ip
 80002f2:	fbb1 f4f7 	udiv	r4, r1, r7
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb07 1114 	mls	r1, r7, r4, r1
 80002fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000302:	fb04 f106 	mul.w	r1, r4, r6
 8000306:	4299      	cmp	r1, r3
 8000308:	d90a      	bls.n	8000320 <__udivmoddi4+0x64>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000312:	f080 8112 	bcs.w	800053a <__udivmoddi4+0x27e>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 810f 	bls.w	800053a <__udivmoddi4+0x27e>
 800031c:	3c02      	subs	r4, #2
 800031e:	4463      	add	r3, ip
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb1 f0f7 	udiv	r0, r1, r7
 800032a:	fb07 1110 	mls	r1, r7, r0, r1
 800032e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000332:	fb00 f606 	mul.w	r6, r0, r6
 8000336:	429e      	cmp	r6, r3
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x94>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000342:	f080 80fc 	bcs.w	800053e <__udivmoddi4+0x282>
 8000346:	429e      	cmp	r6, r3
 8000348:	f240 80f9 	bls.w	800053e <__udivmoddi4+0x282>
 800034c:	4463      	add	r3, ip
 800034e:	3802      	subs	r0, #2
 8000350:	1b9b      	subs	r3, r3, r6
 8000352:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa6>
 800035a:	40d3      	lsrs	r3, r2
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xba>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb4>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa6>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x150>
 800037e:	42a3      	cmp	r3, r4
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xcc>
 8000382:	4290      	cmp	r0, r2
 8000384:	f0c0 80f0 	bcc.w	8000568 <__udivmoddi4+0x2ac>
 8000388:	1a86      	subs	r6, r0, r2
 800038a:	eb64 0303 	sbc.w	r3, r4, r3
 800038e:	2001      	movs	r0, #1
 8000390:	2d00      	cmp	r5, #0
 8000392:	d0e6      	beq.n	8000362 <__udivmoddi4+0xa6>
 8000394:	e9c5 6300 	strd	r6, r3, [r5]
 8000398:	e7e3      	b.n	8000362 <__udivmoddi4+0xa6>
 800039a:	2a00      	cmp	r2, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x204>
 80003a0:	eba1 040c 	sub.w	r4, r1, ip
 80003a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003a8:	fa1f f78c 	uxth.w	r7, ip
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003b6:	fb08 4416 	mls	r4, r8, r6, r4
 80003ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003be:	fb07 f006 	mul.w	r0, r7, r6
 80003c2:	4298      	cmp	r0, r3
 80003c4:	d908      	bls.n	80003d8 <__udivmoddi4+0x11c>
 80003c6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ca:	f106 34ff 	add.w	r4, r6, #4294967295
 80003ce:	d202      	bcs.n	80003d6 <__udivmoddi4+0x11a>
 80003d0:	4298      	cmp	r0, r3
 80003d2:	f200 80cd 	bhi.w	8000570 <__udivmoddi4+0x2b4>
 80003d6:	4626      	mov	r6, r4
 80003d8:	1a1c      	subs	r4, r3, r0
 80003da:	fa1f f38e 	uxth.w	r3, lr
 80003de:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e2:	fb08 4410 	mls	r4, r8, r0, r4
 80003e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ea:	fb00 f707 	mul.w	r7, r0, r7
 80003ee:	429f      	cmp	r7, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x148>
 80003f2:	eb1c 0303 	adds.w	r3, ip, r3
 80003f6:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x146>
 80003fc:	429f      	cmp	r7, r3
 80003fe:	f200 80b0 	bhi.w	8000562 <__udivmoddi4+0x2a6>
 8000402:	4620      	mov	r0, r4
 8000404:	1bdb      	subs	r3, r3, r7
 8000406:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x9c>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa20 fc06 	lsr.w	ip, r0, r6
 800041c:	fa04 f301 	lsl.w	r3, r4, r1
 8000420:	ea43 030c 	orr.w	r3, r3, ip
 8000424:	40f4      	lsrs	r4, r6
 8000426:	fa00 f801 	lsl.w	r8, r0, r1
 800042a:	0c38      	lsrs	r0, r7, #16
 800042c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000430:	fbb4 fef0 	udiv	lr, r4, r0
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	fb00 441e 	mls	r4, r0, lr, r4
 800043c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000440:	fb0e f90c 	mul.w	r9, lr, ip
 8000444:	45a1      	cmp	r9, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x1a6>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000452:	f080 8084 	bcs.w	800055e <__udivmoddi4+0x2a2>
 8000456:	45a1      	cmp	r9, r4
 8000458:	f240 8081 	bls.w	800055e <__udivmoddi4+0x2a2>
 800045c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000460:	443c      	add	r4, r7
 8000462:	eba4 0409 	sub.w	r4, r4, r9
 8000466:	fa1f f983 	uxth.w	r9, r3
 800046a:	fbb4 f3f0 	udiv	r3, r4, r0
 800046e:	fb00 4413 	mls	r4, r0, r3, r4
 8000472:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000476:	fb03 fc0c 	mul.w	ip, r3, ip
 800047a:	45a4      	cmp	ip, r4
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x1d2>
 800047e:	193c      	adds	r4, r7, r4
 8000480:	f103 30ff 	add.w	r0, r3, #4294967295
 8000484:	d267      	bcs.n	8000556 <__udivmoddi4+0x29a>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d965      	bls.n	8000556 <__udivmoddi4+0x29a>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000492:	fba0 9302 	umull	r9, r3, r0, r2
 8000496:	eba4 040c 	sub.w	r4, r4, ip
 800049a:	429c      	cmp	r4, r3
 800049c:	46ce      	mov	lr, r9
 800049e:	469c      	mov	ip, r3
 80004a0:	d351      	bcc.n	8000546 <__udivmoddi4+0x28a>
 80004a2:	d04e      	beq.n	8000542 <__udivmoddi4+0x286>
 80004a4:	b155      	cbz	r5, 80004bc <__udivmoddi4+0x200>
 80004a6:	ebb8 030e 	subs.w	r3, r8, lr
 80004aa:	eb64 040c 	sbc.w	r4, r4, ip
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	40cb      	lsrs	r3, r1
 80004b4:	431e      	orrs	r6, r3
 80004b6:	40cc      	lsrs	r4, r1
 80004b8:	e9c5 6400 	strd	r6, r4, [r5]
 80004bc:	2100      	movs	r1, #0
 80004be:	e750      	b.n	8000362 <__udivmoddi4+0xa6>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f103 	lsr.w	r1, r0, r3
 80004c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80004cc:	fa24 f303 	lsr.w	r3, r4, r3
 80004d0:	4094      	lsls	r4, r2
 80004d2:	430c      	orrs	r4, r1
 80004d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004d8:	fa00 fe02 	lsl.w	lr, r0, r2
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e4:	fb08 3110 	mls	r1, r8, r0, r3
 80004e8:	0c23      	lsrs	r3, r4, #16
 80004ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ee:	fb00 f107 	mul.w	r1, r0, r7
 80004f2:	4299      	cmp	r1, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x24c>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 36ff 	add.w	r6, r0, #4294967295
 80004fe:	d22c      	bcs.n	800055a <__udivmoddi4+0x29e>
 8000500:	4299      	cmp	r1, r3
 8000502:	d92a      	bls.n	800055a <__udivmoddi4+0x29e>
 8000504:	3802      	subs	r0, #2
 8000506:	4463      	add	r3, ip
 8000508:	1a5b      	subs	r3, r3, r1
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000510:	fb08 3311 	mls	r3, r8, r1, r3
 8000514:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000518:	fb01 f307 	mul.w	r3, r1, r7
 800051c:	42a3      	cmp	r3, r4
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x276>
 8000520:	eb1c 0404 	adds.w	r4, ip, r4
 8000524:	f101 36ff 	add.w	r6, r1, #4294967295
 8000528:	d213      	bcs.n	8000552 <__udivmoddi4+0x296>
 800052a:	42a3      	cmp	r3, r4
 800052c:	d911      	bls.n	8000552 <__udivmoddi4+0x296>
 800052e:	3902      	subs	r1, #2
 8000530:	4464      	add	r4, ip
 8000532:	1ae4      	subs	r4, r4, r3
 8000534:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000538:	e739      	b.n	80003ae <__udivmoddi4+0xf2>
 800053a:	4604      	mov	r4, r0
 800053c:	e6f0      	b.n	8000320 <__udivmoddi4+0x64>
 800053e:	4608      	mov	r0, r1
 8000540:	e706      	b.n	8000350 <__udivmoddi4+0x94>
 8000542:	45c8      	cmp	r8, r9
 8000544:	d2ae      	bcs.n	80004a4 <__udivmoddi4+0x1e8>
 8000546:	ebb9 0e02 	subs.w	lr, r9, r2
 800054a:	eb63 0c07 	sbc.w	ip, r3, r7
 800054e:	3801      	subs	r0, #1
 8000550:	e7a8      	b.n	80004a4 <__udivmoddi4+0x1e8>
 8000552:	4631      	mov	r1, r6
 8000554:	e7ed      	b.n	8000532 <__udivmoddi4+0x276>
 8000556:	4603      	mov	r3, r0
 8000558:	e799      	b.n	800048e <__udivmoddi4+0x1d2>
 800055a:	4630      	mov	r0, r6
 800055c:	e7d4      	b.n	8000508 <__udivmoddi4+0x24c>
 800055e:	46d6      	mov	lr, sl
 8000560:	e77f      	b.n	8000462 <__udivmoddi4+0x1a6>
 8000562:	4463      	add	r3, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e74d      	b.n	8000404 <__udivmoddi4+0x148>
 8000568:	4606      	mov	r6, r0
 800056a:	4623      	mov	r3, r4
 800056c:	4608      	mov	r0, r1
 800056e:	e70f      	b.n	8000390 <__udivmoddi4+0xd4>
 8000570:	3e02      	subs	r6, #2
 8000572:	4463      	add	r3, ip
 8000574:	e730      	b.n	80003d8 <__udivmoddi4+0x11c>
 8000576:	bf00      	nop

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8000580:	4b07      	ldr	r3, [pc, #28]	@ (80005a0 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800058c:	bf0c      	ite	eq
 800058e:	2301      	moveq	r3, #1
 8000590:	2300      	movne	r3, #0
 8000592:	b2db      	uxtb	r3, r3
}
 8000594:	4618      	mov	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	e000e010 	.word	0xe000e010

080005a4 <delay_us>:
#include "delay.h"
#include "stm32f4xx_ll_utils.h"
#include "stm32f4xx_ll_cortex.h"

void delay_us(uint8_t micro_seconds)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
    uint32_t ticks = micro_seconds * (SystemCoreClock / 1000000);
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	4a0c      	ldr	r2, [pc, #48]	@ (80005e4 <delay_us+0x40>)
 80005b2:	6812      	ldr	r2, [r2, #0]
 80005b4:	490c      	ldr	r1, [pc, #48]	@ (80005e8 <delay_us+0x44>)
 80005b6:	fba1 1202 	umull	r1, r2, r1, r2
 80005ba:	0c92      	lsrs	r2, r2, #18
 80005bc:	fb02 f303 	mul.w	r3, r2, r3
 80005c0:	60fb      	str	r3, [r7, #12]
    while (ticks > 0)
 80005c2:	e007      	b.n	80005d4 <delay_us+0x30>
    {
        if (LL_SYSTICK_IsActiveCounterFlag())
 80005c4:	f7ff ffda 	bl	800057c <LL_SYSTICK_IsActiveCounterFlag>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d002      	beq.n	80005d4 <delay_us+0x30>
        {
            ticks--;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	3b01      	subs	r3, #1
 80005d2:	60fb      	str	r3, [r7, #12]
    while (ticks > 0)
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d1f4      	bne.n	80005c4 <delay_us+0x20>
        }
    }
}
 80005da:	bf00      	nop
 80005dc:	bf00      	nop
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20000218 	.word	0x20000218
 80005e8:	431bde83 	.word	0x431bde83

080005ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	6039      	str	r1, [r7, #0]
 80005f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	db0a      	blt.n	8000616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	b2da      	uxtb	r2, r3
 8000604:	490c      	ldr	r1, [pc, #48]	@ (8000638 <__NVIC_SetPriority+0x4c>)
 8000606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060a:	0112      	lsls	r2, r2, #4
 800060c:	b2d2      	uxtb	r2, r2
 800060e:	440b      	add	r3, r1
 8000610:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000614:	e00a      	b.n	800062c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	b2da      	uxtb	r2, r3
 800061a:	4908      	ldr	r1, [pc, #32]	@ (800063c <__NVIC_SetPriority+0x50>)
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	f003 030f 	and.w	r3, r3, #15
 8000622:	3b04      	subs	r3, #4
 8000624:	0112      	lsls	r2, r2, #4
 8000626:	b2d2      	uxtb	r2, r2
 8000628:	440b      	add	r3, r1
 800062a:	761a      	strb	r2, [r3, #24]
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	e000e100 	.word	0xe000e100
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	3b01      	subs	r3, #1
 800064c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000650:	d301      	bcc.n	8000656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000652:	2301      	movs	r3, #1
 8000654:	e00f      	b.n	8000676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000656:	4a0a      	ldr	r2, [pc, #40]	@ (8000680 <SysTick_Config+0x40>)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	3b01      	subs	r3, #1
 800065c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800065e:	210f      	movs	r1, #15
 8000660:	f04f 30ff 	mov.w	r0, #4294967295
 8000664:	f7ff ffc2 	bl	80005ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000668:	4b05      	ldr	r3, [pc, #20]	@ (8000680 <SysTick_Config+0x40>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800066e:	4b04      	ldr	r3, [pc, #16]	@ (8000680 <SysTick_Config+0x40>)
 8000670:	2207      	movs	r2, #7
 8000672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000674:	2300      	movs	r3, #0
}
 8000676:	4618      	mov	r0, r3
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	e000e010 	.word	0xe000e010

08000684 <systick_timer_start>:

#include "systick.h"
#include "stm32f4xx.h"

void systick_timer_start(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
    // Reset SysTick counter value
   // SysTick->VAL = 0;

    // Enable SysTick counter
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8000688:	4b05      	ldr	r3, [pc, #20]	@ (80006a0 <systick_timer_start+0x1c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a04      	ldr	r2, [pc, #16]	@ (80006a0 <systick_timer_start+0x1c>)
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	6013      	str	r3, [r2, #0]
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	e000e010 	.word	0xe000e010

080006a4 <systick_timer_init>:
    // Disable SysTick counter
   // SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
}

void systick_timer_init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
    // Set SysTick to trigger interrupt every 1ms
    SysTick_Config(SystemCoreClock/1000);
 80006a8:	4b05      	ldr	r3, [pc, #20]	@ (80006c0 <systick_timer_init+0x1c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a05      	ldr	r2, [pc, #20]	@ (80006c4 <systick_timer_init+0x20>)
 80006ae:	fba2 2303 	umull	r2, r3, r2, r3
 80006b2:	099b      	lsrs	r3, r3, #6
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff ffc3 	bl	8000640 <SysTick_Config>
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000218 	.word	0x20000218
 80006c4:	10624dd3 	.word	0x10624dd3

080006c8 <__NVIC_EnableIRQ>:
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	db0b      	blt.n	80006f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	f003 021f 	and.w	r2, r3, #31
 80006e0:	4907      	ldr	r1, [pc, #28]	@ (8000700 <__NVIC_EnableIRQ+0x38>)
 80006e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e6:	095b      	lsrs	r3, r3, #5
 80006e8:	2001      	movs	r0, #1
 80006ea:	fa00 f202 	lsl.w	r2, r0, r2
 80006ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e000e100 	.word	0xe000e100

08000704 <__NVIC_DisableIRQ>:
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800070e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000712:	2b00      	cmp	r3, #0
 8000714:	db12      	blt.n	800073c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	f003 021f 	and.w	r2, r3, #31
 800071c:	490a      	ldr	r1, [pc, #40]	@ (8000748 <__NVIC_DisableIRQ+0x44>)
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	095b      	lsrs	r3, r3, #5
 8000724:	2001      	movs	r0, #1
 8000726:	fa00 f202 	lsl.w	r2, r0, r2
 800072a:	3320      	adds	r3, #32
 800072c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000730:	f3bf 8f4f 	dsb	sy
}
 8000734:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000736:	f3bf 8f6f 	isb	sy
}
 800073a:	bf00      	nop
}
 800073c:	bf00      	nop
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	e000e100 	.word	0xe000e100

0800074c <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800074c:	b480      	push	{r7}
 800074e:	b089      	sub	sp, #36	@ 0x24
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	330c      	adds	r3, #12
 8000758:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	e853 3f00 	ldrex	r3, [r3]
 8000760:	60bb      	str	r3, [r7, #8]
   return(result);
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	f043 0320 	orr.w	r3, r3, #32
 8000768:	61fb      	str	r3, [r7, #28]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	330c      	adds	r3, #12
 800076e:	69fa      	ldr	r2, [r7, #28]
 8000770:	61ba      	str	r2, [r7, #24]
 8000772:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000774:	6979      	ldr	r1, [r7, #20]
 8000776:	69ba      	ldr	r2, [r7, #24]
 8000778:	e841 2300 	strex	r3, r2, [r1]
 800077c:	613b      	str	r3, [r7, #16]
   return(result);
 800077e:	693b      	ldr	r3, [r7, #16]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d1e7      	bne.n	8000754 <LL_USART_EnableIT_RXNE+0x8>
}
 8000784:	bf00      	nop
 8000786:	bf00      	nop
 8000788:	3724      	adds	r7, #36	@ 0x24
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr

08000792 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8000792:	b480      	push	{r7}
 8000794:	b089      	sub	sp, #36	@ 0x24
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	330c      	adds	r3, #12
 800079e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	e853 3f00 	ldrex	r3, [r3]
 80007a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ae:	61fb      	str	r3, [r7, #28]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	330c      	adds	r3, #12
 80007b4:	69fa      	ldr	r2, [r7, #28]
 80007b6:	61ba      	str	r2, [r7, #24]
 80007b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80007ba:	6979      	ldr	r1, [r7, #20]
 80007bc:	69ba      	ldr	r2, [r7, #24]
 80007be:	e841 2300 	strex	r3, r2, [r1]
 80007c2:	613b      	str	r3, [r7, #16]
   return(result);
 80007c4:	693b      	ldr	r3, [r7, #16]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d1e7      	bne.n	800079a <LL_USART_EnableIT_TXE+0x8>
}
 80007ca:	bf00      	nop
 80007cc:	bf00      	nop
 80007ce:	3724      	adds	r7, #36	@ 0x24
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 80007d8:	b480      	push	{r7}
 80007da:	b089      	sub	sp, #36	@ 0x24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	330c      	adds	r3, #12
 80007e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	e853 3f00 	ldrex	r3, [r3]
 80007ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80007f4:	61fb      	str	r3, [r7, #28]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	330c      	adds	r3, #12
 80007fa:	69fa      	ldr	r2, [r7, #28]
 80007fc:	61ba      	str	r2, [r7, #24]
 80007fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000800:	6979      	ldr	r1, [r7, #20]
 8000802:	69ba      	ldr	r2, [r7, #24]
 8000804:	e841 2300 	strex	r3, r2, [r1]
 8000808:	613b      	str	r3, [r7, #16]
   return(result);
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d1e7      	bne.n	80007e0 <LL_USART_DisableIT_TXE+0x8>
}
 8000810:	bf00      	nop
 8000812:	bf00      	nop
 8000814:	3724      	adds	r7, #36	@ 0x24
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 800081e:	b480      	push	{r7}
 8000820:	b083      	sub	sp, #12
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	68db      	ldr	r3, [r3, #12]
 800082a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800082e:	2b80      	cmp	r3, #128	@ 0x80
 8000830:	bf0c      	ite	eq
 8000832:	2301      	moveq	r3, #1
 8000834:	2300      	movne	r3, #0
 8000836:	b2db      	uxtb	r3, r3
}
 8000838:	4618      	mov	r0, r3
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000850:	78fa      	ldrb	r2, [r7, #3]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	605a      	str	r2, [r3, #4]
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <UART_Init>:
 */

void UART_Init(uart_stdio_typedef* p_uart, USART_TypeDef* _handle,
                IRQn_Type _irqn, char* _p_TX_buffer, char* _p_RX_buffer,
                uint16_t _TX_size, uint16_t _RX_size)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b084      	sub	sp, #16
 8000866:	af00      	add	r7, sp, #0
 8000868:	60f8      	str	r0, [r7, #12]
 800086a:	60b9      	str	r1, [r7, #8]
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	4613      	mov	r3, r2
 8000870:	71fb      	strb	r3, [r7, #7]
    p_uart->handle  = _handle;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	68ba      	ldr	r2, [r7, #8]
 8000876:	601a      	str	r2, [r3, #0]
    p_uart->irqn    = _irqn;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	79fa      	ldrb	r2, [r7, #7]
 800087c:	711a      	strb	r2, [r3, #4]
    p_uart->TX_size = _TX_size;
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	8bba      	ldrh	r2, [r7, #28]
 8000882:	80da      	strh	r2, [r3, #6]
    p_uart->RX_size = _RX_size;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	8c3a      	ldrh	r2, [r7, #32]
 8000888:	811a      	strh	r2, [r3, #8]

    p_uart->p_TX_buffer = _p_TX_buffer;
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	683a      	ldr	r2, [r7, #0]
 800088e:	60da      	str	r2, [r3, #12]
    p_uart->p_RX_buffer = _p_RX_buffer;
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	69ba      	ldr	r2, [r7, #24]
 8000894:	615a      	str	r2, [r3, #20]

    p_uart->TX_write_index  = 0;
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	2200      	movs	r2, #0
 800089a:	821a      	strh	r2, [r3, #16]
    p_uart->TX_read_index   = 0;
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	2200      	movs	r2, #0
 80008a0:	825a      	strh	r2, [r3, #18]
    p_uart->RX_write_index  = 0;
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	2200      	movs	r2, #0
 80008a6:	831a      	strh	r2, [r3, #24]
    p_uart->RX_read_index   = 0;
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	2200      	movs	r2, #0
 80008ac:	835a      	strh	r2, [r3, #26]

    if(TX_BUFFER_SIZE(p_uart) != 0)
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	88db      	ldrh	r3, [r3, #6]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d006      	beq.n	80008c4 <UART_Init+0x62>
    {
        //p_uart->p_TX_buffer = (uint8_t *)malloc(TX_BUFFER_SIZE(p_uart) * sizeof(uint8_t));
        memset((void *)p_uart->p_TX_buffer, 0, sizeof(p_uart->p_TX_buffer));
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	68db      	ldr	r3, [r3, #12]
 80008ba:	2204      	movs	r2, #4
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f006 ff02 	bl	80076c8 <memset>
    }

    if(RX_BUFFER_SIZE(p_uart) != 0)
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	891b      	ldrh	r3, [r3, #8]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d006      	beq.n	80008da <UART_Init+0x78>
    {
        //p_uart->p_RX_buffer = (uint8_t *)malloc(RX_BUFFER_SIZE(p_uart) * sizeof(uint8_t));
        memset((void *)p_uart->p_RX_buffer, 0, sizeof(p_uart->p_RX_buffer));
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	695b      	ldr	r3, [r3, #20]
 80008d0:	2204      	movs	r2, #4
 80008d2:	2100      	movs	r1, #0
 80008d4:	4618      	mov	r0, r3
 80008d6:	f006 fef7 	bl	80076c8 <memset>
    }

    // Disable the TX IT
    LL_USART_DisableIT_TXE(p_uart->handle);
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff ff7a 	bl	80007d8 <LL_USART_DisableIT_TXE>

    // Start the RX IT, it will only run when there is a data send to the MCU.
    LL_USART_EnableIT_RXNE(p_uart->handle);
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff2f 	bl	800074c <LL_USART_EnableIT_RXNE>
}
 80008ee:	bf00      	nop
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <UART_Send_Char>:
//!
//! \param pcBuf points to a buffer containing the string to transmit.
//
//*****************************************************************************
void UART_Send_Char(uart_stdio_typedef* p_uart, const char Char)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b082      	sub	sp, #8
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
 80008fe:	460b      	mov	r3, r1
 8000900:	70fb      	strb	r3, [r7, #3]
	UART_Write(p_uart, &Char, 1);
 8000902:	1cfb      	adds	r3, r7, #3
 8000904:	2201      	movs	r2, #1
 8000906:	4619      	mov	r1, r3
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 f817 	bl	800093c <UART_Write>
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <UART_Send_String>:
//!
//! \param pcBuf points to a buffer containing the string to transmit.
//
//*****************************************************************************
void UART_Send_String(uart_stdio_typedef* p_uart, const char *pcBuf)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b082      	sub	sp, #8
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
 800091e:	6039      	str	r1, [r7, #0]
	UART_Write(p_uart, pcBuf, strlen(pcBuf));
 8000920:	6838      	ldr	r0, [r7, #0]
 8000922:	f7ff fc5b 	bl	80001dc <strlen>
 8000926:	4603      	mov	r3, r0
 8000928:	b29b      	uxth	r3, r3
 800092a:	461a      	mov	r2, r3
 800092c:	6839      	ldr	r1, [r7, #0]
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f000 f804 	bl	800093c <UART_Write>
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <UART_Write>:
//!
//! \return Returns the count of characters written.
//
//*****************************************************************************
uint16_t UART_Write(uart_stdio_typedef* p_uart, const char *pcBuf, uint16_t ui16Len)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	4613      	mov	r3, r2
 8000948:	80fb      	strh	r3, [r7, #6]
    // Check for valid arguments.
    //
    //
    // Send the characters
    //
    for(uIdx = 0; uIdx < ui16Len; uIdx++)
 800094a:	2300      	movs	r3, #0
 800094c:	75fb      	strb	r3, [r7, #23]
 800094e:	e053      	b.n	80009f8 <UART_Write+0xbc>
    {
        //
        // If the character to the UART is \n, then add a \r before it so that
        // \n is translated to \n\r in the output. This is for the enter key.
        //
        if(pcBuf[uIdx] == '\n')
 8000950:	7dfb      	ldrb	r3, [r7, #23]
 8000952:	68ba      	ldr	r2, [r7, #8]
 8000954:	4413      	add	r3, r2
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b0a      	cmp	r3, #10
 800095a:	d11e      	bne.n	800099a <UART_Write+0x5e>
        {
            if(!TX_BUFFER_FULL(p_uart))
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	f103 0012 	add.w	r0, r3, #18
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	f103 0110 	add.w	r1, r3, #16
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	88db      	ldrh	r3, [r3, #6]
 800096c:	461a      	mov	r2, r3
 800096e:	f000 fa8b 	bl	8000e88 <UART_is_buffer_full>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d145      	bne.n	8000a04 <UART_Write+0xc8>
            {
                p_uart->p_TX_buffer[p_uart->TX_write_index] = '\r';
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	68fa      	ldr	r2, [r7, #12]
 800097e:	8a12      	ldrh	r2, [r2, #16]
 8000980:	b292      	uxth	r2, r2
 8000982:	4413      	add	r3, r2
 8000984:	220d      	movs	r2, #13
 8000986:	701a      	strb	r2, [r3, #0]
                ADVANCE_TX_WRITE_INDEX(p_uart);
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f103 0210 	add.w	r2, r3, #16
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	88db      	ldrh	r3, [r3, #6]
 8000992:	4619      	mov	r1, r3
 8000994:	4610      	mov	r0, r2
 8000996:	f000 fab0 	bl	8000efa <UART_advance_buffer_index>
                //
                break;
            }
        }

        if(!TX_BUFFER_FULL(p_uart))
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	f103 0012 	add.w	r0, r3, #18
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f103 0110 	add.w	r1, r3, #16
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	88db      	ldrh	r3, [r3, #6]
 80009aa:	461a      	mov	r2, r3
 80009ac:	f000 fa6c 	bl	8000e88 <UART_is_buffer_full>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d114      	bne.n	80009e0 <UART_Write+0xa4>
        {
        	p_uart->p_TX_buffer[p_uart->TX_write_index] = pcBuf[uIdx];
 80009b6:	7dfb      	ldrb	r3, [r7, #23]
 80009b8:	68ba      	ldr	r2, [r7, #8]
 80009ba:	441a      	add	r2, r3
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	68f9      	ldr	r1, [r7, #12]
 80009c2:	8a09      	ldrh	r1, [r1, #16]
 80009c4:	b289      	uxth	r1, r1
 80009c6:	440b      	add	r3, r1
 80009c8:	7812      	ldrb	r2, [r2, #0]
 80009ca:	701a      	strb	r2, [r3, #0]
            ADVANCE_TX_WRITE_INDEX(p_uart);
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	f103 0210 	add.w	r2, r3, #16
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	88db      	ldrh	r3, [r3, #6]
 80009d6:	4619      	mov	r1, r3
 80009d8:	4610      	mov	r0, r2
 80009da:	f000 fa8e 	bl	8000efa <UART_advance_buffer_index>
 80009de:	e008      	b.n	80009f2 <UART_Write+0xb6>
        else
        {
            //
            // Buffer is full - discard remaining characters and return.
            //
            p_uart->p_TX_buffer[p_uart->TX_write_index] = '\r';
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	68fa      	ldr	r2, [r7, #12]
 80009e6:	8a12      	ldrh	r2, [r2, #16]
 80009e8:	b292      	uxth	r2, r2
 80009ea:	4413      	add	r3, r2
 80009ec:	220d      	movs	r2, #13
 80009ee:	701a      	strb	r2, [r3, #0]
            break;
 80009f0:	e009      	b.n	8000a06 <UART_Write+0xca>
    for(uIdx = 0; uIdx < ui16Len; uIdx++)
 80009f2:	7dfb      	ldrb	r3, [r7, #23]
 80009f4:	3301      	adds	r3, #1
 80009f6:	75fb      	strb	r3, [r7, #23]
 80009f8:	7dfb      	ldrb	r3, [r7, #23]
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	88fa      	ldrh	r2, [r7, #6]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d8a6      	bhi.n	8000950 <UART_Write+0x14>
 8000a02:	e000      	b.n	8000a06 <UART_Write+0xca>
                break;
 8000a04:	bf00      	nop

    //
    // If the usart txe irq is disable, this mean an usart phase is finished
    // we need to enable the txe irq and kick start the transmit process.
    //
    if (LL_USART_IsEnabledIT_TXE(p_uart->handle) == false)
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff ff07 	bl	800081e <LL_USART_IsEnabledIT_TXE>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d107      	bne.n	8000a26 <UART_Write+0xea>
        // if turn on TXE b4 prime transmit create a
        // bug where the index = 2 char don't get
        // send.

        //LL_USART_EnableIT_TXE(p_uart->handle);
        UART_Prime_Transmit(p_uart);
 8000a16:	68f8      	ldr	r0, [r7, #12]
 8000a18:	f000 fa8b 	bl	8000f32 <UART_Prime_Transmit>
        LL_USART_EnableIT_TXE(p_uart->handle);
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff feb6 	bl	8000792 <LL_USART_EnableIT_TXE>
    }

    //
    // Return the number of characters written.
    //
    return(uIdx);
 8000a26:	7dfb      	ldrb	r3, [r7, #23]
 8000a28:	b29b      	uxth	r3, r3
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <UART_Printf>:
//!
//! \return None.
//
//*****************************************************************************
void UART_Printf(uart_stdio_typedef* p_uart, const char *pc_string, ...)
{
 8000a34:	b40e      	push	{r1, r2, r3}
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b08d      	sub	sp, #52	@ 0x34
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
    // Check the arguments.
    //

    va_list vaArgP;

    va_start(vaArgP, pc_string);
 8000a3e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a42:	60bb      	str	r3, [r7, #8]

    //
    // Loop while there are more characters in the string.
    //
    while(*pc_string)
 8000a44:	e1e5      	b.n	8000e12 <UART_Printf+0x3de>
    {
        //
        // Find the first non-% character, or the end of the string.
        //
        for(ui16Idx = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000a4a:	e002      	b.n	8000a52 <UART_Printf+0x1e>
            (pc_string[ui16Idx] != '%') && (pc_string[ui16Idx] != '\0');
            ui16Idx++)
 8000a4c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000a4e:	3301      	adds	r3, #1
 8000a50:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            (pc_string[ui16Idx] != '%') && (pc_string[ui16Idx] != '\0');
 8000a52:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000a54:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000a56:	4413      	add	r3, r2
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b25      	cmp	r3, #37	@ 0x25
 8000a5c:	d005      	beq.n	8000a6a <UART_Printf+0x36>
 8000a5e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000a60:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000a62:	4413      	add	r3, r2
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d1f0      	bne.n	8000a4c <UART_Printf+0x18>
        }

        //
        // Write this portion of the string.
        //
        UART_Write(p_uart, pc_string, ui16Idx);
 8000a6a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f7ff ff63 	bl	800093c <UART_Write>

        //
        // Skip the portion of the string that was written.
        //
        pc_string += ui16Idx;
 8000a76:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000a78:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000a7a:	4413      	add	r3, r2
 8000a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c

        //
        // See if the next character is a %.
        //
        if(*pc_string == '%')
 8000a7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b25      	cmp	r3, #37	@ 0x25
 8000a84:	f040 81c5 	bne.w	8000e12 <UART_Printf+0x3de>
        {
            //
            // Skip the %.
            //
            pc_string++;
 8000a88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c

            //
            // Set the digit count to zero, and the fill character to space
            // (in other words, to the defaults).
            //
            ui16Count = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	857b      	strh	r3, [r7, #42]	@ 0x2a
            cFill = ' ';
 8000a92:	2320      	movs	r3, #32
 8000a94:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
again:

            //
            // Determine how to handle the next character.
            //
            switch(*pc_string++)
 8000a98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a9a:	1c5a      	adds	r2, r3, #1
 8000a9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	3b25      	subs	r3, #37	@ 0x25
 8000aa2:	2b53      	cmp	r3, #83	@ 0x53
 8000aa4:	f200 81ae 	bhi.w	8000e04 <UART_Printf+0x3d0>
 8000aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8000ab0 <UART_Printf+0x7c>)
 8000aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aae:	bf00      	nop
 8000ab0:	08000df5 	.word	0x08000df5
 8000ab4:	08000e05 	.word	0x08000e05
 8000ab8:	08000e05 	.word	0x08000e05
 8000abc:	08000e05 	.word	0x08000e05
 8000ac0:	08000e05 	.word	0x08000e05
 8000ac4:	08000e05 	.word	0x08000e05
 8000ac8:	08000e05 	.word	0x08000e05
 8000acc:	08000e05 	.word	0x08000e05
 8000ad0:	08000e05 	.word	0x08000e05
 8000ad4:	08000e05 	.word	0x08000e05
 8000ad8:	08000e05 	.word	0x08000e05
 8000adc:	08000c01 	.word	0x08000c01
 8000ae0:	08000c01 	.word	0x08000c01
 8000ae4:	08000c01 	.word	0x08000c01
 8000ae8:	08000c01 	.word	0x08000c01
 8000aec:	08000c01 	.word	0x08000c01
 8000af0:	08000c01 	.word	0x08000c01
 8000af4:	08000c01 	.word	0x08000c01
 8000af8:	08000c01 	.word	0x08000c01
 8000afc:	08000c01 	.word	0x08000c01
 8000b00:	08000c01 	.word	0x08000c01
 8000b04:	08000e05 	.word	0x08000e05
 8000b08:	08000e05 	.word	0x08000e05
 8000b0c:	08000e05 	.word	0x08000e05
 8000b10:	08000e05 	.word	0x08000e05
 8000b14:	08000e05 	.word	0x08000e05
 8000b18:	08000e05 	.word	0x08000e05
 8000b1c:	08000e05 	.word	0x08000e05
 8000b20:	08000e05 	.word	0x08000e05
 8000b24:	08000e05 	.word	0x08000e05
 8000b28:	08000e05 	.word	0x08000e05
 8000b2c:	08000e05 	.word	0x08000e05
 8000b30:	08000e05 	.word	0x08000e05
 8000b34:	08000e05 	.word	0x08000e05
 8000b38:	08000e05 	.word	0x08000e05
 8000b3c:	08000e05 	.word	0x08000e05
 8000b40:	08000e05 	.word	0x08000e05
 8000b44:	08000e05 	.word	0x08000e05
 8000b48:	08000e05 	.word	0x08000e05
 8000b4c:	08000e05 	.word	0x08000e05
 8000b50:	08000e05 	.word	0x08000e05
 8000b54:	08000e05 	.word	0x08000e05
 8000b58:	08000e05 	.word	0x08000e05
 8000b5c:	08000e05 	.word	0x08000e05
 8000b60:	08000e05 	.word	0x08000e05
 8000b64:	08000e05 	.word	0x08000e05
 8000b68:	08000e05 	.word	0x08000e05
 8000b6c:	08000e05 	.word	0x08000e05
 8000b70:	08000e05 	.word	0x08000e05
 8000b74:	08000e05 	.word	0x08000e05
 8000b78:	08000e05 	.word	0x08000e05
 8000b7c:	08000cf5 	.word	0x08000cf5
 8000b80:	08000e05 	.word	0x08000e05
 8000b84:	08000e05 	.word	0x08000e05
 8000b88:	08000e05 	.word	0x08000e05
 8000b8c:	08000e05 	.word	0x08000e05
 8000b90:	08000e05 	.word	0x08000e05
 8000b94:	08000e05 	.word	0x08000e05
 8000b98:	08000e05 	.word	0x08000e05
 8000b9c:	08000e05 	.word	0x08000e05
 8000ba0:	08000e05 	.word	0x08000e05
 8000ba4:	08000e05 	.word	0x08000e05
 8000ba8:	08000c37 	.word	0x08000c37
 8000bac:	08000c53 	.word	0x08000c53
 8000bb0:	08000e05 	.word	0x08000e05
 8000bb4:	08000e05 	.word	0x08000e05
 8000bb8:	08000e05 	.word	0x08000e05
 8000bbc:	08000e05 	.word	0x08000e05
 8000bc0:	08000c53 	.word	0x08000c53
 8000bc4:	08000e05 	.word	0x08000e05
 8000bc8:	08000e05 	.word	0x08000e05
 8000bcc:	08000e05 	.word	0x08000e05
 8000bd0:	08000e05 	.word	0x08000e05
 8000bd4:	08000e05 	.word	0x08000e05
 8000bd8:	08000e05 	.word	0x08000e05
 8000bdc:	08000cf5 	.word	0x08000cf5
 8000be0:	08000e05 	.word	0x08000e05
 8000be4:	08000e05 	.word	0x08000e05
 8000be8:	08000c83 	.word	0x08000c83
 8000bec:	08000e05 	.word	0x08000e05
 8000bf0:	08000cdb 	.word	0x08000cdb
 8000bf4:	08000e05 	.word	0x08000e05
 8000bf8:	08000e05 	.word	0x08000e05
 8000bfc:	08000cf5 	.word	0x08000cf5
                {
                    //
                    // If this is a zero, and it is the first digit, then the
                    // fill character is a zero instead of a space.
                    //
                    if((pc_string[-1] == '0') && (ui16Count == 0))
 8000c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c02:	3b01      	subs	r3, #1
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b30      	cmp	r3, #48	@ 0x30
 8000c08:	d105      	bne.n	8000c16 <UART_Printf+0x1e2>
 8000c0a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d102      	bne.n	8000c16 <UART_Printf+0x1e2>
                    {
                        cFill = '0';
 8000c10:	2330      	movs	r3, #48	@ 0x30
 8000c12:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                    }

                    //
                    // Update the digit count.
                    //
                    ui16Count *= 10;
 8000c16:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000c18:	461a      	mov	r2, r3
 8000c1a:	0092      	lsls	r2, r2, #2
 8000c1c:	4413      	add	r3, r2
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	857b      	strh	r3, [r7, #42]	@ 0x2a
                    ui16Count += pc_string[-1] - '0';
 8000c22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c24:	3b01      	subs	r3, #1
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000c2c:	4413      	add	r3, r2
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	3b30      	subs	r3, #48	@ 0x30
 8000c32:	857b      	strh	r3, [r7, #42]	@ 0x2a

                    //
                    // Get the next character.
                    //
                    goto again;
 8000c34:	e730      	b.n	8000a98 <UART_Printf+0x64>
                case 'c':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui16Value = va_arg(vaArgP, int);
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	1d1a      	adds	r2, r3, #4
 8000c3a:	60ba      	str	r2, [r7, #8]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	83fb      	strh	r3, [r7, #30]

                    //
                    // Print out the character.
                    //
                    UART_Write(p_uart, (char *)&ui16Value, 1);
 8000c42:	f107 031e 	add.w	r3, r7, #30
 8000c46:	2201      	movs	r2, #1
 8000c48:	4619      	mov	r1, r3
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff fe76 	bl	800093c <UART_Write>

                    //
                    // This command has been handled.
                    //
                    break;
 8000c50:	e0df      	b.n	8000e12 <UART_Printf+0x3de>
                case 'i':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui16Value = va_arg(vaArgP, int);
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	1d1a      	adds	r2, r3, #4
 8000c56:	60ba      	str	r2, [r7, #8]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	83fb      	strh	r3, [r7, #30]

                    //
                    // Reset the buffer position.
                    //
                    ui16Pos = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	85bb      	strh	r3, [r7, #44]	@ 0x2c

                    //
                    // If the value is negative, make it positive and indicate
                    // that a minus sign is needed.
                    //
                    if((int16_t)ui16Value < 0)
 8000c62:	8bfb      	ldrh	r3, [r7, #30]
 8000c64:	b21b      	sxth	r3, r3
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	da06      	bge.n	8000c78 <UART_Printf+0x244>
                    {
                        //
                        // Make the value positive.
                        //
                        ui16Value = -(int16_t)ui16Value;
 8000c6a:	8bfb      	ldrh	r3, [r7, #30]
 8000c6c:	425b      	negs	r3, r3
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	83fb      	strh	r3, [r7, #30]

                        //
                        // Indicate that the value is negative.
                        //
                        ui16Neg = 1;
 8000c72:	2301      	movs	r3, #1
 8000c74:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000c76:	e001      	b.n	8000c7c <UART_Printf+0x248>
                    {
                        //
                        // Indicate that the value is positive so that a minus
                        // sign isn't inserted.
                        //
                        ui16Neg = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	84fb      	strh	r3, [r7, #38]	@ 0x26
                    }

                    //
                    // Set the base to 10.
                    //
                    ui16Base = 10;
 8000c7c:	230a      	movs	r3, #10
 8000c7e:	853b      	strh	r3, [r7, #40]	@ 0x28

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
 8000c80:	e044      	b.n	8000d0c <UART_Printf+0x2d8>
                case 's':
                {
                    //
                    // Get the string pointer from the varargs.
                    //
                    pcStr = va_arg(vaArgP, char *);
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	1d1a      	adds	r2, r3, #4
 8000c86:	60ba      	str	r2, [r7, #8]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	623b      	str	r3, [r7, #32]

                    //
                    // Determine the length of the string.
                    //
                    for(ui16Idx = 0; pcStr[ui16Idx] != '\0'; ui16Idx++)
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000c90:	e002      	b.n	8000c98 <UART_Printf+0x264>
 8000c92:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000c94:	3301      	adds	r3, #1
 8000c96:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000c98:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000c9a:	6a3a      	ldr	r2, [r7, #32]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d1f6      	bne.n	8000c92 <UART_Printf+0x25e>
                    }

                    //
                    // Write the string.
                    //
                    UART_Write(p_uart, pcStr, ui16Idx);
 8000ca4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	6a39      	ldr	r1, [r7, #32]
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff fe46 	bl	800093c <UART_Write>

                    //
                    // Write any required padding spaces
                    //
                    if(ui16Count > ui16Idx)
 8000cb0:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8000cb2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	f240 80ab 	bls.w	8000e10 <UART_Printf+0x3dc>
                    {
                        ui16Count -= ui16Idx;
 8000cba:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8000cbc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	857b      	strh	r3, [r7, #42]	@ 0x2a
                        while(ui16Count--)
 8000cc2:	e004      	b.n	8000cce <UART_Printf+0x29a>
                        {
                            UART_Write(p_uart, " ", 1);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	4959      	ldr	r1, [pc, #356]	@ (8000e2c <UART_Printf+0x3f8>)
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f7ff fe37 	bl	800093c <UART_Write>
                        while(ui16Count--)
 8000cce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000cd0:	1e5a      	subs	r2, r3, #1
 8000cd2:	857a      	strh	r2, [r7, #42]	@ 0x2a
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d1f5      	bne.n	8000cc4 <UART_Printf+0x290>
                    }

                    //
                    // This command has been handled.
                    //
                    break;
 8000cd8:	e09a      	b.n	8000e10 <UART_Printf+0x3dc>
                case 'u':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui16Value = va_arg(vaArgP, int);
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	1d1a      	adds	r2, r3, #4
 8000cde:	60ba      	str	r2, [r7, #8]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	83fb      	strh	r3, [r7, #30]

                    //
                    // Reset the buffer position.
                    //
                    ui16Pos = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	85bb      	strh	r3, [r7, #44]	@ 0x2c

                    //
                    // Set the base to 10.
                    //
                    ui16Base = 10;
 8000cea:	230a      	movs	r3, #10
 8000cec:	853b      	strh	r3, [r7, #40]	@ 0x28

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui16Neg = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	84fb      	strh	r3, [r7, #38]	@ 0x26

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
 8000cf2:	e00b      	b.n	8000d0c <UART_Printf+0x2d8>
                case 'p':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui16Value = va_arg(vaArgP, int);
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	1d1a      	adds	r2, r3, #4
 8000cf8:	60ba      	str	r2, [r7, #8]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	83fb      	strh	r3, [r7, #30]

                    //
                    // Reset the buffer position.
                    //
                    ui16Pos = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	85bb      	strh	r3, [r7, #44]	@ 0x2c

                    //
                    // Set the base to 16.
                    //
                    ui16Base = 16;
 8000d04:	2310      	movs	r3, #16
 8000d06:	853b      	strh	r3, [r7, #40]	@ 0x28

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui16Neg = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	84fb      	strh	r3, [r7, #38]	@ 0x26
                    //
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ui16Idx = 1;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000d10:	e007      	b.n	8000d22 <UART_Printf+0x2ee>
                        (((ui16Idx * ui16Base) <= ui16Value) &&
                         (((ui16Idx * ui16Base) / ui16Base) == ui16Idx));
                        ui16Idx *= ui16Base, ui16Count--)
 8000d12:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000d14:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000d16:	fb12 f303 	smulbb	r3, r2, r3
 8000d1a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000d1c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	857b      	strh	r3, [r7, #42]	@ 0x2a
                        (((ui16Idx * ui16Base) <= ui16Value) &&
 8000d22:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000d24:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000d26:	fb02 f303 	mul.w	r3, r2, r3
 8000d2a:	8bfa      	ldrh	r2, [r7, #30]
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	ddf0      	ble.n	8000d12 <UART_Printf+0x2de>

                    //
                    // If the value is negative, reduce the count of padding
                    // characters needed.
                    //
                    if(ui16Neg)
 8000d30:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d002      	beq.n	8000d3c <UART_Printf+0x308>
                    {
                        ui16Count--;
 8000d36:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	857b      	strh	r3, [r7, #42]	@ 0x2a

                    //
                    // If the value is negative and the value is padded with
                    // zeros, then place the minus sign before the padding.
                    //
                    if(ui16Neg && (cFill == '0'))
 8000d3c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d00d      	beq.n	8000d5e <UART_Printf+0x32a>
 8000d42:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000d46:	2b30      	cmp	r3, #48	@ 0x30
 8000d48:	d109      	bne.n	8000d5e <UART_Printf+0x32a>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui16Pos++] = '-';
 8000d4a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000d4c:	1c5a      	adds	r2, r3, #1
 8000d4e:	85ba      	strh	r2, [r7, #44]	@ 0x2c
 8000d50:	3330      	adds	r3, #48	@ 0x30
 8000d52:	443b      	add	r3, r7
 8000d54:	222d      	movs	r2, #45	@ 0x2d
 8000d56:	f803 2c24 	strb.w	r2, [r3, #-36]

                        //
                        // The minus sign has been placed, so turn off the
                        // negative flag.
                        //
                        ui16Neg = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	84fb      	strh	r3, [r7, #38]	@ 0x26

                    //
                    // Provide additional padding at the beginning of the
                    // string conversion if needed.
                    //
                    if((ui16Count > 1) && (ui16Count < 16))
 8000d5e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d915      	bls.n	8000d90 <UART_Printf+0x35c>
 8000d64:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000d66:	2b0f      	cmp	r3, #15
 8000d68:	d812      	bhi.n	8000d90 <UART_Printf+0x35c>
                    {
                        for(ui16Count--; ui16Count; ui16Count--)
 8000d6a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000d6c:	3b01      	subs	r3, #1
 8000d6e:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8000d70:	e00b      	b.n	8000d8a <UART_Printf+0x356>
                        {
                            pcBuf[ui16Pos++] = cFill;
 8000d72:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000d74:	1c5a      	adds	r2, r3, #1
 8000d76:	85ba      	strh	r2, [r7, #44]	@ 0x2c
 8000d78:	3330      	adds	r3, #48	@ 0x30
 8000d7a:	443b      	add	r3, r7
 8000d7c:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8000d80:	f803 2c24 	strb.w	r2, [r3, #-36]
                        for(ui16Count--; ui16Count; ui16Count--)
 8000d84:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000d86:	3b01      	subs	r3, #1
 8000d88:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8000d8a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d1f0      	bne.n	8000d72 <UART_Printf+0x33e>

                    //
                    // If the value is negative, then place the minus sign
                    // before the number.
                    //
                    if(ui16Neg)
 8000d90:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d023      	beq.n	8000dde <UART_Printf+0x3aa>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui16Pos++] = '-';
 8000d96:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000d98:	1c5a      	adds	r2, r3, #1
 8000d9a:	85ba      	strh	r2, [r7, #44]	@ 0x2c
 8000d9c:	3330      	adds	r3, #48	@ 0x30
 8000d9e:	443b      	add	r3, r7
 8000da0:	222d      	movs	r2, #45	@ 0x2d
 8000da2:	f803 2c24 	strb.w	r2, [r3, #-36]
                    }

                    //
                    // Convert the value into a string.
                    //
                    for(; ui16Idx; ui16Idx /= ui16Base)
 8000da6:	e01a      	b.n	8000dde <UART_Printf+0x3aa>
                    {
                        pcBuf[ui16Pos++] =
                            HEX_reference[(ui16Value / ui16Idx) % ui16Base];
 8000da8:	4821      	ldr	r0, [pc, #132]	@ (8000e30 <UART_Printf+0x3fc>)
 8000daa:	8bfa      	ldrh	r2, [r7, #30]
 8000dac:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	461a      	mov	r2, r3
 8000db6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000db8:	fb92 f1f3 	sdiv	r1, r2, r3
 8000dbc:	fb01 f303 	mul.w	r3, r1, r3
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	18c2      	adds	r2, r0, r3
                        pcBuf[ui16Pos++] =
 8000dc4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000dc6:	1c59      	adds	r1, r3, #1
 8000dc8:	85b9      	strh	r1, [r7, #44]	@ 0x2c
                            HEX_reference[(ui16Value / ui16Idx) % ui16Base];
 8000dca:	7812      	ldrb	r2, [r2, #0]
                        pcBuf[ui16Pos++] =
 8000dcc:	3330      	adds	r3, #48	@ 0x30
 8000dce:	443b      	add	r3, r7
 8000dd0:	f803 2c24 	strb.w	r2, [r3, #-36]
                    for(; ui16Idx; ui16Idx /= ui16Base)
 8000dd4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000dd6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ddc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000dde:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1e1      	bne.n	8000da8 <UART_Printf+0x374>
                    }

                    //
                    // Write the string.
                    //
                    UART_Write(p_uart, pcBuf, ui16Pos);
 8000de4:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	4619      	mov	r1, r3
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff fda5 	bl	800093c <UART_Write>

                    //
                    // This command has been handled.
                    //
                    break;
 8000df2:	e00e      	b.n	8000e12 <UART_Printf+0x3de>
                case '%':
                {
                    //
                    // Simply write a single %.
                    //
                    UART_Write(p_uart, pc_string - 1, 1);
 8000df4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000df6:	3b01      	subs	r3, #1
 8000df8:	2201      	movs	r2, #1
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff fd9d 	bl	800093c <UART_Write>

                    //
                    // This command has been handled.
                    //
                    break;
 8000e02:	e006      	b.n	8000e12 <UART_Printf+0x3de>
                default:
                {
                    //
                    // Indicate an error.
                    //
                    UART_Write(p_uart, "ERROR", 5);
 8000e04:	2205      	movs	r2, #5
 8000e06:	490b      	ldr	r1, [pc, #44]	@ (8000e34 <UART_Printf+0x400>)
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff fd97 	bl	800093c <UART_Write>

                    //
                    // This command has been handled.
                    //
                    break;
 8000e0e:	e000      	b.n	8000e12 <UART_Printf+0x3de>
                    break;
 8000e10:	bf00      	nop
    while(*pc_string)
 8000e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f47f ae15 	bne.w	8000a46 <UART_Printf+0x12>
                }
            }
        }
    }
    va_end(vaArgP);
}
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
 8000e20:	3734      	adds	r7, #52	@ 0x34
 8000e22:	46bd      	mov	sp, r7
 8000e24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e28:	b003      	add	sp, #12
 8000e2a:	4770      	bx	lr
 8000e2c:	08007758 	.word	0x08007758
 8000e30:	08007744 	.word	0x08007744
 8000e34:	0800775c 	.word	0x0800775c

08000e38 <UART_Get_Char>:
//!
//! \return Returns the character read.
//
//*****************************************************************************
char UART_Get_Char(uart_stdio_typedef* p_uart)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

    char return_char;

    if (RX_BUFFER_EMPTY(p_uart))
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f103 021a 	add.w	r2, r3, #26
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3318      	adds	r3, #24
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4610      	mov	r0, r2
 8000e4e:	f000 f83c 	bl	8000eca <UART_is_buffer_empty>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <UART_Get_Char+0x24>
    {
        return 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	e011      	b.n	8000e80 <UART_Get_Char+0x48>
    }

    //
    // Read a character from the buffer.
    //
    return_char = p_uart->p_RX_buffer[p_uart->RX_read_index];
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	695b      	ldr	r3, [r3, #20]
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	8b52      	ldrh	r2, [r2, #26]
 8000e64:	b292      	uxth	r2, r2
 8000e66:	4413      	add	r3, r2
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	73fb      	strb	r3, [r7, #15]
    ADVANCE_RX_READ_INDEX(p_uart);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f103 021a 	add.w	r2, r3, #26
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	891b      	ldrh	r3, [r3, #8]
 8000e76:	4619      	mov	r1, r3
 8000e78:	4610      	mov	r0, r2
 8000e7a:	f000 f83e 	bl	8000efa <UART_advance_buffer_index>

    //
    // Return the character to the caller.
    //
    return(return_char);
 8000e7e:	7bfb      	ldrb	r3, [r7, #15]

}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <UART_is_buffer_full>:
//
//*****************************************************************************

uint8_t UART_is_buffer_full(volatile uint16_t *pui16Read,
             volatile uint16_t *pui16Write, uint16_t ui16Size)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b087      	sub	sp, #28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	4613      	mov	r3, r2
 8000e94:	80fb      	strh	r3, [r7, #6]
    uint16_t ui16Write;
    uint16_t ui16Read;

    ui16Write = *pui16Write;
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	881b      	ldrh	r3, [r3, #0]
 8000e9a:	82fb      	strh	r3, [r7, #22]
    ui16Read = *pui16Read;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	82bb      	strh	r3, [r7, #20]

    return((((ui16Write + 1) % ui16Size) == ui16Read) ? 1 : 0);
 8000ea2:	8afb      	ldrh	r3, [r7, #22]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	88fa      	ldrh	r2, [r7, #6]
 8000ea8:	fb93 f1f2 	sdiv	r1, r3, r2
 8000eac:	fb01 f202 	mul.w	r2, r1, r2
 8000eb0:	1a9a      	subs	r2, r3, r2
 8000eb2:	8abb      	ldrh	r3, [r7, #20]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	bf0c      	ite	eq
 8000eb8:	2301      	moveq	r3, #1
 8000eba:	2300      	movne	r3, #0
 8000ebc:	b2db      	uxtb	r3, r3
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	371c      	adds	r7, #28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <UART_is_buffer_empty>:
//
//*****************************************************************************

uint8_t UART_is_buffer_empty(volatile uint16_t *pui16Read,
              volatile uint16_t *pui16Write)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b085      	sub	sp, #20
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
 8000ed2:	6039      	str	r1, [r7, #0]
    uint16_t ui16Write;
    uint16_t ui16Read;

    ui16Write = *pui16Write;
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	881b      	ldrh	r3, [r3, #0]
 8000ed8:	81fb      	strh	r3, [r7, #14]
    ui16Read = *pui16Read;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	81bb      	strh	r3, [r7, #12]

    return((ui16Read == ui16Write) ? 1 : 0);
 8000ee0:	89ba      	ldrh	r2, [r7, #12]
 8000ee2:	89fb      	ldrh	r3, [r7, #14]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	bf0c      	ite	eq
 8000ee8:	2301      	moveq	r3, #1
 8000eea:	2300      	movne	r3, #0
 8000eec:	b2db      	uxtb	r3, r3
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <UART_advance_buffer_index>:
//! \return Returns the number of bytes of data currently in the buffer.
//
//*****************************************************************************

uint16_t UART_advance_buffer_index(volatile uint16_t* pui16Index, uint16_t ui16Size)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
 8000f02:	460b      	mov	r3, r1
 8000f04:	807b      	strh	r3, [r7, #2]
    *pui16Index = (*pui16Index + 1) % ui16Size;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	881b      	ldrh	r3, [r3, #0]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	887a      	ldrh	r2, [r7, #2]
 8000f10:	fb93 f1f2 	sdiv	r1, r3, r2
 8000f14:	fb01 f202 	mul.w	r2, r1, r2
 8000f18:	1a9b      	subs	r3, r3, r2
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	801a      	strh	r2, [r3, #0]

    return(*pui16Index);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	b29b      	uxth	r3, r3
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <UART_Prime_Transmit>:
// Take as many bytes from the transmit buffer as we have space for and move
// them into the UART transmit FIFO.
//
//*****************************************************************************
void UART_Prime_Transmit(uart_stdio_typedef* p_uart)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
    //
    // Do we have any data to transmit?
    //
    if(!TX_BUFFER_EMPTY(p_uart))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f103 0212 	add.w	r2, r3, #18
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3310      	adds	r3, #16
 8000f44:	4619      	mov	r1, r3
 8000f46:	4610      	mov	r0, r2
 8000f48:	f7ff ffbf 	bl	8000eca <UART_is_buffer_empty>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d120      	bne.n	8000f94 <UART_Prime_Transmit+0x62>
    {
        NVIC_DisableIRQ(p_uart->irqn);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fbd3 	bl	8000704 <__NVIC_DisableIRQ>

        LL_USART_TransmitData8(p_uart->handle, p_uart->p_TX_buffer[p_uart->TX_read_index]);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6818      	ldr	r0, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	8a52      	ldrh	r2, [r2, #18]
 8000f6a:	b292      	uxth	r2, r2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4619      	mov	r1, r3
 8000f72:	f7ff fc67 	bl	8000844 <LL_USART_TransmitData8>
        ADVANCE_TX_READ_INDEX(p_uart);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f103 0212 	add.w	r2, r3, #18
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	88db      	ldrh	r3, [r3, #6]
 8000f80:	4619      	mov	r1, r3
 8000f82:	4610      	mov	r0, r2
 8000f84:	f7ff ffb9 	bl	8000efa <UART_advance_buffer_index>

        NVIC_EnableIRQ(p_uart->irqn);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fb9a 	bl	80006c8 <__NVIC_EnableIRQ>
    }
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <CmdLineProcess>:
//! \b CMDLINE_TOO_MANY_ARGS if there are more arguments than can be parsed.
//! Otherwise it returns the code that was returned by the command function.
//
//*****************************************************************************
uint8_t CmdLineProcess(char *pcCmdLine, USART_TypeDef* USARTx)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
    char *pcChar;
    uint_fast8_t ui8Argc;
    bool bFindArg = true;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]

    //
    // Initialize the argument counter, and point to the beginning of the
    // command line string.
    //
    ui8Argc = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
    pcChar = pcCmdLine;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	617b      	str	r3, [r7, #20]

    //
    // Advance through the command line until a zero character is found.
    //
    while(*pcChar)
 8000fb2:	e01f      	b.n	8000ff4 <CmdLineProcess+0x58>
    {
        //
        // If there is a space, then replace it with a zero, and set the flag
        // to search for the next argument.
        //
        if(*pcChar == ' ')
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b20      	cmp	r3, #32
 8000fba:	d105      	bne.n	8000fc8 <CmdLineProcess+0x2c>
        {
            *pcChar = 0;
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
            bFindArg = true;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	73fb      	strb	r3, [r7, #15]
 8000fc6:	e012      	b.n	8000fee <CmdLineProcess+0x52>
        {
            //
            // If bFindArg is set, then that means we are looking for the start
            // of the next argument.
            //
            if(bFindArg)
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d00f      	beq.n	8000fee <CmdLineProcess+0x52>
                //
                // As long as the maximum number of arguments has not been
                // reached, then save the pointer to the start of this new arg
                // in the argv array, and increment the count of args, argc.
                //
                if(ui8Argc < CMDLINE_MAX_ARGS)
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	2b07      	cmp	r3, #7
 8000fd2:	d80a      	bhi.n	8000fea <CmdLineProcess+0x4e>
                {
                    g_ppcArgv[ui8Argc] = pcChar;
 8000fd4:	4920      	ldr	r1, [pc, #128]	@ (8001058 <CmdLineProcess+0xbc>)
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	697a      	ldr	r2, [r7, #20]
 8000fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    ui8Argc++;
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	613b      	str	r3, [r7, #16]
                    bFindArg = false;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	73fb      	strb	r3, [r7, #15]
 8000fe8:	e001      	b.n	8000fee <CmdLineProcess+0x52>
                // The maximum number of arguments has been reached so return
                // the error.
                //
                else
                {
                    return(CMDLINE_TOO_MANY_ARGS);
 8000fea:	2302      	movs	r3, #2
 8000fec:	e030      	b.n	8001050 <CmdLineProcess+0xb4>
        }

        //
        // Advance to the next character in the command line.
        //
        pcChar++;
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	617b      	str	r3, [r7, #20]
    while(*pcChar)
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1db      	bne.n	8000fb4 <CmdLineProcess+0x18>
    }

    //
    // If one or more arguments was found, then process the command.
    //
    if(ui8Argc)
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d025      	beq.n	800104e <CmdLineProcess+0xb2>
    {
        g_ppcArgv[ui8Argc] = (char*)USARTx;
 8001002:	4915      	ldr	r1, [pc, #84]	@ (8001058 <CmdLineProcess+0xbc>)
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        ui8Argc++;
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	3301      	adds	r3, #1
 8001010:	613b      	str	r3, [r7, #16]
        //
        // Start at the beginning of the command table, to look for a matching
        // command.
        //
        psCmdEntry = &g_psCmdTable[0];
 8001012:	4b12      	ldr	r3, [pc, #72]	@ (800105c <CmdLineProcess+0xc0>)
 8001014:	60bb      	str	r3, [r7, #8]

        //
        // Search through the command table until a null command string is
        // found, which marks the end of the table.
        //
        while(psCmdEntry->pcCmd)
 8001016:	e016      	b.n	8001046 <CmdLineProcess+0xaa>
            //
            // If this command entry command string matches argv[0], then call
            // the function for this command, passing the command line
            // arguments.
            //
            if(!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
 8001018:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <CmdLineProcess+0xbc>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4619      	mov	r1, r3
 8001022:	4610      	mov	r0, r2
 8001024:	f7ff f8d0 	bl	80001c8 <strcmp>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d108      	bne.n	8001040 <CmdLineProcess+0xa4>
            {
                return(psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4908      	ldr	r1, [pc, #32]	@ (8001058 <CmdLineProcess+0xbc>)
 8001036:	4610      	mov	r0, r2
 8001038:	4798      	blx	r3
 800103a:	4603      	mov	r3, r0
 800103c:	b2db      	uxtb	r3, r3
 800103e:	e007      	b.n	8001050 <CmdLineProcess+0xb4>
            }

            //
            // Not found, so advance to the next entry.
            //
            psCmdEntry++;
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	330c      	adds	r3, #12
 8001044:	60bb      	str	r3, [r7, #8]
        while(psCmdEntry->pcCmd)
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1e4      	bne.n	8001018 <CmdLineProcess+0x7c>

    //
    // Fall through to here means that no matching command was found, so return
    // an error.
    //
    return(CMDLINE_BAD_CMD);
 800104e:	2301      	movs	r3, #1
}
 8001050:	4618      	mov	r0, r3
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000300 	.word	0x20000300
 800105c:	20000018 	.word	0x20000018

08001060 <LL_USART_IsActiveFlag_RXNE>:
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0320 	and.w	r3, r3, #32
 8001070:	2b20      	cmp	r3, #32
 8001072:	bf0c      	ite	eq
 8001074:	2301      	moveq	r3, #1
 8001076:	2300      	movne	r3, #0
 8001078:	b2db      	uxtb	r3, r3
}
 800107a:	4618      	mov	r0, r3
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <LL_USART_IsActiveFlag_TXE>:
{
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001096:	2b80      	cmp	r3, #128	@ 0x80
 8001098:	bf0c      	ite	eq
 800109a:	2301      	moveq	r3, #1
 800109c:	2300      	movne	r3, #0
 800109e:	b2db      	uxtb	r3, r3
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <LL_USART_DisableIT_TXE>:
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	@ 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	330c      	adds	r3, #12
 80010b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	e853 3f00 	ldrex	r3, [r3]
 80010c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80010c8:	61fb      	str	r3, [r7, #28]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	330c      	adds	r3, #12
 80010ce:	69fa      	ldr	r2, [r7, #28]
 80010d0:	61ba      	str	r2, [r7, #24]
 80010d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80010d4:	6979      	ldr	r1, [r7, #20]
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	e841 2300 	strex	r3, r2, [r1]
 80010dc:	613b      	str	r3, [r7, #16]
   return(result);
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1e7      	bne.n	80010b4 <LL_USART_DisableIT_TXE+0x8>
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3724      	adds	r7, #36	@ 0x24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <LL_USART_ReceiveData8>:
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	b2db      	uxtb	r3, r3
}
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	619a      	str	r2, [r3, #24]
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	041a      	lsls	r2, r3, #16
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	619a      	str	r2, [r3, #24]
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <command_init>:
		9
	}
};

void	command_init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af04      	add	r7, sp, #16
    UART_Init( &CONSOLE_UART, EXP_UART_HANDLE, EXP_UART_IRQ,
 800114e:	2340      	movs	r3, #64	@ 0x40
 8001150:	9302      	str	r3, [sp, #8]
 8001152:	2340      	movs	r3, #64	@ 0x40
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	4b13      	ldr	r3, [pc, #76]	@ (80011a4 <command_init+0x5c>)
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	4b13      	ldr	r3, [pc, #76]	@ (80011a8 <command_init+0x60>)
 800115c:	2227      	movs	r2, #39	@ 0x27
 800115e:	4913      	ldr	r1, [pc, #76]	@ (80011ac <command_init+0x64>)
 8001160:	4813      	ldr	r0, [pc, #76]	@ (80011b0 <command_init+0x68>)
 8001162:	f7ff fb7e 	bl	8000862 <UART_Init>
				g_EXP_UART_TX_buffer, g_EXP_UART_RX_buffer,
				sizeof(g_EXP_UART_TX_buffer), sizeof(g_EXP_UART_RX_buffer));
    CMD_line.p_buffer       = g_CMD_line_buffer;
 8001166:	4b13      	ldr	r3, [pc, #76]	@ (80011b4 <command_init+0x6c>)
 8001168:	4a13      	ldr	r2, [pc, #76]	@ (80011b8 <command_init+0x70>)
 800116a:	605a      	str	r2, [r3, #4]
	CMD_line.buffer_size    = 64;
 800116c:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <command_init+0x6c>)
 800116e:	2240      	movs	r2, #64	@ 0x40
 8001170:	801a      	strh	r2, [r3, #0]
	CMD_line.write_index 	= 0;
 8001172:	4b10      	ldr	r3, [pc, #64]	@ (80011b4 <command_init+0x6c>)
 8001174:	2200      	movs	r2, #0
 8001176:	811a      	strh	r2, [r3, #8]
	if(CMD_line.buffer_size!= 0)
 8001178:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <command_init+0x6c>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d006      	beq.n	800118e <command_init+0x46>
	{
		memset((void *)CMD_line.p_buffer, 0, sizeof(CMD_line.p_buffer));
 8001180:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <command_init+0x6c>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2204      	movs	r2, #4
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f006 fa9d 	bl	80076c8 <memset>
	}
//	command_send_splash();
	UART_Send_String(&CONSOLE_UART, "EXP FIRMWARE V1.0.0\n");
 800118e:	490b      	ldr	r1, [pc, #44]	@ (80011bc <command_init+0x74>)
 8001190:	4807      	ldr	r0, [pc, #28]	@ (80011b0 <command_init+0x68>)
 8001192:	f7ff fbc0 	bl	8000916 <UART_Send_String>
	UART_Send_String(&CONSOLE_UART, "> ");
 8001196:	490a      	ldr	r1, [pc, #40]	@ (80011c0 <command_init+0x78>)
 8001198:	4805      	ldr	r0, [pc, #20]	@ (80011b0 <command_init+0x68>)
 800119a:	f7ff fbbc 	bl	8000916 <UART_Send_String>
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000384 	.word	0x20000384
 80011a8:	20000344 	.word	0x20000344
 80011ac:	40004800 	.word	0x40004800
 80011b0:	20000324 	.word	0x20000324
 80011b4:	200003c4 	.word	0x200003c4
 80011b8:	200003d0 	.word	0x200003d0
 80011bc:	08007c24 	.word	0x08007c24
 80011c0:	08007c3c 	.word	0x08007c3c

080011c4 <command_task_update>:

#define MAX_HISTORY 5
#define MAX_CMD_LENGTH COMMAND_MAX_LENGTH

static void command_task_update(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
	uint8_t cmd_return, time_out;
	for(time_out = 50; (!RX_BUFFER_EMPTY(&CONSOLE_UART)) && (time_out != 0); time_out--)
 80011ca:	2332      	movs	r3, #50	@ 0x32
 80011cc:	71fb      	strb	r3, [r7, #7]
 80011ce:	e08d      	b.n	80012ec <command_task_update+0x128>
	{
		CMD_line.RX_char = UART_Get_Char(&CONSOLE_UART);
 80011d0:	484f      	ldr	r0, [pc, #316]	@ (8001310 <command_task_update+0x14c>)
 80011d2:	f7ff fe31 	bl	8000e38 <UART_Get_Char>
 80011d6:	4603      	mov	r3, r0
 80011d8:	461a      	mov	r2, r3
 80011da:	4b4e      	ldr	r3, [pc, #312]	@ (8001314 <command_task_update+0x150>)
 80011dc:	729a      	strb	r2, [r3, #10]

		if(((CMD_line.RX_char == 8) || (CMD_line.RX_char == 127)))
 80011de:	4b4d      	ldr	r3, [pc, #308]	@ (8001314 <command_task_update+0x150>)
 80011e0:	7a9b      	ldrb	r3, [r3, #10]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b08      	cmp	r3, #8
 80011e6:	d004      	beq.n	80011f2 <command_task_update+0x2e>
 80011e8:	4b4a      	ldr	r3, [pc, #296]	@ (8001314 <command_task_update+0x150>)
 80011ea:	7a9b      	ldrb	r3, [r3, #10]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80011f0:	d114      	bne.n	800121c <command_task_update+0x58>
		{
			if (CMD_line.write_index == 0)
 80011f2:	4b48      	ldr	r3, [pc, #288]	@ (8001314 <command_task_update+0x150>)
 80011f4:	891b      	ldrh	r3, [r3, #8]
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f000 8083 	beq.w	8001304 <command_task_update+0x140>
				break;
			CMD_line.write_index--;
 80011fe:	4b45      	ldr	r3, [pc, #276]	@ (8001314 <command_task_update+0x150>)
 8001200:	891b      	ldrh	r3, [r3, #8]
 8001202:	b29b      	uxth	r3, r3
 8001204:	3b01      	subs	r3, #1
 8001206:	b29a      	uxth	r2, r3
 8001208:	4b42      	ldr	r3, [pc, #264]	@ (8001314 <command_task_update+0x150>)
 800120a:	811a      	strh	r2, [r3, #8]
			UART_Send_Char(&CONSOLE_UART, CMD_line.RX_char);
 800120c:	4b41      	ldr	r3, [pc, #260]	@ (8001314 <command_task_update+0x150>)
 800120e:	7a9b      	ldrb	r3, [r3, #10]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	4619      	mov	r1, r3
 8001214:	483e      	ldr	r0, [pc, #248]	@ (8001310 <command_task_update+0x14c>)
 8001216:	f7ff fb6e 	bl	80008f6 <UART_Send_Char>
			break;
 800121a:	e074      	b.n	8001306 <command_task_update+0x142>
		}

		UART_Send_Char(&CONSOLE_UART, CMD_line.RX_char);
 800121c:	4b3d      	ldr	r3, [pc, #244]	@ (8001314 <command_task_update+0x150>)
 800121e:	7a9b      	ldrb	r3, [r3, #10]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	4619      	mov	r1, r3
 8001224:	483a      	ldr	r0, [pc, #232]	@ (8001310 <command_task_update+0x14c>)
 8001226:	f7ff fb66 	bl	80008f6 <UART_Send_Char>

		if((CMD_line.RX_char == '\r') || (CMD_line.RX_char == '\n'))
 800122a:	4b3a      	ldr	r3, [pc, #232]	@ (8001314 <command_task_update+0x150>)
 800122c:	7a9b      	ldrb	r3, [r3, #10]
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b0d      	cmp	r3, #13
 8001232:	d004      	beq.n	800123e <command_task_update+0x7a>
 8001234:	4b37      	ldr	r3, [pc, #220]	@ (8001314 <command_task_update+0x150>)
 8001236:	7a9b      	ldrb	r3, [r3, #10]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b0a      	cmp	r3, #10
 800123c:	d134      	bne.n	80012a8 <command_task_update+0xe4>
		{
			if(CMD_line.write_index > 0)
 800123e:	4b35      	ldr	r3, [pc, #212]	@ (8001314 <command_task_update+0x150>)
 8001240:	891b      	ldrh	r3, [r3, #8]
 8001242:	b29b      	uxth	r3, r3
 8001244:	2b00      	cmp	r3, #0
 8001246:	d02a      	beq.n	800129e <command_task_update+0xda>
			{
				// Add a NUL char at the end of the CMD
				CMD_line.p_buffer[CMD_line.write_index] = 0;
 8001248:	4b32      	ldr	r3, [pc, #200]	@ (8001314 <command_task_update+0x150>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	4a31      	ldr	r2, [pc, #196]	@ (8001314 <command_task_update+0x150>)
 800124e:	8912      	ldrh	r2, [r2, #8]
 8001250:	b292      	uxth	r2, r2
 8001252:	4413      	add	r3, r2
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
				CMD_line.write_index++;
 8001258:	4b2e      	ldr	r3, [pc, #184]	@ (8001314 <command_task_update+0x150>)
 800125a:	891b      	ldrh	r3, [r3, #8]
 800125c:	b29b      	uxth	r3, r3
 800125e:	3301      	adds	r3, #1
 8001260:	b29a      	uxth	r2, r3
 8001262:	4b2c      	ldr	r3, [pc, #176]	@ (8001314 <command_task_update+0x150>)
 8001264:	811a      	strh	r2, [r3, #8]

				cmd_return = CmdLineProcess(CMD_line.p_buffer, EXP_UART_HANDLE);
 8001266:	4b2b      	ldr	r3, [pc, #172]	@ (8001314 <command_task_update+0x150>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	492b      	ldr	r1, [pc, #172]	@ (8001318 <command_task_update+0x154>)
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fe95 	bl	8000f9c <CmdLineProcess>
 8001272:	4603      	mov	r3, r0
 8001274:	71bb      	strb	r3, [r7, #6]
				CMD_line.write_index    = 0;
 8001276:	4b27      	ldr	r3, [pc, #156]	@ (8001314 <command_task_update+0x150>)
 8001278:	2200      	movs	r2, #0
 800127a:	811a      	strh	r2, [r3, #8]

				UART_Send_String(&CONSOLE_UART, "> ");
 800127c:	4927      	ldr	r1, [pc, #156]	@ (800131c <command_task_update+0x158>)
 800127e:	4824      	ldr	r0, [pc, #144]	@ (8001310 <command_task_update+0x14c>)
 8001280:	f7ff fb49 	bl	8000916 <UART_Send_String>
				UART_Printf(&CONSOLE_UART, ErrorCode[cmd_return]);
 8001284:	79bb      	ldrb	r3, [r7, #6]
 8001286:	4a26      	ldr	r2, [pc, #152]	@ (8001320 <command_task_update+0x15c>)
 8001288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128c:	4619      	mov	r1, r3
 800128e:	4820      	ldr	r0, [pc, #128]	@ (8001310 <command_task_update+0x14c>)
 8001290:	f7ff fbd0 	bl	8000a34 <UART_Printf>
				UART_Send_String(&CONSOLE_UART, "> ");
 8001294:	4921      	ldr	r1, [pc, #132]	@ (800131c <command_task_update+0x158>)
 8001296:	481e      	ldr	r0, [pc, #120]	@ (8001310 <command_task_update+0x14c>)
 8001298:	f7ff fb3d 	bl	8000916 <UART_Send_String>
			if(CMD_line.write_index > 0)
 800129c:	e023      	b.n	80012e6 <command_task_update+0x122>
			}
			else
			{
				UART_Send_String(&CONSOLE_UART, "> ");
 800129e:	491f      	ldr	r1, [pc, #124]	@ (800131c <command_task_update+0x158>)
 80012a0:	481b      	ldr	r0, [pc, #108]	@ (8001310 <command_task_update+0x14c>)
 80012a2:	f7ff fb38 	bl	8000916 <UART_Send_String>
			if(CMD_line.write_index > 0)
 80012a6:	e01e      	b.n	80012e6 <command_task_update+0x122>
			}
		}
		else
		{
			CMD_line.p_buffer[CMD_line.write_index] = CMD_line.RX_char;
 80012a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001314 <command_task_update+0x150>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	4a19      	ldr	r2, [pc, #100]	@ (8001314 <command_task_update+0x150>)
 80012ae:	8912      	ldrh	r2, [r2, #8]
 80012b0:	b292      	uxth	r2, r2
 80012b2:	4413      	add	r3, r2
 80012b4:	4a17      	ldr	r2, [pc, #92]	@ (8001314 <command_task_update+0x150>)
 80012b6:	7a92      	ldrb	r2, [r2, #10]
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	701a      	strb	r2, [r3, #0]
			CMD_line.write_index++;
 80012bc:	4b15      	ldr	r3, [pc, #84]	@ (8001314 <command_task_update+0x150>)
 80012be:	891b      	ldrh	r3, [r3, #8]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	3301      	adds	r3, #1
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	4b13      	ldr	r3, [pc, #76]	@ (8001314 <command_task_update+0x150>)
 80012c8:	811a      	strh	r2, [r3, #8]

			if (CMD_line.write_index > CMD_line.buffer_size)
 80012ca:	4b12      	ldr	r3, [pc, #72]	@ (8001314 <command_task_update+0x150>)
 80012cc:	891b      	ldrh	r3, [r3, #8]
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	4b10      	ldr	r3, [pc, #64]	@ (8001314 <command_task_update+0x150>)
 80012d2:	881b      	ldrh	r3, [r3, #0]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d906      	bls.n	80012e6 <command_task_update+0x122>
			{
				UART_Send_String(&CONSOLE_UART, "\n> CMD too long!\n> ");
 80012d8:	4912      	ldr	r1, [pc, #72]	@ (8001324 <command_task_update+0x160>)
 80012da:	480d      	ldr	r0, [pc, #52]	@ (8001310 <command_task_update+0x14c>)
 80012dc:	f7ff fb1b 	bl	8000916 <UART_Send_String>
				CMD_line.write_index    = 0;
 80012e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001314 <command_task_update+0x150>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	811a      	strh	r2, [r3, #8]
	for(time_out = 50; (!RX_BUFFER_EMPTY(&CONSOLE_UART)) && (time_out != 0); time_out--)
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	3b01      	subs	r3, #1
 80012ea:	71fb      	strb	r3, [r7, #7]
 80012ec:	490e      	ldr	r1, [pc, #56]	@ (8001328 <command_task_update+0x164>)
 80012ee:	480f      	ldr	r0, [pc, #60]	@ (800132c <command_task_update+0x168>)
 80012f0:	f7ff fdeb 	bl	8000eca <UART_is_buffer_empty>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d105      	bne.n	8001306 <command_task_update+0x142>
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f47f af67 	bne.w	80011d0 <command_task_update+0xc>
			}
		}
	}
}
 8001302:	e000      	b.n	8001306 <command_task_update+0x142>
				break;
 8001304:	bf00      	nop
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000324 	.word	0x20000324
 8001314:	200003c4 	.word	0x200003c4
 8001318:	40004800 	.word	0x40004800
 800131c:	08007c3c 	.word	0x08007c3c
 8001320:	20000000 	.word	0x20000000
 8001324:	08007c40 	.word	0x08007c40
 8001328:	2000033c 	.word	0x2000033c
 800132c:	2000033e 	.word	0x2000033e

08001330 <Cmd_help>:


/* Command support */
int Cmd_help(int argc, char *argv[])
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
	tCmdLineEntry * pEntry;
	// USART_TypeDef * USARTx = (USART_TypeDef*)argv[argc-1];

	pEntry = &g_psCmdTable[0];
 800133a:	4b0f      	ldr	r3, [pc, #60]	@ (8001378 <Cmd_help+0x48>)
 800133c:	60fb      	str	r3, [r7, #12]
	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd)
 800133e:	e012      	b.n	8001366 <Cmd_help+0x36>
	{
		// Print the command name and the brief description.
		UART_Send_String(&CONSOLE_UART, pEntry->pcCmd);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4619      	mov	r1, r3
 8001346:	480d      	ldr	r0, [pc, #52]	@ (800137c <Cmd_help+0x4c>)
 8001348:	f7ff fae5 	bl	8000916 <UART_Send_String>
		UART_Send_String(&CONSOLE_UART, pEntry->pcHelp);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	4619      	mov	r1, r3
 8001352:	480a      	ldr	r0, [pc, #40]	@ (800137c <Cmd_help+0x4c>)
 8001354:	f7ff fadf 	bl	8000916 <UART_Send_String>
		UART_Send_String(&CONSOLE_UART, "\n");
 8001358:	4909      	ldr	r1, [pc, #36]	@ (8001380 <Cmd_help+0x50>)
 800135a:	4808      	ldr	r0, [pc, #32]	@ (800137c <Cmd_help+0x4c>)
 800135c:	f7ff fadb 	bl	8000916 <UART_Send_String>
		// Advance to the next entry in the table.
		pEntry++;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	330c      	adds	r3, #12
 8001364:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1e8      	bne.n	8001340 <Cmd_help+0x10>
	}
	return (CMDLINE_OK);
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000018 	.word	0x20000018
 800137c:	20000324 	.word	0x20000324
 8001380:	08007c54 	.word	0x08007c54

08001384 <Cmd_tec_pw_on>:

/* Command for power supply */
int Cmd_tec_pw_on(int argc, char *argv[])
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
	if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2b01      	cmp	r3, #1
 8001392:	dc01      	bgt.n	8001398 <Cmd_tec_pw_on+0x14>
 8001394:	2303      	movs	r3, #3
 8001396:	e019      	b.n	80013cc <Cmd_tec_pw_on+0x48>
	if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b02      	cmp	r3, #2
 800139c:	dd01      	ble.n	80013a2 <Cmd_tec_pw_on+0x1e>
 800139e:	2302      	movs	r3, #2
 80013a0:	e014      	b.n	80013cc <Cmd_tec_pw_on+0x48>
	if (atoi(argv[1]))
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	3304      	adds	r3, #4
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f006 f905 	bl	80075b8 <atoi>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d005      	beq.n	80013c0 <Cmd_tec_pw_on+0x3c>
		LL_GPIO_SetOutputPin(EF_TEC_EN_GPIO_Port, EF_TEC_EN_Pin);
 80013b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013b8:	4806      	ldr	r0, [pc, #24]	@ (80013d4 <Cmd_tec_pw_on+0x50>)
 80013ba:	f7ff fea7 	bl	800110c <LL_GPIO_SetOutputPin>
 80013be:	e004      	b.n	80013ca <Cmd_tec_pw_on+0x46>
	else
		LL_GPIO_ResetOutputPin(EF_TEC_EN_GPIO_Port, EF_TEC_EN_Pin);
 80013c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013c4:	4803      	ldr	r0, [pc, #12]	@ (80013d4 <Cmd_tec_pw_on+0x50>)
 80013c6:	f7ff feaf 	bl	8001128 <LL_GPIO_ResetOutputPin>
	return (CMDLINE_OK);
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40020800 	.word	0x40020800

080013d8 <Cmd_led_pw_on>:
int Cmd_led_pw_on(int argc, char *argv[])
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
	if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	dc01      	bgt.n	80013ec <Cmd_led_pw_on+0x14>
 80013e8:	2303      	movs	r3, #3
 80013ea:	e019      	b.n	8001420 <Cmd_led_pw_on+0x48>
	if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	dd01      	ble.n	80013f6 <Cmd_led_pw_on+0x1e>
 80013f2:	2302      	movs	r3, #2
 80013f4:	e014      	b.n	8001420 <Cmd_led_pw_on+0x48>
	if (atoi(argv[1]))
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	3304      	adds	r3, #4
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f006 f8db 	bl	80075b8 <atoi>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d005      	beq.n	8001414 <Cmd_led_pw_on+0x3c>
		LL_GPIO_SetOutputPin(EF_LED_EN_GPIO_Port, EF_LED_EN_Pin);
 8001408:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800140c:	4806      	ldr	r0, [pc, #24]	@ (8001428 <Cmd_led_pw_on+0x50>)
 800140e:	f7ff fe7d 	bl	800110c <LL_GPIO_SetOutputPin>
 8001412:	e004      	b.n	800141e <Cmd_led_pw_on+0x46>
	else
		LL_GPIO_ResetOutputPin(EF_LED_EN_GPIO_Port, EF_LED_EN_Pin);
 8001414:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001418:	4803      	ldr	r0, [pc, #12]	@ (8001428 <Cmd_led_pw_on+0x50>)
 800141a:	f7ff fe85 	bl	8001128 <LL_GPIO_ResetOutputPin>
	return (CMDLINE_OK);
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40020400 	.word	0x40020400

0800142c <Cmd_heater_pw_on>:
int Cmd_heater_pw_on(int argc, char *argv[])
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
	if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b01      	cmp	r3, #1
 800143a:	dc01      	bgt.n	8001440 <Cmd_heater_pw_on+0x14>
 800143c:	2303      	movs	r3, #3
 800143e:	e019      	b.n	8001474 <Cmd_heater_pw_on+0x48>
	if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b02      	cmp	r3, #2
 8001444:	dd01      	ble.n	800144a <Cmd_heater_pw_on+0x1e>
 8001446:	2302      	movs	r3, #2
 8001448:	e014      	b.n	8001474 <Cmd_heater_pw_on+0x48>
	if (atoi(argv[1]))
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	3304      	adds	r3, #4
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f006 f8b1 	bl	80075b8 <atoi>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d005      	beq.n	8001468 <Cmd_heater_pw_on+0x3c>
		LL_GPIO_SetOutputPin(EF_HEATER_EN_GPIO_Port, EF_HEATER_EN_Pin);
 800145c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001460:	4806      	ldr	r0, [pc, #24]	@ (800147c <Cmd_heater_pw_on+0x50>)
 8001462:	f7ff fe53 	bl	800110c <LL_GPIO_SetOutputPin>
 8001466:	e004      	b.n	8001472 <Cmd_heater_pw_on+0x46>
	else
		LL_GPIO_ResetOutputPin(EF_HEATER_EN_GPIO_Port, EF_HEATER_EN_Pin);
 8001468:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800146c:	4803      	ldr	r0, [pc, #12]	@ (800147c <Cmd_heater_pw_on+0x50>)
 800146e:	f7ff fe5b 	bl	8001128 <LL_GPIO_ResetOutputPin>
	return (CMDLINE_OK);
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40021000 	.word	0x40021000

08001480 <Cmd_set_temp>:
/* Command for temperature */
int Cmd_set_temp(int argc, char *argv[])
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
	if (argc < 5) return CMDLINE_TOO_FEW_ARGS;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b04      	cmp	r3, #4
 800148e:	dc01      	bgt.n	8001494 <Cmd_set_temp+0x14>
 8001490:	2303      	movs	r3, #3
 8001492:	e059      	b.n	8001548 <Cmd_set_temp+0xc8>
	if (argc > 5) return CMDLINE_TOO_MANY_ARGS;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b05      	cmp	r3, #5
 8001498:	dd01      	ble.n	800149e <Cmd_set_temp+0x1e>
 800149a:	2302      	movs	r3, #2
 800149c:	e054      	b.n	8001548 <Cmd_set_temp+0xc8>
	int16_t setpoint_0 = atoi(argv[1]);
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	3304      	adds	r3, #4
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f006 f887 	bl	80075b8 <atoi>
 80014aa:	4603      	mov	r3, r0
 80014ac:	81fb      	strh	r3, [r7, #14]
	int16_t setpoint_1 = atoi(argv[2]);
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	3308      	adds	r3, #8
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f006 f87f 	bl	80075b8 <atoi>
 80014ba:	4603      	mov	r3, r0
 80014bc:	81bb      	strh	r3, [r7, #12]
	int16_t setpoint_2 = atoi(argv[3]);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	330c      	adds	r3, #12
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f006 f877 	bl	80075b8 <atoi>
 80014ca:	4603      	mov	r3, r0
 80014cc:	817b      	strh	r3, [r7, #10]
	int16_t setpoint_3 = atoi(argv[4]);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	3310      	adds	r3, #16
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f006 f86f 	bl	80075b8 <atoi>
 80014da:	4603      	mov	r3, r0
 80014dc:	813b      	strh	r3, [r7, #8]
	temperature_set_setpoint(0, setpoint_0);
 80014de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014e2:	4619      	mov	r1, r3
 80014e4:	2000      	movs	r0, #0
 80014e6:	f003 fddb 	bl	80050a0 <temperature_set_setpoint>
	temperature_set_setpoint(1, setpoint_1);
 80014ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014ee:	4619      	mov	r1, r3
 80014f0:	2001      	movs	r0, #1
 80014f2:	f003 fdd5 	bl	80050a0 <temperature_set_setpoint>
	temperature_set_setpoint(2, setpoint_2);
 80014f6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014fa:	4619      	mov	r1, r3
 80014fc:	2002      	movs	r0, #2
 80014fe:	f003 fdcf 	bl	80050a0 <temperature_set_setpoint>
	temperature_set_setpoint(3, setpoint_3);
 8001502:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001506:	4619      	mov	r1, r3
 8001508:	2003      	movs	r0, #3
 800150a:	f003 fdc9 	bl	80050a0 <temperature_set_setpoint>
	UART_Printf(&CONSOLE_UART, "Setpoint[%d]:%i \n", 0, setpoint_0);
 800150e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001512:	2200      	movs	r2, #0
 8001514:	490e      	ldr	r1, [pc, #56]	@ (8001550 <Cmd_set_temp+0xd0>)
 8001516:	480f      	ldr	r0, [pc, #60]	@ (8001554 <Cmd_set_temp+0xd4>)
 8001518:	f7ff fa8c 	bl	8000a34 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "Setpoint[%d]:%i \n", 1, setpoint_1);
 800151c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001520:	2201      	movs	r2, #1
 8001522:	490b      	ldr	r1, [pc, #44]	@ (8001550 <Cmd_set_temp+0xd0>)
 8001524:	480b      	ldr	r0, [pc, #44]	@ (8001554 <Cmd_set_temp+0xd4>)
 8001526:	f7ff fa85 	bl	8000a34 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "Setpoint[%d]:%i \n", 2, setpoint_2);
 800152a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800152e:	2202      	movs	r2, #2
 8001530:	4907      	ldr	r1, [pc, #28]	@ (8001550 <Cmd_set_temp+0xd0>)
 8001532:	4808      	ldr	r0, [pc, #32]	@ (8001554 <Cmd_set_temp+0xd4>)
 8001534:	f7ff fa7e 	bl	8000a34 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "Setpoint[%d]:%i \n", 3, setpoint_3);
 8001538:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800153c:	2203      	movs	r2, #3
 800153e:	4904      	ldr	r1, [pc, #16]	@ (8001550 <Cmd_set_temp+0xd0>)
 8001540:	4804      	ldr	r0, [pc, #16]	@ (8001554 <Cmd_set_temp+0xd4>)
 8001542:	f7ff fa77 	bl	8000a34 <UART_Printf>
	return (CMDLINE_OK);
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	08007c58 	.word	0x08007c58
 8001554:	20000324 	.word	0x20000324

08001558 <Cmd_get_temp>:
int Cmd_get_temp(int argc, char *argv[])
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
	if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b01      	cmp	r3, #1
 8001566:	dd01      	ble.n	800156c <Cmd_get_temp+0x14>
 8001568:	2302      	movs	r3, #2
 800156a:	e038      	b.n	80015de <Cmd_get_temp+0x86>
	int16_t temp;

	/* Temperature from BMP390 */
	temp = bmp390_get_temperature();
 800156c:	f001 faf6 	bl	8002b5c <bmp390_get_temperature>
 8001570:	4603      	mov	r3, r0
 8001572:	81bb      	strh	r3, [r7, #12]
	if (temp == 0x7FFF) UART_Send_String(&CONSOLE_UART, "BMP390 is fail \n");
 8001574:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001578:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800157c:	4293      	cmp	r3, r2
 800157e:	d104      	bne.n	800158a <Cmd_get_temp+0x32>
 8001580:	4919      	ldr	r1, [pc, #100]	@ (80015e8 <Cmd_get_temp+0x90>)
 8001582:	481a      	ldr	r0, [pc, #104]	@ (80015ec <Cmd_get_temp+0x94>)
 8001584:	f7ff f9c7 	bl	8000916 <UART_Send_String>
 8001588:	e006      	b.n	8001598 <Cmd_get_temp+0x40>
	else UART_Printf(&CONSOLE_UART, "BMP390 temp: %i \n", temp);
 800158a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800158e:	461a      	mov	r2, r3
 8001590:	4917      	ldr	r1, [pc, #92]	@ (80015f0 <Cmd_get_temp+0x98>)
 8001592:	4816      	ldr	r0, [pc, #88]	@ (80015ec <Cmd_get_temp+0x94>)
 8001594:	f7ff fa4e 	bl	8000a34 <UART_Printf>

	/* Temperature from NTC */
	for (uint8_t channel = 0; channel < 4; channel++)
 8001598:	2300      	movs	r3, #0
 800159a:	73fb      	strb	r3, [r7, #15]
 800159c:	e01b      	b.n	80015d6 <Cmd_get_temp+0x7e>
	{
		temp = NTC_Temperature[channel];
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	4a14      	ldr	r2, [pc, #80]	@ (80015f4 <Cmd_get_temp+0x9c>)
 80015a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015a6:	81bb      	strh	r3, [r7, #12]
		if (temp == 0x7FFF) UART_Printf(&CONSOLE_UART, "NTC[%d] is fail \n", channel);
 80015a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015ac:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d106      	bne.n	80015c2 <Cmd_get_temp+0x6a>
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	461a      	mov	r2, r3
 80015b8:	490f      	ldr	r1, [pc, #60]	@ (80015f8 <Cmd_get_temp+0xa0>)
 80015ba:	480c      	ldr	r0, [pc, #48]	@ (80015ec <Cmd_get_temp+0x94>)
 80015bc:	f7ff fa3a 	bl	8000a34 <UART_Printf>
 80015c0:	e006      	b.n	80015d0 <Cmd_get_temp+0x78>
		else UART_Printf(&CONSOLE_UART, "NTC[%d]: %i \n", channel, temp);
 80015c2:	7bfa      	ldrb	r2, [r7, #15]
 80015c4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015c8:	490c      	ldr	r1, [pc, #48]	@ (80015fc <Cmd_get_temp+0xa4>)
 80015ca:	4808      	ldr	r0, [pc, #32]	@ (80015ec <Cmd_get_temp+0x94>)
 80015cc:	f7ff fa32 	bl	8000a34 <UART_Printf>
	for (uint8_t channel = 0; channel < 4; channel++)
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	3301      	adds	r3, #1
 80015d4:	73fb      	strb	r3, [r7, #15]
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	2b03      	cmp	r3, #3
 80015da:	d9e0      	bls.n	800159e <Cmd_get_temp+0x46>
	}
	return (CMDLINE_OK);
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	08007c6c 	.word	0x08007c6c
 80015ec:	20000324 	.word	0x20000324
 80015f0:	08007c80 	.word	0x08007c80
 80015f4:	20000570 	.word	0x20000570
 80015f8:	08007c94 	.word	0x08007c94
 80015fc:	08007ca8 	.word	0x08007ca8

08001600 <Cmd_get_temp_setpoint>:

int Cmd_get_temp_setpoint(int argc, char *argv[])
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
	if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b01      	cmp	r3, #1
 800160e:	dd01      	ble.n	8001614 <Cmd_get_temp_setpoint+0x14>
 8001610:	2302      	movs	r3, #2
 8001612:	e018      	b.n	8001646 <Cmd_get_temp_setpoint+0x46>
	int16_t setpoint = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	81bb      	strh	r3, [r7, #12]
	for (uint8_t channel = 0; channel < 4; channel++)
 8001618:	2300      	movs	r3, #0
 800161a:	73fb      	strb	r3, [r7, #15]
 800161c:	e00f      	b.n	800163e <Cmd_get_temp_setpoint+0x3e>
	{
		setpoint = temperature_get_setpoint(channel);
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	4618      	mov	r0, r3
 8001622:	f003 fd53 	bl	80050cc <temperature_get_setpoint>
 8001626:	4603      	mov	r3, r0
 8001628:	81bb      	strh	r3, [r7, #12]
		UART_Printf(&CONSOLE_UART, "Setpoint[%d]:%i \r\n", channel, setpoint);
 800162a:	7bfa      	ldrb	r2, [r7, #15]
 800162c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001630:	4907      	ldr	r1, [pc, #28]	@ (8001650 <Cmd_get_temp_setpoint+0x50>)
 8001632:	4808      	ldr	r0, [pc, #32]	@ (8001654 <Cmd_get_temp_setpoint+0x54>)
 8001634:	f7ff f9fe 	bl	8000a34 <UART_Printf>
	for (uint8_t channel = 0; channel < 4; channel++)
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	3301      	adds	r3, #1
 800163c:	73fb      	strb	r3, [r7, #15]
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	2b03      	cmp	r3, #3
 8001642:	d9ec      	bls.n	800161e <Cmd_get_temp_setpoint+0x1e>
	}
	return (CMDLINE_OK);
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	08007cb8 	.word	0x08007cb8
 8001654:	20000324 	.word	0x20000324

08001658 <Cmd_set_tec_vol>:
int Cmd_set_tec_vol(int argc, char *argv[])
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
	if (argc < 5) return CMDLINE_TOO_FEW_ARGS;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b04      	cmp	r3, #4
 8001666:	dc01      	bgt.n	800166c <Cmd_set_tec_vol+0x14>
 8001668:	2303      	movs	r3, #3
 800166a:	e05d      	b.n	8001728 <Cmd_set_tec_vol+0xd0>
	if (argc > 5) return CMDLINE_TOO_MANY_ARGS;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b05      	cmp	r3, #5
 8001670:	dd01      	ble.n	8001676 <Cmd_set_tec_vol+0x1e>
 8001672:	2302      	movs	r3, #2
 8001674:	e058      	b.n	8001728 <Cmd_set_tec_vol+0xd0>
	uint16_t vol[4];
	for (uint8_t i = 0; i < 4; i++)
 8001676:	2300      	movs	r3, #0
 8001678:	75fb      	strb	r3, [r7, #23]
 800167a:	e025      	b.n	80016c8 <Cmd_set_tec_vol+0x70>
	{
		vol[i] = atoi(argv[i+1]);
 800167c:	7dfb      	ldrb	r3, [r7, #23]
 800167e:	3301      	adds	r3, #1
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	4413      	add	r3, r2
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f005 ff95 	bl	80075b8 <atoi>
 800168e:	4602      	mov	r2, r0
 8001690:	7dfb      	ldrb	r3, [r7, #23]
 8001692:	b292      	uxth	r2, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	3318      	adds	r3, #24
 8001698:	443b      	add	r3, r7
 800169a:	f823 2c0c 	strh.w	r2, [r3, #-12]
		if (vol[i] > 3000) vol[i] = 3000;
 800169e:	7dfb      	ldrb	r3, [r7, #23]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	3318      	adds	r3, #24
 80016a4:	443b      	add	r3, r7
 80016a6:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 80016aa:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d907      	bls.n	80016c2 <Cmd_set_tec_vol+0x6a>
 80016b2:	7dfb      	ldrb	r3, [r7, #23]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	3318      	adds	r3, #24
 80016b8:	443b      	add	r3, r7
 80016ba:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80016be:	f823 2c0c 	strh.w	r2, [r3, #-12]
	for (uint8_t i = 0; i < 4; i++)
 80016c2:	7dfb      	ldrb	r3, [r7, #23]
 80016c4:	3301      	adds	r3, #1
 80016c6:	75fb      	strb	r3, [r7, #23]
 80016c8:	7dfb      	ldrb	r3, [r7, #23]
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	d9d6      	bls.n	800167c <Cmd_set_tec_vol+0x24>
	}
	temperature_set_tec_vol(0, vol[0]);
 80016ce:	89bb      	ldrh	r3, [r7, #12]
 80016d0:	4619      	mov	r1, r3
 80016d2:	2000      	movs	r0, #0
 80016d4:	f003 fd1e 	bl	8005114 <temperature_set_tec_vol>
	temperature_set_tec_vol(1, vol[1]);
 80016d8:	89fb      	ldrh	r3, [r7, #14]
 80016da:	4619      	mov	r1, r3
 80016dc:	2001      	movs	r0, #1
 80016de:	f003 fd19 	bl	8005114 <temperature_set_tec_vol>
	temperature_set_tec_vol(2, vol[2]);
 80016e2:	8a3b      	ldrh	r3, [r7, #16]
 80016e4:	4619      	mov	r1, r3
 80016e6:	2002      	movs	r0, #2
 80016e8:	f003 fd14 	bl	8005114 <temperature_set_tec_vol>
	temperature_set_tec_vol(3, vol[3]);
 80016ec:	8a7b      	ldrh	r3, [r7, #18]
 80016ee:	4619      	mov	r1, r3
 80016f0:	2003      	movs	r0, #3
 80016f2:	f003 fd0f 	bl	8005114 <temperature_set_tec_vol>
	UART_Printf(&CONSOLE_UART, "Tec voltage[%d]:%i mV\n", 0, vol[0]);
 80016f6:	89bb      	ldrh	r3, [r7, #12]
 80016f8:	2200      	movs	r2, #0
 80016fa:	490d      	ldr	r1, [pc, #52]	@ (8001730 <Cmd_set_tec_vol+0xd8>)
 80016fc:	480d      	ldr	r0, [pc, #52]	@ (8001734 <Cmd_set_tec_vol+0xdc>)
 80016fe:	f7ff f999 	bl	8000a34 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "Tec voltage[%d]:%i mV\n", 1, vol[1]);
 8001702:	89fb      	ldrh	r3, [r7, #14]
 8001704:	2201      	movs	r2, #1
 8001706:	490a      	ldr	r1, [pc, #40]	@ (8001730 <Cmd_set_tec_vol+0xd8>)
 8001708:	480a      	ldr	r0, [pc, #40]	@ (8001734 <Cmd_set_tec_vol+0xdc>)
 800170a:	f7ff f993 	bl	8000a34 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "Tec voltage[%d]:%i mV\n", 2, vol[2]);
 800170e:	8a3b      	ldrh	r3, [r7, #16]
 8001710:	2202      	movs	r2, #2
 8001712:	4907      	ldr	r1, [pc, #28]	@ (8001730 <Cmd_set_tec_vol+0xd8>)
 8001714:	4807      	ldr	r0, [pc, #28]	@ (8001734 <Cmd_set_tec_vol+0xdc>)
 8001716:	f7ff f98d 	bl	8000a34 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "Tec voltage[%d]:%i mV\n", 3, vol[3]);
 800171a:	8a7b      	ldrh	r3, [r7, #18]
 800171c:	2203      	movs	r2, #3
 800171e:	4904      	ldr	r1, [pc, #16]	@ (8001730 <Cmd_set_tec_vol+0xd8>)
 8001720:	4804      	ldr	r0, [pc, #16]	@ (8001734 <Cmd_set_tec_vol+0xdc>)
 8001722:	f7ff f987 	bl	8000a34 <UART_Printf>
	return (CMDLINE_OK);
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	08007ccc 	.word	0x08007ccc
 8001734:	20000324 	.word	0x20000324

08001738 <Cmd_get_tec_vol>:
int Cmd_get_tec_vol(int argc, char *argv[])
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
	if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b01      	cmp	r3, #1
 8001746:	dd01      	ble.n	800174c <Cmd_get_tec_vol+0x14>
 8001748:	2302      	movs	r3, #2
 800174a:	e02c      	b.n	80017a6 <Cmd_get_tec_vol+0x6e>
	uint16_t vol_0 = temperature_get_tec_vol(0);
 800174c:	2000      	movs	r0, #0
 800174e:	f003 fd01 	bl	8005154 <temperature_get_tec_vol>
 8001752:	4603      	mov	r3, r0
 8001754:	81fb      	strh	r3, [r7, #14]
	uint16_t vol_1 = temperature_get_tec_vol(1);
 8001756:	2001      	movs	r0, #1
 8001758:	f003 fcfc 	bl	8005154 <temperature_get_tec_vol>
 800175c:	4603      	mov	r3, r0
 800175e:	81bb      	strh	r3, [r7, #12]
	uint16_t vol_2 = temperature_get_tec_vol(2);
 8001760:	2002      	movs	r0, #2
 8001762:	f003 fcf7 	bl	8005154 <temperature_get_tec_vol>
 8001766:	4603      	mov	r3, r0
 8001768:	817b      	strh	r3, [r7, #10]
	uint16_t vol_3 = temperature_get_tec_vol(3);
 800176a:	2003      	movs	r0, #3
 800176c:	f003 fcf2 	bl	8005154 <temperature_get_tec_vol>
 8001770:	4603      	mov	r3, r0
 8001772:	813b      	strh	r3, [r7, #8]
	UART_Printf(&CONSOLE_UART, "Tec voltage[%d]:%i mV\n", 0, vol_0);
 8001774:	89fb      	ldrh	r3, [r7, #14]
 8001776:	2200      	movs	r2, #0
 8001778:	490d      	ldr	r1, [pc, #52]	@ (80017b0 <Cmd_get_tec_vol+0x78>)
 800177a:	480e      	ldr	r0, [pc, #56]	@ (80017b4 <Cmd_get_tec_vol+0x7c>)
 800177c:	f7ff f95a 	bl	8000a34 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "Tec voltage[%d]:%i mV\n", 1, vol_1);
 8001780:	89bb      	ldrh	r3, [r7, #12]
 8001782:	2201      	movs	r2, #1
 8001784:	490a      	ldr	r1, [pc, #40]	@ (80017b0 <Cmd_get_tec_vol+0x78>)
 8001786:	480b      	ldr	r0, [pc, #44]	@ (80017b4 <Cmd_get_tec_vol+0x7c>)
 8001788:	f7ff f954 	bl	8000a34 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "Tec voltage[%d]:%i mV\n", 2, vol_2);
 800178c:	897b      	ldrh	r3, [r7, #10]
 800178e:	2202      	movs	r2, #2
 8001790:	4907      	ldr	r1, [pc, #28]	@ (80017b0 <Cmd_get_tec_vol+0x78>)
 8001792:	4808      	ldr	r0, [pc, #32]	@ (80017b4 <Cmd_get_tec_vol+0x7c>)
 8001794:	f7ff f94e 	bl	8000a34 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "Tec voltage[%d]:%i mV\n", 3, vol_3);
 8001798:	893b      	ldrh	r3, [r7, #8]
 800179a:	2203      	movs	r2, #3
 800179c:	4904      	ldr	r1, [pc, #16]	@ (80017b0 <Cmd_get_tec_vol+0x78>)
 800179e:	4805      	ldr	r0, [pc, #20]	@ (80017b4 <Cmd_get_tec_vol+0x7c>)
 80017a0:	f7ff f948 	bl	8000a34 <UART_Printf>
	return (CMDLINE_OK);
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	08007ccc 	.word	0x08007ccc
 80017b4:	20000324 	.word	0x20000324

080017b8 <Cmd_set_heater_duty>:
int Cmd_set_heater_duty(int argc, char *argv[])
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
	if (argc < 5) return CMDLINE_TOO_FEW_ARGS;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b04      	cmp	r3, #4
 80017c6:	dc01      	bgt.n	80017cc <Cmd_set_heater_duty+0x14>
 80017c8:	2303      	movs	r3, #3
 80017ca:	e057      	b.n	800187c <Cmd_set_heater_duty+0xc4>
	if (argc > 5) return CMDLINE_TOO_MANY_ARGS;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b05      	cmp	r3, #5
 80017d0:	dd01      	ble.n	80017d6 <Cmd_set_heater_duty+0x1e>
 80017d2:	2302      	movs	r3, #2
 80017d4:	e052      	b.n	800187c <Cmd_set_heater_duty+0xc4>
	uint8_t duty[4];
	for (uint8_t i = 0; i < 4; i++)
 80017d6:	2300      	movs	r3, #0
 80017d8:	73fb      	strb	r3, [r7, #15]
 80017da:	e01f      	b.n	800181c <Cmd_set_heater_duty+0x64>
	{
		duty[i] = atoi(argv[i+1]);
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
 80017de:	3301      	adds	r3, #1
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	4413      	add	r3, r2
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f005 fee5 	bl	80075b8 <atoi>
 80017ee:	4602      	mov	r2, r0
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	3310      	adds	r3, #16
 80017f6:	443b      	add	r3, r7
 80017f8:	f803 2c08 	strb.w	r2, [r3, #-8]
		if (duty[i] > 100) duty[i] = 100;
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	3310      	adds	r3, #16
 8001800:	443b      	add	r3, r7
 8001802:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8001806:	2b64      	cmp	r3, #100	@ 0x64
 8001808:	d905      	bls.n	8001816 <Cmd_set_heater_duty+0x5e>
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	3310      	adds	r3, #16
 800180e:	443b      	add	r3, r7
 8001810:	2264      	movs	r2, #100	@ 0x64
 8001812:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (uint8_t i = 0; i < 4; i++)
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	3301      	adds	r3, #1
 800181a:	73fb      	strb	r3, [r7, #15]
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	2b03      	cmp	r3, #3
 8001820:	d9dc      	bls.n	80017dc <Cmd_set_heater_duty+0x24>
	}
	temperature_set_heater_duty(0, duty[0]);
 8001822:	7a3b      	ldrb	r3, [r7, #8]
 8001824:	4619      	mov	r1, r3
 8001826:	2000      	movs	r0, #0
 8001828:	f003 fcb0 	bl	800518c <temperature_set_heater_duty>
	temperature_set_heater_duty(1, duty[1]);
 800182c:	7a7b      	ldrb	r3, [r7, #9]
 800182e:	4619      	mov	r1, r3
 8001830:	2001      	movs	r0, #1
 8001832:	f003 fcab 	bl	800518c <temperature_set_heater_duty>
	temperature_set_heater_duty(2, duty[2]);
 8001836:	7abb      	ldrb	r3, [r7, #10]
 8001838:	4619      	mov	r1, r3
 800183a:	2002      	movs	r0, #2
 800183c:	f003 fca6 	bl	800518c <temperature_set_heater_duty>
	temperature_set_heater_duty(3, duty[3]);
 8001840:	7afb      	ldrb	r3, [r7, #11]
 8001842:	4619      	mov	r1, r3
 8001844:	2003      	movs	r0, #3
 8001846:	f003 fca1 	bl	800518c <temperature_set_heater_duty>
	UART_Printf(&CONSOLE_UART, "Heater duty[%d]:%i %\n", 0, duty[0]);
 800184a:	7a3b      	ldrb	r3, [r7, #8]
 800184c:	2200      	movs	r2, #0
 800184e:	490d      	ldr	r1, [pc, #52]	@ (8001884 <Cmd_set_heater_duty+0xcc>)
 8001850:	480d      	ldr	r0, [pc, #52]	@ (8001888 <Cmd_set_heater_duty+0xd0>)
 8001852:	f7ff f8ef 	bl	8000a34 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "Heater duty[%d]:%i %\n", 1, duty[1]);
 8001856:	7a7b      	ldrb	r3, [r7, #9]
 8001858:	2201      	movs	r2, #1
 800185a:	490a      	ldr	r1, [pc, #40]	@ (8001884 <Cmd_set_heater_duty+0xcc>)
 800185c:	480a      	ldr	r0, [pc, #40]	@ (8001888 <Cmd_set_heater_duty+0xd0>)
 800185e:	f7ff f8e9 	bl	8000a34 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "Heater duty[%d]:%i %\n", 2, duty[2]);
 8001862:	7abb      	ldrb	r3, [r7, #10]
 8001864:	2202      	movs	r2, #2
 8001866:	4907      	ldr	r1, [pc, #28]	@ (8001884 <Cmd_set_heater_duty+0xcc>)
 8001868:	4807      	ldr	r0, [pc, #28]	@ (8001888 <Cmd_set_heater_duty+0xd0>)
 800186a:	f7ff f8e3 	bl	8000a34 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "Heater duty[%d]:%i %\n", 3, duty[3]);
 800186e:	7afb      	ldrb	r3, [r7, #11]
 8001870:	2203      	movs	r2, #3
 8001872:	4904      	ldr	r1, [pc, #16]	@ (8001884 <Cmd_set_heater_duty+0xcc>)
 8001874:	4804      	ldr	r0, [pc, #16]	@ (8001888 <Cmd_set_heater_duty+0xd0>)
 8001876:	f7ff f8dd 	bl	8000a34 <UART_Printf>
	return (CMDLINE_OK);
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	08007ce4 	.word	0x08007ce4
 8001888:	20000324 	.word	0x20000324

0800188c <Cmd_get_heater_duty>:
int Cmd_get_heater_duty(int argc, char *argv[])
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
	if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b01      	cmp	r3, #1
 800189a:	dd01      	ble.n	80018a0 <Cmd_get_heater_duty+0x14>
 800189c:	2302      	movs	r3, #2
 800189e:	e030      	b.n	8001902 <Cmd_get_heater_duty+0x76>
	int16_t duty_0 = temperature_get_heater_duty(0);
 80018a0:	2000      	movs	r0, #0
 80018a2:	f003 fc97 	bl	80051d4 <temperature_get_heater_duty>
 80018a6:	4603      	mov	r3, r0
 80018a8:	81fb      	strh	r3, [r7, #14]
	int16_t duty_1 = temperature_get_heater_duty(1);
 80018aa:	2001      	movs	r0, #1
 80018ac:	f003 fc92 	bl	80051d4 <temperature_get_heater_duty>
 80018b0:	4603      	mov	r3, r0
 80018b2:	81bb      	strh	r3, [r7, #12]
	int16_t duty_2 = temperature_get_heater_duty(2);
 80018b4:	2002      	movs	r0, #2
 80018b6:	f003 fc8d 	bl	80051d4 <temperature_get_heater_duty>
 80018ba:	4603      	mov	r3, r0
 80018bc:	817b      	strh	r3, [r7, #10]
	int16_t duty_3 = temperature_get_heater_duty(3);
 80018be:	2003      	movs	r0, #3
 80018c0:	f003 fc88 	bl	80051d4 <temperature_get_heater_duty>
 80018c4:	4603      	mov	r3, r0
 80018c6:	813b      	strh	r3, [r7, #8]
	UART_Printf(&CONSOLE_UART, "Heater duty[%d]:%i %\n", 0, duty_0);
 80018c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018cc:	2200      	movs	r2, #0
 80018ce:	490f      	ldr	r1, [pc, #60]	@ (800190c <Cmd_get_heater_duty+0x80>)
 80018d0:	480f      	ldr	r0, [pc, #60]	@ (8001910 <Cmd_get_heater_duty+0x84>)
 80018d2:	f7ff f8af 	bl	8000a34 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "Heater duty[%d]:%i %\n", 1, duty_1);
 80018d6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018da:	2201      	movs	r2, #1
 80018dc:	490b      	ldr	r1, [pc, #44]	@ (800190c <Cmd_get_heater_duty+0x80>)
 80018de:	480c      	ldr	r0, [pc, #48]	@ (8001910 <Cmd_get_heater_duty+0x84>)
 80018e0:	f7ff f8a8 	bl	8000a34 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "Heater duty[%d]:%i %\n", 2, duty_2);
 80018e4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80018e8:	2202      	movs	r2, #2
 80018ea:	4908      	ldr	r1, [pc, #32]	@ (800190c <Cmd_get_heater_duty+0x80>)
 80018ec:	4808      	ldr	r0, [pc, #32]	@ (8001910 <Cmd_get_heater_duty+0x84>)
 80018ee:	f7ff f8a1 	bl	8000a34 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "Heater duty[%d]:%i %\n", 3, duty_3);
 80018f2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80018f6:	2203      	movs	r2, #3
 80018f8:	4904      	ldr	r1, [pc, #16]	@ (800190c <Cmd_get_heater_duty+0x80>)
 80018fa:	4805      	ldr	r0, [pc, #20]	@ (8001910 <Cmd_get_heater_duty+0x84>)
 80018fc:	f7ff f89a 	bl	8000a34 <UART_Printf>
	return (CMDLINE_OK);
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	08007ce4 	.word	0x08007ce4
 8001910:	20000324 	.word	0x20000324

08001914 <Cmd_temp_ctrl>:
int Cmd_temp_ctrl(int argc, char *argv[])
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
	if (argc < 5) return CMDLINE_TOO_FEW_ARGS;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b04      	cmp	r3, #4
 8001922:	dc01      	bgt.n	8001928 <Cmd_temp_ctrl+0x14>
 8001924:	2303      	movs	r3, #3
 8001926:	e083      	b.n	8001a30 <Cmd_temp_ctrl+0x11c>
	if (argc > 5) return CMDLINE_TOO_MANY_ARGS;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b05      	cmp	r3, #5
 800192c:	dd01      	ble.n	8001932 <Cmd_temp_ctrl+0x1e>
 800192e:	2302      	movs	r3, #2
 8001930:	e07e      	b.n	8001a30 <Cmd_temp_ctrl+0x11c>
	mode_ctrl_temp_t mode_0 = OFF;
 8001932:	2300      	movs	r3, #0
 8001934:	73fb      	strb	r3, [r7, #15]
	mode_ctrl_temp_t mode_1 = OFF;
 8001936:	2300      	movs	r3, #0
 8001938:	73bb      	strb	r3, [r7, #14]
	mode_ctrl_temp_t mode_2 = OFF;
 800193a:	2300      	movs	r3, #0
 800193c:	737b      	strb	r3, [r7, #13]
	mode_ctrl_temp_t mode_3 = OFF;
 800193e:	2300      	movs	r3, #0
 8001940:	733b      	strb	r3, [r7, #12]

	if (!strcmp(argv[1], "C")) mode_0 = COOL;
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	3304      	adds	r3, #4
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	493b      	ldr	r1, [pc, #236]	@ (8001a38 <Cmd_temp_ctrl+0x124>)
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fc3c 	bl	80001c8 <strcmp>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d102      	bne.n	800195c <Cmd_temp_ctrl+0x48>
 8001956:	2301      	movs	r3, #1
 8001958:	73fb      	strb	r3, [r7, #15]
 800195a:	e00e      	b.n	800197a <Cmd_temp_ctrl+0x66>
	else if (!strcmp(argv[1], "H")) mode_0 = HEAT;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	3304      	adds	r3, #4
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4936      	ldr	r1, [pc, #216]	@ (8001a3c <Cmd_temp_ctrl+0x128>)
 8001964:	4618      	mov	r0, r3
 8001966:	f7fe fc2f 	bl	80001c8 <strcmp>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d102      	bne.n	8001976 <Cmd_temp_ctrl+0x62>
 8001970:	2302      	movs	r3, #2
 8001972:	73fb      	strb	r3, [r7, #15]
 8001974:	e001      	b.n	800197a <Cmd_temp_ctrl+0x66>
	else mode_0 = OFF;
 8001976:	2300      	movs	r3, #0
 8001978:	73fb      	strb	r3, [r7, #15]
	if (!strcmp(argv[2], "C")) mode_1 = COOL;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	3308      	adds	r3, #8
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	492d      	ldr	r1, [pc, #180]	@ (8001a38 <Cmd_temp_ctrl+0x124>)
 8001982:	4618      	mov	r0, r3
 8001984:	f7fe fc20 	bl	80001c8 <strcmp>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d102      	bne.n	8001994 <Cmd_temp_ctrl+0x80>
 800198e:	2301      	movs	r3, #1
 8001990:	73bb      	strb	r3, [r7, #14]
 8001992:	e00e      	b.n	80019b2 <Cmd_temp_ctrl+0x9e>
	else if (!strcmp(argv[2], "H")) mode_1 = HEAT;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	3308      	adds	r3, #8
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4928      	ldr	r1, [pc, #160]	@ (8001a3c <Cmd_temp_ctrl+0x128>)
 800199c:	4618      	mov	r0, r3
 800199e:	f7fe fc13 	bl	80001c8 <strcmp>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <Cmd_temp_ctrl+0x9a>
 80019a8:	2302      	movs	r3, #2
 80019aa:	73bb      	strb	r3, [r7, #14]
 80019ac:	e001      	b.n	80019b2 <Cmd_temp_ctrl+0x9e>
	else mode_1 = OFF;
 80019ae:	2300      	movs	r3, #0
 80019b0:	73bb      	strb	r3, [r7, #14]
	if (!strcmp(argv[3], "C")) mode_1 = COOL;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	330c      	adds	r3, #12
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	491f      	ldr	r1, [pc, #124]	@ (8001a38 <Cmd_temp_ctrl+0x124>)
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fc04 	bl	80001c8 <strcmp>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d102      	bne.n	80019cc <Cmd_temp_ctrl+0xb8>
 80019c6:	2301      	movs	r3, #1
 80019c8:	73bb      	strb	r3, [r7, #14]
 80019ca:	e00e      	b.n	80019ea <Cmd_temp_ctrl+0xd6>
	else if (!strcmp(argv[3], "H")) mode_2 = HEAT;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	330c      	adds	r3, #12
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	491a      	ldr	r1, [pc, #104]	@ (8001a3c <Cmd_temp_ctrl+0x128>)
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fbf7 	bl	80001c8 <strcmp>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d102      	bne.n	80019e6 <Cmd_temp_ctrl+0xd2>
 80019e0:	2302      	movs	r3, #2
 80019e2:	737b      	strb	r3, [r7, #13]
 80019e4:	e001      	b.n	80019ea <Cmd_temp_ctrl+0xd6>
	else mode_2 = OFF;
 80019e6:	2300      	movs	r3, #0
 80019e8:	737b      	strb	r3, [r7, #13]
	if (!strcmp(argv[4], "C")) mode_3 = COOL;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	3310      	adds	r3, #16
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4911      	ldr	r1, [pc, #68]	@ (8001a38 <Cmd_temp_ctrl+0x124>)
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fbe8 	bl	80001c8 <strcmp>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d102      	bne.n	8001a04 <Cmd_temp_ctrl+0xf0>
 80019fe:	2301      	movs	r3, #1
 8001a00:	733b      	strb	r3, [r7, #12]
 8001a02:	e00e      	b.n	8001a22 <Cmd_temp_ctrl+0x10e>
	else if (!strcmp(argv[4], "H")) mode_3 = HEAT;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	3310      	adds	r3, #16
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	490c      	ldr	r1, [pc, #48]	@ (8001a3c <Cmd_temp_ctrl+0x128>)
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7fe fbdb 	bl	80001c8 <strcmp>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d102      	bne.n	8001a1e <Cmd_temp_ctrl+0x10a>
 8001a18:	2302      	movs	r3, #2
 8001a1a:	733b      	strb	r3, [r7, #12]
 8001a1c:	e001      	b.n	8001a22 <Cmd_temp_ctrl+0x10e>
	else mode_3 = OFF;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	733b      	strb	r3, [r7, #12]

	temperature_set_ctrl(mode_0, mode_1, mode_2, mode_3);
 8001a22:	7b3b      	ldrb	r3, [r7, #12]
 8001a24:	7b7a      	ldrb	r2, [r7, #13]
 8001a26:	7bb9      	ldrb	r1, [r7, #14]
 8001a28:	7bf8      	ldrb	r0, [r7, #15]
 8001a2a:	f003 fc25 	bl	8005278 <temperature_set_ctrl>
	return (CMDLINE_OK);
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	08007cfc 	.word	0x08007cfc
 8001a3c:	08007d00 	.word	0x08007d00

08001a40 <Cmd_temp_auto_ctrl>:
int Cmd_temp_auto_ctrl(int argc, char *argv[])
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
	if (argc < 5) return CMDLINE_TOO_FEW_ARGS;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b04      	cmp	r3, #4
 8001a4e:	dc01      	bgt.n	8001a54 <Cmd_temp_auto_ctrl+0x14>
 8001a50:	2303      	movs	r3, #3
 8001a52:	e03f      	b.n	8001ad4 <Cmd_temp_auto_ctrl+0x94>
	if (argc > 5) return CMDLINE_TOO_MANY_ARGS;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b05      	cmp	r3, #5
 8001a58:	dd01      	ble.n	8001a5e <Cmd_temp_auto_ctrl+0x1e>
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	e03a      	b.n	8001ad4 <Cmd_temp_auto_ctrl+0x94>
	uint8_t auto_0 = atoi(argv[1]) ? 1 : 0;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	3304      	adds	r3, #4
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f005 fda7 	bl	80075b8 <atoi>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	bf14      	ite	ne
 8001a70:	2301      	movne	r3, #1
 8001a72:	2300      	moveq	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	73fb      	strb	r3, [r7, #15]
	uint8_t auto_1 = atoi(argv[2]) ? 1 : 0;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	3308      	adds	r3, #8
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f005 fd9a 	bl	80075b8 <atoi>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	bf14      	ite	ne
 8001a8a:	2301      	movne	r3, #1
 8001a8c:	2300      	moveq	r3, #0
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	73bb      	strb	r3, [r7, #14]
	uint8_t auto_2 = atoi(argv[3]) ? 1 : 0;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	330c      	adds	r3, #12
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f005 fd8d 	bl	80075b8 <atoi>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	bf14      	ite	ne
 8001aa4:	2301      	movne	r3, #1
 8001aa6:	2300      	moveq	r3, #0
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	737b      	strb	r3, [r7, #13]
	uint8_t auto_3 = atoi(argv[4]) ? 1 : 0;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	3310      	adds	r3, #16
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f005 fd80 	bl	80075b8 <atoi>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	bf14      	ite	ne
 8001abe:	2301      	movne	r3, #1
 8001ac0:	2300      	moveq	r3, #0
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	733b      	strb	r3, [r7, #12]
	temperature_set_auto_ctrl(auto_0, auto_1, auto_2, auto_3);
 8001ac6:	7b3b      	ldrb	r3, [r7, #12]
 8001ac8:	7b7a      	ldrb	r2, [r7, #13]
 8001aca:	7bb9      	ldrb	r1, [r7, #14]
 8001acc:	7bf8      	ldrb	r0, [r7, #15]
 8001ace:	f003 fba1 	bl	8005214 <temperature_set_auto_ctrl>
	return (CMDLINE_OK);
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <Cmd_set_ir_duty>:
/* Command for ir led */
int Cmd_set_ir_duty(int argc, char *argv[])
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
	return (CMDLINE_OK);
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <Cmd_get_ir_duty>:
int Cmd_get_ir_duty(int argc, char *argv[])
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
	return (CMDLINE_OK);
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <Cmd_get_acceleration_gyroscope>:
/* Command for i2c sensor */
int Cmd_get_acceleration_gyroscope(int argc, char *argv[])
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
	return (CMDLINE_OK);
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <Cmd_get_pressure>:
int Cmd_get_pressure(int argc, char *argv[])
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
	return (CMDLINE_OK);
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <Cmd_get_all>:
/* Command for system */
int Cmd_get_all(int argc, char *argv[])
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
	UART_Send_String(&CONSOLE_UART, "get all \n");
 8001b46:	4904      	ldr	r1, [pc, #16]	@ (8001b58 <Cmd_get_all+0x1c>)
 8001b48:	4804      	ldr	r0, [pc, #16]	@ (8001b5c <Cmd_get_all+0x20>)
 8001b4a:	f7fe fee4 	bl	8000916 <UART_Send_String>
	return (CMDLINE_OK);
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	08007d04 	.word	0x08007d04
 8001b5c:	20000324 	.word	0x20000324

08001b60 <Cmd_reset>:


///////////////////////////////////////////////////////////////////////////////////////////////////////////////

int Cmd_reset(int argc, char *argv[])
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
	lt8722_reset();
 8001b6a:	f001 fab1 	bl	80030d0 <lt8722_reset>
	return (CMDLINE_OK);
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <Cmd_set_en_req>:

int Cmd_set_en_req(int argc, char *argv[])
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
	LL_GPIO_SetOutputPin(TEC_1_EN_GPIO_Port, TEC_1_EN_Pin);
 8001b82:	2120      	movs	r1, #32
 8001b84:	4806      	ldr	r0, [pc, #24]	@ (8001ba0 <Cmd_set_en_req+0x28>)
 8001b86:	f7ff fac1 	bl	800110c <LL_GPIO_SetOutputPin>
	lt8722_reg_write(LT8722_SPIS_COMMAND, 0x00004000);
 8001b8a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b8e:	2000      	movs	r0, #0
 8001b90:	f001 fa30 	bl	8002ff4 <lt8722_reg_write>
//	lt8722_set_enable_req(LT8722_ENABLE_REQ_ENABLED);
	return (CMDLINE_OK);
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000

08001ba4 <Cmd_reset_en_req>:

int Cmd_reset_en_req(int argc, char *argv[])
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
	lt8722_set_enable_req(LT8722_ENABLE_REQ_DISABLED);
 8001bae:	2000      	movs	r0, #0
 8001bb0:	f001 fa6e 	bl	8003090 <lt8722_set_enable_req>
	return (CMDLINE_OK);
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <Cmd_clear_status_reg>:

int Cmd_clear_status_reg(int argc, char *argv[])
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	6039      	str	r1, [r7, #0]
	lt8722_reg_write(LT8722_SPIS_STATUS, 0);
 8001bc8:	2100      	movs	r1, #0
 8001bca:	2001      	movs	r0, #1
 8001bcc:	f001 fa12 	bl	8002ff4 <lt8722_reg_write>
	return (CMDLINE_OK);
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <Cmd_read>:

int Cmd_read(int argc, char *argv[])
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
	uint32_t data;
	lt8722_reg_read(LT8722_SPIS_COMMAND, &data);
 8001be6:	f107 030c 	add.w	r3, r7, #12
 8001bea:	4619      	mov	r1, r3
 8001bec:	2000      	movs	r0, #0
 8001bee:	f001 f9cb 	bl	8002f88 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_COMMAND: 0x%X-%X \n", data>>16, data);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	0c1a      	lsrs	r2, r3, #16
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	4930      	ldr	r1, [pc, #192]	@ (8001cbc <Cmd_read+0xe0>)
 8001bfa:	4831      	ldr	r0, [pc, #196]	@ (8001cc0 <Cmd_read+0xe4>)
 8001bfc:	f7fe ff1a 	bl	8000a34 <UART_Printf>

	lt8722_reg_read(LT8722_SPIS_STATUS, &data);
 8001c00:	f107 030c 	add.w	r3, r7, #12
 8001c04:	4619      	mov	r1, r3
 8001c06:	2001      	movs	r0, #1
 8001c08:	f001 f9be 	bl	8002f88 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_STATUS: 0x%X-%X \n", data>>16, data);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	0c1a      	lsrs	r2, r3, #16
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	492c      	ldr	r1, [pc, #176]	@ (8001cc4 <Cmd_read+0xe8>)
 8001c14:	482a      	ldr	r0, [pc, #168]	@ (8001cc0 <Cmd_read+0xe4>)
 8001c16:	f7fe ff0d 	bl	8000a34 <UART_Printf>

	lt8722_reg_read(LT8722_SPIS_DAC_ILIMN, &data);
 8001c1a:	f107 030c 	add.w	r3, r7, #12
 8001c1e:	4619      	mov	r1, r3
 8001c20:	2002      	movs	r0, #2
 8001c22:	f001 f9b1 	bl	8002f88 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_DAC_ILIMN: 0x%X-%X \n", data>>16, data);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	0c1a      	lsrs	r2, r3, #16
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4926      	ldr	r1, [pc, #152]	@ (8001cc8 <Cmd_read+0xec>)
 8001c2e:	4824      	ldr	r0, [pc, #144]	@ (8001cc0 <Cmd_read+0xe4>)
 8001c30:	f7fe ff00 	bl	8000a34 <UART_Printf>

	lt8722_reg_read(LT8722_SPIS_DAC_ILIMP, &data);
 8001c34:	f107 030c 	add.w	r3, r7, #12
 8001c38:	4619      	mov	r1, r3
 8001c3a:	2003      	movs	r0, #3
 8001c3c:	f001 f9a4 	bl	8002f88 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_DAC_ILIMP: 0x%X-%X \n", data>>16, data);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	0c1a      	lsrs	r2, r3, #16
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4921      	ldr	r1, [pc, #132]	@ (8001ccc <Cmd_read+0xf0>)
 8001c48:	481d      	ldr	r0, [pc, #116]	@ (8001cc0 <Cmd_read+0xe4>)
 8001c4a:	f7fe fef3 	bl	8000a34 <UART_Printf>

	lt8722_reg_read(LT8722_SPIS_DAC, &data);
 8001c4e:	f107 030c 	add.w	r3, r7, #12
 8001c52:	4619      	mov	r1, r3
 8001c54:	2004      	movs	r0, #4
 8001c56:	f001 f997 	bl	8002f88 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_DAC: 0x%X-%X \n", data>>16, data);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	0c1a      	lsrs	r2, r3, #16
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	491b      	ldr	r1, [pc, #108]	@ (8001cd0 <Cmd_read+0xf4>)
 8001c62:	4817      	ldr	r0, [pc, #92]	@ (8001cc0 <Cmd_read+0xe4>)
 8001c64:	f7fe fee6 	bl	8000a34 <UART_Printf>

	lt8722_reg_read(LT8722_SPIS_OV_CLAMP, &data);
 8001c68:	f107 030c 	add.w	r3, r7, #12
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	2005      	movs	r0, #5
 8001c70:	f001 f98a 	bl	8002f88 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_OV_CLAMP: 0x%X \n", data);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	461a      	mov	r2, r3
 8001c78:	4916      	ldr	r1, [pc, #88]	@ (8001cd4 <Cmd_read+0xf8>)
 8001c7a:	4811      	ldr	r0, [pc, #68]	@ (8001cc0 <Cmd_read+0xe4>)
 8001c7c:	f7fe feda 	bl	8000a34 <UART_Printf>

	lt8722_reg_read(LT8722_SPIS_UV_CLAMP, &data);
 8001c80:	f107 030c 	add.w	r3, r7, #12
 8001c84:	4619      	mov	r1, r3
 8001c86:	2006      	movs	r0, #6
 8001c88:	f001 f97e 	bl	8002f88 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_UV_CLAMP: 0x%X \n", data);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	4911      	ldr	r1, [pc, #68]	@ (8001cd8 <Cmd_read+0xfc>)
 8001c92:	480b      	ldr	r0, [pc, #44]	@ (8001cc0 <Cmd_read+0xe4>)
 8001c94:	f7fe fece 	bl	8000a34 <UART_Printf>

	lt8722_reg_read(LT8722_SPIS_AMUX, &data);
 8001c98:	f107 030c 	add.w	r3, r7, #12
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	2007      	movs	r0, #7
 8001ca0:	f001 f972 	bl	8002f88 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_AMUX: 0x%X \n", data);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	490c      	ldr	r1, [pc, #48]	@ (8001cdc <Cmd_read+0x100>)
 8001caa:	4805      	ldr	r0, [pc, #20]	@ (8001cc0 <Cmd_read+0xe4>)
 8001cac:	f7fe fec2 	bl	8000a34 <UART_Printf>

	return (CMDLINE_OK);
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	08007d10 	.word	0x08007d10
 8001cc0:	20000324 	.word	0x20000324
 8001cc4:	08007d28 	.word	0x08007d28
 8001cc8:	08007d40 	.word	0x08007d40
 8001ccc:	08007d5c 	.word	0x08007d5c
 8001cd0:	08007d78 	.word	0x08007d78
 8001cd4:	08007d8c 	.word	0x08007d8c
 8001cd8:	08007da4 	.word	0x08007da4
 8001cdc:	08007dbc 	.word	0x08007dbc

08001ce0 <Cmd_on_tec>:


int Cmd_on_tec(int argc, char *argv[])
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
	lt8722_init();
 8001cea:	f001 fa83 	bl	80031f4 <lt8722_init>
	return (CMDLINE_OK);
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <Cmd_tec_set_vol>:

int Cmd_tec_set_vol(int argc, char *argv[])
{
 8001cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cfc:	b088      	sub	sp, #32
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6178      	str	r0, [r7, #20]
 8001d02:	6139      	str	r1, [r7, #16]
//	if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
//	if (argc > 2) return CMDLINE_TOO_MANY_ARGS;

	int64_t vol = atoi(argv[1]);
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	3304      	adds	r3, #4
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f005 fc54 	bl	80075b8 <atoi>
 8001d10:	4603      	mov	r3, r0
 8001d12:	17da      	asrs	r2, r3, #31
 8001d14:	469a      	mov	sl, r3
 8001d16:	4693      	mov	fp, r2
 8001d18:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	UART_Printf(&CONSOLE_UART, "Tec set: %d mV \n", vol);
 8001d1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d20:	4925      	ldr	r1, [pc, #148]	@ (8001db8 <Cmd_tec_set_vol+0xc0>)
 8001d22:	4826      	ldr	r0, [pc, #152]	@ (8001dbc <Cmd_tec_set_vol+0xc4>)
 8001d24:	f7fe fe86 	bl	8000a34 <UART_Printf>
	vol *= 1000000;
 8001d28:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	f04f 0a00 	mov.w	sl, #0
 8001d34:	f04f 0b00 	mov.w	fp, #0
 8001d38:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8001d3c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001d40:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001d44:	4652      	mov	r2, sl
 8001d46:	465b      	mov	r3, fp
 8001d48:	1a14      	subs	r4, r2, r0
 8001d4a:	eb63 0501 	sbc.w	r5, r3, r1
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	026b      	lsls	r3, r5, #9
 8001d58:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001d5c:	0262      	lsls	r2, r4, #9
 8001d5e:	4614      	mov	r4, r2
 8001d60:	461d      	mov	r5, r3
 8001d62:	eb14 0800 	adds.w	r8, r4, r0
 8001d66:	eb45 0901 	adc.w	r9, r5, r1
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d76:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d7a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d7e:	ebb2 0408 	subs.w	r4, r2, r8
 8001d82:	60bc      	str	r4, [r7, #8]
 8001d84:	eb63 0309 	sbc.w	r3, r3, r9
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d8e:	4623      	mov	r3, r4
 8001d90:	181b      	adds	r3, r3, r0
 8001d92:	603b      	str	r3, [r7, #0]
 8001d94:	462b      	mov	r3, r5
 8001d96:	eb41 0303 	adc.w	r3, r1, r3
 8001d9a:	607b      	str	r3, [r7, #4]
 8001d9c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001da0:	e9c7 3406 	strd	r3, r4, [r7, #24]
	lt8722_set_output_voltage(vol);
 8001da4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001da8:	f001 fad4 	bl	8003354 <lt8722_set_output_voltage>
	return (CMDLINE_OK);
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3720      	adds	r7, #32
 8001db2:	46bd      	mov	sp, r7
 8001db4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001db8:	08007dd0 	.word	0x08007dd0
 8001dbc:	20000324 	.word	0x20000324

08001dc0 <Cmd_get_status>:

int Cmd_get_status(int argc, char *argv[])
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
	uint16_t status;
	lt8722_get_status(&status);
 8001dca:	f107 030e 	add.w	r3, r7, #14
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f001 f9a0 	bl	8003114 <lt8722_get_status>
	UART_Printf(&CONSOLE_UART, "status: 0x%X \n", status);
 8001dd4:	89fb      	ldrh	r3, [r7, #14]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	4904      	ldr	r1, [pc, #16]	@ (8001dec <Cmd_get_status+0x2c>)
 8001dda:	4805      	ldr	r0, [pc, #20]	@ (8001df0 <Cmd_get_status+0x30>)
 8001ddc:	f7fe fe2a 	bl	8000a34 <UART_Printf>
	return (CMDLINE_OK);
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	08007de4 	.word	0x08007de4
 8001df0:	20000324 	.word	0x20000324

08001df4 <Cmd_set_ov_clamp>:

int Cmd_set_ov_clamp(int argc, char *argv[])
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
	uint8_t over_vol = atoi(argv[1]);
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	3304      	adds	r3, #4
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f005 fbd7 	bl	80075b8 <atoi>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	73fb      	strb	r3, [r7, #15]
	UART_Printf(&CONSOLE_UART, "OV_CLAMP: %X \n", over_vol);
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
 8001e10:	461a      	mov	r2, r3
 8001e12:	4906      	ldr	r1, [pc, #24]	@ (8001e2c <Cmd_set_ov_clamp+0x38>)
 8001e14:	4806      	ldr	r0, [pc, #24]	@ (8001e30 <Cmd_set_ov_clamp+0x3c>)
 8001e16:	f7fe fe0d 	bl	8000a34 <UART_Printf>
	lt8722_set_spis_ov_clamp(over_vol);
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f001 f9b7 	bl	8003190 <lt8722_set_spis_ov_clamp>
	return CMDLINE_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	08007df4 	.word	0x08007df4
 8001e30:	20000324 	.word	0x20000324

08001e34 <Cmd_set_uv_clamp>:
int Cmd_set_uv_clamp(int argc, char *argv[])
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
	uint8_t uper_vol = atoi(argv[1]);
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	3304      	adds	r3, #4
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f005 fbb7 	bl	80075b8 <atoi>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	73fb      	strb	r3, [r7, #15]
	UART_Printf(&CONSOLE_UART, "UV_CLAMP: %X \n", uper_vol);
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	461a      	mov	r2, r3
 8001e52:	4906      	ldr	r1, [pc, #24]	@ (8001e6c <Cmd_set_uv_clamp+0x38>)
 8001e54:	4806      	ldr	r0, [pc, #24]	@ (8001e70 <Cmd_set_uv_clamp+0x3c>)
 8001e56:	f7fe fded 	bl	8000a34 <UART_Printf>
	lt8722_set_spis_uv_clamp(uper_vol);
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f001 f9b0 	bl	80031c2 <lt8722_set_spis_uv_clamp>
	return CMDLINE_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	08007e04 	.word	0x08007e04
 8001e70:	20000324 	.word	0x20000324

08001e74 <command_create_task>:




void command_create_task(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_CommandTaskContext.taskHandle, &s_CommandTaskContext.taskProperty);
 8001e78:	4902      	ldr	r1, [pc, #8]	@ (8001e84 <command_create_task+0x10>)
 8001e7a:	4803      	ldr	r0, [pc, #12]	@ (8001e88 <command_create_task+0x14>)
 8001e7c:	f004 ffc0 	bl	8006e00 <SCH_TASK_CreateTask>
}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000178 	.word	0x20000178
 8001e88:	20000174 	.word	0x20000174

08001e8c <CONSOLE_UART_IRQHandler>:
}


/* :::::::::: CONSOLE_UART_IRQHandler ::::::::::::: */
void CONSOLE_UART_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
    if(LL_USART_IsActiveFlag_TXE(CONSOLE_UART.handle) == true)
 8001e90:	4b2e      	ldr	r3, [pc, #184]	@ (8001f4c <CONSOLE_UART_IRQHandler+0xc0>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff f8f6 	bl	8001086 <LL_USART_IsActiveFlag_TXE>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d10f      	bne.n	8001ec0 <CONSOLE_UART_IRQHandler+0x34>
    {
        if(TX_BUFFER_EMPTY(&CONSOLE_UART))
 8001ea0:	492b      	ldr	r1, [pc, #172]	@ (8001f50 <CONSOLE_UART_IRQHandler+0xc4>)
 8001ea2:	482c      	ldr	r0, [pc, #176]	@ (8001f54 <CONSOLE_UART_IRQHandler+0xc8>)
 8001ea4:	f7ff f811 	bl	8000eca <UART_is_buffer_empty>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d005      	beq.n	8001eba <CONSOLE_UART_IRQHandler+0x2e>
        {
            // Buffer empty, so disable interrupts
            LL_USART_DisableIT_TXE(CONSOLE_UART.handle);
 8001eae:	4b27      	ldr	r3, [pc, #156]	@ (8001f4c <CONSOLE_UART_IRQHandler+0xc0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff f8fa 	bl	80010ac <LL_USART_DisableIT_TXE>
 8001eb8:	e002      	b.n	8001ec0 <CONSOLE_UART_IRQHandler+0x34>
        }
        else
        {
            // There is more data in the output buffer. Send the next byte
            UART_Prime_Transmit(&CONSOLE_UART);
 8001eba:	4824      	ldr	r0, [pc, #144]	@ (8001f4c <CONSOLE_UART_IRQHandler+0xc0>)
 8001ebc:	f7ff f839 	bl	8000f32 <UART_Prime_Transmit>
        }
    }

    if(LL_USART_IsActiveFlag_RXNE(CONSOLE_UART.handle) == true)
 8001ec0:	4b22      	ldr	r3, [pc, #136]	@ (8001f4c <CONSOLE_UART_IRQHandler+0xc0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff f8cb 	bl	8001060 <LL_USART_IsActiveFlag_RXNE>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d13b      	bne.n	8001f48 <CONSOLE_UART_IRQHandler+0xbc>
    {
    	CONSOLE_UART.RX_irq_char = LL_USART_ReceiveData8(CONSOLE_UART.handle);
 8001ed0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f4c <CONSOLE_UART_IRQHandler+0xc0>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff f90c 	bl	80010f2 <LL_USART_ReceiveData8>
 8001eda:	4603      	mov	r3, r0
 8001edc:	461a      	mov	r2, r3
 8001ede:	4b1b      	ldr	r3, [pc, #108]	@ (8001f4c <CONSOLE_UART_IRQHandler+0xc0>)
 8001ee0:	771a      	strb	r2, [r3, #28]

        // NOTE: On win 10, default PUTTY when hit enter only send back '\r',
        // while on default HERCULES when hit enter send '\r\n' in that order.
        // The code bellow is modified so that it can work on PUTTY and HERCULES.
        if((!RX_BUFFER_FULL(&CONSOLE_UART)) && (CONSOLE_UART.RX_irq_char != '\n'))
 8001ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f4c <CONSOLE_UART_IRQHandler+0xc0>)
 8001ee4:	891b      	ldrh	r3, [r3, #8]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	491b      	ldr	r1, [pc, #108]	@ (8001f58 <CONSOLE_UART_IRQHandler+0xcc>)
 8001eea:	481c      	ldr	r0, [pc, #112]	@ (8001f5c <CONSOLE_UART_IRQHandler+0xd0>)
 8001eec:	f7fe ffcc 	bl	8000e88 <UART_is_buffer_full>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d128      	bne.n	8001f48 <CONSOLE_UART_IRQHandler+0xbc>
 8001ef6:	4b15      	ldr	r3, [pc, #84]	@ (8001f4c <CONSOLE_UART_IRQHandler+0xc0>)
 8001ef8:	7f1b      	ldrb	r3, [r3, #28]
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b0a      	cmp	r3, #10
 8001efe:	d023      	beq.n	8001f48 <CONSOLE_UART_IRQHandler+0xbc>
        {
            if (CONSOLE_UART.RX_irq_char == '\r')
 8001f00:	4b12      	ldr	r3, [pc, #72]	@ (8001f4c <CONSOLE_UART_IRQHandler+0xc0>)
 8001f02:	7f1b      	ldrb	r3, [r3, #28]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b0d      	cmp	r3, #13
 8001f08:	d10e      	bne.n	8001f28 <CONSOLE_UART_IRQHandler+0x9c>
            {
            	CONSOLE_UART.p_RX_buffer[CONSOLE_UART.RX_write_index] = '\n';
 8001f0a:	4b10      	ldr	r3, [pc, #64]	@ (8001f4c <CONSOLE_UART_IRQHandler+0xc0>)
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	4a0f      	ldr	r2, [pc, #60]	@ (8001f4c <CONSOLE_UART_IRQHandler+0xc0>)
 8001f10:	8b12      	ldrh	r2, [r2, #24]
 8001f12:	b292      	uxth	r2, r2
 8001f14:	4413      	add	r3, r2
 8001f16:	220a      	movs	r2, #10
 8001f18:	701a      	strb	r2, [r3, #0]
                ADVANCE_RX_WRITE_INDEX(&CONSOLE_UART);
 8001f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f4c <CONSOLE_UART_IRQHandler+0xc0>)
 8001f1c:	891b      	ldrh	r3, [r3, #8]
 8001f1e:	4619      	mov	r1, r3
 8001f20:	480d      	ldr	r0, [pc, #52]	@ (8001f58 <CONSOLE_UART_IRQHandler+0xcc>)
 8001f22:	f7fe ffea 	bl	8000efa <UART_advance_buffer_index>
            	CONSOLE_UART.p_RX_buffer[CONSOLE_UART.RX_write_index] = CONSOLE_UART.RX_irq_char;
                ADVANCE_RX_WRITE_INDEX(&CONSOLE_UART);
            }
        }
    }
}
 8001f26:	e00f      	b.n	8001f48 <CONSOLE_UART_IRQHandler+0xbc>
            	CONSOLE_UART.p_RX_buffer[CONSOLE_UART.RX_write_index] = CONSOLE_UART.RX_irq_char;
 8001f28:	4b08      	ldr	r3, [pc, #32]	@ (8001f4c <CONSOLE_UART_IRQHandler+0xc0>)
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	4a07      	ldr	r2, [pc, #28]	@ (8001f4c <CONSOLE_UART_IRQHandler+0xc0>)
 8001f2e:	8b12      	ldrh	r2, [r2, #24]
 8001f30:	b292      	uxth	r2, r2
 8001f32:	4413      	add	r3, r2
 8001f34:	4a05      	ldr	r2, [pc, #20]	@ (8001f4c <CONSOLE_UART_IRQHandler+0xc0>)
 8001f36:	7f12      	ldrb	r2, [r2, #28]
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	701a      	strb	r2, [r3, #0]
                ADVANCE_RX_WRITE_INDEX(&CONSOLE_UART);
 8001f3c:	4b03      	ldr	r3, [pc, #12]	@ (8001f4c <CONSOLE_UART_IRQHandler+0xc0>)
 8001f3e:	891b      	ldrh	r3, [r3, #8]
 8001f40:	4619      	mov	r1, r3
 8001f42:	4805      	ldr	r0, [pc, #20]	@ (8001f58 <CONSOLE_UART_IRQHandler+0xcc>)
 8001f44:	f7fe ffd9 	bl	8000efa <UART_advance_buffer_index>
}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20000324 	.word	0x20000324
 8001f50:	20000334 	.word	0x20000334
 8001f54:	20000336 	.word	0x20000336
 8001f58:	2000033c 	.word	0x2000033c
 8001f5c:	2000033e 	.word	0x2000033e

08001f60 <LL_USART_IsActiveFlag_RXNE>:
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0320 	and.w	r3, r3, #32
 8001f70:	2b20      	cmp	r3, #32
 8001f72:	bf0c      	ite	eq
 8001f74:	2301      	moveq	r3, #1
 8001f76:	2300      	movne	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <LL_USART_IsActiveFlag_TXE>:
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f96:	2b80      	cmp	r3, #128	@ 0x80
 8001f98:	bf0c      	ite	eq
 8001f9a:	2301      	moveq	r3, #1
 8001f9c:	2300      	movne	r3, #0
 8001f9e:	b2db      	uxtb	r3, r3
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <LL_USART_DisableIT_TXE>:
{
 8001fac:	b480      	push	{r7}
 8001fae:	b089      	sub	sp, #36	@ 0x24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	330c      	adds	r3, #12
 8001fb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	e853 3f00 	ldrex	r3, [r3]
 8001fc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	330c      	adds	r3, #12
 8001fce:	69fa      	ldr	r2, [r7, #28]
 8001fd0:	61ba      	str	r2, [r7, #24]
 8001fd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fd4:	6979      	ldr	r1, [r7, #20]
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	e841 2300 	strex	r3, r2, [r1]
 8001fdc:	613b      	str	r3, [r7, #16]
   return(result);
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1e7      	bne.n	8001fb4 <LL_USART_DisableIT_TXE+0x8>
}
 8001fe4:	bf00      	nop
 8001fe6:	bf00      	nop
 8001fe8:	3724      	adds	r7, #36	@ 0x24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <LL_USART_ReceiveData8>:
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	b2db      	uxtb	r3, r3
}
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <LL_GPIO_SetOutputPin>:
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	619a      	str	r2, [r3, #24]
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <LL_GPIO_ResetOutputPin>:
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	041a      	lsls	r2, r3, #16
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	619a      	str	r2, [r3, #24]
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
	...

08002048 <copc_init>:
		9									// taskTick
	},
};

void copc_init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af04      	add	r7, sp, #16
    UART_Init(&COPC_UART, COPC_UART_HANDLE, COPC_UART_IRQ,
 800204e:	2340      	movs	r3, #64	@ 0x40
 8002050:	9302      	str	r3, [sp, #8]
 8002052:	2340      	movs	r3, #64	@ 0x40
 8002054:	9301      	str	r3, [sp, #4]
 8002056:	4b07      	ldr	r3, [pc, #28]	@ (8002074 <copc_init+0x2c>)
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	4b07      	ldr	r3, [pc, #28]	@ (8002078 <copc_init+0x30>)
 800205c:	2226      	movs	r2, #38	@ 0x26
 800205e:	4907      	ldr	r1, [pc, #28]	@ (800207c <copc_init+0x34>)
 8002060:	4807      	ldr	r0, [pc, #28]	@ (8002080 <copc_init+0x38>)
 8002062:	f7fe fbfe 	bl	8000862 <UART_Init>
				g_COPC_UART_TX_buffer, g_COPC_UART_RX_buffer,
				sizeof(g_COPC_UART_TX_buffer), sizeof(g_COPC_UART_RX_buffer));
	fsp_init(FSP_ADR_EXP);
 8002066:	2002      	movs	r0, #2
 8002068:	f005 f83a 	bl	80070e0 <fsp_init>
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000470 	.word	0x20000470
 8002078:	20000430 	.word	0x20000430
 800207c:	40004400 	.word	0x40004400
 8002080:	20000410 	.word	0x20000410

08002084 <copc_create_task>:

void copc_create_task(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_task_context.taskHandle, &s_task_context.taskProperty);
 8002088:	4902      	ldr	r1, [pc, #8]	@ (8002094 <copc_create_task+0x10>)
 800208a:	4803      	ldr	r0, [pc, #12]	@ (8002098 <copc_create_task+0x14>)
 800208c:	f004 feb8 	bl	8006e00 <SCH_TASK_CreateTask>
	return;
 8002090:	bf00      	nop
}
 8002092:	bd80      	pop	{r7, pc}
 8002094:	2000018c 	.word	0x2000018c
 8002098:	20000188 	.word	0x20000188

0800209c <copc_task_update>:

static void copc_task_update(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
	char rxData;
	while (!RX_BUFFER_EMPTY(&COPC_UART))
 80020a2:	e092      	b.n	80021ca <copc_task_update+0x12e>
	{
		rxData = UART_Get_Char(&COPC_UART);
 80020a4:	484f      	ldr	r0, [pc, #316]	@ (80021e4 <copc_task_update+0x148>)
 80020a6:	f7fe fec7 	bl	8000e38 <UART_Get_Char>
 80020aa:	4603      	mov	r3, r0
 80020ac:	71fb      	strb	r3, [r7, #7]

//		rxData = rbuffer_remove(p_COPCBuffer);

		if (!receiving)
 80020ae:	4b4e      	ldr	r3, [pc, #312]	@ (80021e8 <copc_task_update+0x14c>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10a      	bne.n	80020ce <copc_task_update+0x32>
		{
			if(rxData  == (char)(FSP_PKT_SOD))
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	2bca      	cmp	r3, #202	@ 0xca
 80020bc:	f040 8085 	bne.w	80021ca <copc_task_update+0x12e>
			{
				receiving  =  1;
 80020c0:	4b49      	ldr	r3, [pc, #292]	@ (80021e8 <copc_task_update+0x14c>)
 80020c2:	2201      	movs	r2, #1
 80020c4:	701a      	strb	r2, [r3, #0]
				COPC_RX_Index =  0;
 80020c6:	4b49      	ldr	r3, [pc, #292]	@ (80021ec <copc_task_update+0x150>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	701a      	strb	r2, [r3, #0]
 80020cc:	e07d      	b.n	80021ca <copc_task_update+0x12e>
			}
		}
		else
		{
			if(rxData  == (char)(FSP_PKT_EOF))
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	2bef      	cmp	r3, #239	@ 0xef
 80020d2:	d147      	bne.n	8002164 <copc_task_update+0xc8>
			{
				receiving  =  0;
 80020d4:	4b44      	ldr	r3, [pc, #272]	@ (80021e8 <copc_task_update+0x14c>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]
				switch (frame_decode((uint8_t  *)COPC_RX_Buff, COPC_RX_Index,  &s_COPC_FspPacket))
 80020da:	4b44      	ldr	r3, [pc, #272]	@ (80021ec <copc_task_update+0x150>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	4a43      	ldr	r2, [pc, #268]	@ (80021f0 <copc_task_update+0x154>)
 80020e2:	4619      	mov	r1, r3
 80020e4:	4843      	ldr	r0, [pc, #268]	@ (80021f4 <copc_task_update+0x158>)
 80020e6:	f005 f9d1 	bl	800748c <frame_decode>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b04      	cmp	r3, #4
 80020ee:	d863      	bhi.n	80021b8 <copc_task_update+0x11c>
 80020f0:	a201      	add	r2, pc, #4	@ (adr r2, 80020f8 <copc_task_update+0x5c>)
 80020f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f6:	bf00      	nop
 80020f8:	0800210d 	.word	0x0800210d
 80020fc:	08002117 	.word	0x08002117
 8002100:	08002127 	.word	0x08002127
 8002104:	08002131 	.word	0x08002131
 8002108:	0800214b 	.word	0x0800214b
				{
					//process command
					case FSP_PKT_NOT_READY:
						UART_Send_String(&CONSOLE_UART, "Packet not ready...\r\n");
 800210c:	493a      	ldr	r1, [pc, #232]	@ (80021f8 <copc_task_update+0x15c>)
 800210e:	483b      	ldr	r0, [pc, #236]	@ (80021fc <copc_task_update+0x160>)
 8002110:	f7fe fc01 	bl	8000916 <UART_Send_String>
						break;
 8002114:	e051      	b.n	80021ba <copc_task_update+0x11e>
					case FSP_PKT_READY:
						UART_Send_String(&CONSOLE_UART, "Received COPC CMD\n");
 8002116:	493a      	ldr	r1, [pc, #232]	@ (8002200 <copc_task_update+0x164>)
 8002118:	4838      	ldr	r0, [pc, #224]	@ (80021fc <copc_task_update+0x160>)
 800211a:	f7fe fbfc 	bl	8000916 <UART_Send_String>
						copc_process_command(&s_COPC_FspPacket);
 800211e:	4834      	ldr	r0, [pc, #208]	@ (80021f0 <copc_task_update+0x154>)
 8002120:	f000 f87c 	bl	800221c <copc_process_command>
						break;
 8002124:	e049      	b.n	80021ba <copc_task_update+0x11e>
					case FSP_PKT_INVALID:
						UART_Send_String(&CONSOLE_UART, "Packet invalid...\n");
 8002126:	4937      	ldr	r1, [pc, #220]	@ (8002204 <copc_task_update+0x168>)
 8002128:	4834      	ldr	r0, [pc, #208]	@ (80021fc <copc_task_update+0x160>)
 800212a:	f7fe fbf4 	bl	8000916 <UART_Send_String>
						break;
 800212e:	e044      	b.n	80021ba <copc_task_update+0x11e>
					case FSP_PKT_WRONG_ADR:
						UART_Send_String(&CONSOLE_UART, "Wrong module adr...\n");
 8002130:	4935      	ldr	r1, [pc, #212]	@ (8002208 <copc_task_update+0x16c>)
 8002132:	4832      	ldr	r0, [pc, #200]	@ (80021fc <copc_task_update+0x160>)
 8002134:	f7fe fbef 	bl	8000916 <UART_Send_String>
						UART_Write(&CONSOLE_UART, (const char *)COPC_RX_Buff, COPC_RX_Index);
 8002138:	4b2c      	ldr	r3, [pc, #176]	@ (80021ec <copc_task_update+0x150>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	b2db      	uxtb	r3, r3
 800213e:	461a      	mov	r2, r3
 8002140:	492c      	ldr	r1, [pc, #176]	@ (80021f4 <copc_task_update+0x158>)
 8002142:	482e      	ldr	r0, [pc, #184]	@ (80021fc <copc_task_update+0x160>)
 8002144:	f7fe fbfa 	bl	800093c <UART_Write>
						break;
 8002148:	e037      	b.n	80021ba <copc_task_update+0x11e>
					case FSP_PKT_ERROR:
						UART_Send_String(&CONSOLE_UART, "Packet error...\n");
 800214a:	4930      	ldr	r1, [pc, #192]	@ (800220c <copc_task_update+0x170>)
 800214c:	482b      	ldr	r0, [pc, #172]	@ (80021fc <copc_task_update+0x160>)
 800214e:	f7fe fbe2 	bl	8000916 <UART_Send_String>
						UART_Write(&CONSOLE_UART, (const char *)COPC_RX_Buff, COPC_RX_Index);
 8002152:	4b26      	ldr	r3, [pc, #152]	@ (80021ec <copc_task_update+0x150>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	461a      	mov	r2, r3
 800215a:	4926      	ldr	r1, [pc, #152]	@ (80021f4 <copc_task_update+0x158>)
 800215c:	4827      	ldr	r0, [pc, #156]	@ (80021fc <copc_task_update+0x160>)
 800215e:	f7fe fbed 	bl	800093c <UART_Write>
						break;
 8002162:	e02a      	b.n	80021ba <copc_task_update+0x11e>
						break;
				}
			}
			else
			{
				if(rxData == (char)(FSP_PKT_ESC)){
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	2bbd      	cmp	r3, #189	@ 0xbd
 8002168:	d103      	bne.n	8002172 <copc_task_update+0xd6>
					swap_byte = 1;
 800216a:	4b29      	ldr	r3, [pc, #164]	@ (8002210 <copc_task_update+0x174>)
 800216c:	2201      	movs	r2, #1
 800216e:	701a      	strb	r2, [r3, #0]
					break;
 8002170:	e034      	b.n	80021dc <copc_task_update+0x140>
				}
				if(swap_byte) {
 8002172:	4b27      	ldr	r3, [pc, #156]	@ (8002210 <copc_task_update+0x174>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d011      	beq.n	80021a0 <copc_task_update+0x104>
					swap_byte = 0;
 800217c:	4b24      	ldr	r3, [pc, #144]	@ (8002210 <copc_task_update+0x174>)
 800217e:	2200      	movs	r2, #0
 8002180:	701a      	strb	r2, [r3, #0]
					if(rxData == (char)(FSP_PKT_TSOD))	rxData = FSP_PKT_SOD;
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	2bdc      	cmp	r3, #220	@ 0xdc
 8002186:	d101      	bne.n	800218c <copc_task_update+0xf0>
 8002188:	23ca      	movs	r3, #202	@ 0xca
 800218a:	71fb      	strb	r3, [r7, #7]
					if(rxData == (char)(FSP_PKT_TESC))	rxData = FSP_PKT_ESC;
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	2bdb      	cmp	r3, #219	@ 0xdb
 8002190:	d101      	bne.n	8002196 <copc_task_update+0xfa>
 8002192:	23bd      	movs	r3, #189	@ 0xbd
 8002194:	71fb      	strb	r3, [r7, #7]
					if(rxData == (char)(FSP_PKT_TEOF))	rxData = FSP_PKT_EOF;
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	2bde      	cmp	r3, #222	@ 0xde
 800219a:	d101      	bne.n	80021a0 <copc_task_update+0x104>
 800219c:	23ef      	movs	r3, #239	@ 0xef
 800219e:	71fb      	strb	r3, [r7, #7]
				}
				COPC_RX_Buff[COPC_RX_Index++]  =  rxData;
 80021a0:	4b12      	ldr	r3, [pc, #72]	@ (80021ec <copc_task_update+0x150>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	b2d1      	uxtb	r1, r2
 80021aa:	4a10      	ldr	r2, [pc, #64]	@ (80021ec <copc_task_update+0x150>)
 80021ac:	7011      	strb	r1, [r2, #0]
 80021ae:	4619      	mov	r1, r3
 80021b0:	4a10      	ldr	r2, [pc, #64]	@ (80021f4 <copc_task_update+0x158>)
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	5453      	strb	r3, [r2, r1]
 80021b6:	e000      	b.n	80021ba <copc_task_update+0x11e>
						break;
 80021b8:	bf00      	nop
			}
			if  (COPC_RX_Index >= FSP_PKT_MAX_LENGTH)
 80021ba:	4b0c      	ldr	r3, [pc, #48]	@ (80021ec <copc_task_update+0x150>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b42      	cmp	r3, #66	@ 0x42
 80021c2:	d902      	bls.n	80021ca <copc_task_update+0x12e>
			{
				receiving  =  0;
 80021c4:	4b08      	ldr	r3, [pc, #32]	@ (80021e8 <copc_task_update+0x14c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
	while (!RX_BUFFER_EMPTY(&COPC_UART))
 80021ca:	4912      	ldr	r1, [pc, #72]	@ (8002214 <copc_task_update+0x178>)
 80021cc:	4812      	ldr	r0, [pc, #72]	@ (8002218 <copc_task_update+0x17c>)
 80021ce:	f7fe fe7c 	bl	8000eca <UART_is_buffer_empty>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f43f af65 	beq.w	80020a4 <copc_task_update+0x8>
			}
		}
	}
}
 80021da:	bf00      	nop
 80021dc:	bf00      	nop
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20000410 	.word	0x20000410
 80021e8:	2000056c 	.word	0x2000056c
 80021ec:	2000056d 	.word	0x2000056d
 80021f0:	200004b0 	.word	0x200004b0
 80021f4:	2000054c 	.word	0x2000054c
 80021f8:	08007ef0 	.word	0x08007ef0
 80021fc:	20000324 	.word	0x20000324
 8002200:	08007f08 	.word	0x08007f08
 8002204:	08007f1c 	.word	0x08007f1c
 8002208:	08007f30 	.word	0x08007f30
 800220c:	08007f48 	.word	0x08007f48
 8002210:	20000548 	.word	0x20000548
 8002214:	20000428 	.word	0x20000428
 8002218:	2000042a 	.word	0x2000042a

0800221c <copc_process_command>:

void copc_process_command(fsp_packet_t	*s_COPC_FspPacket)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
	s_pEXP_Sfp_Payload->commonFrame.Cmd = s_pCOPC_Sfp_Payload->commonFrame.Cmd;
 8002224:	4b32      	ldr	r3, [pc, #200]	@ (80022f0 <copc_process_command+0xd4>)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	4b32      	ldr	r3, [pc, #200]	@ (80022f4 <copc_process_command+0xd8>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	7812      	ldrb	r2, [r2, #0]
 800222e:	701a      	strb	r2, [r3, #0]
	switch (s_pCOPC_Sfp_Payload->commonFrame.Cmd)
 8002230:	4b2f      	ldr	r3, [pc, #188]	@ (80022f0 <copc_process_command+0xd4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b0e      	cmp	r3, #14
 8002238:	dc24      	bgt.n	8002284 <copc_process_command+0x68>
 800223a:	2b00      	cmp	r3, #0
 800223c:	dd52      	ble.n	80022e4 <copc_process_command+0xc8>
 800223e:	3b01      	subs	r3, #1
 8002240:	2b0d      	cmp	r3, #13
 8002242:	d84f      	bhi.n	80022e4 <copc_process_command+0xc8>
 8002244:	a201      	add	r2, pc, #4	@ (adr r2, 800224c <copc_process_command+0x30>)
 8002246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800224a:	bf00      	nop
 800224c:	0800228b 	.word	0x0800228b
 8002250:	08002291 	.word	0x08002291
 8002254:	08002297 	.word	0x08002297
 8002258:	0800229d 	.word	0x0800229d
 800225c:	080022a3 	.word	0x080022a3
 8002260:	080022a9 	.word	0x080022a9
 8002264:	080022af 	.word	0x080022af
 8002268:	080022b5 	.word	0x080022b5
 800226c:	080022bb 	.word	0x080022bb
 8002270:	080022c1 	.word	0x080022c1
 8002274:	080022c7 	.word	0x080022c7
 8002278:	080022cd 	.word	0x080022cd
 800227c:	080022d3 	.word	0x080022d3
 8002280:	080022d9 	.word	0x080022d9
 8002284:	2bff      	cmp	r3, #255	@ 0xff
 8002286:	d02a      	beq.n	80022de <copc_process_command+0xc2>
/*---------------------------------------------------------------------------*/
		case FSP_CMD_CODE_EXP_GET_ALL:
			copc_exp_get_all();
			break;
		default:
			break;
 8002288:	e02c      	b.n	80022e4 <copc_process_command+0xc8>
			copc_exp_tec_pw_on();
 800228a:	f000 f865 	bl	8002358 <copc_exp_tec_pw_on>
			break;
 800228e:	e02a      	b.n	80022e6 <copc_process_command+0xca>
			copc_exp_led_pw_on();
 8002290:	f000 f886 	bl	80023a0 <copc_exp_led_pw_on>
			break;
 8002294:	e027      	b.n	80022e6 <copc_process_command+0xca>
			copc_exp_heater_pw_on();
 8002296:	f000 f8a7 	bl	80023e8 <copc_exp_heater_pw_on>
			break;
 800229a:	e024      	b.n	80022e6 <copc_process_command+0xca>
			copc_exp_set_temp();
 800229c:	f000 f8c8 	bl	8002430 <copc_exp_set_temp>
			break;
 80022a0:	e021      	b.n	80022e6 <copc_process_command+0xca>
			copc_exp_get_temp_setpoint();
 80022a2:	f000 f915 	bl	80024d0 <copc_exp_get_temp_setpoint>
			break;
 80022a6:	e01e      	b.n	80022e6 <copc_process_command+0xca>
			copc_exp_get_temp();
 80022a8:	f000 f990 	bl	80025cc <copc_exp_get_temp>
			break;
 80022ac:	e01b      	b.n	80022e6 <copc_process_command+0xca>
			copc_exp_set_tec_vol();
 80022ae:	f000 fa0b 	bl	80026c8 <copc_exp_set_tec_vol>
			break;
 80022b2:	e018      	b.n	80022e6 <copc_process_command+0xca>
			copc_exp_get_tec_vol();
 80022b4:	f000 fa58 	bl	8002768 <copc_exp_get_tec_vol>
			break;
 80022b8:	e015      	b.n	80022e6 <copc_process_command+0xca>
			copc_exp_set_heater_duty();
 80022ba:	f000 fad3 	bl	8002864 <copc_exp_set_heater_duty>
			break;
 80022be:	e012      	b.n	80022e6 <copc_process_command+0xca>
			copc_exp_get_heater_duty();
 80022c0:	f000 fb14 	bl	80028ec <copc_exp_get_heater_duty>
			break;
 80022c4:	e00f      	b.n	80022e6 <copc_process_command+0xca>
			copc_exp_temp_ctrl();
 80022c6:	f000 fb6d 	bl	80029a4 <copc_exp_temp_ctrl>
			break;
 80022ca:	e00c      	b.n	80022e6 <copc_process_command+0xca>
			copc_exp_temp_auto_ctrl();
 80022cc:	f000 fbac 	bl	8002a28 <copc_exp_temp_auto_ctrl>
			break;
 80022d0:	e009      	b.n	80022e6 <copc_process_command+0xca>
			copc_exp_set_ir_duty();
 80022d2:	f000 fbdf 	bl	8002a94 <copc_exp_set_ir_duty>
			break;
 80022d6:	e006      	b.n	80022e6 <copc_process_command+0xca>
			copc_exp_get_ir_duty();
 80022d8:	f000 fbe3 	bl	8002aa2 <copc_exp_get_ir_duty>
			break;
 80022dc:	e003      	b.n	80022e6 <copc_process_command+0xca>
			copc_exp_get_all();
 80022de:	f000 fbe7 	bl	8002ab0 <copc_exp_get_all>
			break;
 80022e2:	e000      	b.n	80022e6 <copc_process_command+0xca>
			break;
 80022e4:	bf00      	nop
	}
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000540 	.word	0x20000540
 80022f4:	20000544 	.word	0x20000544

080022f8 <OK_Send>:

void OK_Send()
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af02      	add	r7, sp, #8
	uint8_t frame_len;
	uint8_t payload[15];
	memset((void*)payload, 0, sizeof(payload));
 80022fe:	463b      	mov	r3, r7
 8002300:	220f      	movs	r2, #15
 8002302:	2100      	movs	r1, #0
 8002304:	4618      	mov	r0, r3
 8002306:	f005 f9df 	bl	80076c8 <memset>
	payload[0] = s_pCOPC_Sfp_Payload->commonFrame.Cmd;
 800230a:	4b10      	ldr	r3, [pc, #64]	@ (800234c <OK_Send+0x54>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	703b      	strb	r3, [r7, #0]
	fsp_gen_cmd_w_data_pkt(FSP_CMD_RESPONSE_DONE, payload, 1, FSP_ADR_COPC, FSP_PKT_WITHOUT_ACK,  &s_EXP_FspPacket);
 8002312:	4639      	mov	r1, r7
 8002314:	4b0e      	ldr	r3, [pc, #56]	@ (8002350 <OK_Send+0x58>)
 8002316:	9301      	str	r3, [sp, #4]
 8002318:	2300      	movs	r3, #0
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	2301      	movs	r3, #1
 800231e:	2201      	movs	r2, #1
 8002320:	2000      	movs	r0, #0
 8002322:	f004 fef3 	bl	800710c <fsp_gen_cmd_w_data_pkt>
	fsp_encode(&s_EXP_FspPacket,  payload,  &frame_len);
 8002326:	f107 020f 	add.w	r2, r7, #15
 800232a:	463b      	mov	r3, r7
 800232c:	4619      	mov	r1, r3
 800232e:	4808      	ldr	r0, [pc, #32]	@ (8002350 <OK_Send+0x58>)
 8002330:	f004 ff76 	bl	8007220 <fsp_encode>
	UART_Write(&COPC_UART, (char*)payload, frame_len);
 8002334:	7bfb      	ldrb	r3, [r7, #15]
 8002336:	461a      	mov	r2, r3
 8002338:	463b      	mov	r3, r7
 800233a:	4619      	mov	r1, r3
 800233c:	4805      	ldr	r0, [pc, #20]	@ (8002354 <OK_Send+0x5c>)
 800233e:	f7fe fafd 	bl	800093c <UART_Write>
	return;
 8002342:	bf00      	nop
}
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000540 	.word	0x20000540
 8002350:	200004f8 	.word	0x200004f8
 8002354:	20000410 	.word	0x20000410

08002358 <copc_exp_tec_pw_on>:
void copc_exp_tec_pw_on(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
	uint8_t Status_PW = s_pCOPC_Sfp_Payload->setPowerCommandFrame.Status_PW ? 1 : 0;
 800235e:	4b0e      	ldr	r3, [pc, #56]	@ (8002398 <copc_exp_tec_pw_on+0x40>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	785b      	ldrb	r3, [r3, #1]
 8002364:	2b00      	cmp	r3, #0
 8002366:	bf14      	ite	ne
 8002368:	2301      	movne	r3, #1
 800236a:	2300      	moveq	r3, #0
 800236c:	b2db      	uxtb	r3, r3
 800236e:	71fb      	strb	r3, [r7, #7]
	if (Status_PW)
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d005      	beq.n	8002382 <copc_exp_tec_pw_on+0x2a>
		LL_GPIO_SetOutputPin(EF_TEC_EN_GPIO_Port, EF_TEC_EN_Pin);
 8002376:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800237a:	4808      	ldr	r0, [pc, #32]	@ (800239c <copc_exp_tec_pw_on+0x44>)
 800237c:	f7ff fe46 	bl	800200c <LL_GPIO_SetOutputPin>
 8002380:	e004      	b.n	800238c <copc_exp_tec_pw_on+0x34>
	else
		LL_GPIO_ResetOutputPin(EF_TEC_EN_GPIO_Port, EF_TEC_EN_Pin);
 8002382:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002386:	4805      	ldr	r0, [pc, #20]	@ (800239c <copc_exp_tec_pw_on+0x44>)
 8002388:	f7ff fe4e 	bl	8002028 <LL_GPIO_ResetOutputPin>
	OK_Send();
 800238c:	f7ff ffb4 	bl	80022f8 <OK_Send>
	return;
 8002390:	bf00      	nop
}
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20000540 	.word	0x20000540
 800239c:	40020800 	.word	0x40020800

080023a0 <copc_exp_led_pw_on>:
void copc_exp_led_pw_on(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
	uint8_t Status_PW = s_pCOPC_Sfp_Payload->setPowerCommandFrame.Status_PW  ? 1 : 0;
 80023a6:	4b0e      	ldr	r3, [pc, #56]	@ (80023e0 <copc_exp_led_pw_on+0x40>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	785b      	ldrb	r3, [r3, #1]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	bf14      	ite	ne
 80023b0:	2301      	movne	r3, #1
 80023b2:	2300      	moveq	r3, #0
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	71fb      	strb	r3, [r7, #7]
	if (Status_PW)
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d005      	beq.n	80023ca <copc_exp_led_pw_on+0x2a>
		LL_GPIO_SetOutputPin(EF_LED_EN_GPIO_Port, EF_LED_EN_Pin);
 80023be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023c2:	4808      	ldr	r0, [pc, #32]	@ (80023e4 <copc_exp_led_pw_on+0x44>)
 80023c4:	f7ff fe22 	bl	800200c <LL_GPIO_SetOutputPin>
 80023c8:	e004      	b.n	80023d4 <copc_exp_led_pw_on+0x34>
	else
		LL_GPIO_ResetOutputPin(EF_LED_EN_GPIO_Port, EF_LED_EN_Pin);
 80023ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023ce:	4805      	ldr	r0, [pc, #20]	@ (80023e4 <copc_exp_led_pw_on+0x44>)
 80023d0:	f7ff fe2a 	bl	8002028 <LL_GPIO_ResetOutputPin>
	OK_Send();
 80023d4:	f7ff ff90 	bl	80022f8 <OK_Send>
	return;
 80023d8:	bf00      	nop
}
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20000540 	.word	0x20000540
 80023e4:	40020400 	.word	0x40020400

080023e8 <copc_exp_heater_pw_on>:
void copc_exp_heater_pw_on(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
	uint8_t Status_PW = s_pCOPC_Sfp_Payload->setPowerCommandFrame.Status_PW  ? 1 : 0;
 80023ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002428 <copc_exp_heater_pw_on+0x40>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	785b      	ldrb	r3, [r3, #1]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	bf14      	ite	ne
 80023f8:	2301      	movne	r3, #1
 80023fa:	2300      	moveq	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	71fb      	strb	r3, [r7, #7]
	if (Status_PW)
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d005      	beq.n	8002412 <copc_exp_heater_pw_on+0x2a>
		LL_GPIO_SetOutputPin(EF_HEATER_EN_GPIO_Port, EF_HEATER_EN_Pin);
 8002406:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800240a:	4808      	ldr	r0, [pc, #32]	@ (800242c <copc_exp_heater_pw_on+0x44>)
 800240c:	f7ff fdfe 	bl	800200c <LL_GPIO_SetOutputPin>
 8002410:	e004      	b.n	800241c <copc_exp_heater_pw_on+0x34>
	else
		LL_GPIO_ResetOutputPin(EF_HEATER_EN_GPIO_Port, EF_HEATER_EN_Pin);
 8002412:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002416:	4805      	ldr	r0, [pc, #20]	@ (800242c <copc_exp_heater_pw_on+0x44>)
 8002418:	f7ff fe06 	bl	8002028 <LL_GPIO_ResetOutputPin>
	OK_Send();
 800241c:	f7ff ff6c 	bl	80022f8 <OK_Send>
	return;
 8002420:	bf00      	nop
}
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20000540 	.word	0x20000540
 800242c:	40021000 	.word	0x40021000

08002430 <copc_exp_set_temp>:
void copc_exp_set_temp(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
	int16_t setpoint_0 = ((s_pCOPC_Sfp_Payload->setTempCommandFrame.Setpoint_0_High) << 8) | (s_pCOPC_Sfp_Payload->setTempCommandFrame.Setpoint_0_Low);
 8002436:	4b25      	ldr	r3, [pc, #148]	@ (80024cc <copc_exp_set_temp+0x9c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	785b      	ldrb	r3, [r3, #1]
 800243c:	021b      	lsls	r3, r3, #8
 800243e:	b21a      	sxth	r2, r3
 8002440:	4b22      	ldr	r3, [pc, #136]	@ (80024cc <copc_exp_set_temp+0x9c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	789b      	ldrb	r3, [r3, #2]
 8002446:	b21b      	sxth	r3, r3
 8002448:	4313      	orrs	r3, r2
 800244a:	80fb      	strh	r3, [r7, #6]
	int16_t setpoint_1 = ((s_pCOPC_Sfp_Payload->setTempCommandFrame.Setpoint_1_High) << 8) | (s_pCOPC_Sfp_Payload->setTempCommandFrame.Setpoint_1_Low);
 800244c:	4b1f      	ldr	r3, [pc, #124]	@ (80024cc <copc_exp_set_temp+0x9c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	78db      	ldrb	r3, [r3, #3]
 8002452:	021b      	lsls	r3, r3, #8
 8002454:	b21a      	sxth	r2, r3
 8002456:	4b1d      	ldr	r3, [pc, #116]	@ (80024cc <copc_exp_set_temp+0x9c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	791b      	ldrb	r3, [r3, #4]
 800245c:	b21b      	sxth	r3, r3
 800245e:	4313      	orrs	r3, r2
 8002460:	80bb      	strh	r3, [r7, #4]
	int16_t setpoint_2 = ((s_pCOPC_Sfp_Payload->setTempCommandFrame.Setpoint_2_High) << 8) | (s_pCOPC_Sfp_Payload->setTempCommandFrame.Setpoint_2_Low);
 8002462:	4b1a      	ldr	r3, [pc, #104]	@ (80024cc <copc_exp_set_temp+0x9c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	795b      	ldrb	r3, [r3, #5]
 8002468:	021b      	lsls	r3, r3, #8
 800246a:	b21a      	sxth	r2, r3
 800246c:	4b17      	ldr	r3, [pc, #92]	@ (80024cc <copc_exp_set_temp+0x9c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	799b      	ldrb	r3, [r3, #6]
 8002472:	b21b      	sxth	r3, r3
 8002474:	4313      	orrs	r3, r2
 8002476:	807b      	strh	r3, [r7, #2]
	int16_t setpoint_3 = ((s_pCOPC_Sfp_Payload->setTempCommandFrame.Setpoint_3_High) << 8) | (s_pCOPC_Sfp_Payload->setTempCommandFrame.Setpoint_3_Low);
 8002478:	4b14      	ldr	r3, [pc, #80]	@ (80024cc <copc_exp_set_temp+0x9c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	79db      	ldrb	r3, [r3, #7]
 800247e:	021b      	lsls	r3, r3, #8
 8002480:	b21a      	sxth	r2, r3
 8002482:	4b12      	ldr	r3, [pc, #72]	@ (80024cc <copc_exp_set_temp+0x9c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	7a1b      	ldrb	r3, [r3, #8]
 8002488:	b21b      	sxth	r3, r3
 800248a:	4313      	orrs	r3, r2
 800248c:	803b      	strh	r3, [r7, #0]
	temperature_set_setpoint(setpoint_0, 0);
 800248e:	88fb      	ldrh	r3, [r7, #6]
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2100      	movs	r1, #0
 8002494:	4618      	mov	r0, r3
 8002496:	f002 fe03 	bl	80050a0 <temperature_set_setpoint>
	temperature_set_setpoint(setpoint_1, 1);
 800249a:	88bb      	ldrh	r3, [r7, #4]
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2101      	movs	r1, #1
 80024a0:	4618      	mov	r0, r3
 80024a2:	f002 fdfd 	bl	80050a0 <temperature_set_setpoint>
	temperature_set_setpoint(setpoint_2, 2);
 80024a6:	887b      	ldrh	r3, [r7, #2]
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2102      	movs	r1, #2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f002 fdf7 	bl	80050a0 <temperature_set_setpoint>
	temperature_set_setpoint(setpoint_3, 3);
 80024b2:	883b      	ldrh	r3, [r7, #0]
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2103      	movs	r1, #3
 80024b8:	4618      	mov	r0, r3
 80024ba:	f002 fdf1 	bl	80050a0 <temperature_set_setpoint>
	OK_Send();
 80024be:	f7ff ff1b 	bl	80022f8 <OK_Send>
	return;
 80024c2:	bf00      	nop
}
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000540 	.word	0x20000540

080024d0 <copc_exp_get_temp_setpoint>:
void copc_exp_get_temp_setpoint(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b096      	sub	sp, #88	@ 0x58
 80024d4:	af02      	add	r7, sp, #8
	uint8_t encode_frame[FSP_PKT_MAX_LENGTH];
	uint8_t frame_len;
	int16_t setpoint_0 = (int16_t)temperature_get_setpoint(0);
 80024d6:	2000      	movs	r0, #0
 80024d8:	f002 fdf8 	bl	80050cc <temperature_get_setpoint>
 80024dc:	4603      	mov	r3, r0
 80024de:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	int16_t setpoint_1 = (int16_t)temperature_get_setpoint(1);
 80024e2:	2001      	movs	r0, #1
 80024e4:	f002 fdf2 	bl	80050cc <temperature_get_setpoint>
 80024e8:	4603      	mov	r3, r0
 80024ea:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	int16_t setpoint_2 = (int16_t)temperature_get_setpoint(2);
 80024ee:	2002      	movs	r0, #2
 80024f0:	f002 fdec 	bl	80050cc <temperature_get_setpoint>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
	int16_t setpoint_3 = (int16_t)temperature_get_setpoint(3);
 80024fa:	2003      	movs	r0, #3
 80024fc:	f002 fde6 	bl	80050cc <temperature_get_setpoint>
 8002500:	4603      	mov	r3, r0
 8002502:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

	s_pEXP_Sfp_Payload->getTempSetpointResponseFrame.Cmd = s_pCOPC_Sfp_Payload->getTempSetpointCommandFrame.Cmd;
 8002506:	4b2d      	ldr	r3, [pc, #180]	@ (80025bc <copc_exp_get_temp_setpoint+0xec>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	4b2d      	ldr	r3, [pc, #180]	@ (80025c0 <copc_exp_get_temp_setpoint+0xf0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	7812      	ldrb	r2, [r2, #0]
 8002510:	701a      	strb	r2, [r3, #0]
	s_pEXP_Sfp_Payload->getTempSetpointResponseFrame.Setpoint_0_High = (uint8_t)(setpoint_0 >> 8);
 8002512:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8002516:	121b      	asrs	r3, r3, #8
 8002518:	b21a      	sxth	r2, r3
 800251a:	4b29      	ldr	r3, [pc, #164]	@ (80025c0 <copc_exp_get_temp_setpoint+0xf0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	705a      	strb	r2, [r3, #1]
	s_pEXP_Sfp_Payload->getTempSetpointResponseFrame.Setpoint_0_Low = (uint8_t)setpoint_0;
 8002522:	4b27      	ldr	r3, [pc, #156]	@ (80025c0 <copc_exp_get_temp_setpoint+0xf0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	709a      	strb	r2, [r3, #2]
	s_pEXP_Sfp_Payload->getTempSetpointResponseFrame.Setpoint_1_High = (uint8_t)(setpoint_1 >> 8);
 800252e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002532:	121b      	asrs	r3, r3, #8
 8002534:	b21a      	sxth	r2, r3
 8002536:	4b22      	ldr	r3, [pc, #136]	@ (80025c0 <copc_exp_get_temp_setpoint+0xf0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	70da      	strb	r2, [r3, #3]
	s_pEXP_Sfp_Payload->getTempSetpointResponseFrame.Setpoint_1_Low = (uint8_t)setpoint_1;
 800253e:	4b20      	ldr	r3, [pc, #128]	@ (80025c0 <copc_exp_get_temp_setpoint+0xf0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	711a      	strb	r2, [r3, #4]
	s_pEXP_Sfp_Payload->getTempSetpointResponseFrame.Setpoint_2_High = (uint8_t)(setpoint_2 >> 8);
 800254a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800254e:	121b      	asrs	r3, r3, #8
 8002550:	b21a      	sxth	r2, r3
 8002552:	4b1b      	ldr	r3, [pc, #108]	@ (80025c0 <copc_exp_get_temp_setpoint+0xf0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	715a      	strb	r2, [r3, #5]
	s_pEXP_Sfp_Payload->getTempSetpointResponseFrame.Setpoint_2_Low = (uint8_t)setpoint_2;
 800255a:	4b19      	ldr	r3, [pc, #100]	@ (80025c0 <copc_exp_get_temp_setpoint+0xf0>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	719a      	strb	r2, [r3, #6]
	s_pEXP_Sfp_Payload->getTempSetpointResponseFrame.Setpoint_3_High = (uint8_t)(setpoint_3 >> 8);
 8002566:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 800256a:	121b      	asrs	r3, r3, #8
 800256c:	b21a      	sxth	r2, r3
 800256e:	4b14      	ldr	r3, [pc, #80]	@ (80025c0 <copc_exp_get_temp_setpoint+0xf0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	71da      	strb	r2, [r3, #7]
	s_pEXP_Sfp_Payload->getTempSetpointResponseFrame.Setpoint_3_Low = (uint8_t)setpoint_3;
 8002576:	4b12      	ldr	r3, [pc, #72]	@ (80025c0 <copc_exp_get_temp_setpoint+0xf0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	721a      	strb	r2, [r3, #8]

	fsp_gen_pkt((void*)0, (uint8_t *)&s_pEXP_Sfp_Payload->getTempSetpointResponseFrame, 9, FSP_ADR_COPC, FSP_PKT_TYPE_CMD_W_DATA, &s_EXP_FspPacket);
 8002582:	4b0f      	ldr	r3, [pc, #60]	@ (80025c0 <copc_exp_get_temp_setpoint+0xf0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4619      	mov	r1, r3
 8002588:	4b0e      	ldr	r3, [pc, #56]	@ (80025c4 <copc_exp_get_temp_setpoint+0xf4>)
 800258a:	9301      	str	r3, [sp, #4]
 800258c:	2307      	movs	r3, #7
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	2301      	movs	r3, #1
 8002592:	2209      	movs	r2, #9
 8002594:	2000      	movs	r0, #0
 8002596:	f004 fde3 	bl	8007160 <fsp_gen_pkt>
	fsp_encode(&s_EXP_FspPacket, encode_frame, &frame_len);
 800259a:	1cfa      	adds	r2, r7, #3
 800259c:	1d3b      	adds	r3, r7, #4
 800259e:	4619      	mov	r1, r3
 80025a0:	4808      	ldr	r0, [pc, #32]	@ (80025c4 <copc_exp_get_temp_setpoint+0xf4>)
 80025a2:	f004 fe3d 	bl	8007220 <fsp_encode>
	UART_Write(&COPC_UART, (const char *)&encode_frame, frame_len);
 80025a6:	78fb      	ldrb	r3, [r7, #3]
 80025a8:	461a      	mov	r2, r3
 80025aa:	1d3b      	adds	r3, r7, #4
 80025ac:	4619      	mov	r1, r3
 80025ae:	4806      	ldr	r0, [pc, #24]	@ (80025c8 <copc_exp_get_temp_setpoint+0xf8>)
 80025b0:	f7fe f9c4 	bl	800093c <UART_Write>
	return;
 80025b4:	bf00      	nop
}
 80025b6:	3750      	adds	r7, #80	@ 0x50
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	20000540 	.word	0x20000540
 80025c0:	20000544 	.word	0x20000544
 80025c4:	200004f8 	.word	0x200004f8
 80025c8:	20000410 	.word	0x20000410

080025cc <copc_exp_get_temp>:
void copc_exp_get_temp(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b096      	sub	sp, #88	@ 0x58
 80025d0:	af02      	add	r7, sp, #8
	uint8_t encode_frame[FSP_PKT_MAX_LENGTH];
	uint8_t frame_len;
	int16_t temp_NTC_0 = (int16_t)temperature_get_temp_NTC(0);
 80025d2:	2000      	movs	r0, #0
 80025d4:	f002 fd8c 	bl	80050f0 <temperature_get_temp_NTC>
 80025d8:	4603      	mov	r3, r0
 80025da:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	int16_t temp_NTC_1 = (int16_t)temperature_get_temp_NTC(1);
 80025de:	2001      	movs	r0, #1
 80025e0:	f002 fd86 	bl	80050f0 <temperature_get_temp_NTC>
 80025e4:	4603      	mov	r3, r0
 80025e6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	int16_t temp_NTC_2 = (int16_t)temperature_get_temp_NTC(2);
 80025ea:	2002      	movs	r0, #2
 80025ec:	f002 fd80 	bl	80050f0 <temperature_get_temp_NTC>
 80025f0:	4603      	mov	r3, r0
 80025f2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
	int16_t temp_NTC_3 = (int16_t)temperature_get_temp_NTC(3);
 80025f6:	2003      	movs	r0, #3
 80025f8:	f002 fd7a 	bl	80050f0 <temperature_get_temp_NTC>
 80025fc:	4603      	mov	r3, r0
 80025fe:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

	s_pEXP_Sfp_Payload->getTempResponseFrame.Cmd = s_pCOPC_Sfp_Payload->getTempCommandFrame.Cmd;
 8002602:	4b2d      	ldr	r3, [pc, #180]	@ (80026b8 <copc_exp_get_temp+0xec>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	4b2d      	ldr	r3, [pc, #180]	@ (80026bc <copc_exp_get_temp+0xf0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	7812      	ldrb	r2, [r2, #0]
 800260c:	701a      	strb	r2, [r3, #0]
	s_pEXP_Sfp_Payload->getTempResponseFrame.NTC_0_High = (uint8_t)(temp_NTC_0 >> 8);
 800260e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8002612:	121b      	asrs	r3, r3, #8
 8002614:	b21a      	sxth	r2, r3
 8002616:	4b29      	ldr	r3, [pc, #164]	@ (80026bc <copc_exp_get_temp+0xf0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	705a      	strb	r2, [r3, #1]
	s_pEXP_Sfp_Payload->getTempResponseFrame.NTC_0_Low = (uint8_t)(temp_NTC_0);
 800261e:	4b27      	ldr	r3, [pc, #156]	@ (80026bc <copc_exp_get_temp+0xf0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	709a      	strb	r2, [r3, #2]
	s_pEXP_Sfp_Payload->getTempResponseFrame.NTC_1_High = (uint8_t)(temp_NTC_1 >> 8);
 800262a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800262e:	121b      	asrs	r3, r3, #8
 8002630:	b21a      	sxth	r2, r3
 8002632:	4b22      	ldr	r3, [pc, #136]	@ (80026bc <copc_exp_get_temp+0xf0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	70da      	strb	r2, [r3, #3]
	s_pEXP_Sfp_Payload->getTempResponseFrame.NTC_1_Low = (uint8_t)(temp_NTC_1);
 800263a:	4b20      	ldr	r3, [pc, #128]	@ (80026bc <copc_exp_get_temp+0xf0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	711a      	strb	r2, [r3, #4]
	s_pEXP_Sfp_Payload->getTempResponseFrame.NTC_2_High = (uint8_t)(temp_NTC_2 >> 8);
 8002646:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800264a:	121b      	asrs	r3, r3, #8
 800264c:	b21a      	sxth	r2, r3
 800264e:	4b1b      	ldr	r3, [pc, #108]	@ (80026bc <copc_exp_get_temp+0xf0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	715a      	strb	r2, [r3, #5]
	s_pEXP_Sfp_Payload->getTempResponseFrame.NTC_2_Low = (uint8_t)(temp_NTC_2);
 8002656:	4b19      	ldr	r3, [pc, #100]	@ (80026bc <copc_exp_get_temp+0xf0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	719a      	strb	r2, [r3, #6]
	s_pEXP_Sfp_Payload->getTempResponseFrame.NTC_3_High = (uint8_t)(temp_NTC_3 >> 8);
 8002662:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 8002666:	121b      	asrs	r3, r3, #8
 8002668:	b21a      	sxth	r2, r3
 800266a:	4b14      	ldr	r3, [pc, #80]	@ (80026bc <copc_exp_get_temp+0xf0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	71da      	strb	r2, [r3, #7]
	s_pEXP_Sfp_Payload->getTempResponseFrame.NTC_3_Low = (uint8_t)(temp_NTC_3);
 8002672:	4b12      	ldr	r3, [pc, #72]	@ (80026bc <copc_exp_get_temp+0xf0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	721a      	strb	r2, [r3, #8]

	fsp_gen_pkt((void*)0, (uint8_t *)&s_pEXP_Sfp_Payload->getTempResponseFrame, 9, FSP_ADR_COPC, FSP_PKT_TYPE_CMD_W_DATA, &s_EXP_FspPacket);
 800267e:	4b0f      	ldr	r3, [pc, #60]	@ (80026bc <copc_exp_get_temp+0xf0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4619      	mov	r1, r3
 8002684:	4b0e      	ldr	r3, [pc, #56]	@ (80026c0 <copc_exp_get_temp+0xf4>)
 8002686:	9301      	str	r3, [sp, #4]
 8002688:	2307      	movs	r3, #7
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	2301      	movs	r3, #1
 800268e:	2209      	movs	r2, #9
 8002690:	2000      	movs	r0, #0
 8002692:	f004 fd65 	bl	8007160 <fsp_gen_pkt>
	fsp_encode(&s_EXP_FspPacket, encode_frame, &frame_len);
 8002696:	1cfa      	adds	r2, r7, #3
 8002698:	1d3b      	adds	r3, r7, #4
 800269a:	4619      	mov	r1, r3
 800269c:	4808      	ldr	r0, [pc, #32]	@ (80026c0 <copc_exp_get_temp+0xf4>)
 800269e:	f004 fdbf 	bl	8007220 <fsp_encode>
	UART_Write(&COPC_UART, (const char *)&encode_frame, frame_len);
 80026a2:	78fb      	ldrb	r3, [r7, #3]
 80026a4:	461a      	mov	r2, r3
 80026a6:	1d3b      	adds	r3, r7, #4
 80026a8:	4619      	mov	r1, r3
 80026aa:	4806      	ldr	r0, [pc, #24]	@ (80026c4 <copc_exp_get_temp+0xf8>)
 80026ac:	f7fe f946 	bl	800093c <UART_Write>
	return;
 80026b0:	bf00      	nop
}
 80026b2:	3750      	adds	r7, #80	@ 0x50
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	20000540 	.word	0x20000540
 80026bc:	20000544 	.word	0x20000544
 80026c0:	200004f8 	.word	0x200004f8
 80026c4:	20000410 	.word	0x20000410

080026c8 <copc_exp_set_tec_vol>:
void copc_exp_set_tec_vol(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
	uint16_t vol_0 = ((s_pCOPC_Sfp_Payload->setTecVoltageCommandFrame.Voltage_0_High) << 8) | (s_pCOPC_Sfp_Payload->setTecVoltageCommandFrame.Voltage_0_Low);
 80026ce:	4b25      	ldr	r3, [pc, #148]	@ (8002764 <copc_exp_set_tec_vol+0x9c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	785b      	ldrb	r3, [r3, #1]
 80026d4:	021b      	lsls	r3, r3, #8
 80026d6:	b21a      	sxth	r2, r3
 80026d8:	4b22      	ldr	r3, [pc, #136]	@ (8002764 <copc_exp_set_tec_vol+0x9c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	789b      	ldrb	r3, [r3, #2]
 80026de:	b21b      	sxth	r3, r3
 80026e0:	4313      	orrs	r3, r2
 80026e2:	b21b      	sxth	r3, r3
 80026e4:	80fb      	strh	r3, [r7, #6]
	uint16_t vol_1 = ((s_pCOPC_Sfp_Payload->setTecVoltageCommandFrame.Voltage_1_High) << 8) | (s_pCOPC_Sfp_Payload->setTecVoltageCommandFrame.Voltage_1_Low);
 80026e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002764 <copc_exp_set_tec_vol+0x9c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	78db      	ldrb	r3, [r3, #3]
 80026ec:	021b      	lsls	r3, r3, #8
 80026ee:	b21a      	sxth	r2, r3
 80026f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002764 <copc_exp_set_tec_vol+0x9c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	791b      	ldrb	r3, [r3, #4]
 80026f6:	b21b      	sxth	r3, r3
 80026f8:	4313      	orrs	r3, r2
 80026fa:	b21b      	sxth	r3, r3
 80026fc:	80bb      	strh	r3, [r7, #4]
	uint16_t vol_2 = ((s_pCOPC_Sfp_Payload->setTecVoltageCommandFrame.Voltage_2_High) << 8) | (s_pCOPC_Sfp_Payload->setTecVoltageCommandFrame.Voltage_2_Low);
 80026fe:	4b19      	ldr	r3, [pc, #100]	@ (8002764 <copc_exp_set_tec_vol+0x9c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	795b      	ldrb	r3, [r3, #5]
 8002704:	021b      	lsls	r3, r3, #8
 8002706:	b21a      	sxth	r2, r3
 8002708:	4b16      	ldr	r3, [pc, #88]	@ (8002764 <copc_exp_set_tec_vol+0x9c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	799b      	ldrb	r3, [r3, #6]
 800270e:	b21b      	sxth	r3, r3
 8002710:	4313      	orrs	r3, r2
 8002712:	b21b      	sxth	r3, r3
 8002714:	807b      	strh	r3, [r7, #2]
	uint16_t vol_3 = ((s_pCOPC_Sfp_Payload->setTecVoltageCommandFrame.Voltage_3_High) << 8) | (s_pCOPC_Sfp_Payload->setTecVoltageCommandFrame.Voltage_3_Low);
 8002716:	4b13      	ldr	r3, [pc, #76]	@ (8002764 <copc_exp_set_tec_vol+0x9c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	79db      	ldrb	r3, [r3, #7]
 800271c:	021b      	lsls	r3, r3, #8
 800271e:	b21a      	sxth	r2, r3
 8002720:	4b10      	ldr	r3, [pc, #64]	@ (8002764 <copc_exp_set_tec_vol+0x9c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	7a1b      	ldrb	r3, [r3, #8]
 8002726:	b21b      	sxth	r3, r3
 8002728:	4313      	orrs	r3, r2
 800272a:	b21b      	sxth	r3, r3
 800272c:	803b      	strh	r3, [r7, #0]
	temperature_set_tec_vol(0, vol_0);
 800272e:	88fb      	ldrh	r3, [r7, #6]
 8002730:	4619      	mov	r1, r3
 8002732:	2000      	movs	r0, #0
 8002734:	f002 fcee 	bl	8005114 <temperature_set_tec_vol>
	temperature_set_tec_vol(1, vol_1);
 8002738:	88bb      	ldrh	r3, [r7, #4]
 800273a:	4619      	mov	r1, r3
 800273c:	2001      	movs	r0, #1
 800273e:	f002 fce9 	bl	8005114 <temperature_set_tec_vol>
	temperature_set_tec_vol(2, vol_2);
 8002742:	887b      	ldrh	r3, [r7, #2]
 8002744:	4619      	mov	r1, r3
 8002746:	2002      	movs	r0, #2
 8002748:	f002 fce4 	bl	8005114 <temperature_set_tec_vol>
	temperature_set_tec_vol(3, vol_3);
 800274c:	883b      	ldrh	r3, [r7, #0]
 800274e:	4619      	mov	r1, r3
 8002750:	2003      	movs	r0, #3
 8002752:	f002 fcdf 	bl	8005114 <temperature_set_tec_vol>
	OK_Send();
 8002756:	f7ff fdcf 	bl	80022f8 <OK_Send>
	return;
 800275a:	bf00      	nop
}
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20000540 	.word	0x20000540

08002768 <copc_exp_get_tec_vol>:
void copc_exp_get_tec_vol(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b096      	sub	sp, #88	@ 0x58
 800276c:	af02      	add	r7, sp, #8
	uint8_t encode_frame[FSP_PKT_MAX_LENGTH];
	uint8_t frame_len;
	uint16_t vol_0 = temperature_get_tec_vol(0);
 800276e:	2000      	movs	r0, #0
 8002770:	f002 fcf0 	bl	8005154 <temperature_get_tec_vol>
 8002774:	4603      	mov	r3, r0
 8002776:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	uint16_t vol_1 = temperature_get_tec_vol(1);
 800277a:	2001      	movs	r0, #1
 800277c:	f002 fcea 	bl	8005154 <temperature_get_tec_vol>
 8002780:	4603      	mov	r3, r0
 8002782:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	uint16_t vol_2 = temperature_get_tec_vol(2);
 8002786:	2002      	movs	r0, #2
 8002788:	f002 fce4 	bl	8005154 <temperature_get_tec_vol>
 800278c:	4603      	mov	r3, r0
 800278e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
	uint16_t vol_3 = temperature_get_tec_vol(3);
 8002792:	2003      	movs	r0, #3
 8002794:	f002 fcde 	bl	8005154 <temperature_get_tec_vol>
 8002798:	4603      	mov	r3, r0
 800279a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
	s_pEXP_Sfp_Payload->getTecVoltageResponeFrame.Cmd = s_pCOPC_Sfp_Payload->getTecVoltageCommandFrame.Cmd;
 800279e:	4b2d      	ldr	r3, [pc, #180]	@ (8002854 <copc_exp_get_tec_vol+0xec>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002858 <copc_exp_get_tec_vol+0xf0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	7812      	ldrb	r2, [r2, #0]
 80027a8:	701a      	strb	r2, [r3, #0]
	s_pEXP_Sfp_Payload->getTecVoltageResponeFrame.Voltage_0_High = (uint8_t)(vol_0 >> 8);
 80027aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80027ae:	0a1b      	lsrs	r3, r3, #8
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	4b29      	ldr	r3, [pc, #164]	@ (8002858 <copc_exp_get_tec_vol+0xf0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	705a      	strb	r2, [r3, #1]
	s_pEXP_Sfp_Payload->getTecVoltageResponeFrame.Voltage_0_Low = (uint8_t)(vol_0);
 80027ba:	4b27      	ldr	r3, [pc, #156]	@ (8002858 <copc_exp_get_tec_vol+0xf0>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	709a      	strb	r2, [r3, #2]
	s_pEXP_Sfp_Payload->getTecVoltageResponeFrame.Voltage_1_High = (uint8_t)(vol_1 >> 8);
 80027c6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80027ca:	0a1b      	lsrs	r3, r3, #8
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	4b22      	ldr	r3, [pc, #136]	@ (8002858 <copc_exp_get_tec_vol+0xf0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	70da      	strb	r2, [r3, #3]
	s_pEXP_Sfp_Payload->getTecVoltageResponeFrame.Voltage_1_Low = (uint8_t)(vol_1);
 80027d6:	4b20      	ldr	r3, [pc, #128]	@ (8002858 <copc_exp_get_tec_vol+0xf0>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	711a      	strb	r2, [r3, #4]
	s_pEXP_Sfp_Payload->getTecVoltageResponeFrame.Voltage_2_High = (uint8_t)(vol_2 >> 8);
 80027e2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80027e6:	0a1b      	lsrs	r3, r3, #8
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002858 <copc_exp_get_tec_vol+0xf0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	715a      	strb	r2, [r3, #5]
	s_pEXP_Sfp_Payload->getTecVoltageResponeFrame.Voltage_2_Low = (uint8_t)(vol_2);
 80027f2:	4b19      	ldr	r3, [pc, #100]	@ (8002858 <copc_exp_get_tec_vol+0xf0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	719a      	strb	r2, [r3, #6]
	s_pEXP_Sfp_Payload->getTecVoltageResponeFrame.Voltage_3_High = (uint8_t)(vol_3 >> 8);
 80027fe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002802:	0a1b      	lsrs	r3, r3, #8
 8002804:	b29a      	uxth	r2, r3
 8002806:	4b14      	ldr	r3, [pc, #80]	@ (8002858 <copc_exp_get_tec_vol+0xf0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	71da      	strb	r2, [r3, #7]
	s_pEXP_Sfp_Payload->getTecVoltageResponeFrame.Voltage_3_Low = (uint8_t)(vol_3);
 800280e:	4b12      	ldr	r3, [pc, #72]	@ (8002858 <copc_exp_get_tec_vol+0xf0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	721a      	strb	r2, [r3, #8]
	fsp_gen_pkt((void*)0, (uint8_t *)&s_pEXP_Sfp_Payload->getTecVoltageResponeFrame, 9, FSP_ADR_COPC, FSP_PKT_TYPE_CMD_W_DATA, &s_EXP_FspPacket);
 800281a:	4b0f      	ldr	r3, [pc, #60]	@ (8002858 <copc_exp_get_tec_vol+0xf0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4619      	mov	r1, r3
 8002820:	4b0e      	ldr	r3, [pc, #56]	@ (800285c <copc_exp_get_tec_vol+0xf4>)
 8002822:	9301      	str	r3, [sp, #4]
 8002824:	2307      	movs	r3, #7
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	2301      	movs	r3, #1
 800282a:	2209      	movs	r2, #9
 800282c:	2000      	movs	r0, #0
 800282e:	f004 fc97 	bl	8007160 <fsp_gen_pkt>
	fsp_encode(&s_EXP_FspPacket, encode_frame, &frame_len);
 8002832:	1cfa      	adds	r2, r7, #3
 8002834:	1d3b      	adds	r3, r7, #4
 8002836:	4619      	mov	r1, r3
 8002838:	4808      	ldr	r0, [pc, #32]	@ (800285c <copc_exp_get_tec_vol+0xf4>)
 800283a:	f004 fcf1 	bl	8007220 <fsp_encode>
	UART_Write(&COPC_UART, (const char *)&encode_frame, frame_len);
 800283e:	78fb      	ldrb	r3, [r7, #3]
 8002840:	461a      	mov	r2, r3
 8002842:	1d3b      	adds	r3, r7, #4
 8002844:	4619      	mov	r1, r3
 8002846:	4806      	ldr	r0, [pc, #24]	@ (8002860 <copc_exp_get_tec_vol+0xf8>)
 8002848:	f7fe f878 	bl	800093c <UART_Write>
	return;
 800284c:	bf00      	nop
}
 800284e:	3750      	adds	r7, #80	@ 0x50
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	20000540 	.word	0x20000540
 8002858:	20000544 	.word	0x20000544
 800285c:	200004f8 	.word	0x200004f8
 8002860:	20000410 	.word	0x20000410

08002864 <copc_exp_set_heater_duty>:
void copc_exp_set_heater_duty(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
	uint8_t duty_0 = s_pCOPC_Sfp_Payload->setHeaterDutyCommandFrame.Duty_0;
 800286a:	4b1f      	ldr	r3, [pc, #124]	@ (80028e8 <copc_exp_set_heater_duty+0x84>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	785b      	ldrb	r3, [r3, #1]
 8002870:	71fb      	strb	r3, [r7, #7]
	if (duty_0 > 100) duty_0 = 100;
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	2b64      	cmp	r3, #100	@ 0x64
 8002876:	d901      	bls.n	800287c <copc_exp_set_heater_duty+0x18>
 8002878:	2364      	movs	r3, #100	@ 0x64
 800287a:	71fb      	strb	r3, [r7, #7]
	uint8_t duty_1 = s_pCOPC_Sfp_Payload->setHeaterDutyCommandFrame.Duty_1;
 800287c:	4b1a      	ldr	r3, [pc, #104]	@ (80028e8 <copc_exp_set_heater_duty+0x84>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	789b      	ldrb	r3, [r3, #2]
 8002882:	71bb      	strb	r3, [r7, #6]
	if (duty_1 > 100) duty_1 = 100;
 8002884:	79bb      	ldrb	r3, [r7, #6]
 8002886:	2b64      	cmp	r3, #100	@ 0x64
 8002888:	d901      	bls.n	800288e <copc_exp_set_heater_duty+0x2a>
 800288a:	2364      	movs	r3, #100	@ 0x64
 800288c:	71bb      	strb	r3, [r7, #6]
	uint8_t duty_2 = s_pCOPC_Sfp_Payload->setHeaterDutyCommandFrame.Duty_2;
 800288e:	4b16      	ldr	r3, [pc, #88]	@ (80028e8 <copc_exp_set_heater_duty+0x84>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	78db      	ldrb	r3, [r3, #3]
 8002894:	717b      	strb	r3, [r7, #5]
	if (duty_2 > 100) duty_2 = 100;
 8002896:	797b      	ldrb	r3, [r7, #5]
 8002898:	2b64      	cmp	r3, #100	@ 0x64
 800289a:	d901      	bls.n	80028a0 <copc_exp_set_heater_duty+0x3c>
 800289c:	2364      	movs	r3, #100	@ 0x64
 800289e:	717b      	strb	r3, [r7, #5]
	uint8_t duty_3 = s_pCOPC_Sfp_Payload->setHeaterDutyCommandFrame.Duty_3;
 80028a0:	4b11      	ldr	r3, [pc, #68]	@ (80028e8 <copc_exp_set_heater_duty+0x84>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	791b      	ldrb	r3, [r3, #4]
 80028a6:	713b      	strb	r3, [r7, #4]
	if (duty_3 > 100) duty_3 = 100;
 80028a8:	793b      	ldrb	r3, [r7, #4]
 80028aa:	2b64      	cmp	r3, #100	@ 0x64
 80028ac:	d901      	bls.n	80028b2 <copc_exp_set_heater_duty+0x4e>
 80028ae:	2364      	movs	r3, #100	@ 0x64
 80028b0:	713b      	strb	r3, [r7, #4]
	temperature_set_heater_duty(0, duty_0);
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	4619      	mov	r1, r3
 80028b6:	2000      	movs	r0, #0
 80028b8:	f002 fc68 	bl	800518c <temperature_set_heater_duty>
	temperature_set_heater_duty(1, duty_1);
 80028bc:	79bb      	ldrb	r3, [r7, #6]
 80028be:	4619      	mov	r1, r3
 80028c0:	2001      	movs	r0, #1
 80028c2:	f002 fc63 	bl	800518c <temperature_set_heater_duty>
	temperature_set_heater_duty(2, duty_2);
 80028c6:	797b      	ldrb	r3, [r7, #5]
 80028c8:	4619      	mov	r1, r3
 80028ca:	2002      	movs	r0, #2
 80028cc:	f002 fc5e 	bl	800518c <temperature_set_heater_duty>
	temperature_set_heater_duty(3, duty_3);
 80028d0:	793b      	ldrb	r3, [r7, #4]
 80028d2:	4619      	mov	r1, r3
 80028d4:	2003      	movs	r0, #3
 80028d6:	f002 fc59 	bl	800518c <temperature_set_heater_duty>
	OK_Send();
 80028da:	f7ff fd0d 	bl	80022f8 <OK_Send>
	return;
 80028de:	bf00      	nop
}
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000540 	.word	0x20000540

080028ec <copc_exp_get_heater_duty>:
void copc_exp_get_heater_duty(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b096      	sub	sp, #88	@ 0x58
 80028f0:	af02      	add	r7, sp, #8
	uint8_t encode_frame[FSP_PKT_MAX_LENGTH];
	uint8_t frame_len;
	uint8_t duty_0 = temperature_get_heater_duty(0);
 80028f2:	2000      	movs	r0, #0
 80028f4:	f002 fc6e 	bl	80051d4 <temperature_get_heater_duty>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	uint8_t duty_1 = temperature_get_heater_duty(1);
 80028fe:	2001      	movs	r0, #1
 8002900:	f002 fc68 	bl	80051d4 <temperature_get_heater_duty>
 8002904:	4603      	mov	r3, r0
 8002906:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	uint8_t duty_2 = temperature_get_heater_duty(2);
 800290a:	2002      	movs	r0, #2
 800290c:	f002 fc62 	bl	80051d4 <temperature_get_heater_duty>
 8002910:	4603      	mov	r3, r0
 8002912:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	uint8_t duty_3 = temperature_get_heater_duty(3);
 8002916:	2003      	movs	r0, #3
 8002918:	f002 fc5c 	bl	80051d4 <temperature_get_heater_duty>
 800291c:	4603      	mov	r3, r0
 800291e:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
	s_pEXP_Sfp_Payload->getHeaterDutyResponeFrame.Cmd = s_pCOPC_Sfp_Payload->getHeaterDutyCommandFrame.Cmd;
 8002922:	4b1c      	ldr	r3, [pc, #112]	@ (8002994 <copc_exp_get_heater_duty+0xa8>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	4b1c      	ldr	r3, [pc, #112]	@ (8002998 <copc_exp_get_heater_duty+0xac>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	7812      	ldrb	r2, [r2, #0]
 800292c:	701a      	strb	r2, [r3, #0]
	s_pEXP_Sfp_Payload->getHeaterDutyResponeFrame.Duty_0 = duty_0;
 800292e:	4b1a      	ldr	r3, [pc, #104]	@ (8002998 <copc_exp_get_heater_duty+0xac>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8002936:	705a      	strb	r2, [r3, #1]
	s_pEXP_Sfp_Payload->getHeaterDutyResponeFrame.Duty_1 = duty_1;
 8002938:	4b17      	ldr	r3, [pc, #92]	@ (8002998 <copc_exp_get_heater_duty+0xac>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8002940:	709a      	strb	r2, [r3, #2]
	s_pEXP_Sfp_Payload->getHeaterDutyResponeFrame.Duty_2 = duty_2;
 8002942:	4b15      	ldr	r3, [pc, #84]	@ (8002998 <copc_exp_get_heater_duty+0xac>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800294a:	70da      	strb	r2, [r3, #3]
	s_pEXP_Sfp_Payload->getHeaterDutyResponeFrame.Duty_3 = duty_3;
 800294c:	4b12      	ldr	r3, [pc, #72]	@ (8002998 <copc_exp_get_heater_duty+0xac>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8002954:	711a      	strb	r2, [r3, #4]
	fsp_gen_pkt((void*)0, (uint8_t *)&s_pEXP_Sfp_Payload->getHeaterDutyResponeFrame, 5, FSP_ADR_COPC, FSP_PKT_TYPE_CMD_W_DATA, &s_EXP_FspPacket);
 8002956:	4b10      	ldr	r3, [pc, #64]	@ (8002998 <copc_exp_get_heater_duty+0xac>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4619      	mov	r1, r3
 800295c:	4b0f      	ldr	r3, [pc, #60]	@ (800299c <copc_exp_get_heater_duty+0xb0>)
 800295e:	9301      	str	r3, [sp, #4]
 8002960:	2307      	movs	r3, #7
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	2301      	movs	r3, #1
 8002966:	2205      	movs	r2, #5
 8002968:	2000      	movs	r0, #0
 800296a:	f004 fbf9 	bl	8007160 <fsp_gen_pkt>
	fsp_encode(&s_EXP_FspPacket, encode_frame, &frame_len);
 800296e:	1dfa      	adds	r2, r7, #7
 8002970:	f107 0308 	add.w	r3, r7, #8
 8002974:	4619      	mov	r1, r3
 8002976:	4809      	ldr	r0, [pc, #36]	@ (800299c <copc_exp_get_heater_duty+0xb0>)
 8002978:	f004 fc52 	bl	8007220 <fsp_encode>
	UART_Write(&COPC_UART, (const char *)&encode_frame, frame_len);
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	461a      	mov	r2, r3
 8002980:	f107 0308 	add.w	r3, r7, #8
 8002984:	4619      	mov	r1, r3
 8002986:	4806      	ldr	r0, [pc, #24]	@ (80029a0 <copc_exp_get_heater_duty+0xb4>)
 8002988:	f7fd ffd8 	bl	800093c <UART_Write>
	return;
 800298c:	bf00      	nop
}
 800298e:	3750      	adds	r7, #80	@ 0x50
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	20000540 	.word	0x20000540
 8002998:	20000544 	.word	0x20000544
 800299c:	200004f8 	.word	0x200004f8
 80029a0:	20000410 	.word	0x20000410

080029a4 <copc_exp_temp_ctrl>:
void copc_exp_temp_ctrl(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
	mode_ctrl_temp_t mode_0 = s_pCOPC_Sfp_Payload->tempCtrlCommandFrame.Mode_0;
 80029aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002a24 <copc_exp_temp_ctrl+0x80>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	785b      	ldrb	r3, [r3, #1]
 80029b0:	71fb      	strb	r3, [r7, #7]
	if (mode_0 != COOL && mode_0 != HEAT) mode_0 = OFF;
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d004      	beq.n	80029c2 <copc_exp_temp_ctrl+0x1e>
 80029b8:	79fb      	ldrb	r3, [r7, #7]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d001      	beq.n	80029c2 <copc_exp_temp_ctrl+0x1e>
 80029be:	2300      	movs	r3, #0
 80029c0:	71fb      	strb	r3, [r7, #7]
	mode_ctrl_temp_t mode_1 = s_pCOPC_Sfp_Payload->tempCtrlCommandFrame.Mode_1;
 80029c2:	4b18      	ldr	r3, [pc, #96]	@ (8002a24 <copc_exp_temp_ctrl+0x80>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	789b      	ldrb	r3, [r3, #2]
 80029c8:	71bb      	strb	r3, [r7, #6]
	if (mode_1 != COOL && mode_1 != HEAT) mode_1 = OFF;
 80029ca:	79bb      	ldrb	r3, [r7, #6]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d004      	beq.n	80029da <copc_exp_temp_ctrl+0x36>
 80029d0:	79bb      	ldrb	r3, [r7, #6]
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d001      	beq.n	80029da <copc_exp_temp_ctrl+0x36>
 80029d6:	2300      	movs	r3, #0
 80029d8:	71bb      	strb	r3, [r7, #6]
	mode_ctrl_temp_t mode_2 = s_pCOPC_Sfp_Payload->tempCtrlCommandFrame.Mode_2;
 80029da:	4b12      	ldr	r3, [pc, #72]	@ (8002a24 <copc_exp_temp_ctrl+0x80>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	78db      	ldrb	r3, [r3, #3]
 80029e0:	717b      	strb	r3, [r7, #5]
	if (mode_2 != COOL && mode_2 != HEAT) mode_2 = OFF;
 80029e2:	797b      	ldrb	r3, [r7, #5]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d004      	beq.n	80029f2 <copc_exp_temp_ctrl+0x4e>
 80029e8:	797b      	ldrb	r3, [r7, #5]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d001      	beq.n	80029f2 <copc_exp_temp_ctrl+0x4e>
 80029ee:	2300      	movs	r3, #0
 80029f0:	717b      	strb	r3, [r7, #5]
	mode_ctrl_temp_t mode_3 = s_pCOPC_Sfp_Payload->tempCtrlCommandFrame.Mode_3;
 80029f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002a24 <copc_exp_temp_ctrl+0x80>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	791b      	ldrb	r3, [r3, #4]
 80029f8:	713b      	strb	r3, [r7, #4]
	if (mode_3 != COOL && mode_3 != HEAT) mode_3 = OFF;
 80029fa:	793b      	ldrb	r3, [r7, #4]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d004      	beq.n	8002a0a <copc_exp_temp_ctrl+0x66>
 8002a00:	793b      	ldrb	r3, [r7, #4]
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d001      	beq.n	8002a0a <copc_exp_temp_ctrl+0x66>
 8002a06:	2300      	movs	r3, #0
 8002a08:	713b      	strb	r3, [r7, #4]

	temperature_set_ctrl(mode_0, mode_1, mode_2, mode_3);
 8002a0a:	793b      	ldrb	r3, [r7, #4]
 8002a0c:	797a      	ldrb	r2, [r7, #5]
 8002a0e:	79b9      	ldrb	r1, [r7, #6]
 8002a10:	79f8      	ldrb	r0, [r7, #7]
 8002a12:	f002 fc31 	bl	8005278 <temperature_set_ctrl>
	OK_Send();
 8002a16:	f7ff fc6f 	bl	80022f8 <OK_Send>
	return;
 8002a1a:	bf00      	nop
}
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	20000540 	.word	0x20000540

08002a28 <copc_exp_temp_auto_ctrl>:
void copc_exp_temp_auto_ctrl(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
	uint8_t auto_0 = s_pCOPC_Sfp_Payload->tempAutoCtrlCommandFrame.Auto_0 ? 1 : 0;
 8002a2e:	4b18      	ldr	r3, [pc, #96]	@ (8002a90 <copc_exp_temp_auto_ctrl+0x68>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	785b      	ldrb	r3, [r3, #1]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	bf14      	ite	ne
 8002a38:	2301      	movne	r3, #1
 8002a3a:	2300      	moveq	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	71fb      	strb	r3, [r7, #7]
	uint8_t auto_1 = s_pCOPC_Sfp_Payload->tempAutoCtrlCommandFrame.Auto_1 ? 1 : 0;
 8002a40:	4b13      	ldr	r3, [pc, #76]	@ (8002a90 <copc_exp_temp_auto_ctrl+0x68>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	789b      	ldrb	r3, [r3, #2]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	bf14      	ite	ne
 8002a4a:	2301      	movne	r3, #1
 8002a4c:	2300      	moveq	r3, #0
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	71bb      	strb	r3, [r7, #6]
	uint8_t auto_2 = s_pCOPC_Sfp_Payload->tempAutoCtrlCommandFrame.Auto_2 ? 1 : 0;
 8002a52:	4b0f      	ldr	r3, [pc, #60]	@ (8002a90 <copc_exp_temp_auto_ctrl+0x68>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	78db      	ldrb	r3, [r3, #3]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	bf14      	ite	ne
 8002a5c:	2301      	movne	r3, #1
 8002a5e:	2300      	moveq	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	717b      	strb	r3, [r7, #5]
	uint8_t auto_3 = s_pCOPC_Sfp_Payload->tempAutoCtrlCommandFrame.Auto_3 ? 1 : 0;
 8002a64:	4b0a      	ldr	r3, [pc, #40]	@ (8002a90 <copc_exp_temp_auto_ctrl+0x68>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	791b      	ldrb	r3, [r3, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	bf14      	ite	ne
 8002a6e:	2301      	movne	r3, #1
 8002a70:	2300      	moveq	r3, #0
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	713b      	strb	r3, [r7, #4]
	temperature_set_auto_ctrl(auto_0, auto_1, auto_2, auto_3);
 8002a76:	793b      	ldrb	r3, [r7, #4]
 8002a78:	797a      	ldrb	r2, [r7, #5]
 8002a7a:	79b9      	ldrb	r1, [r7, #6]
 8002a7c:	79f8      	ldrb	r0, [r7, #7]
 8002a7e:	f002 fbc9 	bl	8005214 <temperature_set_auto_ctrl>
	OK_Send();
 8002a82:	f7ff fc39 	bl	80022f8 <OK_Send>
	return;
 8002a86:	bf00      	nop
}
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000540 	.word	0x20000540

08002a94 <copc_exp_set_ir_duty>:
void copc_exp_set_ir_duty(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
//	set_ir_duty(0, duty_0);
//	set_ir_duty(1, duty_1);
//	set_ir_duty(2, duty_2);
//	set_ir_duty(3, duty_3);
//	OK_Send();
	return;
 8002a98:	bf00      	nop
}
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <copc_exp_get_ir_duty>:
void copc_exp_get_ir_duty(void)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0
//	s_pEXP_Sfp_Payload->getIrDutyResponeFrame.Duty_2 = duty_2;
//	s_pEXP_Sfp_Payload->getIrDutyResponeFrame.Duty_3 = duty_3;
//	fsp_gen_pkt((void*)0, (uint8_t *)&s_pEXP_Sfp_Payload->getIrDutyResponeFrame, 5, FSP_ADR_COPC, FSP_PKT_TYPE_CMD_W_DATA, &s_EXP_FspPacket);
//	fsp_encode(&s_EXP_FspPacket, encode_frame, &frame_len);
//	UART_Write(&COPC_UART, (const char *)&encode_frame, frame_len);
	return;
 8002aa6:	bf00      	nop
}
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <copc_exp_get_all>:
//	fsp_encode(&s_exp_FspPacket, encode_frame, &frame_len);
//	usart1_send_array((const char *)&encode_frame, frame_len);
//}

void copc_exp_get_all(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
//	s_pexp_Sfp_Payload->expGetParamResponseFrame.press = (temp << 8) | (temp >> 8);
//	// DECODE FRAME
//	fsp_gen_pkt((void*)0, (uint8_t *)&s_pexp_Sfp_Payload->expGetParamResponseFrame, 50, FSP_ADR_COPC, FSP_PKT_TYPE_CMD_W_DATA, &s_exp_FspPacket);
//	fsp_encode(&s_exp_FspPacket, encode_frame, &frame_len);
//	usart1_send_array((const char *)&encode_frame, frame_len);
	return;
 8002ab4:	bf00      	nop
}
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
	...

08002ac0 <COPC_UART_IRQHandler>:

/* :::::::::: COPC_UART_IRQHandler ::::::::::::: */
void COPC_UART_IRQHandler(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
	// Transmit
    if(LL_USART_IsActiveFlag_TXE(COPC_UART.handle) == true)
 8002ac4:	4b1f      	ldr	r3, [pc, #124]	@ (8002b44 <COPC_UART_IRQHandler+0x84>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff fa5c 	bl	8001f86 <LL_USART_IsActiveFlag_TXE>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d10f      	bne.n	8002af4 <COPC_UART_IRQHandler+0x34>
    {
        if(TX_BUFFER_EMPTY(&COPC_UART))
 8002ad4:	491c      	ldr	r1, [pc, #112]	@ (8002b48 <COPC_UART_IRQHandler+0x88>)
 8002ad6:	481d      	ldr	r0, [pc, #116]	@ (8002b4c <COPC_UART_IRQHandler+0x8c>)
 8002ad8:	f7fe f9f7 	bl	8000eca <UART_is_buffer_empty>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d005      	beq.n	8002aee <COPC_UART_IRQHandler+0x2e>
        {
            // Buffer empty, so disable interrupts
            LL_USART_DisableIT_TXE(CONSOLE_UART.handle);
 8002ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b50 <COPC_UART_IRQHandler+0x90>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff fa60 	bl	8001fac <LL_USART_DisableIT_TXE>
 8002aec:	e002      	b.n	8002af4 <COPC_UART_IRQHandler+0x34>
        }
        else
        {
            // There is more data in the output buffer. Send the next byte
            UART_Prime_Transmit(&COPC_UART);
 8002aee:	4815      	ldr	r0, [pc, #84]	@ (8002b44 <COPC_UART_IRQHandler+0x84>)
 8002af0:	f7fe fa1f 	bl	8000f32 <UART_Prime_Transmit>
        }
    }
    // Receive
    if(LL_USART_IsActiveFlag_RXNE(COPC_UART.handle) == true)
 8002af4:	4b13      	ldr	r3, [pc, #76]	@ (8002b44 <COPC_UART_IRQHandler+0x84>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff fa31 	bl	8001f60 <LL_USART_IsActiveFlag_RXNE>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d11d      	bne.n	8002b40 <COPC_UART_IRQHandler+0x80>
    {
    	COPC_UART.RX_irq_char = LL_USART_ReceiveData8(COPC_UART.handle);
 8002b04:	4b0f      	ldr	r3, [pc, #60]	@ (8002b44 <COPC_UART_IRQHandler+0x84>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff fa72 	bl	8001ff2 <LL_USART_ReceiveData8>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	461a      	mov	r2, r3
 8002b12:	4b0c      	ldr	r3, [pc, #48]	@ (8002b44 <COPC_UART_IRQHandler+0x84>)
 8002b14:	771a      	strb	r2, [r3, #28]
    	if (!RX_BUFFER_FULL(&COPC_UART))
 8002b16:	4b0b      	ldr	r3, [pc, #44]	@ (8002b44 <COPC_UART_IRQHandler+0x84>)
 8002b18:	891b      	ldrh	r3, [r3, #8]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	490d      	ldr	r1, [pc, #52]	@ (8002b54 <COPC_UART_IRQHandler+0x94>)
 8002b1e:	480e      	ldr	r0, [pc, #56]	@ (8002b58 <COPC_UART_IRQHandler+0x98>)
 8002b20:	f7fe f9b2 	bl	8000e88 <UART_is_buffer_full>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10a      	bne.n	8002b40 <COPC_UART_IRQHandler+0x80>
    	{
    		COPC_UART.p_RX_buffer[COPC_UART.RX_write_index] = COPC_UART.RX_irq_char;
 8002b2a:	4b06      	ldr	r3, [pc, #24]	@ (8002b44 <COPC_UART_IRQHandler+0x84>)
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	4a05      	ldr	r2, [pc, #20]	@ (8002b44 <COPC_UART_IRQHandler+0x84>)
 8002b30:	8b12      	ldrh	r2, [r2, #24]
 8002b32:	b292      	uxth	r2, r2
 8002b34:	4413      	add	r3, r2
 8002b36:	4a03      	ldr	r2, [pc, #12]	@ (8002b44 <COPC_UART_IRQHandler+0x84>)
 8002b38:	7f12      	ldrb	r2, [r2, #28]
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	701a      	strb	r2, [r3, #0]
    	}
    }
    return;
 8002b3e:	bf00      	nop
 8002b40:	bf00      	nop
}
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20000410 	.word	0x20000410
 8002b48:	20000420 	.word	0x20000420
 8002b4c:	20000422 	.word	0x20000422
 8002b50:	20000324 	.word	0x20000324
 8002b54:	20000428 	.word	0x20000428
 8002b58:	2000042a 	.word	0x2000042a

08002b5c <bmp390_get_temperature>:

#include "bmp390.h"


int16_t bmp390_get_temperature(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
	int16_t temp = 100;
 8002b62:	2364      	movs	r3, #100	@ 0x64
 8002b64:	80fb      	strh	r3, [r7, #6]
	return temp;
 8002b66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
 8002b7e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
 8002bb6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
 8002bd2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
	...

08002be8 <heater_set_duty_pwm_channel>:

#include "heater.h"
#include "main.h"

void heater_set_duty_pwm_channel(uint8_t channel, uint16_t duty_pwm)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	460a      	mov	r2, r1
 8002bf2:	71fb      	strb	r3, [r7, #7]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	80bb      	strh	r3, [r7, #4]
    if (duty_pwm > 9999) duty_pwm = 9999;
 8002bf8:	88bb      	ldrh	r3, [r7, #4]
 8002bfa:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d902      	bls.n	8002c08 <heater_set_duty_pwm_channel+0x20>
 8002c02:	f242 730f 	movw	r3, #9999	@ 0x270f
 8002c06:	80bb      	strh	r3, [r7, #4]
    switch (channel)
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d822      	bhi.n	8002c54 <heater_set_duty_pwm_channel+0x6c>
 8002c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c14 <heater_set_duty_pwm_channel+0x2c>)
 8002c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c14:	08002c25 	.word	0x08002c25
 8002c18:	08002c31 	.word	0x08002c31
 8002c1c:	08002c3d 	.word	0x08002c3d
 8002c20:	08002c49 	.word	0x08002c49
    {
        case 0:
            LL_TIM_OC_SetCompareCH1(TIM1, duty_pwm);
 8002c24:	88bb      	ldrh	r3, [r7, #4]
 8002c26:	4619      	mov	r1, r3
 8002c28:	480d      	ldr	r0, [pc, #52]	@ (8002c60 <heater_set_duty_pwm_channel+0x78>)
 8002c2a:	f7ff ffa4 	bl	8002b76 <LL_TIM_OC_SetCompareCH1>
            break;
 8002c2e:	e012      	b.n	8002c56 <heater_set_duty_pwm_channel+0x6e>
        case 1:
            LL_TIM_OC_SetCompareCH2(TIM1, duty_pwm);
 8002c30:	88bb      	ldrh	r3, [r7, #4]
 8002c32:	4619      	mov	r1, r3
 8002c34:	480a      	ldr	r0, [pc, #40]	@ (8002c60 <heater_set_duty_pwm_channel+0x78>)
 8002c36:	f7ff ffac 	bl	8002b92 <LL_TIM_OC_SetCompareCH2>
            break;
 8002c3a:	e00c      	b.n	8002c56 <heater_set_duty_pwm_channel+0x6e>
        case 2:
            LL_TIM_OC_SetCompareCH3(TIM1, duty_pwm);
 8002c3c:	88bb      	ldrh	r3, [r7, #4]
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4807      	ldr	r0, [pc, #28]	@ (8002c60 <heater_set_duty_pwm_channel+0x78>)
 8002c42:	f7ff ffb4 	bl	8002bae <LL_TIM_OC_SetCompareCH3>
            break;
 8002c46:	e006      	b.n	8002c56 <heater_set_duty_pwm_channel+0x6e>
        case 3:
            LL_TIM_OC_SetCompareCH4(TIM1, duty_pwm);
 8002c48:	88bb      	ldrh	r3, [r7, #4]
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4804      	ldr	r0, [pc, #16]	@ (8002c60 <heater_set_duty_pwm_channel+0x78>)
 8002c4e:	f7ff ffbc 	bl	8002bca <LL_TIM_OC_SetCompareCH4>
            break;
 8002c52:	e000      	b.n	8002c56 <heater_set_duty_pwm_channel+0x6e>
        default:
            break;
 8002c54:	bf00      	nop
    }
}
 8002c56:	bf00      	nop
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40010000 	.word	0x40010000

08002c64 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d101      	bne.n	8002c7c <LL_SPI_IsActiveFlag_RXNE+0x18>
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e000      	b.n	8002c7e <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	330c      	adds	r3, #12
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	b2db      	uxtb	r3, r3
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b085      	sub	sp, #20
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	330c      	adds	r3, #12
 8002cb6:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	78fa      	ldrb	r2, [r7, #3]
 8002cbc:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8002cbe:	bf00      	nop
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <LL_GPIO_SetOutputPin>:
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	619a      	str	r2, [r3, #24]
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <LL_GPIO_ResetOutputPin>:
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	041a      	lsls	r2, r3, #16
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	619a      	str	r2, [r3, #24]
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <csLOW>:
		LT8722_SPIS_AMUX_SIZE
	},
};

/* SPI support function --------------------------------------------------*/
static inline void csLOW(void) {
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(TEC_1_CS_GPIO_Port, TEC_1_CS_Pin);
 8002d08:	2102      	movs	r1, #2
 8002d0a:	4802      	ldr	r0, [pc, #8]	@ (8002d14 <csLOW+0x10>)
 8002d0c:	f7ff ffeb 	bl	8002ce6 <LL_GPIO_ResetOutputPin>
}
 8002d10:	bf00      	nop
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40021000 	.word	0x40021000

08002d18 <csHIGH>:

static inline void csHIGH(void) {
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(TEC_1_CS_GPIO_Port, TEC_1_CS_Pin);
 8002d1c:	2102      	movs	r1, #2
 8002d1e:	4802      	ldr	r0, [pc, #8]	@ (8002d28 <csHIGH+0x10>)
 8002d20:	f7ff ffd3 	bl	8002cca <LL_GPIO_SetOutputPin>
}
 8002d24:	bf00      	nop
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40021000 	.word	0x40021000

08002d2c <SPI_LL_Transmit>:

static uint8_t SPI_LL_Transmit(uint8_t data)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	71fb      	strb	r3, [r7, #7]
	LL_SPI_TransmitData8(SPI1, data);
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4809      	ldr	r0, [pc, #36]	@ (8002d60 <SPI_LL_Transmit+0x34>)
 8002d3c:	f7ff ffb3 	bl	8002ca6 <LL_SPI_TransmitData8>
	while(!LL_SPI_IsActiveFlag_RXNE(SPI1));
 8002d40:	bf00      	nop
 8002d42:	4807      	ldr	r0, [pc, #28]	@ (8002d60 <SPI_LL_Transmit+0x34>)
 8002d44:	f7ff ff8e 	bl	8002c64 <LL_SPI_IsActiveFlag_RXNE>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f9      	beq.n	8002d42 <SPI_LL_Transmit+0x16>
	return LL_SPI_ReceiveData8(SPI1);
 8002d4e:	4804      	ldr	r0, [pc, #16]	@ (8002d60 <SPI_LL_Transmit+0x34>)
 8002d50:	f7ff ff9b 	bl	8002c8a <LL_SPI_ReceiveData8>
 8002d54:	4603      	mov	r3, r0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40013000 	.word	0x40013000

08002d64 <SPI_write_and_read_buffer>:

uint8_t SPI_write_and_read_buffer(uint8_t *buffer, uint8_t byte_number)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	70fb      	strb	r3, [r7, #3]
    uint8_t received_data = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	73fb      	strb	r3, [r7, #15]
    csLOW();
 8002d74:	f7ff ffc6 	bl	8002d04 <csLOW>
    for (uint8_t i = 0; i < byte_number; i++)
 8002d78:	2300      	movs	r3, #0
 8002d7a:	73bb      	strb	r3, [r7, #14]
 8002d7c:	e010      	b.n	8002da0 <SPI_write_and_read_buffer+0x3c>
    {
        received_data = SPI_LL_Transmit(buffer[i]);
 8002d7e:	7bbb      	ldrb	r3, [r7, #14]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	4413      	add	r3, r2
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff ffd0 	bl	8002d2c <SPI_LL_Transmit>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	73fb      	strb	r3, [r7, #15]
        buffer[i] = received_data;
 8002d90:	7bbb      	ldrb	r3, [r7, #14]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	4413      	add	r3, r2
 8002d96:	7bfa      	ldrb	r2, [r7, #15]
 8002d98:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < byte_number; i++)
 8002d9a:	7bbb      	ldrb	r3, [r7, #14]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	73bb      	strb	r3, [r7, #14]
 8002da0:	7bba      	ldrb	r2, [r7, #14]
 8002da2:	78fb      	ldrb	r3, [r7, #3]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d3ea      	bcc.n	8002d7e <SPI_write_and_read_buffer+0x1a>
    }
    csHIGH();
 8002da8:	f7ff ffb6 	bl	8002d18 <csHIGH>
    return received_data;
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <lt8722_voltage_to_dac>:
 * @brief Convert voltage to DAC code.
 * @param voltage - Voltage value in nanovolts.
 * @return DAC code.
 */
int32_t lt8722_voltage_to_dac(int64_t voltage)
{
 8002db8:	b5b0      	push	{r4, r5, r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	e9c7 0100 	strd	r0, r1, [r7]
	return (LT8722_DAC_OFFSET - voltage) * (1 << LT8722_DAC_RESOLUTION) / LT8722_DAC_VREF;
 8002dc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002dc6:	4d0e      	ldr	r5, [pc, #56]	@ (8002e00 <lt8722_voltage_to_dac+0x48>)
 8002dc8:	2400      	movs	r4, #0
 8002dca:	1a2a      	subs	r2, r5, r0
 8002dcc:	eb64 0301 	sbc.w	r3, r4, r1
 8002dd0:	f04f 0000 	mov.w	r0, #0
 8002dd4:	f04f 0100 	mov.w	r1, #0
 8002dd8:	0659      	lsls	r1, r3, #25
 8002dda:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8002dde:	0650      	lsls	r0, r2, #25
 8002de0:	a305      	add	r3, pc, #20	@ (adr r3, 8002df8 <lt8722_voltage_to_dac+0x40>)
 8002de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de6:	f7fd fa01 	bl	80001ec <__aeabi_ldivmod>
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4613      	mov	r3, r2
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bdb0      	pop	{r4, r5, r7, pc}
 8002df8:	9502f900 	.word	0x9502f900
 8002dfc:	00000000 	.word	0x00000000
 8002e00:	4a817c80 	.word	0x4a817c80

08002e04 <lt8722_dac_to_voltage>:
 * @brief Convert DAC code to nanovolts.
 * @param dac - DAC code.
 * @return Voltage value in nanovolts.
 */
int64_t lt8722_dac_to_voltage(int32_t dac)
{
 8002e04:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002e08:	b085      	sub	sp, #20
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	60f8      	str	r0, [r7, #12]
	return LT8722_DAC_OFFSET - dac * LT8722_DAC_VREF /(1 << LT8722_DAC_RESOLUTION);
 8002e0e:	68f9      	ldr	r1, [r7, #12]
 8002e10:	17c8      	asrs	r0, r1, #31
 8002e12:	460c      	mov	r4, r1
 8002e14:	4605      	mov	r5, r0
 8002e16:	491b      	ldr	r1, [pc, #108]	@ (8002e84 <lt8722_dac_to_voltage+0x80>)
 8002e18:	fb01 f005 	mul.w	r0, r1, r5
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	fb04 f101 	mul.w	r1, r4, r1
 8002e22:	4401      	add	r1, r0
 8002e24:	4817      	ldr	r0, [pc, #92]	@ (8002e84 <lt8722_dac_to_voltage+0x80>)
 8002e26:	fba4 2300 	umull	r2, r3, r4, r0
 8002e2a:	4419      	add	r1, r3
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4610      	mov	r0, r2
 8002e30:	4619      	mov	r1, r3
 8002e32:	2900      	cmp	r1, #0
 8002e34:	da08      	bge.n	8002e48 <lt8722_dac_to_voltage+0x44>
 8002e36:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002e3a:	18c3      	adds	r3, r0, r3
 8002e3c:	603b      	str	r3, [r7, #0]
 8002e3e:	f141 0300 	adc.w	r3, r1, #0
 8002e42:	607b      	str	r3, [r7, #4]
 8002e44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	0e42      	lsrs	r2, r0, #25
 8002e52:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8002e56:	164b      	asrs	r3, r1, #25
 8002e58:	2100      	movs	r1, #0
 8002e5a:	f1d2 0a00 	rsbs	sl, r2, #0
 8002e5e:	eb61 0b03 	sbc.w	fp, r1, r3
 8002e62:	4652      	mov	r2, sl
 8002e64:	465b      	mov	r3, fp
 8002e66:	4908      	ldr	r1, [pc, #32]	@ (8002e88 <lt8722_dac_to_voltage+0x84>)
 8002e68:	eb12 0801 	adds.w	r8, r2, r1
 8002e6c:	f143 0900 	adc.w	r9, r3, #0
 8002e70:	4642      	mov	r2, r8
 8002e72:	464b      	mov	r3, r9
}
 8002e74:	4610      	mov	r0, r2
 8002e76:	4619      	mov	r1, r3
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	9502f900 	.word	0x9502f900
 8002e88:	4a817c80 	.word	0x4a817c80

08002e8c <lt8722_transaction>:
 * @param dev - LT8722 device descriptor
 * @param packet - LT8722 packet.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_transaction(struct lt8722_packet *packet)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
	uint8_t buffer[8] = {0};
 8002e94:	2300      	movs	r3, #0
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	2300      	movs	r3, #0
 8002e9a:	613b      	str	r3, [r7, #16]
	buffer[0] = packet->command.byte;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	733b      	strb	r3, [r7, #12]
	buffer[1] = packet->reg.address << 1;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	791b      	ldrb	r3, [r3, #4]
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	737b      	strb	r3, [r7, #13]
	if (packet->command.byte == LT8722_DATA_WRITE_COMMAND)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2bf2      	cmp	r3, #242	@ 0xf2
 8002eb2:	d111      	bne.n	8002ed8 <lt8722_transaction+0x4c>
	{
		put_unaligned_be32(packet->data, &buffer[2]);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691a      	ldr	r2, [r3, #16]
 8002eb8:	f107 030c 	add.w	r3, r7, #12
 8002ebc:	3302      	adds	r3, #2
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	f000 fad5 	bl	8003470 <put_unaligned_be32>
		buffer[6] = Calculate_CRC8(buffer, 6);
 8002ec6:	f107 030c 	add.w	r3, r7, #12
 8002eca:	2106      	movs	r1, #6
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 fa94 	bl	80033fa <Calculate_CRC8>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	74bb      	strb	r3, [r7, #18]
 8002ed6:	e007      	b.n	8002ee8 <lt8722_transaction+0x5c>
	} else
		buffer[2] = Calculate_CRC8(buffer, 2);
 8002ed8:	f107 030c 	add.w	r3, r7, #12
 8002edc:	2102      	movs	r1, #2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 fa8b 	bl	80033fa <Calculate_CRC8>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	73bb      	strb	r3, [r7, #14]
	SPI_write_and_read_buffer(buffer, packet->command.size);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	785a      	ldrb	r2, [r3, #1]
 8002eec:	f107 030c 	add.w	r3, r7, #12
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff ff36 	bl	8002d64 <SPI_write_and_read_buffer>
	packet->status = (get_unaligned_be16(&buffer[0]) & GENMASK(10, 0));
 8002ef8:	f107 030c 	add.w	r3, r7, #12
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 faf5 	bl	80034ec <get_unaligned_be16>
 8002f02:	4603      	mov	r3, r0
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	f04f 33ff 	mov.w	r3, #4294967295
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	055b      	lsls	r3, r3, #21
 8002f10:	617b      	str	r3, [r7, #20]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	0d5b      	lsrs	r3, r3, #21
 8002f16:	617b      	str	r3, [r7, #20]
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	82da      	strh	r2, [r3, #22]
	if (packet->command.byte == LT8722_DATA_WRITE_COMMAND)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2bf2      	cmp	r3, #242	@ 0xf2
 8002f2a:	d106      	bne.n	8002f3a <lt8722_transaction+0xae>
	{
		packet->crc = buffer[2];
 8002f2c:	7bba      	ldrb	r2, [r7, #14]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	751a      	strb	r2, [r3, #20]
		packet->ack = buffer[7];
 8002f32:	7cfa      	ldrb	r2, [r7, #19]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	755a      	strb	r2, [r3, #21]
 8002f38:	e019      	b.n	8002f6e <lt8722_transaction+0xe2>
	} else if (packet->command.byte == LT8722_DATA_READ_COMMAND) {
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2bf4      	cmp	r3, #244	@ 0xf4
 8002f40:	d10f      	bne.n	8002f62 <lt8722_transaction+0xd6>
		packet->data = get_unaligned_be32(&buffer[2]);
 8002f42:	f107 030c 	add.w	r3, r7, #12
 8002f46:	3302      	adds	r3, #2
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 fab2 	bl	80034b2 <get_unaligned_be32>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	611a      	str	r2, [r3, #16]
		packet->crc = buffer[6];
 8002f54:	7cba      	ldrb	r2, [r7, #18]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	751a      	strb	r2, [r3, #20]
		packet->ack = buffer[7];
 8002f5a:	7cfa      	ldrb	r2, [r7, #19]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	755a      	strb	r2, [r3, #21]
 8002f60:	e005      	b.n	8002f6e <lt8722_transaction+0xe2>
	} else {
		packet->crc = buffer[2];
 8002f62:	7bba      	ldrb	r2, [r7, #14]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	751a      	strb	r2, [r3, #20]
		packet->ack = buffer[3];
 8002f68:	7bfa      	ldrb	r2, [r7, #15]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	755a      	strb	r2, [r3, #21]
	}
	if (packet->ack != LT8722_ACK_ACKNOWLEDGE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	7d5b      	ldrb	r3, [r3, #21]
 8002f72:	2ba5      	cmp	r3, #165	@ 0xa5
 8002f74:	d002      	beq.n	8002f7c <lt8722_transaction+0xf0>
		return -1;
 8002f76:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7a:	e000      	b.n	8002f7e <lt8722_transaction+0xf2>
	return 0;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <lt8722_reg_read>:
 * @param address - Register address.
 * @param data - Received data.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reg_read(uint8_t address, uint32_t *data)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b08a      	sub	sp, #40	@ 0x28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	6039      	str	r1, [r7, #0]
 8002f92:	71fb      	strb	r3, [r7, #7]
	int8_t ret = 0;
 8002f94:	2300      	movs	r3, #0
 8002f96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	struct lt8722_packet packet;
	struct lt8722_command command = {
 8002f9a:	4b14      	ldr	r3, [pc, #80]	@ (8002fec <lt8722_reg_read+0x64>)
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	813b      	strh	r3, [r7, #8]
		LT8722_DATA_READ_COMMAND,
		LT8722_DATA_READ_COMMAND_SIZE
	};
	packet.command = command;
 8002fa0:	893b      	ldrh	r3, [r7, #8]
 8002fa2:	81bb      	strh	r3, [r7, #12]
	packet.reg = lt8722_regs[address];
 8002fa4:	79fa      	ldrb	r2, [r7, #7]
 8002fa6:	4912      	ldr	r1, [pc, #72]	@ (8002ff0 <lt8722_reg_read+0x68>)
 8002fa8:	4613      	mov	r3, r2
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	4413      	add	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	18ca      	adds	r2, r1, r3
 8002fb2:	f107 0310 	add.w	r3, r7, #16
 8002fb6:	ca07      	ldmia	r2, {r0, r1, r2}
 8002fb8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	ret = lt8722_transaction(&packet);
 8002fbc:	f107 030c 	add.w	r3, r7, #12
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff ff63 	bl	8002e8c <lt8722_transaction>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (ret)
 8002fcc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d002      	beq.n	8002fda <lt8722_reg_read+0x52>
		return ret;
 8002fd4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002fd8:	e003      	b.n	8002fe2 <lt8722_reg_read+0x5a>
	*data = packet.data;
 8002fda:	69fa      	ldr	r2, [r7, #28]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	601a      	str	r2, [r3, #0]
	return 0;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3728      	adds	r7, #40	@ 0x28
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	08007f5c 	.word	0x08007f5c
 8002ff0:	200001a0 	.word	0x200001a0

08002ff4 <lt8722_reg_write>:
 * @param address - Register address.
 * @param data - Data to be written.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reg_write(uint8_t address, uint32_t data)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08a      	sub	sp, #40	@ 0x28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	6039      	str	r1, [r7, #0]
 8002ffe:	71fb      	strb	r3, [r7, #7]
	struct lt8722_packet packet;
	struct lt8722_command command = {
 8003000:	4b0e      	ldr	r3, [pc, #56]	@ (800303c <lt8722_reg_write+0x48>)
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	81bb      	strh	r3, [r7, #12]
		LT8722_DATA_WRITE_COMMAND,
		LT8722_DATA_WRITE_COMMAND_SIZE
	};
	packet.command = command;
 8003006:	89bb      	ldrh	r3, [r7, #12]
 8003008:	823b      	strh	r3, [r7, #16]
	packet.reg = lt8722_regs[address];
 800300a:	79fa      	ldrb	r2, [r7, #7]
 800300c:	490c      	ldr	r1, [pc, #48]	@ (8003040 <lt8722_reg_write+0x4c>)
 800300e:	4613      	mov	r3, r2
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	4413      	add	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	18ca      	adds	r2, r1, r3
 8003018:	f107 0314 	add.w	r3, r7, #20
 800301c:	ca07      	ldmia	r2, {r0, r1, r2}
 800301e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	packet.data = data;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	623b      	str	r3, [r7, #32]
	return lt8722_transaction(&packet);
 8003026:	f107 0310 	add.w	r3, r7, #16
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff ff2e 	bl	8002e8c <lt8722_transaction>
 8003030:	4603      	mov	r3, r0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3728      	adds	r7, #40	@ 0x28
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	08007f60 	.word	0x08007f60
 8003040:	200001a0 	.word	0x200001a0

08003044 <lt8722_reg_write_mask>:
 * @param mask - Mask to be applied.
 * @param data - Data to be written.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reg_write_mask(uint8_t address, uint32_t mask, uint32_t data)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
 8003050:	73fb      	strb	r3, [r7, #15]
	uint32_t reg_data;
	lt8722_reg_read(address, &reg_data);
 8003052:	f107 0214 	add.w	r2, r7, #20
 8003056:	7bfb      	ldrb	r3, [r7, #15]
 8003058:	4611      	mov	r1, r2
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff ff94 	bl	8002f88 <lt8722_reg_read>
	reg_data &= ~mask;
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	43da      	mvns	r2, r3
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	4013      	ands	r3, r2
 8003068:	617b      	str	r3, [r7, #20]
	reg_data |= field_prep(mask, data);
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	68b8      	ldr	r0, [r7, #8]
 800306e:	f000 fa6d 	bl	800354c <field_prep>
 8003072:	4602      	mov	r2, r0
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	4313      	orrs	r3, r2
 8003078:	617b      	str	r3, [r7, #20]
	return lt8722_reg_write(address, reg_data);
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	7bfb      	ldrb	r3, [r7, #15]
 800307e:	4611      	mov	r1, r2
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff ffb7 	bl	8002ff4 <lt8722_reg_write>
 8003086:	4603      	mov	r3, r0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <lt8722_set_enable_req>:
 * @brief Set ENABLE_REQ field in LT8722 device.
 * @param value - Enable if true, disabled otherwise
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_enable_req(bool value)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	71fb      	strb	r3, [r7, #7]
	return lt8722_reg_write_mask(LT8722_SPIS_COMMAND, LT8722_ENABLE_REQ_MASK, value);
 800309a:	79fb      	ldrb	r3, [r7, #7]
 800309c:	461a      	mov	r2, r3
 800309e:	2101      	movs	r1, #1
 80030a0:	2000      	movs	r0, #0
 80030a2:	f7ff ffcf 	bl	8003044 <lt8722_reg_write_mask>
 80030a6:	4603      	mov	r3, r0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <lt8722_set_swen_req>:
 * @brief Set switching enable of LT8722 device.
 * @param value - Enable if true, disabled otherwise
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_swen_req(bool value)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	71fb      	strb	r3, [r7, #7]
	return lt8722_reg_write_mask(LT8722_SPIS_COMMAND, LT8722_SWEN_REQ_MASK, value);
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	461a      	mov	r2, r3
 80030be:	2102      	movs	r1, #2
 80030c0:	2000      	movs	r0, #0
 80030c2:	f7ff ffbf 	bl	8003044 <lt8722_reg_write_mask>
 80030c6:	4603      	mov	r3, r0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <lt8722_reset>:
/**
 * @brief Shutdown the LT8722 device.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reset(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
	return lt8722_reg_write_mask(LT8722_SPIS_COMMAND, LT8722_SPI_RST_MASK, LT8722_SPI_RST_RESET);
 80030d4:	2201      	movs	r2, #1
 80030d6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80030da:	2000      	movs	r0, #0
 80030dc:	f7ff ffb2 	bl	8003044 <lt8722_reg_write_mask>
 80030e0:	4603      	mov	r3, r0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <lt8722_clear_faults>:
/**
 * @brief Clear LT8722 device faults.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_clear_faults(void)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b082      	sub	sp, #8
 80030ea:	af00      	add	r7, sp, #0
	return lt8722_reg_write_mask(LT8722_SPIS_STATUS, LT8722_FAULTS_MASK, 0);
 80030ec:	f04f 33ff 	mov.w	r3, #4294967295
 80030f0:	607b      	str	r3, [r7, #4]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	069b      	lsls	r3, r3, #26
 80030f6:	607b      	str	r3, [r7, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	0d5b      	lsrs	r3, r3, #21
 80030fc:	607b      	str	r3, [r7, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	4619      	mov	r1, r3
 8003104:	2001      	movs	r0, #1
 8003106:	f7ff ff9d 	bl	8003044 <lt8722_reg_write_mask>
 800310a:	4603      	mov	r3, r0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <lt8722_get_status>:
 * @brief Get LT8722 device status.
 * @param status - Status value to be returned.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_get_status(uint16_t *status)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b08a      	sub	sp, #40	@ 0x28
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
	int8_t ret;
	struct lt8722_packet packet;
	struct lt8722_command command = {
 800311c:	4b11      	ldr	r3, [pc, #68]	@ (8003164 <lt8722_get_status+0x50>)
 800311e:	881b      	ldrh	r3, [r3, #0]
 8003120:	813b      	strh	r3, [r7, #8]
		LT8722_STATUS_ACQUISITION_COMMAND,
		LT8722_STATUS_ACQUISITION_COMMAND_SIZE
	};
	packet.command = command;
 8003122:	893b      	ldrh	r3, [r7, #8]
 8003124:	81bb      	strh	r3, [r7, #12]
	packet.reg = lt8722_regs[LT8722_SPIS_STATUS];
 8003126:	4a10      	ldr	r2, [pc, #64]	@ (8003168 <lt8722_get_status+0x54>)
 8003128:	f107 0310 	add.w	r3, r7, #16
 800312c:	320c      	adds	r2, #12
 800312e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003130:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	ret = lt8722_transaction(&packet);
 8003134:	f107 030c 	add.w	r3, r7, #12
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff fea7 	bl	8002e8c <lt8722_transaction>
 800313e:	4603      	mov	r3, r0
 8003140:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (ret)
 8003144:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003148:	2b00      	cmp	r3, #0
 800314a:	d002      	beq.n	8003152 <lt8722_get_status+0x3e>
		return ret;
 800314c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003150:	e003      	b.n	800315a <lt8722_get_status+0x46>
	*status = packet.status;
 8003152:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	801a      	strh	r2, [r3, #0]
	return 0;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3728      	adds	r7, #40	@ 0x28
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	08007f64 	.word	0x08007f64
 8003168:	200001a0 	.word	0x200001a0

0800316c <lt8722_set_dac>:
 * @brief Set DAC code of LT8722 device.
 * @param value - DAC value
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_dac(uint32_t value)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
	return lt8722_reg_write_mask(LT8722_SPIS_DAC, LT8722_SPIS_DAC_MASK, value);
 8003174:	f04f 33ff 	mov.w	r3, #4294967295
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	4619      	mov	r1, r3
 8003180:	2004      	movs	r0, #4
 8003182:	f7ff ff5f 	bl	8003044 <lt8722_reg_write_mask>
 8003186:	4603      	mov	r3, r0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <lt8722_set_spis_ov_clamp>:
 * @brief Set positive output voltage limit of LT8722 device.
 * @param value - Positive output voltage limit value
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_spis_ov_clamp(uint8_t value)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	71fb      	strb	r3, [r7, #7]
	return lt8722_reg_write_mask(LT8722_SPIS_OV_CLAMP, LT8722_SPIS_OV_CLAMP_MASK, value);
 800319a:	f04f 33ff 	mov.w	r3, #4294967295
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	071b      	lsls	r3, r3, #28
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	0f1b      	lsrs	r3, r3, #28
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	79fa      	ldrb	r2, [r7, #7]
 80031b0:	4619      	mov	r1, r3
 80031b2:	2005      	movs	r0, #5
 80031b4:	f7ff ff46 	bl	8003044 <lt8722_reg_write_mask>
 80031b8:	4603      	mov	r3, r0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <lt8722_set_spis_uv_clamp>:
 * @brief Set negative output voltage limit of LT8722 device.
 * @param value - Negative output voltage limit value
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_spis_uv_clamp(uint8_t value)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	4603      	mov	r3, r0
 80031ca:	71fb      	strb	r3, [r7, #7]
	return lt8722_reg_write_mask(LT8722_SPIS_UV_CLAMP, LT8722_SPIS_UV_CLAMP_MASK, value);
 80031cc:	f04f 33ff 	mov.w	r3, #4294967295
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	071b      	lsls	r3, r3, #28
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	0f1b      	lsrs	r3, r3, #28
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	79fa      	ldrb	r2, [r7, #7]
 80031e2:	4619      	mov	r1, r3
 80031e4:	2006      	movs	r0, #6
 80031e6:	f7ff ff2d 	bl	8003044 <lt8722_reg_write_mask>
 80031ea:	4603      	mov	r3, r0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <lt8722_init>:
 * @param init_param - Initialization parameter containing information about the
 * 		LT8722 device to be initialized.
 * @return 0 in case of succes, negative error code otherwise
*/
int8_t lt8722_init(void)
{
 80031f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031f8:	b08f      	sub	sp, #60	@ 0x3c
 80031fa:	af00      	add	r7, sp, #0
	int8_t ret = 0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	int32_t dac;
	int64_t voltage;
	int64_t start_voltage;
	int64_t end_voltage;

	LL_GPIO_ResetOutputPin(TEC_1_EN_GPIO_Port, TEC_1_EN_Pin);
 8003202:	2120      	movs	r1, #32
 8003204:	4852      	ldr	r0, [pc, #328]	@ (8003350 <lt8722_init+0x15c>)
 8003206:	f7ff fd6e 	bl	8002ce6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(TEC_1_SWEN_GPIO_Port, TEC_1_SWEN_Pin);
 800320a:	2104      	movs	r1, #4
 800320c:	4850      	ldr	r0, [pc, #320]	@ (8003350 <lt8722_init+0x15c>)
 800320e:	f7ff fd6a 	bl	8002ce6 <LL_GPIO_ResetOutputPin>
	/*
	 * Reset LT8722
	 */
	lt8722_reset();
 8003212:	f7ff ff5d 	bl	80030d0 <lt8722_reset>
	 * Start-up sequence
	 * 1. Apply proper VIN and VDDIO voltages
	 *
	 * 2. Enable VCC LDO and other LT8722 circuitry
	 */
	ret = lt8722_clear_faults();
 8003216:	f7ff ff66 	bl	80030e6 <lt8722_clear_faults>
 800321a:	4603      	mov	r3, r0
 800321c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	LL_GPIO_SetOutputPin(TEC_1_EN_GPIO_Port, TEC_1_EN_Pin);
 8003220:	2120      	movs	r1, #32
 8003222:	484b      	ldr	r0, [pc, #300]	@ (8003350 <lt8722_init+0x15c>)
 8003224:	f7ff fd51 	bl	8002cca <LL_GPIO_SetOutputPin>
	ret = lt8722_set_enable_req(LT8722_ENABLE_REQ_ENABLED);
 8003228:	2001      	movs	r0, #1
 800322a:	f7ff ff31 	bl	8003090 <lt8722_set_enable_req>
 800322e:	4603      	mov	r3, r0
 8003230:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	ret = lt8722_reg_write(LT8722_SPIS_COMMAND, 0x00003A01);
 8003234:	f643 2101 	movw	r1, #14849	@ 0x3a01
 8003238:	2000      	movs	r0, #0
 800323a:	f7ff fedb 	bl	8002ff4 <lt8722_reg_write>
 800323e:	4603      	mov	r3, r0
 8003240:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	/*
	 * 3. Configure output voltage control DAC to 0xFF000000
	 */
	ret = lt8722_set_dac(0xFF000000);
 8003244:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8003248:	f7ff ff90 	bl	800316c <lt8722_set_dac>
 800324c:	4603      	mov	r3, r0
 800324e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	/*
	 * 4. Write all SPIS_STATUS registers to 0
	 */
	ret = lt8722_reg_write(LT8722_SPIS_STATUS, 0);
 8003252:	2100      	movs	r1, #0
 8003254:	2001      	movs	r0, #1
 8003256:	f7ff fecd 	bl	8002ff4 <lt8722_reg_write>
 800325a:	4603      	mov	r3, r0
 800325c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	LL_mDelay(1);
 8003260:	2001      	movs	r0, #1
 8003262:	f003 fd41 	bl	8006ce8 <LL_mDelay>
	ret = lt8722_reg_write(LT8722_SPIS_COMMAND, 0x00003A01);
 8003266:	f643 2101 	movw	r1, #14849	@ 0x3a01
 800326a:	2000      	movs	r0, #0
 800326c:	f7ff fec2 	bl	8002ff4 <lt8722_reg_write>
 8003270:	4603      	mov	r3, r0
 8003272:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	/*
	 * 5. Ramp the output voltage control DAC from 0xFF000000 to 0x00000000
	 */
	start_voltage = lt8722_dac_to_voltage(0xFF000000);
 8003276:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800327a:	f7ff fdc3 	bl	8002e04 <lt8722_dac_to_voltage>
 800327e:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
	end_voltage = lt8722_dac_to_voltage(0x00000000);
 8003282:	2000      	movs	r0, #0
 8003284:	f7ff fdbe 	bl	8002e04 <lt8722_dac_to_voltage>
 8003288:	e9c7 0108 	strd	r0, r1, [r7, #32]
	for (uint8_t i = 0;  i < 5; i++)
 800328c:	2300      	movs	r3, #0
 800328e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8003292:	e045      	b.n	8003320 <lt8722_init+0x12c>
	{
		voltage = (start_voltage + (end_voltage - start_voltage) * i / 4);
 8003294:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003298:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800329c:	1a84      	subs	r4, r0, r2
 800329e:	eb61 0503 	sbc.w	r5, r1, r3
 80032a2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80032a6:	2200      	movs	r2, #0
 80032a8:	4698      	mov	r8, r3
 80032aa:	4691      	mov	r9, r2
 80032ac:	fb08 f205 	mul.w	r2, r8, r5
 80032b0:	fb04 f309 	mul.w	r3, r4, r9
 80032b4:	4413      	add	r3, r2
 80032b6:	fba4 ab08 	umull	sl, fp, r4, r8
 80032ba:	445b      	add	r3, fp
 80032bc:	469b      	mov	fp, r3
 80032be:	4652      	mov	r2, sl
 80032c0:	465b      	mov	r3, fp
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	da06      	bge.n	80032d4 <lt8722_init+0xe0>
 80032c6:	1cd1      	adds	r1, r2, #3
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	f143 0300 	adc.w	r3, r3, #0
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032d4:	f04f 0000 	mov.w	r0, #0
 80032d8:	f04f 0100 	mov.w	r1, #0
 80032dc:	0890      	lsrs	r0, r2, #2
 80032de:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 80032e2:	1099      	asrs	r1, r3, #2
 80032e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032e8:	1816      	adds	r6, r2, r0
 80032ea:	603e      	str	r6, [r7, #0]
 80032ec:	414b      	adcs	r3, r1
 80032ee:	607b      	str	r3, [r7, #4]
 80032f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
		dac = lt8722_voltage_to_dac(voltage);
 80032f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032fc:	f7ff fd5c 	bl	8002db8 <lt8722_voltage_to_dac>
 8003300:	6178      	str	r0, [r7, #20]
		ret = lt8722_set_dac(dac);
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff ff31 	bl	800316c <lt8722_set_dac>
 800330a:	4603      	mov	r3, r0
 800330c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
		LL_mDelay(1);
 8003310:	2001      	movs	r0, #1
 8003312:	f003 fce9 	bl	8006ce8 <LL_mDelay>
	for (uint8_t i = 0;  i < 5; i++)
 8003316:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800331a:	3301      	adds	r3, #1
 800331c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8003320:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003324:	2b04      	cmp	r3, #4
 8003326:	d9b5      	bls.n	8003294 <lt8722_init+0xa0>
	}
	/*
	 * 6. Enable the PWM switching behavior
	 */
	LL_GPIO_SetOutputPin(TEC_1_SWEN_GPIO_Port, TEC_1_SWEN_Pin);
 8003328:	2104      	movs	r1, #4
 800332a:	4809      	ldr	r0, [pc, #36]	@ (8003350 <lt8722_init+0x15c>)
 800332c:	f7ff fccd 	bl	8002cca <LL_GPIO_SetOutputPin>
	ret = lt8722_set_swen_req(LT8722_SWEN_REQ_ENABLED);
 8003330:	2001      	movs	r0, #1
 8003332:	f7ff febd 	bl	80030b0 <lt8722_set_swen_req>
 8003336:	4603      	mov	r3, r0
 8003338:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	delay_us(180);
 800333c:	20b4      	movs	r0, #180	@ 0xb4
 800333e:	f7fd f931 	bl	80005a4 <delay_us>
	/*
	 * 7. Set the desired output voltage
	 */
	return ret;
 8003342:	f997 3036 	ldrsb.w	r3, [r7, #54]	@ 0x36
}
 8003346:	4618      	mov	r0, r3
 8003348:	373c      	adds	r7, #60	@ 0x3c
 800334a:	46bd      	mov	sp, r7
 800334c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003350:	40021000 	.word	0x40021000

08003354 <lt8722_set_output_voltage>:
 * @brief Set output volatge of LT8722 device.
 * @param value - Output voltage value in nanovolts.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_output_voltage(int64_t value)
{
 8003354:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003358:	b088      	sub	sp, #32
 800335a:	af00      	add	r7, sp, #0
 800335c:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t ret = 0;
 8003360:	2100      	movs	r1, #0
 8003362:	77f9      	strb	r1, [r7, #31]
	int64_t vdac = 0;
 8003364:	f04f 0000 	mov.w	r0, #0
 8003368:	f04f 0100 	mov.w	r1, #0
 800336c:	e9c7 0104 	strd	r0, r1, [r7, #16]
	int32_t dac = 0x0;
 8003370:	2100      	movs	r1, #0
 8003372:	60f9      	str	r1, [r7, #12]

	vdac = LT8722_DAC_OFFSET - value / 16;
 8003374:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003378:	2900      	cmp	r1, #0
 800337a:	da05      	bge.n	8003388 <lt8722_set_output_voltage+0x34>
 800337c:	f110 020f 	adds.w	r2, r0, #15
 8003380:	f141 0300 	adc.w	r3, r1, #0
 8003384:	4610      	mov	r0, r2
 8003386:	4619      	mov	r1, r3
 8003388:	f04f 0200 	mov.w	r2, #0
 800338c:	f04f 0300 	mov.w	r3, #0
 8003390:	0902      	lsrs	r2, r0, #4
 8003392:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8003396:	110b      	asrs	r3, r1, #4
 8003398:	2100      	movs	r1, #0
 800339a:	f1d2 0800 	rsbs	r8, r2, #0
 800339e:	eb61 0903 	sbc.w	r9, r1, r3
 80033a2:	4642      	mov	r2, r8
 80033a4:	464b      	mov	r3, r9
 80033a6:	490c      	ldr	r1, [pc, #48]	@ (80033d8 <lt8722_set_output_voltage+0x84>)
 80033a8:	1854      	adds	r4, r2, r1
 80033aa:	f143 0500 	adc.w	r5, r3, #0
 80033ae:	e9c7 4504 	strd	r4, r5, [r7, #16]
	dac = lt8722_voltage_to_dac(vdac);
 80033b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033b6:	f7ff fcff 	bl	8002db8 <lt8722_voltage_to_dac>
 80033ba:	60f8      	str	r0, [r7, #12]
	ret = lt8722_set_dac(dac);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff fed4 	bl	800316c <lt8722_set_dac>
 80033c4:	4603      	mov	r3, r0
 80033c6:	77fb      	strb	r3, [r7, #31]
	return ret;
 80033c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3720      	adds	r7, #32
 80033d0:	46bd      	mov	sp, r7
 80033d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033d6:	bf00      	nop
 80033d8:	4a817c80 	.word	0x4a817c80

080033dc <lt8722_set_output_voltage_channel>:
 * @param channel - Channel of lt8722.
 * @param value - Output voltage value in nanovolts.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_output_voltage_channel(uint8_t channel, int64_t value)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4601      	mov	r1, r0
 80033e4:	e9c7 2300 	strd	r2, r3, [r7]
 80033e8:	460b      	mov	r3, r1
 80033ea:	73fb      	strb	r3, [r7, #15]

}
 80033ec:	bf00      	nop
 80033ee:	4618      	mov	r0, r3
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <Calculate_CRC8>:

/* Private support function definition ------------------------------------*/
uint8_t Calculate_CRC8(uint8_t *data, uint8_t length)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b085      	sub	sp, #20
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
 8003402:	460b      	mov	r3, r1
 8003404:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0x00;
 8003406:	2300      	movs	r3, #0
 8003408:	73fb      	strb	r3, [r7, #15]
    uint8_t poly = 0x07;
 800340a:	2307      	movs	r3, #7
 800340c:	733b      	strb	r3, [r7, #12]
    for (uint8_t i = 0; i < length; i++)
 800340e:	2300      	movs	r3, #0
 8003410:	73bb      	strb	r3, [r7, #14]
 8003412:	e022      	b.n	800345a <Calculate_CRC8+0x60>
    {
        crc ^= data[i];
 8003414:	7bbb      	ldrb	r3, [r7, #14]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	4413      	add	r3, r2
 800341a:	781a      	ldrb	r2, [r3, #0]
 800341c:	7bfb      	ldrb	r3, [r7, #15]
 800341e:	4053      	eors	r3, r2
 8003420:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 0; bit < 8; bit++)
 8003422:	2300      	movs	r3, #0
 8003424:	737b      	strb	r3, [r7, #13]
 8003426:	e012      	b.n	800344e <Calculate_CRC8+0x54>
        {
            if (crc & 0x80)
 8003428:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800342c:	2b00      	cmp	r3, #0
 800342e:	da08      	bge.n	8003442 <Calculate_CRC8+0x48>
                crc = (crc << 1) ^ poly;
 8003430:	7bfb      	ldrb	r3, [r7, #15]
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	b25a      	sxtb	r2, r3
 8003436:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800343a:	4053      	eors	r3, r2
 800343c:	b25b      	sxtb	r3, r3
 800343e:	73fb      	strb	r3, [r7, #15]
 8003440:	e002      	b.n	8003448 <Calculate_CRC8+0x4e>
            else
                crc <<= 1;
 8003442:	7bfb      	ldrb	r3, [r7, #15]
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 0; bit < 8; bit++)
 8003448:	7b7b      	ldrb	r3, [r7, #13]
 800344a:	3301      	adds	r3, #1
 800344c:	737b      	strb	r3, [r7, #13]
 800344e:	7b7b      	ldrb	r3, [r7, #13]
 8003450:	2b07      	cmp	r3, #7
 8003452:	d9e9      	bls.n	8003428 <Calculate_CRC8+0x2e>
    for (uint8_t i = 0; i < length; i++)
 8003454:	7bbb      	ldrb	r3, [r7, #14]
 8003456:	3301      	adds	r3, #1
 8003458:	73bb      	strb	r3, [r7, #14]
 800345a:	7bba      	ldrb	r2, [r7, #14]
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	429a      	cmp	r2, r3
 8003460:	d3d8      	bcc.n	8003414 <Calculate_CRC8+0x1a>
        }
    }
    return crc;
 8003462:	7bfb      	ldrb	r3, [r7, #15]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <put_unaligned_be32>:

void put_unaligned_be32(uint32_t val, uint8_t *buf)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
	buf[3] = val & 0xFF;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	3303      	adds	r3, #3
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	701a      	strb	r2, [r3, #0]
	buf[2] = (val >> 8) & 0xFF;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	0a1a      	lsrs	r2, r3, #8
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	3302      	adds	r3, #2
 800348c:	b2d2      	uxtb	r2, r2
 800348e:	701a      	strb	r2, [r3, #0]
	buf[1] = (val >> 16) & 0xFF;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	0c1a      	lsrs	r2, r3, #16
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	3301      	adds	r3, #1
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	701a      	strb	r2, [r3, #0]
	buf[0] = val >> 24;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	0e1b      	lsrs	r3, r3, #24
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	701a      	strb	r2, [r3, #0]
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <get_unaligned_be32>:
{
	buf[1] = val & 0xFF;
	buf[0] = val >> 8;
}
uint32_t get_unaligned_be32(uint8_t *buf)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
	return buf[3] | ((uint16_t)buf[2] << 8) | ((uint32_t)buf[1] << 16) | ((uint32_t)buf[0] << 24);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3303      	adds	r3, #3
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	461a      	mov	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3302      	adds	r3, #2
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	021b      	lsls	r3, r3, #8
 80034ca:	4313      	orrs	r3, r2
 80034cc:	461a      	mov	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3301      	adds	r3, #1
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	041b      	lsls	r3, r3, #16
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	061b      	lsls	r3, r3, #24
 80034de:	4313      	orrs	r3, r2
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <get_unaligned_be16>:
uint32_t get_unaligned_be16(uint8_t *buf)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
	return buf[1] | ((uint16_t)buf[0] << 8);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3301      	adds	r3, #1
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	021b      	lsls	r3, r3, #8
 8003502:	4313      	orrs	r3, r2
}
 8003504:	4618      	mov	r0, r3
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <find_first_set_bit>:
uint32_t find_first_set_bit(uint32_t word)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
	uint32_t first_set_bit = 0;
 8003518:	2300      	movs	r3, #0
 800351a:	60fb      	str	r3, [r7, #12]
	while (word) {
 800351c:	e00c      	b.n	8003538 <find_first_set_bit+0x28>
		if (word & 0x1)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <find_first_set_bit+0x1c>
			return first_set_bit;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	e009      	b.n	8003540 <find_first_set_bit+0x30>
		word >>= 1;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	085b      	lsrs	r3, r3, #1
 8003530:	607b      	str	r3, [r7, #4]
		first_set_bit ++;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	3301      	adds	r3, #1
 8003536:	60fb      	str	r3, [r7, #12]
	while (word) {
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1ef      	bne.n	800351e <find_first_set_bit+0xe>
	}
	return 32;
 800353e:	2320      	movs	r3, #32
}
 8003540:	4618      	mov	r0, r3
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <field_prep>:
uint32_t field_prep(uint32_t mask, uint32_t val)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
	return (val << find_first_set_bit(mask)) & mask;
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7ff ffda 	bl	8003510 <find_first_set_bit>
 800355c:	4602      	mov	r2, r0
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	fa03 f202 	lsl.w	r2, r3, r2
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4013      	ands	r3, r2
}
 8003568:	4618      	mov	r0, r3
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f043 0201 	orr.w	r2, r3, #1
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	609a      	str	r2, [r3, #8]
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	bf0c      	ite	eq
 80035a4:	2301      	moveq	r3, #1
 80035a6:	2300      	movne	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	609a      	str	r2, [r3, #8]
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
	...

080035d8 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80035e2:	4a0c      	ldr	r2, [pc, #48]	@ (8003614 <LL_DMA_EnableStream+0x3c>)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	4413      	add	r3, r2
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4413      	add	r3, r2
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4908      	ldr	r1, [pc, #32]	@ (8003614 <LL_DMA_EnableStream+0x3c>)
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	440a      	add	r2, r1
 80035f8:	7812      	ldrb	r2, [r2, #0]
 80035fa:	4611      	mov	r1, r2
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	440a      	add	r2, r1
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	6013      	str	r3, [r2, #0]
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	08007f68 	.word	0x08007f68

08003618 <NTC_DMA_ADC_init>:
  3143, 3307, 3521, 3819, 4292, 5279, 6266
};


void NTC_DMA_ADC_init(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
//
//    // Cấu hình DMA ở chế độ vòng lặp (Circular Mode)
//    LL_DMA_SetMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
//
//    // Bật DMA stream
    LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_0);
 800361c:	2100      	movs	r1, #0
 800361e:	4809      	ldr	r0, [pc, #36]	@ (8003644 <NTC_DMA_ADC_init+0x2c>)
 8003620:	f7ff ffda 	bl	80035d8 <LL_DMA_EnableStream>
//    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_15);
//    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_8);
//    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_9);

    // Bật ADC
    LL_ADC_Enable(ADC1);
 8003624:	4808      	ldr	r0, [pc, #32]	@ (8003648 <NTC_DMA_ADC_init+0x30>)
 8003626:	f7ff ffa3 	bl	8003570 <LL_ADC_Enable>
    while (!LL_ADC_IsEnabled(ADC1));
 800362a:	bf00      	nop
 800362c:	4806      	ldr	r0, [pc, #24]	@ (8003648 <NTC_DMA_ADC_init+0x30>)
 800362e:	f7ff ffaf 	bl	8003590 <LL_ADC_IsEnabled>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0f9      	beq.n	800362c <NTC_DMA_ADC_init+0x14>

    // Bắt đầu chuyển đổi ADC
    LL_ADC_REG_StartConversionSWStart(ADC1);
 8003638:	4803      	ldr	r0, [pc, #12]	@ (8003648 <NTC_DMA_ADC_init+0x30>)
 800363a:	f7ff ffbc 	bl	80035b6 <LL_ADC_REG_StartConversionSWStart>
}
 800363e:	bf00      	nop
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40026400 	.word	0x40026400
 8003648:	40012000 	.word	0x40012000

0800364c <LL_GPIO_SetOutputPin>:
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	619a      	str	r2, [r3, #24]
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <LL_GPIO_ResetOutputPin>:
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	041a      	lsls	r2, r3, #16
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	619a      	str	r2, [r3, #24]
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
	...

08003688 <status_led_init>:
		480									// taskTick
	},
};

void status_led_init(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
    s_led_display_status.led_green = 0;
 800368c:	4a0a      	ldr	r2, [pc, #40]	@ (80036b8 <status_led_init+0x30>)
 800368e:	7813      	ldrb	r3, [r2, #0]
 8003690:	f36f 0300 	bfc	r3, #0, #1
 8003694:	7013      	strb	r3, [r2, #0]
    s_led_display_status.led_blue = 0;
 8003696:	4a08      	ldr	r2, [pc, #32]	@ (80036b8 <status_led_init+0x30>)
 8003698:	7813      	ldrb	r3, [r2, #0]
 800369a:	f36f 0341 	bfc	r3, #1, #1
 800369e:	7013      	strb	r3, [r2, #0]
    s_led_display_status.state = EXP_POWERUP;
 80036a0:	4a05      	ldr	r2, [pc, #20]	@ (80036b8 <status_led_init+0x30>)
 80036a2:	7813      	ldrb	r3, [r2, #0]
 80036a4:	f36f 0387 	bfc	r3, #2, #6
 80036a8:	7013      	strb	r3, [r2, #0]
	status_led_led_green_off();
 80036aa:	f000 f8e1 	bl	8003870 <status_led_led_green_off>
	status_led_led_blue_off();
 80036ae:	f000 f8f7 	bl	80038a0 <status_led_led_blue_off>
}
 80036b2:	bf00      	nop
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	20000578 	.word	0x20000578

080036bc <status_led_update>:
#include "uart.h"
#include "ntc.h"


void	status_led_update(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
//	NTC_get_temperature(NTC_Temperature);
//	UART_Printf(&EXP_UART, "%d %d %d %d ", NTC_ADC_value[0], NTC_ADC_value[1], NTC_ADC_value[2], NTC_ADC_value[3]);
//	UART_Printf(&EXP_UART, "%d %d %d %d \n", NTC_Temperature[0], NTC_Temperature[1], NTC_Temperature[2], NTC_Temperature[3]);
	switch (s_led_display_status.state) {
 80036c0:	4b0c      	ldr	r3, [pc, #48]	@ (80036f4 <status_led_update+0x38>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	f3c3 0385 	ubfx	r3, r3, #2, #6
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d00c      	beq.n	80036e8 <status_led_update+0x2c>
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	dc0d      	bgt.n	80036ee <status_led_update+0x32>
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d002      	beq.n	80036dc <status_led_update+0x20>
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d003      	beq.n	80036e2 <status_led_update+0x26>
		break;
	case EXP_ERROR:
		status_led_error();
		break;
	default:
		break;
 80036da:	e008      	b.n	80036ee <status_led_update+0x32>
		status_led_powerup();
 80036dc:	f000 f80c 	bl	80036f8 <status_led_powerup>
		break;
 80036e0:	e006      	b.n	80036f0 <status_led_update+0x34>
		status_led_normal();
 80036e2:	f000 f851 	bl	8003788 <status_led_normal>
		break;
 80036e6:	e003      	b.n	80036f0 <status_led_update+0x34>
		status_led_error();
 80036e8:	f000 f870 	bl	80037cc <status_led_error>
		break;
 80036ec:	e000      	b.n	80036f0 <status_led_update+0x34>
		break;
 80036ee:	bf00      	nop
	}
}
 80036f0:	bf00      	nop
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	20000578 	.word	0x20000578

080036f8 <status_led_powerup>:

static void status_led_powerup(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
	if (s_led_display_status.led_green && s_led_display_status.led_blue) {
 80036fc:	4b21      	ldr	r3, [pc, #132]	@ (8003784 <status_led_powerup+0x8c>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d020      	beq.n	800374c <status_led_powerup+0x54>
 800370a:	4b1e      	ldr	r3, [pc, #120]	@ (8003784 <status_led_powerup+0x8c>)
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d019      	beq.n	800374c <status_led_powerup+0x54>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 8003718:	2000      	movs	r0, #0
 800371a:	f003 fb5b 	bl	8006dd4 <SCH_TIM_HasCompleted>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d02d      	beq.n	8003780 <status_led_powerup+0x88>
			s_led_display_status.led_green = 0;
 8003724:	4a17      	ldr	r2, [pc, #92]	@ (8003784 <status_led_powerup+0x8c>)
 8003726:	7813      	ldrb	r3, [r2, #0]
 8003728:	f36f 0300 	bfc	r3, #0, #1
 800372c:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 0;
 800372e:	4a15      	ldr	r2, [pc, #84]	@ (8003784 <status_led_powerup+0x8c>)
 8003730:	7813      	ldrb	r3, [r2, #0]
 8003732:	f36f 0341 	bfc	r3, #1, #1
 8003736:	7013      	strb	r3, [r2, #0]
			status_led_led_green_off();
 8003738:	f000 f89a 	bl	8003870 <status_led_led_green_off>
			status_led_led_blue_off();
 800373c:	f000 f8b0 	bl	80038a0 <status_led_led_blue_off>
			SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD);
 8003740:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003744:	2000      	movs	r0, #0
 8003746:	f003 fb2f 	bl	8006da8 <SCH_TIM_Start>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 800374a:	e019      	b.n	8003780 <status_led_powerup+0x88>
		}
	} else {
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 800374c:	2000      	movs	r0, #0
 800374e:	f003 fb41 	bl	8006dd4 <SCH_TIM_HasCompleted>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d013      	beq.n	8003780 <status_led_powerup+0x88>
			s_led_display_status.led_green = 1;
 8003758:	4a0a      	ldr	r2, [pc, #40]	@ (8003784 <status_led_powerup+0x8c>)
 800375a:	7813      	ldrb	r3, [r2, #0]
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 1;
 8003762:	4a08      	ldr	r2, [pc, #32]	@ (8003784 <status_led_powerup+0x8c>)
 8003764:	7813      	ldrb	r3, [r2, #0]
 8003766:	f043 0302 	orr.w	r3, r3, #2
 800376a:	7013      	strb	r3, [r2, #0]
			status_led_led_green_on();
 800376c:	f000 f874 	bl	8003858 <status_led_led_green_on>
			status_led_led_blue_on();
 8003770:	f000 f88a 	bl	8003888 <status_led_led_blue_on>
			SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD);
 8003774:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003778:	2000      	movs	r0, #0
 800377a:	f003 fb15 	bl	8006da8 <SCH_TIM_Start>
		}
	}
}
 800377e:	e7ff      	b.n	8003780 <status_led_powerup+0x88>
 8003780:	bf00      	nop
 8003782:	bd80      	pop	{r7, pc}
 8003784:	20000578 	.word	0x20000578

08003788 <status_led_normal>:

static void status_led_normal(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
	// viết tạm
	LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 800378c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003790:	480d      	ldr	r0, [pc, #52]	@ (80037c8 <status_led_normal+0x40>)
 8003792:	f7ff ff69 	bl	8003668 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8003796:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800379a:	480b      	ldr	r0, [pc, #44]	@ (80037c8 <status_led_normal+0x40>)
 800379c:	f7ff ff56 	bl	800364c <LL_GPIO_SetOutputPin>
	LL_mDelay(500);
 80037a0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80037a4:	f003 faa0 	bl	8006ce8 <LL_mDelay>
	LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 80037a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80037ac:	4806      	ldr	r0, [pc, #24]	@ (80037c8 <status_led_normal+0x40>)
 80037ae:	f7ff ff5b 	bl	8003668 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 80037b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80037b6:	4804      	ldr	r0, [pc, #16]	@ (80037c8 <status_led_normal+0x40>)
 80037b8:	f7ff ff48 	bl	800364c <LL_GPIO_SetOutputPin>
	LL_mDelay(500);
 80037bc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80037c0:	f003 fa92 	bl	8006ce8 <LL_mDelay>
}
 80037c4:	bf00      	nop
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40020c00 	.word	0x40020c00

080037cc <status_led_error>:

static void status_led_error(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
	if (s_led_display_status.led_green && s_led_display_status.led_blue) {
 80037d0:	4b20      	ldr	r3, [pc, #128]	@ (8003854 <status_led_error+0x88>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d01f      	beq.n	800381e <status_led_error+0x52>
 80037de:	4b1d      	ldr	r3, [pc, #116]	@ (8003854 <status_led_error+0x88>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d018      	beq.n	800381e <status_led_error+0x52>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 80037ec:	2000      	movs	r0, #0
 80037ee:	f003 faf1 	bl	8006dd4 <SCH_TIM_HasCompleted>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d02b      	beq.n	8003850 <status_led_error+0x84>
			s_led_display_status.led_green = 0;
 80037f8:	4a16      	ldr	r2, [pc, #88]	@ (8003854 <status_led_error+0x88>)
 80037fa:	7813      	ldrb	r3, [r2, #0]
 80037fc:	f36f 0300 	bfc	r3, #0, #1
 8003800:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 0;
 8003802:	4a14      	ldr	r2, [pc, #80]	@ (8003854 <status_led_error+0x88>)
 8003804:	7813      	ldrb	r3, [r2, #0]
 8003806:	f36f 0341 	bfc	r3, #1, #1
 800380a:	7013      	strb	r3, [r2, #0]
			status_led_led_green_off();
 800380c:	f000 f830 	bl	8003870 <status_led_led_green_off>
			status_led_led_blue_off();
 8003810:	f000 f846 	bl	80038a0 <status_led_led_blue_off>
			SCH_TIM_Start(SCH_TIM_LED, ERROR_PERIOD);
 8003814:	2132      	movs	r1, #50	@ 0x32
 8003816:	2000      	movs	r0, #0
 8003818:	f003 fac6 	bl	8006da8 <SCH_TIM_Start>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 800381c:	e018      	b.n	8003850 <status_led_error+0x84>
		}
	} else {
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 800381e:	2000      	movs	r0, #0
 8003820:	f003 fad8 	bl	8006dd4 <SCH_TIM_HasCompleted>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d012      	beq.n	8003850 <status_led_error+0x84>
			s_led_display_status.led_green = 1;
 800382a:	4a0a      	ldr	r2, [pc, #40]	@ (8003854 <status_led_error+0x88>)
 800382c:	7813      	ldrb	r3, [r2, #0]
 800382e:	f043 0301 	orr.w	r3, r3, #1
 8003832:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 1;
 8003834:	4a07      	ldr	r2, [pc, #28]	@ (8003854 <status_led_error+0x88>)
 8003836:	7813      	ldrb	r3, [r2, #0]
 8003838:	f043 0302 	orr.w	r3, r3, #2
 800383c:	7013      	strb	r3, [r2, #0]
			status_led_led_green_on();
 800383e:	f000 f80b 	bl	8003858 <status_led_led_green_on>
			status_led_led_blue_on();
 8003842:	f000 f821 	bl	8003888 <status_led_led_blue_on>
			SCH_TIM_Start(SCH_TIM_LED, ERROR_PERIOD);
 8003846:	2132      	movs	r1, #50	@ 0x32
 8003848:	2000      	movs	r0, #0
 800384a:	f003 faad 	bl	8006da8 <SCH_TIM_Start>
		}
	}
}
 800384e:	e7ff      	b.n	8003850 <status_led_error+0x84>
 8003850:	bf00      	nop
 8003852:	bd80      	pop	{r7, pc}
 8003854:	20000578 	.word	0x20000578

08003858 <status_led_led_green_on>:

static void status_led_led_green_on(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 800385c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003860:	4802      	ldr	r0, [pc, #8]	@ (800386c <status_led_led_green_on+0x14>)
 8003862:	f7ff fef3 	bl	800364c <LL_GPIO_SetOutputPin>
}
 8003866:	bf00      	nop
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40020c00 	.word	0x40020c00

08003870 <status_led_led_green_off>:
static void status_led_led_green_off(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8003874:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003878:	4802      	ldr	r0, [pc, #8]	@ (8003884 <status_led_led_green_off+0x14>)
 800387a:	f7ff fef5 	bl	8003668 <LL_GPIO_ResetOutputPin>
}
 800387e:	bf00      	nop
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40020c00 	.word	0x40020c00

08003888 <status_led_led_blue_on>:
static void status_led_led_blue_on(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 800388c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003890:	4802      	ldr	r0, [pc, #8]	@ (800389c <status_led_led_blue_on+0x14>)
 8003892:	f7ff fedb 	bl	800364c <LL_GPIO_SetOutputPin>
}
 8003896:	bf00      	nop
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40020c00 	.word	0x40020c00

080038a0 <status_led_led_blue_off>:
static void status_led_led_blue_off(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 80038a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80038a8:	4802      	ldr	r0, [pc, #8]	@ (80038b4 <status_led_led_blue_off+0x14>)
 80038aa:	f7ff fedd 	bl	8003668 <LL_GPIO_ResetOutputPin>
}
 80038ae:	bf00      	nop
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40020c00 	.word	0x40020c00

080038b8 <status_led_create_task>:

void	status_led_create_task(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_task_context.taskHandle, &s_task_context.taskProperty);
 80038bc:	4902      	ldr	r1, [pc, #8]	@ (80038c8 <status_led_create_task+0x10>)
 80038be:	4803      	ldr	r0, [pc, #12]	@ (80038cc <status_led_create_task+0x14>)
 80038c0:	f003 fa9e 	bl	8006e00 <SCH_TASK_CreateTask>
}
 80038c4:	bf00      	nop
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	20000204 	.word	0x20000204
 80038cc:	20000200 	.word	0x20000200

080038d0 <__NVIC_SetPriorityGrouping>:
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003914 <__NVIC_SetPriorityGrouping+0x44>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038ec:	4013      	ands	r3, r2
 80038ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003902:	4a04      	ldr	r2, [pc, #16]	@ (8003914 <__NVIC_SetPriorityGrouping+0x44>)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	60d3      	str	r3, [r2, #12]
}
 8003908:	bf00      	nop
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	e000ed00 	.word	0xe000ed00

08003918 <__NVIC_GetPriorityGrouping>:
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800391c:	4b04      	ldr	r3, [pc, #16]	@ (8003930 <__NVIC_GetPriorityGrouping+0x18>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	0a1b      	lsrs	r3, r3, #8
 8003922:	f003 0307 	and.w	r3, r3, #7
}
 8003926:	4618      	mov	r0, r3
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	e000ed00 	.word	0xe000ed00

08003934 <__NVIC_EnableIRQ>:
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	4603      	mov	r3, r0
 800393c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800393e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003942:	2b00      	cmp	r3, #0
 8003944:	db0b      	blt.n	800395e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	f003 021f 	and.w	r2, r3, #31
 800394c:	4907      	ldr	r1, [pc, #28]	@ (800396c <__NVIC_EnableIRQ+0x38>)
 800394e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003952:	095b      	lsrs	r3, r3, #5
 8003954:	2001      	movs	r0, #1
 8003956:	fa00 f202 	lsl.w	r2, r0, r2
 800395a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	e000e100 	.word	0xe000e100

08003970 <__NVIC_SetPriority>:
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	4603      	mov	r3, r0
 8003978:	6039      	str	r1, [r7, #0]
 800397a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800397c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003980:	2b00      	cmp	r3, #0
 8003982:	db0a      	blt.n	800399a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	b2da      	uxtb	r2, r3
 8003988:	490c      	ldr	r1, [pc, #48]	@ (80039bc <__NVIC_SetPriority+0x4c>)
 800398a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398e:	0112      	lsls	r2, r2, #4
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	440b      	add	r3, r1
 8003994:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003998:	e00a      	b.n	80039b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	b2da      	uxtb	r2, r3
 800399e:	4908      	ldr	r1, [pc, #32]	@ (80039c0 <__NVIC_SetPriority+0x50>)
 80039a0:	79fb      	ldrb	r3, [r7, #7]
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	3b04      	subs	r3, #4
 80039a8:	0112      	lsls	r2, r2, #4
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	440b      	add	r3, r1
 80039ae:	761a      	strb	r2, [r3, #24]
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	e000e100 	.word	0xe000e100
 80039c0:	e000ed00 	.word	0xe000ed00

080039c4 <NVIC_EncodePriority>:
{
 80039c4:	b480      	push	{r7}
 80039c6:	b089      	sub	sp, #36	@ 0x24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f003 0307 	and.w	r3, r3, #7
 80039d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f1c3 0307 	rsb	r3, r3, #7
 80039de:	2b04      	cmp	r3, #4
 80039e0:	bf28      	it	cs
 80039e2:	2304      	movcs	r3, #4
 80039e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	3304      	adds	r3, #4
 80039ea:	2b06      	cmp	r3, #6
 80039ec:	d902      	bls.n	80039f4 <NVIC_EncodePriority+0x30>
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	3b03      	subs	r3, #3
 80039f2:	e000      	b.n	80039f6 <NVIC_EncodePriority+0x32>
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f8:	f04f 32ff 	mov.w	r2, #4294967295
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	43da      	mvns	r2, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	401a      	ands	r2, r3
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	fa01 f303 	lsl.w	r3, r1, r3
 8003a16:	43d9      	mvns	r1, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a1c:	4313      	orrs	r3, r2
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3724      	adds	r7, #36	@ 0x24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <LL_ADC_REG_SetSequencerRanks>:
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b089      	sub	sp, #36	@ 0x24
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	332c      	adds	r3, #44	@ 0x2c
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a42:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003a46:	617a      	str	r2, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	fa92 f2a2 	rbit	r2, r2
 8003a4e:	613a      	str	r2, [r7, #16]
  return result;
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	61ba      	str	r2, [r7, #24]
  if (value == 0U)
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	2a00      	cmp	r2, #0
 8003a58:	d101      	bne.n	8003a5e <LL_ADC_REG_SetSequencerRanks+0x34>
    return 32U;
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	e003      	b.n	8003a66 <LL_ADC_REG_SetSequencerRanks+0x3c>
  return __builtin_clz(value);
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	fab2 f282 	clz	r2, r2
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	40d3      	lsrs	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	f003 031f 	and.w	r3, r3, #31
 8003a78:	211f      	movs	r1, #31
 8003a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	401a      	ands	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f003 011f 	and.w	r1, r3, #31
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	f003 031f 	and.w	r3, r3, #31
 8003a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a92:	431a      	orrs	r2, r3
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	601a      	str	r2, [r3, #0]
}
 8003a98:	bf00      	nop
 8003a9a:	3724      	adds	r7, #36	@ 0x24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <LL_ADC_REG_SetFlagEndOfConversion>:
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	609a      	str	r2, [r3, #8]
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <LL_ADC_SetChannelSamplingTime>:
{
 8003aca:	b480      	push	{r7}
 8003acc:	b08f      	sub	sp, #60	@ 0x3c
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	60f8      	str	r0, [r7, #12]
 8003ad2:	60b9      	str	r1, [r7, #8]
 8003ad4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	330c      	adds	r3, #12
 8003ada:	4619      	mov	r1, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ae2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ae6:	617a      	str	r2, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	fa92 f2a2 	rbit	r2, r2
 8003aee:	613a      	str	r2, [r7, #16]
  return result;
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	61ba      	str	r2, [r7, #24]
  if (value == 0U)
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	2a00      	cmp	r2, #0
 8003af8:	d101      	bne.n	8003afe <LL_ADC_SetChannelSamplingTime+0x34>
    return 32U;
 8003afa:	2220      	movs	r2, #32
 8003afc:	e003      	b.n	8003b06 <LL_ADC_SetChannelSamplingTime+0x3c>
  return __builtin_clz(value);
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	fab2 f282 	clz	r2, r2
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	40d3      	lsrs	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	440b      	add	r3, r1
 8003b0c:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(*preg,
 8003b0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8003b18:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8003b1c:	6239      	str	r1, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1e:	6a39      	ldr	r1, [r7, #32]
 8003b20:	fa91 f1a1 	rbit	r1, r1
 8003b24:	61f9      	str	r1, [r7, #28]
  return result;
 8003b26:	69f9      	ldr	r1, [r7, #28]
 8003b28:	6279      	str	r1, [r7, #36]	@ 0x24
  if (value == 0U)
 8003b2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b2c:	2900      	cmp	r1, #0
 8003b2e:	d101      	bne.n	8003b34 <LL_ADC_SetChannelSamplingTime+0x6a>
    return 32U;
 8003b30:	2120      	movs	r1, #32
 8003b32:	e003      	b.n	8003b3c <LL_ADC_SetChannelSamplingTime+0x72>
  return __builtin_clz(value);
 8003b34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b36:	fab1 f181 	clz	r1, r1
 8003b3a:	b2c9      	uxtb	r1, r1
 8003b3c:	40cb      	lsrs	r3, r1
 8003b3e:	2107      	movs	r1, #7
 8003b40:	fa01 f303 	lsl.w	r3, r1, r3
 8003b44:	43db      	mvns	r3, r3
 8003b46:	401a      	ands	r2, r3
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8003b4e:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8003b52:	62f9      	str	r1, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b56:	fa91 f1a1 	rbit	r1, r1
 8003b5a:	62b9      	str	r1, [r7, #40]	@ 0x28
  return result;
 8003b5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b5e:	6339      	str	r1, [r7, #48]	@ 0x30
  if (value == 0U)
 8003b60:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b62:	2900      	cmp	r1, #0
 8003b64:	d101      	bne.n	8003b6a <LL_ADC_SetChannelSamplingTime+0xa0>
    return 32U;
 8003b66:	2120      	movs	r1, #32
 8003b68:	e003      	b.n	8003b72 <LL_ADC_SetChannelSamplingTime+0xa8>
  return __builtin_clz(value);
 8003b6a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b6c:	fab1 f181 	clz	r1, r1
 8003b70:	b2c9      	uxtb	r1, r1
 8003b72:	40cb      	lsrs	r3, r1
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b7e:	601a      	str	r2, [r3, #0]
}
 8003b80:	bf00      	nop
 8003b82:	373c      	adds	r7, #60	@ 0x3c
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8003b98:	4a0d      	ldr	r2, [pc, #52]	@ (8003bd0 <LL_DMA_SetDataTransferDirection+0x44>)
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003bac:	4908      	ldr	r1, [pc, #32]	@ (8003bd0 <LL_DMA_SetDataTransferDirection+0x44>)
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	440b      	add	r3, r1
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	440b      	add	r3, r1
 8003bba:	4619      	mov	r1, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	600b      	str	r3, [r1, #0]
}
 8003bc2:	bf00      	nop
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	08007f70 	.word	0x08007f70

08003bd4 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8003be0:	4a0d      	ldr	r2, [pc, #52]	@ (8003c18 <LL_DMA_SetMode+0x44>)
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	4413      	add	r3, r2
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	461a      	mov	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4413      	add	r3, r2
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 8003bf4:	4908      	ldr	r1, [pc, #32]	@ (8003c18 <LL_DMA_SetMode+0x44>)
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	440b      	add	r3, r1
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	440b      	add	r3, r1
 8003c02:	4619      	mov	r1, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	600b      	str	r3, [r1, #0]
}
 8003c0a:	bf00      	nop
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	08007f70 	.word	0x08007f70

08003c1c <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8003c28:	4a0d      	ldr	r2, [pc, #52]	@ (8003c60 <LL_DMA_SetPeriphIncMode+0x44>)
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	461a      	mov	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4413      	add	r3, r2
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003c3c:	4908      	ldr	r1, [pc, #32]	@ (8003c60 <LL_DMA_SetPeriphIncMode+0x44>)
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	440b      	add	r3, r1
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	4619      	mov	r1, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	440b      	add	r3, r1
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	600b      	str	r3, [r1, #0]
}
 8003c52:	bf00      	nop
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	08007f70 	.word	0x08007f70

08003c64 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8003c70:	4a0d      	ldr	r2, [pc, #52]	@ (8003ca8 <LL_DMA_SetMemoryIncMode+0x44>)
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	4413      	add	r3, r2
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	461a      	mov	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003c84:	4908      	ldr	r1, [pc, #32]	@ (8003ca8 <LL_DMA_SetMemoryIncMode+0x44>)
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	440b      	add	r3, r1
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	440b      	add	r3, r1
 8003c92:	4619      	mov	r1, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	600b      	str	r3, [r1, #0]
}
 8003c9a:	bf00      	nop
 8003c9c:	3714      	adds	r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	08007f70 	.word	0x08007f70

08003cac <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8003cb8:	4a0d      	ldr	r2, [pc, #52]	@ (8003cf0 <LL_DMA_SetPeriphSize+0x44>)
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8003ccc:	4908      	ldr	r1, [pc, #32]	@ (8003cf0 <LL_DMA_SetPeriphSize+0x44>)
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	440b      	add	r3, r1
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	440b      	add	r3, r1
 8003cda:	4619      	mov	r1, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	600b      	str	r3, [r1, #0]
}
 8003ce2:	bf00      	nop
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	08007f70 	.word	0x08007f70

08003cf4 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8003d00:	4a0d      	ldr	r2, [pc, #52]	@ (8003d38 <LL_DMA_SetMemorySize+0x44>)
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	4413      	add	r3, r2
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8003d14:	4908      	ldr	r1, [pc, #32]	@ (8003d38 <LL_DMA_SetMemorySize+0x44>)
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	440b      	add	r3, r1
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	440b      	add	r3, r1
 8003d22:	4619      	mov	r1, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	600b      	str	r3, [r1, #0]
}
 8003d2a:	bf00      	nop
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	08007f70 	.word	0x08007f70

08003d3c <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8003d48:	4a0d      	ldr	r2, [pc, #52]	@ (8003d80 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	461a      	mov	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	4413      	add	r3, r2
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d5c:	4908      	ldr	r1, [pc, #32]	@ (8003d80 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	440b      	add	r3, r1
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	4619      	mov	r1, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	440b      	add	r3, r1
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	600b      	str	r3, [r1, #0]
}
 8003d72:	bf00      	nop
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	08007f70 	.word	0x08007f70

08003d84 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8003d90:	4a0d      	ldr	r2, [pc, #52]	@ (8003dc8 <LL_DMA_SetChannelSelection+0x44>)
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	4413      	add	r3, r2
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	461a      	mov	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8003da4:	4908      	ldr	r1, [pc, #32]	@ (8003dc8 <LL_DMA_SetChannelSelection+0x44>)
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	440b      	add	r3, r1
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	4619      	mov	r1, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	440b      	add	r3, r1
 8003db2:	4619      	mov	r1, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	600b      	str	r3, [r1, #0]
}
 8003dba:	bf00      	nop
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	08007f70 	.word	0x08007f70

08003dcc <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8003dd6:	4a0c      	ldr	r2, [pc, #48]	@ (8003e08 <LL_DMA_DisableFifoMode+0x3c>)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	4413      	add	r3, r2
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	461a      	mov	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4413      	add	r3, r2
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	4908      	ldr	r1, [pc, #32]	@ (8003e08 <LL_DMA_DisableFifoMode+0x3c>)
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	440a      	add	r2, r1
 8003dec:	7812      	ldrb	r2, [r2, #0]
 8003dee:	4611      	mov	r1, r2
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	440a      	add	r2, r1
 8003df4:	f023 0304 	bic.w	r3, r3, #4
 8003df8:	6153      	str	r3, [r2, #20]
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	08007f70 	.word	0x08007f70

08003e0c <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f043 0201 	orr.w	r2, r3, #1
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	601a      	str	r2, [r3, #0]
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	601a      	str	r2, [r3, #0]
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	601a      	str	r2, [r3, #0]
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f023 02fe 	bic.w	r2, r3, #254	@ 0xfe
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	431a      	orrs	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	60da      	str	r2, [r3, #12]
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f023 0201 	bic.w	r2, r3, #1
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	60da      	str	r2, [r3, #12]
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
	...

08003eb4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003eb8:	4b05      	ldr	r3, [pc, #20]	@ (8003ed0 <LL_RCC_HSE_Enable+0x1c>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a04      	ldr	r2, [pc, #16]	@ (8003ed0 <LL_RCC_HSE_Enable+0x1c>)
 8003ebe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ec2:	6013      	str	r3, [r2, #0]
}
 8003ec4:	bf00      	nop
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	40023800 	.word	0x40023800

08003ed4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8003ed8:	4b07      	ldr	r3, [pc, #28]	@ (8003ef8 <LL_RCC_HSE_IsReady+0x24>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ee0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ee4:	bf0c      	ite	eq
 8003ee6:	2301      	moveq	r3, #1
 8003ee8:	2300      	movne	r3, #0
 8003eea:	b2db      	uxtb	r3, r3
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	40023800 	.word	0x40023800

08003efc <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003f04:	4b06      	ldr	r3, [pc, #24]	@ (8003f20 <LL_RCC_SetSysClkSource+0x24>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f023 0203 	bic.w	r2, r3, #3
 8003f0c:	4904      	ldr	r1, [pc, #16]	@ (8003f20 <LL_RCC_SetSysClkSource+0x24>)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	608b      	str	r3, [r1, #8]
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	40023800 	.word	0x40023800

08003f24 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003f28:	4b04      	ldr	r3, [pc, #16]	@ (8003f3c <LL_RCC_GetSysClkSource+0x18>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f003 030c 	and.w	r3, r3, #12
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40023800 	.word	0x40023800

08003f40 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003f48:	4b06      	ldr	r3, [pc, #24]	@ (8003f64 <LL_RCC_SetAHBPrescaler+0x24>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f50:	4904      	ldr	r1, [pc, #16]	@ (8003f64 <LL_RCC_SetAHBPrescaler+0x24>)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	608b      	str	r3, [r1, #8]
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	40023800 	.word	0x40023800

08003f68 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003f70:	4b06      	ldr	r3, [pc, #24]	@ (8003f8c <LL_RCC_SetAPB1Prescaler+0x24>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f78:	4904      	ldr	r1, [pc, #16]	@ (8003f8c <LL_RCC_SetAPB1Prescaler+0x24>)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	608b      	str	r3, [r1, #8]
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	40023800 	.word	0x40023800

08003f90 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003f98:	4b06      	ldr	r3, [pc, #24]	@ (8003fb4 <LL_RCC_SetAPB2Prescaler+0x24>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003fa0:	4904      	ldr	r1, [pc, #16]	@ (8003fb4 <LL_RCC_SetAPB2Prescaler+0x24>)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	608b      	str	r3, [r1, #8]
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	40023800 	.word	0x40023800

08003fb8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003fc0:	4b08      	ldr	r3, [pc, #32]	@ (8003fe4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003fc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fc4:	4907      	ldr	r1, [pc, #28]	@ (8003fe4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003fcc:	4b05      	ldr	r3, [pc, #20]	@ (8003fe4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003fce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
}
 8003fd8:	bf00      	nop
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	40023800 	.word	0x40023800

08003fe8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8003ff0:	4b08      	ldr	r3, [pc, #32]	@ (8004014 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003ff2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ff4:	4907      	ldr	r1, [pc, #28]	@ (8004014 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003ffc:	4b05      	ldr	r3, [pc, #20]	@ (8004014 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003ffe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4013      	ands	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004006:	68fb      	ldr	r3, [r7, #12]
}
 8004008:	bf00      	nop
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	40023800 	.word	0x40023800

08004018 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004020:	4b08      	ldr	r3, [pc, #32]	@ (8004044 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004022:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004024:	4907      	ldr	r1, [pc, #28]	@ (8004044 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4313      	orrs	r3, r2
 800402a:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800402c:	4b05      	ldr	r3, [pc, #20]	@ (8004044 <LL_APB2_GRP1_EnableClock+0x2c>)
 800402e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4013      	ands	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004036:	68fb      	ldr	r3, [r7, #12]
}
 8004038:	bf00      	nop
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	40023800 	.word	0x40023800

08004048 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8004050:	4b06      	ldr	r3, [pc, #24]	@ (800406c <LL_FLASH_SetLatency+0x24>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f023 0207 	bic.w	r2, r3, #7
 8004058:	4904      	ldr	r1, [pc, #16]	@ (800406c <LL_FLASH_SetLatency+0x24>)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4313      	orrs	r3, r2
 800405e:	600b      	str	r3, [r1, #0]
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	40023c00 	.word	0x40023c00

08004070 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8004074:	4b04      	ldr	r3, [pc, #16]	@ (8004088 <LL_FLASH_GetLatency+0x18>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0307 	and.w	r3, r3, #7
}
 800407c:	4618      	mov	r0, r3
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	40023c00 	.word	0x40023c00

0800408c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8004094:	4b06      	ldr	r3, [pc, #24]	@ (80040b0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800409c:	4904      	ldr	r1, [pc, #16]	@ (80040b0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	600b      	str	r3, [r1, #0]
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	40007000 	.word	0x40007000

080040b4 <LL_SPI_Enable>:
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	601a      	str	r2, [r3, #0]
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <LL_SPI_SetStandard>:
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f023 0210 	bic.w	r2, r3, #16
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	431a      	orrs	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	605a      	str	r2, [r3, #4]
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <LL_TIM_DisableARRPreload>:
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	601a      	str	r2, [r3, #0]
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
	...

0800411c <LL_TIM_OC_DisableFast>:
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d01c      	beq.n	8004166 <LL_TIM_OC_DisableFast+0x4a>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2b04      	cmp	r3, #4
 8004130:	d017      	beq.n	8004162 <LL_TIM_OC_DisableFast+0x46>
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b10      	cmp	r3, #16
 8004136:	d012      	beq.n	800415e <LL_TIM_OC_DisableFast+0x42>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	2b40      	cmp	r3, #64	@ 0x40
 800413c:	d00d      	beq.n	800415a <LL_TIM_OC_DisableFast+0x3e>
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004144:	d007      	beq.n	8004156 <LL_TIM_OC_DisableFast+0x3a>
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800414c:	d101      	bne.n	8004152 <LL_TIM_OC_DisableFast+0x36>
 800414e:	2305      	movs	r3, #5
 8004150:	e00a      	b.n	8004168 <LL_TIM_OC_DisableFast+0x4c>
 8004152:	2306      	movs	r3, #6
 8004154:	e008      	b.n	8004168 <LL_TIM_OC_DisableFast+0x4c>
 8004156:	2304      	movs	r3, #4
 8004158:	e006      	b.n	8004168 <LL_TIM_OC_DisableFast+0x4c>
 800415a:	2303      	movs	r3, #3
 800415c:	e004      	b.n	8004168 <LL_TIM_OC_DisableFast+0x4c>
 800415e:	2302      	movs	r3, #2
 8004160:	e002      	b.n	8004168 <LL_TIM_OC_DisableFast+0x4c>
 8004162:	2301      	movs	r3, #1
 8004164:	e000      	b.n	8004168 <LL_TIM_OC_DisableFast+0x4c>
 8004166:	2300      	movs	r3, #0
 8004168:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	3318      	adds	r3, #24
 800416e:	4619      	mov	r1, r3
 8004170:	7bfb      	ldrb	r3, [r7, #15]
 8004172:	4a0b      	ldr	r2, [pc, #44]	@ (80041a0 <LL_TIM_OC_DisableFast+0x84>)
 8004174:	5cd3      	ldrb	r3, [r2, r3]
 8004176:	440b      	add	r3, r1
 8004178:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	7bfb      	ldrb	r3, [r7, #15]
 8004180:	4908      	ldr	r1, [pc, #32]	@ (80041a4 <LL_TIM_OC_DisableFast+0x88>)
 8004182:	5ccb      	ldrb	r3, [r1, r3]
 8004184:	4619      	mov	r1, r3
 8004186:	2304      	movs	r3, #4
 8004188:	408b      	lsls	r3, r1
 800418a:	43db      	mvns	r3, r3
 800418c:	401a      	ands	r2, r3
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	601a      	str	r2, [r3, #0]
}
 8004192:	bf00      	nop
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	08007f78 	.word	0x08007f78
 80041a4:	08007f80 	.word	0x08007f80

080041a8 <LL_TIM_OC_EnablePreload>:
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d01c      	beq.n	80041f2 <LL_TIM_OC_EnablePreload+0x4a>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	d017      	beq.n	80041ee <LL_TIM_OC_EnablePreload+0x46>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b10      	cmp	r3, #16
 80041c2:	d012      	beq.n	80041ea <LL_TIM_OC_EnablePreload+0x42>
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	2b40      	cmp	r3, #64	@ 0x40
 80041c8:	d00d      	beq.n	80041e6 <LL_TIM_OC_EnablePreload+0x3e>
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041d0:	d007      	beq.n	80041e2 <LL_TIM_OC_EnablePreload+0x3a>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041d8:	d101      	bne.n	80041de <LL_TIM_OC_EnablePreload+0x36>
 80041da:	2305      	movs	r3, #5
 80041dc:	e00a      	b.n	80041f4 <LL_TIM_OC_EnablePreload+0x4c>
 80041de:	2306      	movs	r3, #6
 80041e0:	e008      	b.n	80041f4 <LL_TIM_OC_EnablePreload+0x4c>
 80041e2:	2304      	movs	r3, #4
 80041e4:	e006      	b.n	80041f4 <LL_TIM_OC_EnablePreload+0x4c>
 80041e6:	2303      	movs	r3, #3
 80041e8:	e004      	b.n	80041f4 <LL_TIM_OC_EnablePreload+0x4c>
 80041ea:	2302      	movs	r3, #2
 80041ec:	e002      	b.n	80041f4 <LL_TIM_OC_EnablePreload+0x4c>
 80041ee:	2301      	movs	r3, #1
 80041f0:	e000      	b.n	80041f4 <LL_TIM_OC_EnablePreload+0x4c>
 80041f2:	2300      	movs	r3, #0
 80041f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3318      	adds	r3, #24
 80041fa:	4619      	mov	r1, r3
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
 80041fe:	4a0a      	ldr	r2, [pc, #40]	@ (8004228 <LL_TIM_OC_EnablePreload+0x80>)
 8004200:	5cd3      	ldrb	r3, [r2, r3]
 8004202:	440b      	add	r3, r1
 8004204:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	7bfb      	ldrb	r3, [r7, #15]
 800420c:	4907      	ldr	r1, [pc, #28]	@ (800422c <LL_TIM_OC_EnablePreload+0x84>)
 800420e:	5ccb      	ldrb	r3, [r1, r3]
 8004210:	4619      	mov	r1, r3
 8004212:	2308      	movs	r3, #8
 8004214:	408b      	lsls	r3, r1
 8004216:	431a      	orrs	r2, r3
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	601a      	str	r2, [r3, #0]
}
 800421c:	bf00      	nop
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	08007f78 	.word	0x08007f78
 800422c:	08007f80 	.word	0x08007f80

08004230 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004242:	f023 0307 	bic.w	r3, r3, #7
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	431a      	orrs	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	609a      	str	r2, [r3, #8]
}
 800424e:	bf00      	nop
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800425a:	b480      	push	{r7}
 800425c:	b083      	sub	sp, #12
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
 8004262:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	605a      	str	r2, [r3, #4]
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	609a      	str	r2, [r3, #8]
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <LL_USART_Enable>:
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	60da      	str	r2, [r3, #12]
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <LL_USART_ConfigAsyncMode>:
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	615a      	str	r2, [r3, #20]
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <LL_GPIO_SetOutputPin>:
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	619a      	str	r2, [r3, #24]
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <LL_GPIO_ResetOutputPin>:
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	041a      	lsls	r2, r3, #16
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	619a      	str	r2, [r3, #24]
}
 800431a:	bf00      	nop
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800432a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800432e:	f7ff fe73 	bl	8004018 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8004332:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004336:	f7ff fe57 	bl	8003fe8 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800433a:	2003      	movs	r0, #3
 800433c:	f7ff fac8 	bl	80038d0 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8004340:	f7ff faea 	bl	8003918 <__NVIC_GetPriorityGrouping>
 8004344:	4603      	mov	r3, r0
 8004346:	2200      	movs	r2, #0
 8004348:	210f      	movs	r1, #15
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff fb3a 	bl	80039c4 <NVIC_EncodePriority>
 8004350:	4603      	mov	r3, r0
 8004352:	4619      	mov	r1, r3
 8004354:	f04f 30ff 	mov.w	r0, #4294967295
 8004358:	f7ff fb0a 	bl	8003970 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800435c:	f000 f82e 	bl	80043bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004360:	f000 fb94 	bl	8004a8c <MX_GPIO_Init>
  MX_DMA_Init();
 8004364:	f000 fb7a 	bl	8004a5c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8004368:	f000 fb16 	bl	8004998 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 800436c:	f000 f996 	bl	800469c <MX_SPI1_Init>
  MX_I2C2_Init();
 8004370:	f000 f938 	bl	80045e4 <MX_I2C2_Init>
  MX_ADC1_Init();
 8004374:	f000 f856 	bl	8004424 <MX_ADC1_Init>
  MX_TIM1_Init();
 8004378:	f000 f9e6 	bl	8004748 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800437c:	f000 faac 	bl	80048d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
    WDT_init();
 8004380:	f001 f8a6 	bl	80054d0 <WDT_init>
    status_led_init();
 8004384:	f7ff f980 	bl	8003688 <status_led_init>
    command_init();
 8004388:	f7fc fede 	bl	8001148 <command_init>
    NTC_DMA_ADC_init();
 800438c:	f7ff f944 	bl	8003618 <NTC_DMA_ADC_init>
    temperature_init();
 8004390:	f000 fe74 	bl	800507c <temperature_init>
    copc_init();
 8004394:	f7fd fe58 	bl	8002048 <copc_init>

    SCH_Initialize();
 8004398:	f002 fcdc 	bl	8006d54 <SCH_Initialize>
    WDT_create_task();
 800439c:	f001 f8a4 	bl	80054e8 <WDT_create_task>
    status_led_create_task();
 80043a0:	f7ff fa8a 	bl	80038b8 <status_led_create_task>
    command_create_task();
 80043a4:	f7fd fd66 	bl	8001e74 <command_create_task>
    temperature_create_task();
 80043a8:	f000 fe6e 	bl	8005088 <temperature_create_task>
    copc_create_task();
 80043ac:	f7fd fe6a 	bl	8002084 <copc_create_task>

    SCH_StartSchedular();
 80043b0:	f002 fdfa 	bl	8006fa8 <SCH_StartSchedular>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_HandleScheduledTask();
 80043b4:	f002 fdfe 	bl	8006fb4 <SCH_HandleScheduledTask>
 80043b8:	e7fc      	b.n	80043b4 <main+0x8e>
	...

080043bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80043c0:	2000      	movs	r0, #0
 80043c2:	f7ff fe41 	bl	8004048 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80043c6:	bf00      	nop
 80043c8:	f7ff fe52 	bl	8004070 <LL_FLASH_GetLatency>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1fa      	bne.n	80043c8 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80043d2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80043d6:	f7ff fe59 	bl	800408c <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 80043da:	f7ff fd6b 	bl	8003eb4 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80043de:	bf00      	nop
 80043e0:	f7ff fd78 	bl	8003ed4 <LL_RCC_HSE_IsReady>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d1fa      	bne.n	80043e0 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80043ea:	2000      	movs	r0, #0
 80043ec:	f7ff fda8 	bl	8003f40 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80043f0:	2000      	movs	r0, #0
 80043f2:	f7ff fdb9 	bl	8003f68 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80043f6:	2000      	movs	r0, #0
 80043f8:	f7ff fdca 	bl	8003f90 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 80043fc:	2001      	movs	r0, #1
 80043fe:	f7ff fd7d 	bl	8003efc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE)
 8004402:	bf00      	nop
 8004404:	f7ff fd8e 	bl	8003f24 <LL_RCC_GetSysClkSource>
 8004408:	4603      	mov	r3, r0
 800440a:	2b04      	cmp	r3, #4
 800440c:	d1fa      	bne.n	8004404 <SystemClock_Config+0x48>
  {

  }
  LL_Init1msTick(8000000);
 800440e:	4804      	ldr	r0, [pc, #16]	@ (8004420 <SystemClock_Config+0x64>)
 8004410:	f002 fc5c 	bl	8006ccc <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 8004414:	4802      	ldr	r0, [pc, #8]	@ (8004420 <SystemClock_Config+0x64>)
 8004416:	f002 fc8d 	bl	8006d34 <LL_SetSystemCoreClock>
}
 800441a:	bf00      	nop
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	007a1200 	.word	0x007a1200

08004424 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b092      	sub	sp, #72	@ 0x48
 8004428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800442a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800442e:	2200      	movs	r2, #0
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	605a      	str	r2, [r3, #4]
 8004434:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8004436:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800443a:	2200      	movs	r2, #0
 800443c:	601a      	str	r2, [r3, #0]
 800443e:	605a      	str	r2, [r3, #4]
 8004440:	609a      	str	r2, [r3, #8]
 8004442:	60da      	str	r2, [r3, #12]
 8004444:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8004446:	f107 0318 	add.w	r3, r7, #24
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	605a      	str	r2, [r3, #4]
 8004450:	609a      	str	r2, [r3, #8]
 8004452:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004454:	463b      	mov	r3, r7
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	605a      	str	r2, [r3, #4]
 800445c:	609a      	str	r2, [r3, #8]
 800445e:	60da      	str	r2, [r3, #12]
 8004460:	611a      	str	r2, [r3, #16]
 8004462:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8004464:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004468:	f7ff fdd6 	bl	8004018 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800446c:	2004      	movs	r0, #4
 800446e:	f7ff fda3 	bl	8003fb8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8004472:	2002      	movs	r0, #2
 8004474:	f7ff fda0 	bl	8003fb8 <LL_AHB1_GRP1_EnableClock>
  PC4   ------> ADC1_IN14
  PC5   ------> ADC1_IN15
  PB0   ------> ADC1_IN8
  PB1   ------> ADC1_IN9
  */
  GPIO_InitStruct.Pin = ADC_TEMP1_Pin|ADC_TEMP2_Pin;
 8004478:	2330      	movs	r3, #48	@ 0x30
 800447a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800447c:	2303      	movs	r3, #3
 800447e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004480:	2300      	movs	r3, #0
 8004482:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004484:	463b      	mov	r3, r7
 8004486:	4619      	mov	r1, r3
 8004488:	484d      	ldr	r0, [pc, #308]	@ (80045c0 <MX_ADC1_Init+0x19c>)
 800448a:	f001 fa90 	bl	80059ae <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ADC_TEMP3_Pin|ADC_TEMP4_Pin;
 800448e:	2303      	movs	r3, #3
 8004490:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004492:	2303      	movs	r3, #3
 8004494:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004496:	2300      	movs	r3, #0
 8004498:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800449a:	463b      	mov	r3, r7
 800449c:	4619      	mov	r1, r3
 800449e:	4849      	ldr	r0, [pc, #292]	@ (80045c4 <MX_ADC1_Init+0x1a0>)
 80044a0:	f001 fa85 	bl	80059ae <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_0, LL_DMA_CHANNEL_0);
 80044a4:	2200      	movs	r2, #0
 80044a6:	2100      	movs	r1, #0
 80044a8:	4847      	ldr	r0, [pc, #284]	@ (80045c8 <MX_ADC1_Init+0x1a4>)
 80044aa:	f7ff fc6b 	bl	8003d84 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80044ae:	2200      	movs	r2, #0
 80044b0:	2100      	movs	r1, #0
 80044b2:	4845      	ldr	r0, [pc, #276]	@ (80045c8 <MX_ADC1_Init+0x1a4>)
 80044b4:	f7ff fb6a 	bl	8003b8c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_0, LL_DMA_PRIORITY_MEDIUM);
 80044b8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80044bc:	2100      	movs	r1, #0
 80044be:	4842      	ldr	r0, [pc, #264]	@ (80045c8 <MX_ADC1_Init+0x1a4>)
 80044c0:	f7ff fc3c 	bl	8003d3c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
 80044c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044c8:	2100      	movs	r1, #0
 80044ca:	483f      	ldr	r0, [pc, #252]	@ (80045c8 <MX_ADC1_Init+0x1a4>)
 80044cc:	f7ff fb82 	bl	8003bd4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 80044d0:	2200      	movs	r2, #0
 80044d2:	2100      	movs	r1, #0
 80044d4:	483c      	ldr	r0, [pc, #240]	@ (80045c8 <MX_ADC1_Init+0x1a4>)
 80044d6:	f7ff fba1 	bl	8003c1c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 80044da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044de:	2100      	movs	r1, #0
 80044e0:	4839      	ldr	r0, [pc, #228]	@ (80045c8 <MX_ADC1_Init+0x1a4>)
 80044e2:	f7ff fbbf 	bl	8003c64 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_HALFWORD);
 80044e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80044ea:	2100      	movs	r1, #0
 80044ec:	4836      	ldr	r0, [pc, #216]	@ (80045c8 <MX_ADC1_Init+0x1a4>)
 80044ee:	f7ff fbdd 	bl	8003cac <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_HALFWORD);
 80044f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80044f6:	2100      	movs	r1, #0
 80044f8:	4833      	ldr	r0, [pc, #204]	@ (80045c8 <MX_ADC1_Init+0x1a4>)
 80044fa:	f7ff fbfb 	bl	8003cf4 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_0);
 80044fe:	2100      	movs	r1, #0
 8004500:	4831      	ldr	r0, [pc, #196]	@ (80045c8 <MX_ADC1_Init+0x1a4>)
 8004502:	f7ff fc63 	bl	8003dcc <LL_DMA_DisableFifoMode>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8004506:	2300      	movs	r3, #0
 8004508:	63fb      	str	r3, [r7, #60]	@ 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800450a:	2300      	movs	r3, #0
 800450c:	643b      	str	r3, [r7, #64]	@ 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 800450e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004512:	647b      	str	r3, [r7, #68]	@ 0x44
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8004514:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004518:	4619      	mov	r1, r3
 800451a:	482c      	ldr	r0, [pc, #176]	@ (80045cc <MX_ADC1_Init+0x1a8>)
 800451c:	f001 f88e 	bl	800563c <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8004520:	2300      	movs	r3, #0
 8004522:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS;
 8004524:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8004528:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800452a:	2300      	movs	r3, #0
 800452c:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 800452e:	2302      	movs	r3, #2
 8004530:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8004532:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004536:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8004538:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800453c:	4619      	mov	r1, r3
 800453e:	4823      	ldr	r0, [pc, #140]	@ (80045cc <MX_ADC1_Init+0x1a8>)
 8004540:	f001 f8a8 	bl	8005694 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV);
 8004544:	2100      	movs	r1, #0
 8004546:	4821      	ldr	r0, [pc, #132]	@ (80045cc <MX_ADC1_Init+0x1a8>)
 8004548:	f7ff faac 	bl	8003aa4 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 800454c:	2300      	movs	r3, #0
 800454e:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8004550:	2300      	movs	r3, #0
 8004552:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8004554:	f107 0318 	add.w	r3, r7, #24
 8004558:	4619      	mov	r1, r3
 800455a:	481d      	ldr	r0, [pc, #116]	@ (80045d0 <MX_ADC1_Init+0x1ac>)
 800455c:	f001 f826 	bl	80055ac <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_14);
 8004560:	4a1c      	ldr	r2, [pc, #112]	@ (80045d4 <MX_ADC1_Init+0x1b0>)
 8004562:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004566:	4819      	ldr	r0, [pc, #100]	@ (80045cc <MX_ADC1_Init+0x1a8>)
 8004568:	f7ff fa5f 	bl	8003a2a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_14, LL_ADC_SAMPLINGTIME_480CYCLES);
 800456c:	2207      	movs	r2, #7
 800456e:	4919      	ldr	r1, [pc, #100]	@ (80045d4 <MX_ADC1_Init+0x1b0>)
 8004570:	4816      	ldr	r0, [pc, #88]	@ (80045cc <MX_ADC1_Init+0x1a8>)
 8004572:	f7ff faaa 	bl	8003aca <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_15);
 8004576:	4a18      	ldr	r2, [pc, #96]	@ (80045d8 <MX_ADC1_Init+0x1b4>)
 8004578:	f240 2105 	movw	r1, #517	@ 0x205
 800457c:	4813      	ldr	r0, [pc, #76]	@ (80045cc <MX_ADC1_Init+0x1a8>)
 800457e:	f7ff fa54 	bl	8003a2a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_15, LL_ADC_SAMPLINGTIME_480CYCLES);
 8004582:	2207      	movs	r2, #7
 8004584:	4914      	ldr	r1, [pc, #80]	@ (80045d8 <MX_ADC1_Init+0x1b4>)
 8004586:	4811      	ldr	r0, [pc, #68]	@ (80045cc <MX_ADC1_Init+0x1a8>)
 8004588:	f7ff fa9f 	bl	8003aca <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_8);
 800458c:	4a13      	ldr	r2, [pc, #76]	@ (80045dc <MX_ADC1_Init+0x1b8>)
 800458e:	f240 210a 	movw	r1, #522	@ 0x20a
 8004592:	480e      	ldr	r0, [pc, #56]	@ (80045cc <MX_ADC1_Init+0x1a8>)
 8004594:	f7ff fa49 	bl	8003a2a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_8, LL_ADC_SAMPLINGTIME_480CYCLES);
 8004598:	2207      	movs	r2, #7
 800459a:	4910      	ldr	r1, [pc, #64]	@ (80045dc <MX_ADC1_Init+0x1b8>)
 800459c:	480b      	ldr	r0, [pc, #44]	@ (80045cc <MX_ADC1_Init+0x1a8>)
 800459e:	f7ff fa94 	bl	8003aca <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_9);
 80045a2:	4a0f      	ldr	r2, [pc, #60]	@ (80045e0 <MX_ADC1_Init+0x1bc>)
 80045a4:	f240 210f 	movw	r1, #527	@ 0x20f
 80045a8:	4808      	ldr	r0, [pc, #32]	@ (80045cc <MX_ADC1_Init+0x1a8>)
 80045aa:	f7ff fa3e 	bl	8003a2a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_480CYCLES);
 80045ae:	2207      	movs	r2, #7
 80045b0:	490b      	ldr	r1, [pc, #44]	@ (80045e0 <MX_ADC1_Init+0x1bc>)
 80045b2:	4806      	ldr	r0, [pc, #24]	@ (80045cc <MX_ADC1_Init+0x1a8>)
 80045b4:	f7ff fa89 	bl	8003aca <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80045b8:	bf00      	nop
 80045ba:	3748      	adds	r7, #72	@ 0x48
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40020800 	.word	0x40020800
 80045c4:	40020400 	.word	0x40020400
 80045c8:	40026400 	.word	0x40026400
 80045cc:	40012000 	.word	0x40012000
 80045d0:	40012300 	.word	0x40012300
 80045d4:	00c0000e 	.word	0x00c0000e
 80045d8:	00f0000f 	.word	0x00f0000f
 80045dc:	03800008 	.word	0x03800008
 80045e0:	03b00009 	.word	0x03b00009

080045e4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b08c      	sub	sp, #48	@ 0x30
 80045e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80045ea:	f107 0318 	add.w	r3, r7, #24
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	605a      	str	r2, [r3, #4]
 80045f4:	609a      	str	r2, [r3, #8]
 80045f6:	60da      	str	r2, [r3, #12]
 80045f8:	611a      	str	r2, [r3, #16]
 80045fa:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045fc:	463b      	mov	r3, r7
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]
 8004602:	605a      	str	r2, [r3, #4]
 8004604:	609a      	str	r2, [r3, #8]
 8004606:	60da      	str	r2, [r3, #12]
 8004608:	611a      	str	r2, [r3, #16]
 800460a:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800460c:	2002      	movs	r0, #2
 800460e:	f7ff fcd3 	bl	8003fb8 <LL_AHB1_GRP1_EnableClock>
  /**I2C2 GPIO Configuration
  PB10   ------> I2C2_SCL
  PB11   ------> I2C2_SDA
  */
  GPIO_InitStruct.Pin = EXP_SCL_Pin|EXP_SDA_Pin;
 8004612:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004616:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004618:	2302      	movs	r3, #2
 800461a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800461c:	2303      	movs	r3, #3
 800461e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8004620:	2301      	movs	r3, #1
 8004622:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004624:	2300      	movs	r3, #0
 8004626:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8004628:	2304      	movs	r3, #4
 800462a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800462c:	463b      	mov	r3, r7
 800462e:	4619      	mov	r1, r3
 8004630:	4817      	ldr	r0, [pc, #92]	@ (8004690 <MX_I2C2_Init+0xac>)
 8004632:	f001 f9bc 	bl	80059ae <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 8004636:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800463a:	f7ff fcd5 	bl	8003fe8 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C2_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C2);
 800463e:	4815      	ldr	r0, [pc, #84]	@ (8004694 <MX_I2C2_Init+0xb0>)
 8004640:	f7ff fc27 	bl	8003e92 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 8004644:	4813      	ldr	r0, [pc, #76]	@ (8004694 <MX_I2C2_Init+0xb0>)
 8004646:	f7ff fc01 	bl	8003e4c <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 800464a:	4812      	ldr	r0, [pc, #72]	@ (8004694 <MX_I2C2_Init+0xb0>)
 800464c:	f7ff fbee 	bl	8003e2c <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8004650:	2300      	movs	r3, #0
 8004652:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8004654:	4b10      	ldr	r3, [pc, #64]	@ (8004698 <MX_I2C2_Init+0xb4>)
 8004656:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8004658:	2300      	movs	r3, #0
 800465a:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 800465c:	2300      	movs	r3, #0
 800465e:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8004660:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004664:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8004666:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800466a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 800466c:	f107 0318 	add.w	r3, r7, #24
 8004670:	4619      	mov	r1, r3
 8004672:	4808      	ldr	r0, [pc, #32]	@ (8004694 <MX_I2C2_Init+0xb0>)
 8004674:	f001 fb12 	bl	8005c9c <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C2, 0);
 8004678:	2100      	movs	r1, #0
 800467a:	4806      	ldr	r0, [pc, #24]	@ (8004694 <MX_I2C2_Init+0xb0>)
 800467c:	f7ff fbf6 	bl	8003e6c <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C2_Init 2 */
  LL_I2C_Enable(I2C2);
 8004680:	4804      	ldr	r0, [pc, #16]	@ (8004694 <MX_I2C2_Init+0xb0>)
 8004682:	f7ff fbc3 	bl	8003e0c <LL_I2C_Enable>
  /* USER CODE END I2C2_Init 2 */

}
 8004686:	bf00      	nop
 8004688:	3730      	adds	r7, #48	@ 0x30
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	40020400 	.word	0x40020400
 8004694:	40005800 	.word	0x40005800
 8004698:	000186a0 	.word	0x000186a0

0800469c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b090      	sub	sp, #64	@ 0x40
 80046a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80046a2:	f107 0318 	add.w	r3, r7, #24
 80046a6:	2228      	movs	r2, #40	@ 0x28
 80046a8:	2100      	movs	r1, #0
 80046aa:	4618      	mov	r0, r3
 80046ac:	f003 f80c 	bl	80076c8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b0:	463b      	mov	r3, r7
 80046b2:	2200      	movs	r2, #0
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	605a      	str	r2, [r3, #4]
 80046b8:	609a      	str	r2, [r3, #8]
 80046ba:	60da      	str	r2, [r3, #12]
 80046bc:	611a      	str	r2, [r3, #16]
 80046be:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80046c0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80046c4:	f7ff fca8 	bl	8004018 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80046c8:	2002      	movs	r0, #2
 80046ca:	f7ff fc75 	bl	8003fb8 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PB3   ------> SPI1_SCK
  PB4   ------> SPI1_MISO
  PB5   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = TEC_SCK_Pin|TEC_MISO_Pin|TEC_MOSI_Pin;
 80046ce:	2338      	movs	r3, #56	@ 0x38
 80046d0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80046d2:	2302      	movs	r3, #2
 80046d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80046d6:	2303      	movs	r3, #3
 80046d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80046da:	2300      	movs	r3, #0
 80046dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80046de:	2300      	movs	r3, #0
 80046e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80046e2:	2305      	movs	r3, #5
 80046e4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046e6:	463b      	mov	r3, r7
 80046e8:	4619      	mov	r1, r3
 80046ea:	4815      	ldr	r0, [pc, #84]	@ (8004740 <MX_SPI1_Init+0xa4>)
 80046ec:	f001 f95f 	bl	80059ae <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80046f0:	2300      	movs	r3, #0
 80046f2:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80046f4:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80046f8:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80046fa:	2300      	movs	r3, #0
 80046fc:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80046fe:	2300      	movs	r3, #0
 8004700:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8004702:	2300      	movs	r3, #0
 8004704:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8004706:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800470a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800470c:	2318      	movs	r3, #24
 800470e:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8004710:	2300      	movs	r3, #0
 8004712:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8004714:	2300      	movs	r3, #0
 8004716:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8004718:	230a      	movs	r3, #10
 800471a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 800471c:	f107 0318 	add.w	r3, r7, #24
 8004720:	4619      	mov	r1, r3
 8004722:	4808      	ldr	r0, [pc, #32]	@ (8004744 <MX_SPI1_Init+0xa8>)
 8004724:	f001 fc49 	bl	8005fba <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8004728:	2100      	movs	r1, #0
 800472a:	4806      	ldr	r0, [pc, #24]	@ (8004744 <MX_SPI1_Init+0xa8>)
 800472c:	f7ff fcd2 	bl	80040d4 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */
  LL_SPI_Enable(SPI1);
 8004730:	4804      	ldr	r0, [pc, #16]	@ (8004744 <MX_SPI1_Init+0xa8>)
 8004732:	f7ff fcbf 	bl	80040b4 <LL_SPI_Enable>
  /* USER CODE END SPI1_Init 2 */

}
 8004736:	bf00      	nop
 8004738:	3740      	adds	r7, #64	@ 0x40
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	40020400 	.word	0x40020400
 8004744:	40013000 	.word	0x40013000

08004748 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b09a      	sub	sp, #104	@ 0x68
 800474c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800474e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	605a      	str	r2, [r3, #4]
 8004758:	609a      	str	r2, [r3, #8]
 800475a:	60da      	str	r2, [r3, #12]
 800475c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800475e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004762:	2220      	movs	r2, #32
 8004764:	2100      	movs	r1, #0
 8004766:	4618      	mov	r0, r3
 8004768:	f002 ffae 	bl	80076c8 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 800476c:	f107 031c 	add.w	r3, r7, #28
 8004770:	2200      	movs	r2, #0
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	605a      	str	r2, [r3, #4]
 8004776:	609a      	str	r2, [r3, #8]
 8004778:	60da      	str	r2, [r3, #12]
 800477a:	611a      	str	r2, [r3, #16]
 800477c:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800477e:	1d3b      	adds	r3, r7, #4
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	605a      	str	r2, [r3, #4]
 8004786:	609a      	str	r2, [r3, #8]
 8004788:	60da      	str	r2, [r3, #12]
 800478a:	611a      	str	r2, [r3, #16]
 800478c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 800478e:	2001      	movs	r0, #1
 8004790:	f7ff fc42 	bl	8004018 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 8004794:	2353      	movs	r3, #83	@ 0x53
 8004796:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800479a:	2300      	movs	r3, #0
 800479c:	65bb      	str	r3, [r7, #88]	@ 0x58
  TIM_InitStruct.Autoreload = 9999;
 800479e:	f242 730f 	movw	r3, #9999	@ 0x270f
 80047a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80047a4:	2300      	movs	r3, #0
 80047a6:	663b      	str	r3, [r7, #96]	@ 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 80047a8:	2300      	movs	r3, #0
 80047aa:	667b      	str	r3, [r7, #100]	@ 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 80047ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80047b0:	4619      	mov	r1, r3
 80047b2:	4847      	ldr	r0, [pc, #284]	@ (80048d0 <MX_TIM1_Init+0x188>)
 80047b4:	f001 fcc6 	bl	8006144 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 80047b8:	4845      	ldr	r0, [pc, #276]	@ (80048d0 <MX_TIM1_Init+0x188>)
 80047ba:	f7ff fc9e 	bl	80040fa <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 80047be:	2100      	movs	r1, #0
 80047c0:	4843      	ldr	r0, [pc, #268]	@ (80048d0 <MX_TIM1_Init+0x188>)
 80047c2:	f7ff fd35 	bl	8004230 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 80047c6:	2101      	movs	r1, #1
 80047c8:	4841      	ldr	r0, [pc, #260]	@ (80048d0 <MX_TIM1_Init+0x188>)
 80047ca:	f7ff fced 	bl	80041a8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80047ce:	2360      	movs	r3, #96	@ 0x60
 80047d0:	637b      	str	r3, [r7, #52]	@ 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80047d2:	2300      	movs	r3, #0
 80047d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80047d6:	2300      	movs	r3, #0
 80047d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 80047da:	2300      	movs	r3, #0
 80047dc:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80047de:	2300      	movs	r3, #0
 80047e0:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 80047e2:	2300      	movs	r3, #0
 80047e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 80047e6:	2300      	movs	r3, #0
 80047e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80047ea:	2300      	movs	r3, #0
 80047ec:	653b      	str	r3, [r7, #80]	@ 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80047ee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80047f2:	461a      	mov	r2, r3
 80047f4:	2101      	movs	r1, #1
 80047f6:	4836      	ldr	r0, [pc, #216]	@ (80048d0 <MX_TIM1_Init+0x188>)
 80047f8:	f001 fd3e 	bl	8006278 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 80047fc:	2101      	movs	r1, #1
 80047fe:	4834      	ldr	r0, [pc, #208]	@ (80048d0 <MX_TIM1_Init+0x188>)
 8004800:	f7ff fc8c 	bl	800411c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 8004804:	2110      	movs	r1, #16
 8004806:	4832      	ldr	r0, [pc, #200]	@ (80048d0 <MX_TIM1_Init+0x188>)
 8004808:	f7ff fcce 	bl	80041a8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800480c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004810:	461a      	mov	r2, r3
 8004812:	2110      	movs	r1, #16
 8004814:	482e      	ldr	r0, [pc, #184]	@ (80048d0 <MX_TIM1_Init+0x188>)
 8004816:	f001 fd2f 	bl	8006278 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 800481a:	2110      	movs	r1, #16
 800481c:	482c      	ldr	r0, [pc, #176]	@ (80048d0 <MX_TIM1_Init+0x188>)
 800481e:	f7ff fc7d 	bl	800411c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8004822:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004826:	482a      	ldr	r0, [pc, #168]	@ (80048d0 <MX_TIM1_Init+0x188>)
 8004828:	f7ff fcbe 	bl	80041a8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 800482c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004830:	461a      	mov	r2, r3
 8004832:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004836:	4826      	ldr	r0, [pc, #152]	@ (80048d0 <MX_TIM1_Init+0x188>)
 8004838:	f001 fd1e 	bl	8006278 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 800483c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004840:	4823      	ldr	r0, [pc, #140]	@ (80048d0 <MX_TIM1_Init+0x188>)
 8004842:	f7ff fc6b 	bl	800411c <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8004846:	2300      	movs	r3, #0
 8004848:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 800484a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800484e:	461a      	mov	r2, r3
 8004850:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004854:	481e      	ldr	r0, [pc, #120]	@ (80048d0 <MX_TIM1_Init+0x188>)
 8004856:	f001 fd0f 	bl	8006278 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 800485a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800485e:	481c      	ldr	r0, [pc, #112]	@ (80048d0 <MX_TIM1_Init+0x188>)
 8004860:	f7ff fc5c 	bl	800411c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8004864:	2100      	movs	r1, #0
 8004866:	481a      	ldr	r0, [pc, #104]	@ (80048d0 <MX_TIM1_Init+0x188>)
 8004868:	f7ff fcf7 	bl	800425a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 800486c:	4818      	ldr	r0, [pc, #96]	@ (80048d0 <MX_TIM1_Init+0x188>)
 800486e:	f7ff fd07 	bl	8004280 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8004872:	2300      	movs	r3, #0
 8004874:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8004876:	2300      	movs	r3, #0
 8004878:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 800487a:	2300      	movs	r3, #0
 800487c:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 800487e:	2300      	movs	r3, #0
 8004880:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8004884:	2300      	movs	r3, #0
 8004886:	857b      	strh	r3, [r7, #42]	@ 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8004888:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800488c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 800488e:	2300      	movs	r3, #0
 8004890:	633b      	str	r3, [r7, #48]	@ 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8004892:	f107 031c 	add.w	r3, r7, #28
 8004896:	4619      	mov	r1, r3
 8004898:	480d      	ldr	r0, [pc, #52]	@ (80048d0 <MX_TIM1_Init+0x188>)
 800489a:	f001 fd2e 	bl	80062fa <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 800489e:	2010      	movs	r0, #16
 80048a0:	f7ff fb8a 	bl	8003fb8 <LL_AHB1_GRP1_EnableClock>
  PE9   ------> TIM1_CH1
  PE11   ------> TIM1_CH2
  PE13   ------> TIM1_CH3
  PE14   ------> TIM1_CH4
  */
  GPIO_InitStruct.Pin = HEATER_PWM_1_Pin|HEATER_PWM_2_Pin|HEATER_PWM_3_Pin|HEATER_PWM_4_Pin;
 80048a4:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 80048a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80048aa:	2302      	movs	r3, #2
 80048ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80048ae:	2300      	movs	r3, #0
 80048b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80048b2:	2300      	movs	r3, #0
 80048b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80048b6:	2300      	movs	r3, #0
 80048b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80048ba:	2301      	movs	r3, #1
 80048bc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80048be:	1d3b      	adds	r3, r7, #4
 80048c0:	4619      	mov	r1, r3
 80048c2:	4804      	ldr	r0, [pc, #16]	@ (80048d4 <MX_TIM1_Init+0x18c>)
 80048c4:	f001 f873 	bl	80059ae <LL_GPIO_Init>

}
 80048c8:	bf00      	nop
 80048ca:	3768      	adds	r7, #104	@ 0x68
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	40010000 	.word	0x40010000
 80048d4:	40021000 	.word	0x40021000

080048d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b08e      	sub	sp, #56	@ 0x38
 80048dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80048de:	f107 031c 	add.w	r3, r7, #28
 80048e2:	2200      	movs	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	605a      	str	r2, [r3, #4]
 80048e8:	609a      	str	r2, [r3, #8]
 80048ea:	60da      	str	r2, [r3, #12]
 80048ec:	611a      	str	r2, [r3, #16]
 80048ee:	615a      	str	r2, [r3, #20]
 80048f0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048f2:	1d3b      	adds	r3, r7, #4
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	605a      	str	r2, [r3, #4]
 80048fa:	609a      	str	r2, [r3, #8]
 80048fc:	60da      	str	r2, [r3, #12]
 80048fe:	611a      	str	r2, [r3, #16]
 8004900:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8004902:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8004906:	f7ff fb6f 	bl	8003fe8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800490a:	2001      	movs	r0, #1
 800490c:	f7ff fb54 	bl	8003fb8 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = EXP_RS485_DX_Pin|EXP_RS485_RX_Pin;
 8004910:	230c      	movs	r3, #12
 8004912:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004914:	2302      	movs	r3, #2
 8004916:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004918:	2303      	movs	r3, #3
 800491a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800491c:	2300      	movs	r3, #0
 800491e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004920:	2300      	movs	r3, #0
 8004922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8004924:	2307      	movs	r3, #7
 8004926:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004928:	1d3b      	adds	r3, r7, #4
 800492a:	4619      	mov	r1, r3
 800492c:	4818      	ldr	r0, [pc, #96]	@ (8004990 <MX_USART2_UART_Init+0xb8>)
 800492e:	f001 f83e 	bl	80059ae <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004932:	f7fe fff1 	bl	8003918 <__NVIC_GetPriorityGrouping>
 8004936:	4603      	mov	r3, r0
 8004938:	2200      	movs	r2, #0
 800493a:	2100      	movs	r1, #0
 800493c:	4618      	mov	r0, r3
 800493e:	f7ff f841 	bl	80039c4 <NVIC_EncodePriority>
 8004942:	4603      	mov	r3, r0
 8004944:	4619      	mov	r1, r3
 8004946:	2026      	movs	r0, #38	@ 0x26
 8004948:	f7ff f812 	bl	8003970 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800494c:	2026      	movs	r0, #38	@ 0x26
 800494e:	f7fe fff1 	bl	8003934 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8004952:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8004956:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004958:	2300      	movs	r3, #0
 800495a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800495c:	2300      	movs	r3, #0
 800495e:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004960:	2300      	movs	r3, #0
 8004962:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004964:	230c      	movs	r3, #12
 8004966:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004968:	2300      	movs	r3, #0
 800496a:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800496c:	2300      	movs	r3, #0
 800496e:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8004970:	f107 031c 	add.w	r3, r7, #28
 8004974:	4619      	mov	r1, r3
 8004976:	4807      	ldr	r0, [pc, #28]	@ (8004994 <MX_USART2_UART_Init+0xbc>)
 8004978:	f002 f90e 	bl	8006b98 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800497c:	4805      	ldr	r0, [pc, #20]	@ (8004994 <MX_USART2_UART_Init+0xbc>)
 800497e:	f7ff fc9f 	bl	80042c0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8004982:	4804      	ldr	r0, [pc, #16]	@ (8004994 <MX_USART2_UART_Init+0xbc>)
 8004984:	f7ff fc8c 	bl	80042a0 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004988:	bf00      	nop
 800498a:	3738      	adds	r7, #56	@ 0x38
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40020000 	.word	0x40020000
 8004994:	40004400 	.word	0x40004400

08004998 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b08e      	sub	sp, #56	@ 0x38
 800499c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800499e:	f107 031c 	add.w	r3, r7, #28
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	605a      	str	r2, [r3, #4]
 80049a8:	609a      	str	r2, [r3, #8]
 80049aa:	60da      	str	r2, [r3, #12]
 80049ac:	611a      	str	r2, [r3, #16]
 80049ae:	615a      	str	r2, [r3, #20]
 80049b0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049b2:	1d3b      	adds	r3, r7, #4
 80049b4:	2200      	movs	r2, #0
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	605a      	str	r2, [r3, #4]
 80049ba:	609a      	str	r2, [r3, #8]
 80049bc:	60da      	str	r2, [r3, #12]
 80049be:	611a      	str	r2, [r3, #16]
 80049c0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80049c2:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80049c6:	f7ff fb0f 	bl	8003fe8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80049ca:	2008      	movs	r0, #8
 80049cc:	f7ff faf4 	bl	8003fb8 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = EXP_URRT_TX_Pin|EXP_UART_RX_Pin;
 80049d0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80049d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80049d6:	2302      	movs	r3, #2
 80049d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80049da:	2303      	movs	r3, #3
 80049dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80049de:	2300      	movs	r3, #0
 80049e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80049e2:	2300      	movs	r3, #0
 80049e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80049e6:	2307      	movs	r3, #7
 80049e8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80049ea:	1d3b      	adds	r3, r7, #4
 80049ec:	4619      	mov	r1, r3
 80049ee:	4819      	ldr	r0, [pc, #100]	@ (8004a54 <MX_USART3_UART_Init+0xbc>)
 80049f0:	f000 ffdd 	bl	80059ae <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80049f4:	f7fe ff90 	bl	8003918 <__NVIC_GetPriorityGrouping>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2200      	movs	r2, #0
 80049fc:	2100      	movs	r1, #0
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fe ffe0 	bl	80039c4 <NVIC_EncodePriority>
 8004a04:	4603      	mov	r3, r0
 8004a06:	4619      	mov	r1, r3
 8004a08:	2027      	movs	r0, #39	@ 0x27
 8004a0a:	f7fe ffb1 	bl	8003970 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8004a0e:	2027      	movs	r0, #39	@ 0x27
 8004a10:	f7fe ff90 	bl	8003934 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8004a14:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8004a18:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004a22:	2300      	movs	r3, #0
 8004a24:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004a26:	230c      	movs	r3, #12
 8004a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8004a32:	f107 031c 	add.w	r3, r7, #28
 8004a36:	4619      	mov	r1, r3
 8004a38:	4807      	ldr	r0, [pc, #28]	@ (8004a58 <MX_USART3_UART_Init+0xc0>)
 8004a3a:	f002 f8ad 	bl	8006b98 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8004a3e:	4806      	ldr	r0, [pc, #24]	@ (8004a58 <MX_USART3_UART_Init+0xc0>)
 8004a40:	f7ff fc3e 	bl	80042c0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8004a44:	4804      	ldr	r0, [pc, #16]	@ (8004a58 <MX_USART3_UART_Init+0xc0>)
 8004a46:	f7ff fc2b 	bl	80042a0 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004a4a:	bf00      	nop
 8004a4c:	3738      	adds	r7, #56	@ 0x38
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	40020c00 	.word	0x40020c00
 8004a58:	40004800 	.word	0x40004800

08004a5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8004a60:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8004a64:	f7ff faa8 	bl	8003fb8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004a68:	f7fe ff56 	bl	8003918 <__NVIC_GetPriorityGrouping>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2200      	movs	r2, #0
 8004a70:	2100      	movs	r1, #0
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fe ffa6 	bl	80039c4 <NVIC_EncodePriority>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	2038      	movs	r0, #56	@ 0x38
 8004a7e:	f7fe ff77 	bl	8003970 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004a82:	2038      	movs	r0, #56	@ 0x38
 8004a84:	f7fe ff56 	bl	8003934 <__NVIC_EnableIRQ>

}
 8004a88:	bf00      	nop
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a92:	463b      	mov	r3, r7
 8004a94:	2200      	movs	r2, #0
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	605a      	str	r2, [r3, #4]
 8004a9a:	609a      	str	r2, [r3, #8]
 8004a9c:	60da      	str	r2, [r3, #12]
 8004a9e:	611a      	str	r2, [r3, #16]
 8004aa0:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8004aa2:	2010      	movs	r0, #16
 8004aa4:	f7ff fa88 	bl	8003fb8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8004aa8:	2004      	movs	r0, #4
 8004aaa:	f7ff fa85 	bl	8003fb8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8004aae:	2080      	movs	r0, #128	@ 0x80
 8004ab0:	f7ff fa82 	bl	8003fb8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004ab4:	2001      	movs	r0, #1
 8004ab6:	f7ff fa7f 	bl	8003fb8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8004aba:	2002      	movs	r0, #2
 8004abc:	f7ff fa7c 	bl	8003fb8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8004ac0:	2008      	movs	r0, #8
 8004ac2:	f7ff fa79 	bl	8003fb8 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, TEC_1_SWEN_Pin|TEC_1_EN_Pin|EF_HEATER_EN_Pin);
 8004ac6:	f44f 7192 	mov.w	r1, #292	@ 0x124
 8004aca:	484c      	ldr	r0, [pc, #304]	@ (8004bfc <MX_GPIO_Init+0x170>)
 8004acc:	f7ff fc1c 	bl	8004308 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(EF_TEC_EN_GPIO_Port, EF_TEC_EN_Pin);
 8004ad0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004ad4:	484a      	ldr	r0, [pc, #296]	@ (8004c00 <MX_GPIO_Init+0x174>)
 8004ad6:	f7ff fc17 	bl	8004308 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 8004ada:	2102      	movs	r1, #2
 8004adc:	4849      	ldr	r0, [pc, #292]	@ (8004c04 <MX_GPIO_Init+0x178>)
 8004ade:	f7ff fc13 	bl	8004308 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(EF_LED_EN_GPIO_Port, EF_LED_EN_Pin);
 8004ae2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004ae6:	4848      	ldr	r0, [pc, #288]	@ (8004c08 <MX_GPIO_Init+0x17c>)
 8004ae8:	f7ff fc0e 	bl	8004308 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LED_B_Pin|LED_G_Pin);
 8004aec:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8004af0:	4846      	ldr	r0, [pc, #280]	@ (8004c0c <MX_GPIO_Init+0x180>)
 8004af2:	f7ff fc09 	bl	8004308 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOB, TEC_4_CS_Pin|TEC_3_CS_Pin);
 8004af6:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8004afa:	4843      	ldr	r0, [pc, #268]	@ (8004c08 <MX_GPIO_Init+0x17c>)
 8004afc:	f7ff fbf6 	bl	80042ec <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOE, TEC_2_CS_Pin|TEC_1_CS_Pin);
 8004b00:	2103      	movs	r1, #3
 8004b02:	483e      	ldr	r0, [pc, #248]	@ (8004bfc <MX_GPIO_Init+0x170>)
 8004b04:	f7ff fbf2 	bl	80042ec <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = TEC_1_SWEN_Pin|TEC_1_EN_Pin;
 8004b08:	2324      	movs	r3, #36	@ 0x24
 8004b0a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004b10:	2300      	movs	r3, #0
 8004b12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004b14:	2300      	movs	r3, #0
 8004b16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8004b18:	2302      	movs	r3, #2
 8004b1a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b1c:	463b      	mov	r3, r7
 8004b1e:	4619      	mov	r1, r3
 8004b20:	4836      	ldr	r0, [pc, #216]	@ (8004bfc <MX_GPIO_Init+0x170>)
 8004b22:	f000 ff44 	bl	80059ae <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EF_TEC_AUX_Pin|EF_HEATER_AUX_Pin;
 8004b26:	23c0      	movs	r3, #192	@ 0xc0
 8004b28:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b32:	463b      	mov	r3, r7
 8004b34:	4619      	mov	r1, r3
 8004b36:	4831      	ldr	r0, [pc, #196]	@ (8004bfc <MX_GPIO_Init+0x170>)
 8004b38:	f000 ff39 	bl	80059ae <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EF_TEC_EN_Pin;
 8004b3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004b40:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004b42:	2301      	movs	r3, #1
 8004b44:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004b46:	2300      	movs	r3, #0
 8004b48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(EF_TEC_EN_GPIO_Port, &GPIO_InitStruct);
 8004b52:	463b      	mov	r3, r7
 8004b54:	4619      	mov	r1, r3
 8004b56:	482a      	ldr	r0, [pc, #168]	@ (8004c00 <MX_GPIO_Init+0x174>)
 8004b58:	f000 ff29 	bl	80059ae <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = WD_DONE_Pin;
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004b60:	2301      	movs	r3, #1
 8004b62:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004b64:	2300      	movs	r3, #0
 8004b66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(WD_DONE_GPIO_Port, &GPIO_InitStruct);
 8004b70:	463b      	mov	r3, r7
 8004b72:	4619      	mov	r1, r3
 8004b74:	4823      	ldr	r0, [pc, #140]	@ (8004c04 <MX_GPIO_Init+0x178>)
 8004b76:	f000 ff1a 	bl	80059ae <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EF_HEATER_EN_Pin|TEC_2_CS_Pin|TEC_1_CS_Pin;
 8004b7a:	f240 1303 	movw	r3, #259	@ 0x103
 8004b7e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004b80:	2301      	movs	r3, #1
 8004b82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004b84:	2300      	movs	r3, #0
 8004b86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b90:	463b      	mov	r3, r7
 8004b92:	4619      	mov	r1, r3
 8004b94:	4819      	ldr	r0, [pc, #100]	@ (8004bfc <MX_GPIO_Init+0x170>)
 8004b96:	f000 ff0a 	bl	80059ae <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EF_LED_AUX_Pin;
 8004b9a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004b9e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(EF_LED_AUX_GPIO_Port, &GPIO_InitStruct);
 8004ba8:	463b      	mov	r3, r7
 8004baa:	4619      	mov	r1, r3
 8004bac:	4816      	ldr	r0, [pc, #88]	@ (8004c08 <MX_GPIO_Init+0x17c>)
 8004bae:	f000 fefe 	bl	80059ae <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EF_LED_EN_Pin|TEC_4_CS_Pin|TEC_3_CS_Pin;
 8004bb2:	f44f 4303 	mov.w	r3, #33536	@ 0x8300
 8004bb6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bc8:	463b      	mov	r3, r7
 8004bca:	4619      	mov	r1, r3
 8004bcc:	480e      	ldr	r0, [pc, #56]	@ (8004c08 <MX_GPIO_Init+0x17c>)
 8004bce:	f000 feee 	bl	80059ae <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_B_Pin|LED_G_Pin;
 8004bd2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8004bd6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004be0:	2300      	movs	r3, #0
 8004be2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004be4:	2300      	movs	r3, #0
 8004be6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004be8:	463b      	mov	r3, r7
 8004bea:	4619      	mov	r1, r3
 8004bec:	4807      	ldr	r0, [pc, #28]	@ (8004c0c <MX_GPIO_Init+0x180>)
 8004bee:	f000 fede 	bl	80059ae <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004bf2:	bf00      	nop
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	40020800 	.word	0x40020800
 8004c04:	40020000 	.word	0x40020000
 8004c08:	40020400 	.word	0x40020400
 8004c0c:	40020c00 	.word	0x40020c00

08004c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c10:	b480      	push	{r7}
 8004c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004c14:	bf00      	nop
 8004c16:	e7fd      	b.n	8004c14 <NMI_Handler+0x4>

08004c18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c1c:	bf00      	nop
 8004c1e:	e7fd      	b.n	8004c1c <HardFault_Handler+0x4>

08004c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c20:	b480      	push	{r7}
 8004c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c24:	bf00      	nop
 8004c26:	e7fd      	b.n	8004c24 <MemManage_Handler+0x4>

08004c28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c2c:	bf00      	nop
 8004c2e:	e7fd      	b.n	8004c2c <BusFault_Handler+0x4>

08004c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c34:	bf00      	nop
 8004c36:	e7fd      	b.n	8004c34 <UsageFault_Handler+0x4>

08004c38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c3c:	bf00      	nop
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c46:	b480      	push	{r7}
 8004c48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c4a:	bf00      	nop
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c58:	bf00      	nop
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
	...

08004c64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	g_systick_count++;
 8004c68:	4b04      	ldr	r3, [pc, #16]	@ (8004c7c <SysTick_Handler+0x18>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	4a03      	ldr	r2, [pc, #12]	@ (8004c7c <SysTick_Handler+0x18>)
 8004c70:	6013      	str	r3, [r2, #0]
	SCH_RunSystemTickTimer();
 8004c72:	f002 f905 	bl	8006e80 <SCH_RunSystemTickTimer>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c76:	bf00      	nop
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	2000057c 	.word	0x2000057c

08004c80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	COPC_UART_IRQHandler();
 8004c84:	f7fd ff1c 	bl	8002ac0 <COPC_UART_IRQHandler>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004c88:	bf00      	nop
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	CONSOLE_UART_IRQHandler();
 8004c90:	f7fd f8fc 	bl	8001e8c <CONSOLE_UART_IRQHandler>
  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004c94:	bf00      	nop
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Stream0_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004c9c:	bf00      	nop
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
	...

08004ca8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004cac:	4b06      	ldr	r3, [pc, #24]	@ (8004cc8 <SystemInit+0x20>)
 8004cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cb2:	4a05      	ldr	r2, [pc, #20]	@ (8004cc8 <SystemInit+0x20>)
 8004cb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004cb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004cbc:	bf00      	nop
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	e000ed00 	.word	0xe000ed00

08004ccc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004ccc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004d04 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004cd0:	f7ff ffea 	bl	8004ca8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004cd4:	480c      	ldr	r0, [pc, #48]	@ (8004d08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004cd6:	490d      	ldr	r1, [pc, #52]	@ (8004d0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8004d10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004cdc:	e002      	b.n	8004ce4 <LoopCopyDataInit>

08004cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ce2:	3304      	adds	r3, #4

08004ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ce8:	d3f9      	bcc.n	8004cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004cea:	4a0a      	ldr	r2, [pc, #40]	@ (8004d14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004cec:	4c0a      	ldr	r4, [pc, #40]	@ (8004d18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004cf0:	e001      	b.n	8004cf6 <LoopFillZerobss>

08004cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004cf4:	3204      	adds	r2, #4

08004cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004cf8:	d3fb      	bcc.n	8004cf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004cfa:	f002 fcf3 	bl	80076e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004cfe:	f7ff fb12 	bl	8004326 <main>
  bx  lr    
 8004d02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004d04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d0c:	200002e4 	.word	0x200002e4
  ldr r2, =_sidata
 8004d10:	080080b4 	.word	0x080080b4
  ldr r2, =_sbss
 8004d14:	200002e4 	.word	0x200002e4
  ldr r4, =_ebss
 8004d18:	200008d4 	.word	0x200008d4

08004d1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d1c:	e7fe      	b.n	8004d1c <ADC_IRQHandler>
	...

08004d20 <temperature_update>:
	 0,								// TEC_HEATER_status;	// heater3_on heater2_on heater1_on heater0_on tec3_on tec2_on tec1_on tec0_on
	{IDLE, IDLE, IDLE, IDLE}		//mode
};

static void temperature_update(void)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	af00      	add	r7, sp, #0
// update temperature from BMP390
 	s_Temperature_CurrentState.BMP390_temperature = bmp390_get_temperature();
 8004d24:	f7fd ff1a 	bl	8002b5c <bmp390_get_temperature>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	4b3e      	ldr	r3, [pc, #248]	@ (8004e28 <temperature_update+0x108>)
 8004d2e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
// update temperature from NTC
	s_Temperature_CurrentState.NTC_temperature[0] = NTC_Temperature[0];
 8004d32:	4b3e      	ldr	r3, [pc, #248]	@ (8004e2c <temperature_update+0x10c>)
 8004d34:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004d38:	4b3b      	ldr	r3, [pc, #236]	@ (8004e28 <temperature_update+0x108>)
 8004d3a:	871a      	strh	r2, [r3, #56]	@ 0x38
	s_Temperature_CurrentState.NTC_temperature[1] = NTC_Temperature[1];
 8004d3c:	4b3b      	ldr	r3, [pc, #236]	@ (8004e2c <temperature_update+0x10c>)
 8004d3e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8004d42:	4b39      	ldr	r3, [pc, #228]	@ (8004e28 <temperature_update+0x108>)
 8004d44:	875a      	strh	r2, [r3, #58]	@ 0x3a
	s_Temperature_CurrentState.NTC_temperature[2] = NTC_Temperature[2];
 8004d46:	4b39      	ldr	r3, [pc, #228]	@ (8004e2c <temperature_update+0x10c>)
 8004d48:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8004d4c:	4b36      	ldr	r3, [pc, #216]	@ (8004e28 <temperature_update+0x108>)
 8004d4e:	879a      	strh	r2, [r3, #60]	@ 0x3c
	s_Temperature_CurrentState.NTC_temperature[3] = NTC_Temperature[3];
 8004d50:	4b36      	ldr	r3, [pc, #216]	@ (8004e2c <temperature_update+0x10c>)
 8004d52:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8004d56:	4b34      	ldr	r3, [pc, #208]	@ (8004e28 <temperature_update+0x108>)
 8004d58:	87da      	strh	r2, [r3, #62]	@ 0x3e
//	{
//		temperature_enable_auto_control_TEC(2);
//		temperature_enable_auto_control_TEC(3);
//	}

	if ((s_Temperature_CurrentState.Temp_status & (1 << TEMP0_AUTO)) == (1 << TEMP0_AUTO))	 //channel 0 is auto
 8004d5a:	4b33      	ldr	r3, [pc, #204]	@ (8004e28 <temperature_update+0x108>)
 8004d5c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d007      	beq.n	8004d78 <temperature_update+0x58>
		temperature_auto_ctrl(s_Temperature_CurrentState.NTC_temperature[0], 0);
 8004d68:	4b2f      	ldr	r3, [pc, #188]	@ (8004e28 <temperature_update+0x108>)
 8004d6a:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
 8004d6e:	2100      	movs	r1, #0
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 f85d 	bl	8004e30 <temperature_auto_ctrl>
 8004d76:	e009      	b.n	8004d8c <temperature_update+0x6c>
	else if ((s_Temperature_CurrentState.Temp_status & (1 << TEMP0_ENA)) == (1 << TEMP0_ENA)) //channel 0 isn't auto but it is enable
 8004d78:	4b2b      	ldr	r3, [pc, #172]	@ (8004e28 <temperature_update+0x108>)
 8004d7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d002      	beq.n	8004d8c <temperature_update+0x6c>
		temperature_manual_ctrl(0);
 8004d86:	2000      	movs	r0, #0
 8004d88:	f000 f91a 	bl	8004fc0 <temperature_manual_ctrl>

	if ((s_Temperature_CurrentState.Temp_status & (1 << TEMP1_AUTO)) == (1 << TEMP1_AUTO))	 //channel 1 is auto
 8004d8c:	4b26      	ldr	r3, [pc, #152]	@ (8004e28 <temperature_update+0x108>)
 8004d8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d92:	f003 0308 	and.w	r3, r3, #8
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d007      	beq.n	8004daa <temperature_update+0x8a>
		temperature_auto_ctrl(s_Temperature_CurrentState.NTC_temperature[1], 1);
 8004d9a:	4b23      	ldr	r3, [pc, #140]	@ (8004e28 <temperature_update+0x108>)
 8004d9c:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	@ 0x3a
 8004da0:	2101      	movs	r1, #1
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 f844 	bl	8004e30 <temperature_auto_ctrl>
 8004da8:	e009      	b.n	8004dbe <temperature_update+0x9e>
	else if ((s_Temperature_CurrentState.Temp_status & (1 << TEMP1_ENA)) == (1 << TEMP1_ENA)) //channel 1 isn't auto but it is enable
 8004daa:	4b1f      	ldr	r3, [pc, #124]	@ (8004e28 <temperature_update+0x108>)
 8004dac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004db0:	f003 0304 	and.w	r3, r3, #4
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <temperature_update+0x9e>
		temperature_manual_ctrl(1);
 8004db8:	2001      	movs	r0, #1
 8004dba:	f000 f901 	bl	8004fc0 <temperature_manual_ctrl>

	if ((s_Temperature_CurrentState.Temp_status & (1 << TEMP2_AUTO)) == (1 << TEMP2_AUTO))	 //channel 2 is auto
 8004dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8004e28 <temperature_update+0x108>)
 8004dc0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004dc4:	f003 0320 	and.w	r3, r3, #32
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d007      	beq.n	8004ddc <temperature_update+0xbc>
		temperature_auto_ctrl(s_Temperature_CurrentState.NTC_temperature[2], 2);
 8004dcc:	4b16      	ldr	r3, [pc, #88]	@ (8004e28 <temperature_update+0x108>)
 8004dce:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8004dd2:	2102      	movs	r1, #2
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 f82b 	bl	8004e30 <temperature_auto_ctrl>
 8004dda:	e009      	b.n	8004df0 <temperature_update+0xd0>
	else if ((s_Temperature_CurrentState.Temp_status & (1 << TEMP2_ENA)) == (1 << TEMP2_ENA)) //channel 2 isn't auto but it is enable
 8004ddc:	4b12      	ldr	r3, [pc, #72]	@ (8004e28 <temperature_update+0x108>)
 8004dde:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004de2:	f003 0310 	and.w	r3, r3, #16
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d002      	beq.n	8004df0 <temperature_update+0xd0>
		temperature_manual_ctrl(2);
 8004dea:	2002      	movs	r0, #2
 8004dec:	f000 f8e8 	bl	8004fc0 <temperature_manual_ctrl>

	if ((s_Temperature_CurrentState.Temp_status & (1 << TEMP3_AUTO)) == (1 << TEMP3_AUTO))	 //channel 3 is auto
 8004df0:	4b0d      	ldr	r3, [pc, #52]	@ (8004e28 <temperature_update+0x108>)
 8004df2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004df6:	b25b      	sxtb	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	da07      	bge.n	8004e0c <temperature_update+0xec>
		temperature_auto_ctrl(s_Temperature_CurrentState.NTC_temperature[3], 3);
 8004dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8004e28 <temperature_update+0x108>)
 8004dfe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8004e02:	2103      	movs	r1, #3
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 f813 	bl	8004e30 <temperature_auto_ctrl>
	else if ((s_Temperature_CurrentState.Temp_status & (1 << TEMP3_ENA)) == (1 << TEMP3_ENA)) //channel 3 isn't auto but it is enable
		temperature_manual_ctrl(3);
	return;
 8004e0a:	e00a      	b.n	8004e22 <temperature_update+0x102>
	else if ((s_Temperature_CurrentState.Temp_status & (1 << TEMP3_ENA)) == (1 << TEMP3_ENA)) //channel 3 isn't auto but it is enable
 8004e0c:	4b06      	ldr	r3, [pc, #24]	@ (8004e28 <temperature_update+0x108>)
 8004e0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <temperature_update+0x102>
		temperature_manual_ctrl(3);
 8004e1a:	2003      	movs	r0, #3
 8004e1c:	f000 f8d0 	bl	8004fc0 <temperature_manual_ctrl>
	return;
 8004e20:	bf00      	nop
 8004e22:	bf00      	nop
}
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20000238 	.word	0x20000238
 8004e2c:	20000570 	.word	0x20000570

08004e30 <temperature_auto_ctrl>:

void temperature_auto_ctrl(int16_t temperature_now, uint8_t channel)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	4603      	mov	r3, r0
 8004e38:	460a      	mov	r2, r1
 8004e3a:	80fb      	strh	r3, [r7, #6]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	717b      	strb	r3, [r7, #5]
	// Case: temperature is higher than expected temperature
	// Using: TEC
	if (temperature_now > s_Temperature_CurrentState.Temperature_setpoint[channel] + s_Temperature_CurrentState.High_Threshold)
 8004e40:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004e44:	797b      	ldrb	r3, [r7, #5]
 8004e46:	495d      	ldr	r1, [pc, #372]	@ (8004fbc <temperature_auto_ctrl+0x18c>)
 8004e48:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4b5b      	ldr	r3, [pc, #364]	@ (8004fbc <temperature_auto_ctrl+0x18c>)
 8004e50:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004e54:	440b      	add	r3, r1
 8004e56:	429a      	cmp	r2, r3
 8004e58:	dd37      	ble.n	8004eca <temperature_auto_ctrl+0x9a>
	{
		// turn off heater
		heater_set_duty_pwm_channel(channel, 0);
 8004e5a:	797b      	ldrb	r3, [r7, #5]
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fd fec2 	bl	8002be8 <heater_set_duty_pwm_channel>
		// turn on tec
		lt8722_set_output_voltage_channel(channel, s_Temperature_CurrentState.Tec_voltage[channel]);
 8004e64:	797b      	ldrb	r3, [r7, #5]
 8004e66:	4a55      	ldr	r2, [pc, #340]	@ (8004fbc <temperature_auto_ctrl+0x18c>)
 8004e68:	3302      	adds	r3, #2
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	4413      	add	r3, r2
 8004e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e72:	7979      	ldrb	r1, [r7, #5]
 8004e74:	4608      	mov	r0, r1
 8004e76:	f7fe fab1 	bl	80033dc <lt8722_set_output_voltage_channel>
		// update status
		s_Temperature_CurrentState.mode[channel] = COOLING;
 8004e7a:	797b      	ldrb	r3, [r7, #5]
 8004e7c:	4a4f      	ldr	r2, [pc, #316]	@ (8004fbc <temperature_auto_ctrl+0x18c>)
 8004e7e:	4413      	add	r3, r2
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		s_Temperature_CurrentState.TEC_HEATER_status |= (1 << channel);
 8004e86:	4b4d      	ldr	r3, [pc, #308]	@ (8004fbc <temperature_auto_ctrl+0x18c>)
 8004e88:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004e8c:	b25a      	sxtb	r2, r3
 8004e8e:	797b      	ldrb	r3, [r7, #5]
 8004e90:	2101      	movs	r1, #1
 8004e92:	fa01 f303 	lsl.w	r3, r1, r3
 8004e96:	b25b      	sxtb	r3, r3
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	b25b      	sxtb	r3, r3
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	4b47      	ldr	r3, [pc, #284]	@ (8004fbc <temperature_auto_ctrl+0x18c>)
 8004ea0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << (channel+4));
 8004ea4:	4b45      	ldr	r3, [pc, #276]	@ (8004fbc <temperature_auto_ctrl+0x18c>)
 8004ea6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004eaa:	b25a      	sxtb	r2, r3
 8004eac:	797b      	ldrb	r3, [r7, #5]
 8004eae:	3304      	adds	r3, #4
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb6:	b25b      	sxtb	r3, r3
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	b25b      	sxtb	r3, r3
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	b25b      	sxtb	r3, r3
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	4b3e      	ldr	r3, [pc, #248]	@ (8004fbc <temperature_auto_ctrl+0x18c>)
 8004ec4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
		heater_set_duty_pwm_channel(channel, 0);
		// update status
		s_Temperature_CurrentState.mode[channel] = IDLE;
		s_Temperature_CurrentState.TEC_HEATER_status &= ~((1 << (channel+4)) | (1 << channel));
	}
	return;
 8004ec8:	e074      	b.n	8004fb4 <temperature_auto_ctrl+0x184>
	else if (temperature_now < s_Temperature_CurrentState.Temperature_setpoint[channel] - s_Temperature_CurrentState.Low_Threshold)
 8004eca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004ece:	797b      	ldrb	r3, [r7, #5]
 8004ed0:	493a      	ldr	r1, [pc, #232]	@ (8004fbc <temperature_auto_ctrl+0x18c>)
 8004ed2:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	4b38      	ldr	r3, [pc, #224]	@ (8004fbc <temperature_auto_ctrl+0x18c>)
 8004eda:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004ede:	1acb      	subs	r3, r1, r3
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	da3a      	bge.n	8004f5a <temperature_auto_ctrl+0x12a>
		lt8722_set_output_voltage_channel(channel, 0);
 8004ee4:	7979      	ldrb	r1, [r7, #5]
 8004ee6:	f04f 0200 	mov.w	r2, #0
 8004eea:	f04f 0300 	mov.w	r3, #0
 8004eee:	4608      	mov	r0, r1
 8004ef0:	f7fe fa74 	bl	80033dc <lt8722_set_output_voltage_channel>
		heater_set_duty_pwm_channel(channel, s_Temperature_CurrentState.Heater_duty[channel]);
 8004ef4:	797b      	ldrb	r3, [r7, #5]
 8004ef6:	4a31      	ldr	r2, [pc, #196]	@ (8004fbc <temperature_auto_ctrl+0x18c>)
 8004ef8:	3318      	adds	r3, #24
 8004efa:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	797b      	ldrb	r3, [r7, #5]
 8004f02:	4611      	mov	r1, r2
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7fd fe6f 	bl	8002be8 <heater_set_duty_pwm_channel>
		s_Temperature_CurrentState.mode[channel] = HEATING;
 8004f0a:	797b      	ldrb	r3, [r7, #5]
 8004f0c:	4a2b      	ldr	r2, [pc, #172]	@ (8004fbc <temperature_auto_ctrl+0x18c>)
 8004f0e:	4413      	add	r3, r2
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		s_Temperature_CurrentState.TEC_HEATER_status |= (1 << (channel+4));
 8004f16:	4b29      	ldr	r3, [pc, #164]	@ (8004fbc <temperature_auto_ctrl+0x18c>)
 8004f18:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004f1c:	b25a      	sxtb	r2, r3
 8004f1e:	797b      	ldrb	r3, [r7, #5]
 8004f20:	3304      	adds	r3, #4
 8004f22:	2101      	movs	r1, #1
 8004f24:	fa01 f303 	lsl.w	r3, r1, r3
 8004f28:	b25b      	sxtb	r3, r3
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	b25b      	sxtb	r3, r3
 8004f2e:	b2da      	uxtb	r2, r3
 8004f30:	4b22      	ldr	r3, [pc, #136]	@ (8004fbc <temperature_auto_ctrl+0x18c>)
 8004f32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << channel);
 8004f36:	4b21      	ldr	r3, [pc, #132]	@ (8004fbc <temperature_auto_ctrl+0x18c>)
 8004f38:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004f3c:	b25a      	sxtb	r2, r3
 8004f3e:	797b      	ldrb	r3, [r7, #5]
 8004f40:	2101      	movs	r1, #1
 8004f42:	fa01 f303 	lsl.w	r3, r1, r3
 8004f46:	b25b      	sxtb	r3, r3
 8004f48:	43db      	mvns	r3, r3
 8004f4a:	b25b      	sxtb	r3, r3
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	b25b      	sxtb	r3, r3
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	4b1a      	ldr	r3, [pc, #104]	@ (8004fbc <temperature_auto_ctrl+0x18c>)
 8004f54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	return;
 8004f58:	e02c      	b.n	8004fb4 <temperature_auto_ctrl+0x184>
		lt8722_set_output_voltage_channel(channel, 0);
 8004f5a:	7979      	ldrb	r1, [r7, #5]
 8004f5c:	f04f 0200 	mov.w	r2, #0
 8004f60:	f04f 0300 	mov.w	r3, #0
 8004f64:	4608      	mov	r0, r1
 8004f66:	f7fe fa39 	bl	80033dc <lt8722_set_output_voltage_channel>
		heater_set_duty_pwm_channel(channel, 0);
 8004f6a:	797b      	ldrb	r3, [r7, #5]
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fd fe3a 	bl	8002be8 <heater_set_duty_pwm_channel>
		s_Temperature_CurrentState.mode[channel] = IDLE;
 8004f74:	797b      	ldrb	r3, [r7, #5]
 8004f76:	4a11      	ldr	r2, [pc, #68]	@ (8004fbc <temperature_auto_ctrl+0x18c>)
 8004f78:	4413      	add	r3, r2
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		s_Temperature_CurrentState.TEC_HEATER_status &= ~((1 << (channel+4)) | (1 << channel));
 8004f80:	4b0e      	ldr	r3, [pc, #56]	@ (8004fbc <temperature_auto_ctrl+0x18c>)
 8004f82:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004f86:	b25a      	sxtb	r2, r3
 8004f88:	797b      	ldrb	r3, [r7, #5]
 8004f8a:	3304      	adds	r3, #4
 8004f8c:	2101      	movs	r1, #1
 8004f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f92:	b259      	sxtb	r1, r3
 8004f94:	797b      	ldrb	r3, [r7, #5]
 8004f96:	2001      	movs	r0, #1
 8004f98:	fa00 f303 	lsl.w	r3, r0, r3
 8004f9c:	b25b      	sxtb	r3, r3
 8004f9e:	430b      	orrs	r3, r1
 8004fa0:	b25b      	sxtb	r3, r3
 8004fa2:	43db      	mvns	r3, r3
 8004fa4:	b25b      	sxtb	r3, r3
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	b25b      	sxtb	r3, r3
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	4b03      	ldr	r3, [pc, #12]	@ (8004fbc <temperature_auto_ctrl+0x18c>)
 8004fae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	return;
 8004fb2:	bf00      	nop
}
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	20000238 	.word	0x20000238

08004fc0 <temperature_manual_ctrl>:

void temperature_manual_ctrl(uint8_t channel)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	71fb      	strb	r3, [r7, #7]
	if ((s_Temperature_CurrentState.TEC_HEATER_status & (1 << channel)) == (1 << channel))
 8004fca:	4b2b      	ldr	r3, [pc, #172]	@ (8005078 <temperature_manual_ctrl+0xb8>)
 8004fcc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	79fb      	ldrb	r3, [r7, #7]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fda:	ea01 0203 	and.w	r2, r1, r3
 8004fde:	79fb      	ldrb	r3, [r7, #7]
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d116      	bne.n	8005018 <temperature_manual_ctrl+0x58>
	{
		// Turn off Heater
		heater_set_duty_pwm_channel(channel, 0);
 8004fea:	79fb      	ldrb	r3, [r7, #7]
 8004fec:	2100      	movs	r1, #0
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fd fdfa 	bl	8002be8 <heater_set_duty_pwm_channel>
		// Turn on TEC
		lt8722_set_output_voltage_channel(channel, s_Temperature_CurrentState.Tec_voltage[channel]);
 8004ff4:	79fb      	ldrb	r3, [r7, #7]
 8004ff6:	4a20      	ldr	r2, [pc, #128]	@ (8005078 <temperature_manual_ctrl+0xb8>)
 8004ff8:	3302      	adds	r3, #2
 8004ffa:	00db      	lsls	r3, r3, #3
 8004ffc:	4413      	add	r3, r2
 8004ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005002:	79f9      	ldrb	r1, [r7, #7]
 8005004:	4608      	mov	r0, r1
 8005006:	f7fe f9e9 	bl	80033dc <lt8722_set_output_voltage_channel>
		s_Temperature_CurrentState.mode[channel] = COOLING;
 800500a:	79fb      	ldrb	r3, [r7, #7]
 800500c:	4a1a      	ldr	r2, [pc, #104]	@ (8005078 <temperature_manual_ctrl+0xb8>)
 800500e:	4413      	add	r3, r2
 8005010:	2200      	movs	r2, #0
 8005012:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		lt8722_set_output_voltage_channel(channel, 0);
		// Turn on Heater
		heater_set_duty_pwm_channel(channel, s_Temperature_CurrentState.Heater_duty[channel]);
		s_Temperature_CurrentState.mode[channel] = HEATING;
	}
	return;
 8005016:	e02b      	b.n	8005070 <temperature_manual_ctrl+0xb0>
	else if ((s_Temperature_CurrentState.TEC_HEATER_status & (1 << (channel + 4))) == (1 << (channel + 4)))
 8005018:	4b17      	ldr	r3, [pc, #92]	@ (8005078 <temperature_manual_ctrl+0xb8>)
 800501a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800501e:	4619      	mov	r1, r3
 8005020:	79fb      	ldrb	r3, [r7, #7]
 8005022:	3304      	adds	r3, #4
 8005024:	2201      	movs	r2, #1
 8005026:	fa02 f303 	lsl.w	r3, r2, r3
 800502a:	ea01 0203 	and.w	r2, r1, r3
 800502e:	79fb      	ldrb	r3, [r7, #7]
 8005030:	3304      	adds	r3, #4
 8005032:	2101      	movs	r1, #1
 8005034:	fa01 f303 	lsl.w	r3, r1, r3
 8005038:	429a      	cmp	r2, r3
 800503a:	d119      	bne.n	8005070 <temperature_manual_ctrl+0xb0>
		lt8722_set_output_voltage_channel(channel, 0);
 800503c:	79f9      	ldrb	r1, [r7, #7]
 800503e:	f04f 0200 	mov.w	r2, #0
 8005042:	f04f 0300 	mov.w	r3, #0
 8005046:	4608      	mov	r0, r1
 8005048:	f7fe f9c8 	bl	80033dc <lt8722_set_output_voltage_channel>
		heater_set_duty_pwm_channel(channel, s_Temperature_CurrentState.Heater_duty[channel]);
 800504c:	79fb      	ldrb	r3, [r7, #7]
 800504e:	4a0a      	ldr	r2, [pc, #40]	@ (8005078 <temperature_manual_ctrl+0xb8>)
 8005050:	3318      	adds	r3, #24
 8005052:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005056:	b29a      	uxth	r2, r3
 8005058:	79fb      	ldrb	r3, [r7, #7]
 800505a:	4611      	mov	r1, r2
 800505c:	4618      	mov	r0, r3
 800505e:	f7fd fdc3 	bl	8002be8 <heater_set_duty_pwm_channel>
		s_Temperature_CurrentState.mode[channel] = HEATING;
 8005062:	79fb      	ldrb	r3, [r7, #7]
 8005064:	4a04      	ldr	r2, [pc, #16]	@ (8005078 <temperature_manual_ctrl+0xb8>)
 8005066:	4413      	add	r3, r2
 8005068:	2201      	movs	r2, #1
 800506a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	return;
 800506e:	bf00      	nop
 8005070:	bf00      	nop
}
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	20000238 	.word	0x20000238

0800507c <temperature_init>:

void temperature_init(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
	lt8722_init();
 8005080:	f7fe f8b8 	bl	80031f4 <lt8722_init>
	return;
 8005084:	bf00      	nop
}
 8005086:	bd80      	pop	{r7, pc}

08005088 <temperature_create_task>:

void temperature_create_task(void)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_task_context.taskHandle, &s_task_context.taskProperty);
 800508c:	4902      	ldr	r1, [pc, #8]	@ (8005098 <temperature_create_task+0x10>)
 800508e:	4803      	ldr	r0, [pc, #12]	@ (800509c <temperature_create_task+0x14>)
 8005090:	f001 feb6 	bl	8006e00 <SCH_TASK_CreateTask>
	return;
 8005094:	bf00      	nop
}
 8005096:	bd80      	pop	{r7, pc}
 8005098:	20000220 	.word	0x20000220
 800509c:	2000021c 	.word	0x2000021c

080050a0 <temperature_set_setpoint>:

void temperature_set_setpoint(uint8_t channel, int16_t setpoint)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	4603      	mov	r3, r0
 80050a8:	460a      	mov	r2, r1
 80050aa:	71fb      	strb	r3, [r7, #7]
 80050ac:	4613      	mov	r3, r2
 80050ae:	80bb      	strh	r3, [r7, #4]
	s_Temperature_CurrentState.Temperature_setpoint[channel] = setpoint;
 80050b0:	79fb      	ldrb	r3, [r7, #7]
 80050b2:	4905      	ldr	r1, [pc, #20]	@ (80050c8 <temperature_set_setpoint+0x28>)
 80050b4:	88ba      	ldrh	r2, [r7, #4]
 80050b6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	return;
 80050ba:	bf00      	nop
}
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	20000238 	.word	0x20000238

080050cc <temperature_get_setpoint>:

int16_t temperature_get_setpoint(uint8_t channel)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	4603      	mov	r3, r0
 80050d4:	71fb      	strb	r3, [r7, #7]
	return s_Temperature_CurrentState.Temperature_setpoint[channel];
 80050d6:	79fb      	ldrb	r3, [r7, #7]
 80050d8:	4a04      	ldr	r2, [pc, #16]	@ (80050ec <temperature_get_setpoint+0x20>)
 80050da:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
}
 80050de:	4618      	mov	r0, r3
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	20000238 	.word	0x20000238

080050f0 <temperature_get_temp_NTC>:

int16_t temperature_get_temp_NTC(uint8_t channel)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	4603      	mov	r3, r0
 80050f8:	71fb      	strb	r3, [r7, #7]
	return s_Temperature_CurrentState.NTC_temperature[channel];
 80050fa:	79fb      	ldrb	r3, [r7, #7]
 80050fc:	4a04      	ldr	r2, [pc, #16]	@ (8005110 <temperature_get_temp_NTC+0x20>)
 80050fe:	331c      	adds	r3, #28
 8005100:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
}
 8005104:	4618      	mov	r0, r3
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	20000238 	.word	0x20000238

08005114 <temperature_set_tec_vol>:

void temperature_set_tec_vol(uint8_t channel, uint16_t voltage)
{
 8005114:	b490      	push	{r4, r7}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	4604      	mov	r4, r0
 800511c:	4608      	mov	r0, r1
 800511e:	4621      	mov	r1, r4
 8005120:	71f9      	strb	r1, [r7, #7]
 8005122:	4601      	mov	r1, r0
 8005124:	80b9      	strh	r1, [r7, #4]
	s_Temperature_CurrentState.Tec_voltage[channel] = voltage*1000000;
 8005126:	88b9      	ldrh	r1, [r7, #4]
 8005128:	4808      	ldr	r0, [pc, #32]	@ (800514c <temperature_set_tec_vol+0x38>)
 800512a:	fb00 f101 	mul.w	r1, r0, r1
 800512e:	79f8      	ldrb	r0, [r7, #7]
 8005130:	17cc      	asrs	r4, r1, #31
 8005132:	460a      	mov	r2, r1
 8005134:	4623      	mov	r3, r4
 8005136:	4c06      	ldr	r4, [pc, #24]	@ (8005150 <temperature_set_tec_vol+0x3c>)
 8005138:	1c81      	adds	r1, r0, #2
 800513a:	00c9      	lsls	r1, r1, #3
 800513c:	4421      	add	r1, r4
 800513e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005142:	bf00      	nop
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bc90      	pop	{r4, r7}
 800514a:	4770      	bx	lr
 800514c:	000f4240 	.word	0x000f4240
 8005150:	20000238 	.word	0x20000238

08005154 <temperature_get_tec_vol>:

uint16_t temperature_get_tec_vol(uint8_t channel)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	4603      	mov	r3, r0
 800515c:	71fb      	strb	r3, [r7, #7]
	return (s_Temperature_CurrentState.Tec_voltage[channel]/1000000);
 800515e:	79fb      	ldrb	r3, [r7, #7]
 8005160:	4a08      	ldr	r2, [pc, #32]	@ (8005184 <temperature_get_tec_vol+0x30>)
 8005162:	3302      	adds	r3, #2
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	4413      	add	r3, r2
 8005168:	e9d3 0100 	ldrd	r0, r1, [r3]
 800516c:	4a06      	ldr	r2, [pc, #24]	@ (8005188 <temperature_get_tec_vol+0x34>)
 800516e:	f04f 0300 	mov.w	r3, #0
 8005172:	f7fb f83b 	bl	80001ec <__aeabi_ldivmod>
 8005176:	4602      	mov	r2, r0
 8005178:	460b      	mov	r3, r1
 800517a:	b293      	uxth	r3, r2
}
 800517c:	4618      	mov	r0, r3
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	20000238 	.word	0x20000238
 8005188:	000f4240 	.word	0x000f4240

0800518c <temperature_set_heater_duty>:

void temperature_set_heater_duty(uint8_t channel, uint8_t duty)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	4603      	mov	r3, r0
 8005194:	460a      	mov	r2, r1
 8005196:	71fb      	strb	r3, [r7, #7]
 8005198:	4613      	mov	r3, r2
 800519a:	71bb      	strb	r3, [r7, #6]
	s_Temperature_CurrentState.Heater_duty[channel] = duty*9999/100;
 800519c:	79bb      	ldrb	r3, [r7, #6]
 800519e:	f242 720f 	movw	r2, #9999	@ 0x270f
 80051a2:	fb02 f303 	mul.w	r3, r2, r3
 80051a6:	4a09      	ldr	r2, [pc, #36]	@ (80051cc <temperature_set_heater_duty+0x40>)
 80051a8:	fb82 1203 	smull	r1, r2, r2, r3
 80051ac:	1152      	asrs	r2, r2, #5
 80051ae:	17db      	asrs	r3, r3, #31
 80051b0:	1ad2      	subs	r2, r2, r3
 80051b2:	79fb      	ldrb	r3, [r7, #7]
 80051b4:	b211      	sxth	r1, r2
 80051b6:	4a06      	ldr	r2, [pc, #24]	@ (80051d0 <temperature_set_heater_duty+0x44>)
 80051b8:	3318      	adds	r3, #24
 80051ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	51eb851f 	.word	0x51eb851f
 80051d0:	20000238 	.word	0x20000238

080051d4 <temperature_get_heater_duty>:
uint8_t temperature_get_heater_duty(uint8_t channel)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	4603      	mov	r3, r0
 80051dc:	71fb      	strb	r3, [r7, #7]
	return (s_Temperature_CurrentState.Heater_duty[channel]*100/9999);
 80051de:	79fb      	ldrb	r3, [r7, #7]
 80051e0:	4a0a      	ldr	r2, [pc, #40]	@ (800520c <temperature_get_heater_duty+0x38>)
 80051e2:	3318      	adds	r3, #24
 80051e4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80051e8:	461a      	mov	r2, r3
 80051ea:	2364      	movs	r3, #100	@ 0x64
 80051ec:	fb02 f303 	mul.w	r3, r2, r3
 80051f0:	4a07      	ldr	r2, [pc, #28]	@ (8005210 <temperature_get_heater_duty+0x3c>)
 80051f2:	fb82 1203 	smull	r1, r2, r2, r3
 80051f6:	1212      	asrs	r2, r2, #8
 80051f8:	17db      	asrs	r3, r3, #31
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	b2db      	uxtb	r3, r3
}
 80051fe:	4618      	mov	r0, r3
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	20000238 	.word	0x20000238
 8005210:	068de3af 	.word	0x068de3af

08005214 <temperature_set_auto_ctrl>:

void temperature_set_auto_ctrl(uint8_t auto_0, uint8_t auto_1, uint8_t auto_2, uint8_t auto_3)
{
 8005214:	b490      	push	{r4, r7}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	4604      	mov	r4, r0
 800521c:	4608      	mov	r0, r1
 800521e:	4611      	mov	r1, r2
 8005220:	461a      	mov	r2, r3
 8005222:	4623      	mov	r3, r4
 8005224:	71fb      	strb	r3, [r7, #7]
 8005226:	4603      	mov	r3, r0
 8005228:	71bb      	strb	r3, [r7, #6]
 800522a:	460b      	mov	r3, r1
 800522c:	717b      	strb	r3, [r7, #5]
 800522e:	4613      	mov	r3, r2
 8005230:	713b      	strb	r3, [r7, #4]
	s_Temperature_CurrentState.Temp_status |= (auto_0 << 1) | (auto_1 << 3) | (auto_2 << 5) | (auto_3 << 7);
 8005232:	4b10      	ldr	r3, [pc, #64]	@ (8005274 <temperature_set_auto_ctrl+0x60>)
 8005234:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005238:	b25a      	sxtb	r2, r3
 800523a:	79fb      	ldrb	r3, [r7, #7]
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	b259      	sxtb	r1, r3
 8005240:	79bb      	ldrb	r3, [r7, #6]
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	b25b      	sxtb	r3, r3
 8005246:	430b      	orrs	r3, r1
 8005248:	b259      	sxtb	r1, r3
 800524a:	797b      	ldrb	r3, [r7, #5]
 800524c:	015b      	lsls	r3, r3, #5
 800524e:	b25b      	sxtb	r3, r3
 8005250:	430b      	orrs	r3, r1
 8005252:	b259      	sxtb	r1, r3
 8005254:	793b      	ldrb	r3, [r7, #4]
 8005256:	01db      	lsls	r3, r3, #7
 8005258:	b25b      	sxtb	r3, r3
 800525a:	430b      	orrs	r3, r1
 800525c:	b25b      	sxtb	r3, r3
 800525e:	4313      	orrs	r3, r2
 8005260:	b25b      	sxtb	r3, r3
 8005262:	b2da      	uxtb	r2, r3
 8005264:	4b03      	ldr	r3, [pc, #12]	@ (8005274 <temperature_set_auto_ctrl+0x60>)
 8005266:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	return;
 800526a:	bf00      	nop
}
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bc90      	pop	{r4, r7}
 8005272:	4770      	bx	lr
 8005274:	20000238 	.word	0x20000238

08005278 <temperature_set_ctrl>:

void temperature_set_ctrl(mode_ctrl_temp_t mode_0, mode_ctrl_temp_t mode_1, mode_ctrl_temp_t mode_2, mode_ctrl_temp_t mode_3)
{
 8005278:	b490      	push	{r4, r7}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	4604      	mov	r4, r0
 8005280:	4608      	mov	r0, r1
 8005282:	4611      	mov	r1, r2
 8005284:	461a      	mov	r2, r3
 8005286:	4623      	mov	r3, r4
 8005288:	71fb      	strb	r3, [r7, #7]
 800528a:	4603      	mov	r3, r0
 800528c:	71bb      	strb	r3, [r7, #6]
 800528e:	460b      	mov	r3, r1
 8005290:	717b      	strb	r3, [r7, #5]
 8005292:	4613      	mov	r3, r2
 8005294:	713b      	strb	r3, [r7, #4]
	if (mode_0 == HEAT)
 8005296:	79fb      	ldrb	r3, [r7, #7]
 8005298:	2b02      	cmp	r3, #2
 800529a:	d112      	bne.n	80052c2 <temperature_set_ctrl+0x4a>
	{
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << TEC0_ON);
 800529c:	4b7c      	ldr	r3, [pc, #496]	@ (8005490 <temperature_set_ctrl+0x218>)
 800529e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80052a2:	f023 0301 	bic.w	r3, r3, #1
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	4b79      	ldr	r3, [pc, #484]	@ (8005490 <temperature_set_ctrl+0x218>)
 80052aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
		s_Temperature_CurrentState.TEC_HEATER_status |= (1 << HEATER0_ON);
 80052ae:	4b78      	ldr	r3, [pc, #480]	@ (8005490 <temperature_set_ctrl+0x218>)
 80052b0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80052b4:	f043 0310 	orr.w	r3, r3, #16
 80052b8:	b2da      	uxtb	r2, r3
 80052ba:	4b75      	ldr	r3, [pc, #468]	@ (8005490 <temperature_set_ctrl+0x218>)
 80052bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80052c0:	e027      	b.n	8005312 <temperature_set_ctrl+0x9a>
	}
	else if (mode_0 == COOL)
 80052c2:	79fb      	ldrb	r3, [r7, #7]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d112      	bne.n	80052ee <temperature_set_ctrl+0x76>
	{
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << HEATER0_ON);
 80052c8:	4b71      	ldr	r3, [pc, #452]	@ (8005490 <temperature_set_ctrl+0x218>)
 80052ca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80052ce:	f023 0310 	bic.w	r3, r3, #16
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	4b6e      	ldr	r3, [pc, #440]	@ (8005490 <temperature_set_ctrl+0x218>)
 80052d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
		s_Temperature_CurrentState.TEC_HEATER_status |= (1 << TEC0_ON);
 80052da:	4b6d      	ldr	r3, [pc, #436]	@ (8005490 <temperature_set_ctrl+0x218>)
 80052dc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80052e0:	f043 0301 	orr.w	r3, r3, #1
 80052e4:	b2da      	uxtb	r2, r3
 80052e6:	4b6a      	ldr	r3, [pc, #424]	@ (8005490 <temperature_set_ctrl+0x218>)
 80052e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80052ec:	e011      	b.n	8005312 <temperature_set_ctrl+0x9a>

	}
	else
	{
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << TEC0_ON);
 80052ee:	4b68      	ldr	r3, [pc, #416]	@ (8005490 <temperature_set_ctrl+0x218>)
 80052f0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80052f4:	f023 0301 	bic.w	r3, r3, #1
 80052f8:	b2da      	uxtb	r2, r3
 80052fa:	4b65      	ldr	r3, [pc, #404]	@ (8005490 <temperature_set_ctrl+0x218>)
 80052fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << HEATER0_ON);
 8005300:	4b63      	ldr	r3, [pc, #396]	@ (8005490 <temperature_set_ctrl+0x218>)
 8005302:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005306:	f023 0310 	bic.w	r3, r3, #16
 800530a:	b2da      	uxtb	r2, r3
 800530c:	4b60      	ldr	r3, [pc, #384]	@ (8005490 <temperature_set_ctrl+0x218>)
 800530e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	}
	if (mode_1 == HEAT)
 8005312:	79bb      	ldrb	r3, [r7, #6]
 8005314:	2b02      	cmp	r3, #2
 8005316:	d112      	bne.n	800533e <temperature_set_ctrl+0xc6>
	{
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << TEC1_ON);
 8005318:	4b5d      	ldr	r3, [pc, #372]	@ (8005490 <temperature_set_ctrl+0x218>)
 800531a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800531e:	f023 0302 	bic.w	r3, r3, #2
 8005322:	b2da      	uxtb	r2, r3
 8005324:	4b5a      	ldr	r3, [pc, #360]	@ (8005490 <temperature_set_ctrl+0x218>)
 8005326:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
		s_Temperature_CurrentState.TEC_HEATER_status |= (1 << HEATER1_ON);
 800532a:	4b59      	ldr	r3, [pc, #356]	@ (8005490 <temperature_set_ctrl+0x218>)
 800532c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005330:	f043 0320 	orr.w	r3, r3, #32
 8005334:	b2da      	uxtb	r2, r3
 8005336:	4b56      	ldr	r3, [pc, #344]	@ (8005490 <temperature_set_ctrl+0x218>)
 8005338:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800533c:	e027      	b.n	800538e <temperature_set_ctrl+0x116>
	}
	else if (mode_1 == COOL)
 800533e:	79bb      	ldrb	r3, [r7, #6]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d112      	bne.n	800536a <temperature_set_ctrl+0xf2>
	{
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << HEATER1_ON);
 8005344:	4b52      	ldr	r3, [pc, #328]	@ (8005490 <temperature_set_ctrl+0x218>)
 8005346:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800534a:	f023 0320 	bic.w	r3, r3, #32
 800534e:	b2da      	uxtb	r2, r3
 8005350:	4b4f      	ldr	r3, [pc, #316]	@ (8005490 <temperature_set_ctrl+0x218>)
 8005352:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
		s_Temperature_CurrentState.TEC_HEATER_status |= (1 << TEC1_ON);
 8005356:	4b4e      	ldr	r3, [pc, #312]	@ (8005490 <temperature_set_ctrl+0x218>)
 8005358:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800535c:	f043 0302 	orr.w	r3, r3, #2
 8005360:	b2da      	uxtb	r2, r3
 8005362:	4b4b      	ldr	r3, [pc, #300]	@ (8005490 <temperature_set_ctrl+0x218>)
 8005364:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005368:	e011      	b.n	800538e <temperature_set_ctrl+0x116>

	}
	else
	{
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << TEC1_ON);
 800536a:	4b49      	ldr	r3, [pc, #292]	@ (8005490 <temperature_set_ctrl+0x218>)
 800536c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005370:	f023 0302 	bic.w	r3, r3, #2
 8005374:	b2da      	uxtb	r2, r3
 8005376:	4b46      	ldr	r3, [pc, #280]	@ (8005490 <temperature_set_ctrl+0x218>)
 8005378:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << HEATER1_ON);
 800537c:	4b44      	ldr	r3, [pc, #272]	@ (8005490 <temperature_set_ctrl+0x218>)
 800537e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005382:	f023 0320 	bic.w	r3, r3, #32
 8005386:	b2da      	uxtb	r2, r3
 8005388:	4b41      	ldr	r3, [pc, #260]	@ (8005490 <temperature_set_ctrl+0x218>)
 800538a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	}
	if (mode_2 == HEAT)
 800538e:	797b      	ldrb	r3, [r7, #5]
 8005390:	2b02      	cmp	r3, #2
 8005392:	d112      	bne.n	80053ba <temperature_set_ctrl+0x142>
	{
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << TEC2_ON);
 8005394:	4b3e      	ldr	r3, [pc, #248]	@ (8005490 <temperature_set_ctrl+0x218>)
 8005396:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800539a:	f023 0304 	bic.w	r3, r3, #4
 800539e:	b2da      	uxtb	r2, r3
 80053a0:	4b3b      	ldr	r3, [pc, #236]	@ (8005490 <temperature_set_ctrl+0x218>)
 80053a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
		s_Temperature_CurrentState.TEC_HEATER_status |= (1 << HEATER2_ON);
 80053a6:	4b3a      	ldr	r3, [pc, #232]	@ (8005490 <temperature_set_ctrl+0x218>)
 80053a8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80053ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	4b37      	ldr	r3, [pc, #220]	@ (8005490 <temperature_set_ctrl+0x218>)
 80053b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053b8:	e027      	b.n	800540a <temperature_set_ctrl+0x192>
	}
	else if (mode_2 == COOL)
 80053ba:	797b      	ldrb	r3, [r7, #5]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d112      	bne.n	80053e6 <temperature_set_ctrl+0x16e>
	{
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << HEATER2_ON);
 80053c0:	4b33      	ldr	r3, [pc, #204]	@ (8005490 <temperature_set_ctrl+0x218>)
 80053c2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80053c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	4b30      	ldr	r3, [pc, #192]	@ (8005490 <temperature_set_ctrl+0x218>)
 80053ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
		s_Temperature_CurrentState.TEC_HEATER_status |= (1 << TEC2_ON);
 80053d2:	4b2f      	ldr	r3, [pc, #188]	@ (8005490 <temperature_set_ctrl+0x218>)
 80053d4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80053d8:	f043 0304 	orr.w	r3, r3, #4
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	4b2c      	ldr	r3, [pc, #176]	@ (8005490 <temperature_set_ctrl+0x218>)
 80053e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053e4:	e011      	b.n	800540a <temperature_set_ctrl+0x192>

	}
	else
	{
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << TEC2_ON);
 80053e6:	4b2a      	ldr	r3, [pc, #168]	@ (8005490 <temperature_set_ctrl+0x218>)
 80053e8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80053ec:	f023 0304 	bic.w	r3, r3, #4
 80053f0:	b2da      	uxtb	r2, r3
 80053f2:	4b27      	ldr	r3, [pc, #156]	@ (8005490 <temperature_set_ctrl+0x218>)
 80053f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << HEATER2_ON);
 80053f8:	4b25      	ldr	r3, [pc, #148]	@ (8005490 <temperature_set_ctrl+0x218>)
 80053fa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80053fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005402:	b2da      	uxtb	r2, r3
 8005404:	4b22      	ldr	r3, [pc, #136]	@ (8005490 <temperature_set_ctrl+0x218>)
 8005406:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	}
	if (mode_3 == HEAT)
 800540a:	793b      	ldrb	r3, [r7, #4]
 800540c:	2b02      	cmp	r3, #2
 800540e:	d112      	bne.n	8005436 <temperature_set_ctrl+0x1be>
	{
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << TEC3_ON);
 8005410:	4b1f      	ldr	r3, [pc, #124]	@ (8005490 <temperature_set_ctrl+0x218>)
 8005412:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005416:	f023 0308 	bic.w	r3, r3, #8
 800541a:	b2da      	uxtb	r2, r3
 800541c:	4b1c      	ldr	r3, [pc, #112]	@ (8005490 <temperature_set_ctrl+0x218>)
 800541e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
		s_Temperature_CurrentState.TEC_HEATER_status |= (1 << HEATER3_ON);
 8005422:	4b1b      	ldr	r3, [pc, #108]	@ (8005490 <temperature_set_ctrl+0x218>)
 8005424:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005428:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800542c:	b2da      	uxtb	r2, r3
 800542e:	4b18      	ldr	r3, [pc, #96]	@ (8005490 <temperature_set_ctrl+0x218>)
 8005430:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	else
	{
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << TEC3_ON);
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << HEATER3_ON);
	}
	return;
 8005434:	e028      	b.n	8005488 <temperature_set_ctrl+0x210>
	else if (mode_3 == COOL)
 8005436:	793b      	ldrb	r3, [r7, #4]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d112      	bne.n	8005462 <temperature_set_ctrl+0x1ea>
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << HEATER3_ON);
 800543c:	4b14      	ldr	r3, [pc, #80]	@ (8005490 <temperature_set_ctrl+0x218>)
 800543e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005442:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005446:	b2da      	uxtb	r2, r3
 8005448:	4b11      	ldr	r3, [pc, #68]	@ (8005490 <temperature_set_ctrl+0x218>)
 800544a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
		s_Temperature_CurrentState.TEC_HEATER_status |= (1 << TEC3_ON);
 800544e:	4b10      	ldr	r3, [pc, #64]	@ (8005490 <temperature_set_ctrl+0x218>)
 8005450:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005454:	f043 0308 	orr.w	r3, r3, #8
 8005458:	b2da      	uxtb	r2, r3
 800545a:	4b0d      	ldr	r3, [pc, #52]	@ (8005490 <temperature_set_ctrl+0x218>)
 800545c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	return;
 8005460:	e012      	b.n	8005488 <temperature_set_ctrl+0x210>
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << TEC3_ON);
 8005462:	4b0b      	ldr	r3, [pc, #44]	@ (8005490 <temperature_set_ctrl+0x218>)
 8005464:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005468:	f023 0308 	bic.w	r3, r3, #8
 800546c:	b2da      	uxtb	r2, r3
 800546e:	4b08      	ldr	r3, [pc, #32]	@ (8005490 <temperature_set_ctrl+0x218>)
 8005470:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << HEATER3_ON);
 8005474:	4b06      	ldr	r3, [pc, #24]	@ (8005490 <temperature_set_ctrl+0x218>)
 8005476:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800547a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800547e:	b2da      	uxtb	r2, r3
 8005480:	4b03      	ldr	r3, [pc, #12]	@ (8005490 <temperature_set_ctrl+0x218>)
 8005482:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	return;
 8005486:	bf00      	nop
}
 8005488:	3708      	adds	r7, #8
 800548a:	46bd      	mov	sp, r7
 800548c:	bc90      	pop	{r4, r7}
 800548e:	4770      	bx	lr
 8005490:	20000238 	.word	0x20000238

08005494 <LL_GPIO_SetOutputPin>:
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	619a      	str	r2, [r3, #24]
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <LL_GPIO_ResetOutputPin>:
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	041a      	lsls	r2, r3, #16
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	619a      	str	r2, [r3, #24]
}
 80054c2:	bf00      	nop
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
	...

080054d0 <WDT_init>:
		181
	}
};

void WDT_init(void)
{
 80054d0:	b480      	push	{r7}
 80054d2:	af00      	add	r7, sp, #0
	WDT_Current = 0;
 80054d4:	4b03      	ldr	r3, [pc, #12]	@ (80054e4 <WDT_init+0x14>)
 80054d6:	2200      	movs	r2, #0
 80054d8:	701a      	strb	r2, [r3, #0]
}
 80054da:	bf00      	nop
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr
 80054e4:	20000580 	.word	0x20000580

080054e8 <WDT_create_task>:

void WDT_create_task(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&wdt_task_context.taskHandle, &wdt_task_context.taskProperty);
 80054ec:	4902      	ldr	r1, [pc, #8]	@ (80054f8 <WDT_create_task+0x10>)
 80054ee:	4803      	ldr	r0, [pc, #12]	@ (80054fc <WDT_create_task+0x14>)
 80054f0:	f001 fc86 	bl	8006e00 <SCH_TASK_CreateTask>
}
 80054f4:	bf00      	nop
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	20000284 	.word	0x20000284
 80054fc:	20000280 	.word	0x20000280

08005500 <status_wdt_update>:

void status_wdt_update(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	af00      	add	r7, sp, #0
	if (WDT_Current)
 8005504:	4b14      	ldr	r3, [pc, #80]	@ (8005558 <status_wdt_update+0x58>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d012      	beq.n	8005532 <status_wdt_update+0x32>
	{
		if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 800550c:	2001      	movs	r0, #1
 800550e:	f001 fc61 	bl	8006dd4 <SCH_TIM_HasCompleted>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d01d      	beq.n	8005554 <status_wdt_update+0x54>
		{
			WDT_Current = 0;
 8005518:	4b0f      	ldr	r3, [pc, #60]	@ (8005558 <status_wdt_update+0x58>)
 800551a:	2200      	movs	r2, #0
 800551c:	701a      	strb	r2, [r3, #0]
			LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 800551e:	2102      	movs	r1, #2
 8005520:	480e      	ldr	r0, [pc, #56]	@ (800555c <status_wdt_update+0x5c>)
 8005522:	f7ff ffc5 	bl	80054b0 <LL_GPIO_ResetOutputPin>
			SCH_TIM_Start(SCH_TIM_WDT,LOW_PERIOD);	//restart
 8005526:	f44f 7116 	mov.w	r1, #600	@ 0x258
 800552a:	2001      	movs	r0, #1
 800552c:	f001 fc3c 	bl	8006da8 <SCH_TIM_Start>
			WDT_Current = 1;
			LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
			SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
		}
	}
}
 8005530:	e010      	b.n	8005554 <status_wdt_update+0x54>
		if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 8005532:	2001      	movs	r0, #1
 8005534:	f001 fc4e 	bl	8006dd4 <SCH_TIM_HasCompleted>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00a      	beq.n	8005554 <status_wdt_update+0x54>
			WDT_Current = 1;
 800553e:	4b06      	ldr	r3, [pc, #24]	@ (8005558 <status_wdt_update+0x58>)
 8005540:	2201      	movs	r2, #1
 8005542:	701a      	strb	r2, [r3, #0]
			LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 8005544:	2102      	movs	r1, #2
 8005546:	4805      	ldr	r0, [pc, #20]	@ (800555c <status_wdt_update+0x5c>)
 8005548:	f7ff ffa4 	bl	8005494 <LL_GPIO_SetOutputPin>
			SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
 800554c:	21c8      	movs	r1, #200	@ 0xc8
 800554e:	2001      	movs	r0, #1
 8005550:	f001 fc2a 	bl	8006da8 <SCH_TIM_Start>
}
 8005554:	bf00      	nop
 8005556:	bd80      	pop	{r7, pc}
 8005558:	20000580 	.word	0x20000580
 800555c:	40020000 	.word	0x40020000

08005560 <LL_ADC_REG_SetSequencerLength>:
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	431a      	orrs	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800557a:	bf00      	nop
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <LL_ADC_IsEnabled>:
{
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b01      	cmp	r3, #1
 8005598:	bf0c      	ite	eq
 800559a:	2301      	moveq	r3, #1
 800559c:	2300      	movne	r3, #0
 800559e:	b2db      	uxtb	r3, r3
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 80055ac:	b590      	push	{r4, r7, lr}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80055b6:	2300      	movs	r3, #0
 80055b8:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 80055ba:	481c      	ldr	r0, [pc, #112]	@ (800562c <LL_ADC_CommonInit+0x80>)
 80055bc:	f7ff ffe3 	bl	8005586 <LL_ADC_IsEnabled>
 80055c0:	4604      	mov	r4, r0
 80055c2:	481b      	ldr	r0, [pc, #108]	@ (8005630 <LL_ADC_CommonInit+0x84>)
 80055c4:	f7ff ffdf 	bl	8005586 <LL_ADC_IsEnabled>
 80055c8:	4603      	mov	r3, r0
 80055ca:	431c      	orrs	r4, r3
 80055cc:	4819      	ldr	r0, [pc, #100]	@ (8005634 <LL_ADC_CommonInit+0x88>)
 80055ce:	f7ff ffda 	bl	8005586 <LL_ADC_IsEnabled>
 80055d2:	4603      	mov	r3, r0
 80055d4:	4323      	orrs	r3, r4
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d120      	bne.n	800561c <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d012      	beq.n	8005608 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	4b14      	ldr	r3, [pc, #80]	@ (8005638 <LL_ADC_CommonInit+0x8c>)
 80055e8:	4013      	ands	r3, r2
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	6811      	ldr	r1, [r2, #0]
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	6852      	ldr	r2, [r2, #4]
 80055f2:	4311      	orrs	r1, r2
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	6892      	ldr	r2, [r2, #8]
 80055f8:	4311      	orrs	r1, r2
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	68d2      	ldr	r2, [r2, #12]
 80055fe:	430a      	orrs	r2, r1
 8005600:	431a      	orrs	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	605a      	str	r2, [r3, #4]
 8005606:	e00b      	b.n	8005620 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	4b0a      	ldr	r3, [pc, #40]	@ (8005638 <LL_ADC_CommonInit+0x8c>)
 800560e:	4013      	ands	r3, r2
 8005610:	683a      	ldr	r2, [r7, #0]
 8005612:	6812      	ldr	r2, [r2, #0]
 8005614:	431a      	orrs	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	605a      	str	r2, [r3, #4]
 800561a:	e001      	b.n	8005620 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005620:	7bfb      	ldrb	r3, [r7, #15]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	bd90      	pop	{r4, r7, pc}
 800562a:	bf00      	nop
 800562c:	40012000 	.word	0x40012000
 8005630:	40012100 	.word	0x40012100
 8005634:	40012200 	.word	0x40012200
 8005638:	fffc10e0 	.word	0xfffc10e0

0800563c <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8005646:	2300      	movs	r3, #0
 8005648:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7ff ff9b 	bl	8005586 <LL_ADC_IsEnabled>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d117      	bne.n	8005686 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 800565e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	6811      	ldr	r1, [r2, #0]
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	6892      	ldr	r2, [r2, #8]
 800566a:	430a      	orrs	r2, r1
 800566c:	431a      	orrs	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	605a      	str	r2, [r3, #4]
               ,
               ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );

    MODIFY_REG(ADCx->CR2,
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	431a      	orrs	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	609a      	str	r2, [r3, #8]
 8005684:	e001      	b.n	800568a <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800568a:	7bfb      	ldrb	r3, [r7, #15]
}
 800568c:	4618      	mov	r0, r3
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800569e:	2300      	movs	r3, #0
 80056a0:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7ff ff6f 	bl	8005586 <LL_ADC_IsEnabled>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d12b      	bne.n	8005706 <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d009      	beq.n	80056ca <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	431a      	orrs	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	605a      	str	r2, [r3, #4]
 80056c8:	e005      	b.n	80056d6 <LL_ADC_REG_Init+0x42>
                 ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	605a      	str	r2, [r3, #4]
                 ,
                 LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }

    MODIFY_REG(ADCx->CR2,
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689a      	ldr	r2, [r3, #8]
 80056da:	4b0e      	ldr	r3, [pc, #56]	@ (8005714 <LL_ADC_REG_Init+0x80>)
 80056dc:	4013      	ands	r3, r2
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	6812      	ldr	r2, [r2, #0]
 80056e2:	f002 6170 	and.w	r1, r2, #251658240	@ 0xf000000
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	68d2      	ldr	r2, [r2, #12]
 80056ea:	4311      	orrs	r1, r2
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	6912      	ldr	r2, [r2, #16]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	431a      	orrs	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	4619      	mov	r1, r3
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f7ff ff2e 	bl	8005560 <LL_ADC_REG_SetSequencerLength>
 8005704:	e001      	b.n	800570a <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800570a:	7bfb      	ldrb	r3, [r7, #15]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	c0fffcfd 	.word	0xc0fffcfd

08005718 <LL_GPIO_SetPinMode>:
{
 8005718:	b480      	push	{r7}
 800571a:	b08b      	sub	sp, #44	@ 0x2c
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	fa93 f3a3 	rbit	r3, r3
 8005732:	613b      	str	r3, [r7, #16]
  return result;
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800573e:	2320      	movs	r3, #32
 8005740:	e003      	b.n	800574a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	fab3 f383 	clz	r3, r3
 8005748:	b2db      	uxtb	r3, r3
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	2103      	movs	r1, #3
 800574e:	fa01 f303 	lsl.w	r3, r1, r3
 8005752:	43db      	mvns	r3, r3
 8005754:	401a      	ands	r2, r3
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	fa93 f3a3 	rbit	r3, r3
 8005760:	61fb      	str	r3, [r7, #28]
  return result;
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800576c:	2320      	movs	r3, #32
 800576e:	e003      	b.n	8005778 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8005770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005772:	fab3 f383 	clz	r3, r3
 8005776:	b2db      	uxtb	r3, r3
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	6879      	ldr	r1, [r7, #4]
 800577c:	fa01 f303 	lsl.w	r3, r1, r3
 8005780:	431a      	orrs	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	601a      	str	r2, [r3, #0]
}
 8005786:	bf00      	nop
 8005788:	372c      	adds	r7, #44	@ 0x2c
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <LL_GPIO_SetPinOutputType>:
{
 8005792:	b480      	push	{r7}
 8005794:	b085      	sub	sp, #20
 8005796:	af00      	add	r7, sp, #0
 8005798:	60f8      	str	r0, [r7, #12]
 800579a:	60b9      	str	r1, [r7, #8]
 800579c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	43db      	mvns	r3, r3
 80057a6:	401a      	ands	r2, r3
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	6879      	ldr	r1, [r7, #4]
 80057ac:	fb01 f303 	mul.w	r3, r1, r3
 80057b0:	431a      	orrs	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	605a      	str	r2, [r3, #4]
}
 80057b6:	bf00      	nop
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <LL_GPIO_SetPinSpeed>:
{
 80057c2:	b480      	push	{r7}
 80057c4:	b08b      	sub	sp, #44	@ 0x2c
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	60f8      	str	r0, [r7, #12]
 80057ca:	60b9      	str	r1, [r7, #8]
 80057cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	689a      	ldr	r2, [r3, #8]
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	fa93 f3a3 	rbit	r3, r3
 80057dc:	613b      	str	r3, [r7, #16]
  return result;
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d101      	bne.n	80057ec <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80057e8:	2320      	movs	r3, #32
 80057ea:	e003      	b.n	80057f4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	fab3 f383 	clz	r3, r3
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	005b      	lsls	r3, r3, #1
 80057f6:	2103      	movs	r1, #3
 80057f8:	fa01 f303 	lsl.w	r3, r1, r3
 80057fc:	43db      	mvns	r3, r3
 80057fe:	401a      	ands	r2, r3
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	fa93 f3a3 	rbit	r3, r3
 800580a:	61fb      	str	r3, [r7, #28]
  return result;
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005816:	2320      	movs	r3, #32
 8005818:	e003      	b.n	8005822 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800581a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581c:	fab3 f383 	clz	r3, r3
 8005820:	b2db      	uxtb	r3, r3
 8005822:	005b      	lsls	r3, r3, #1
 8005824:	6879      	ldr	r1, [r7, #4]
 8005826:	fa01 f303 	lsl.w	r3, r1, r3
 800582a:	431a      	orrs	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	609a      	str	r2, [r3, #8]
}
 8005830:	bf00      	nop
 8005832:	372c      	adds	r7, #44	@ 0x2c
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <LL_GPIO_SetPinPull>:
{
 800583c:	b480      	push	{r7}
 800583e:	b08b      	sub	sp, #44	@ 0x2c
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	68da      	ldr	r2, [r3, #12]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	fa93 f3a3 	rbit	r3, r3
 8005856:	613b      	str	r3, [r7, #16]
  return result;
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8005862:	2320      	movs	r3, #32
 8005864:	e003      	b.n	800586e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	fab3 f383 	clz	r3, r3
 800586c:	b2db      	uxtb	r3, r3
 800586e:	005b      	lsls	r3, r3, #1
 8005870:	2103      	movs	r1, #3
 8005872:	fa01 f303 	lsl.w	r3, r1, r3
 8005876:	43db      	mvns	r3, r3
 8005878:	401a      	ands	r2, r3
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800587e:	6a3b      	ldr	r3, [r7, #32]
 8005880:	fa93 f3a3 	rbit	r3, r3
 8005884:	61fb      	str	r3, [r7, #28]
  return result;
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800588a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005890:	2320      	movs	r3, #32
 8005892:	e003      	b.n	800589c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8005894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005896:	fab3 f383 	clz	r3, r3
 800589a:	b2db      	uxtb	r3, r3
 800589c:	005b      	lsls	r3, r3, #1
 800589e:	6879      	ldr	r1, [r7, #4]
 80058a0:	fa01 f303 	lsl.w	r3, r1, r3
 80058a4:	431a      	orrs	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	60da      	str	r2, [r3, #12]
}
 80058aa:	bf00      	nop
 80058ac:	372c      	adds	r7, #44	@ 0x2c
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <LL_GPIO_SetAFPin_0_7>:
{
 80058b6:	b480      	push	{r7}
 80058b8:	b08b      	sub	sp, #44	@ 0x2c
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	60f8      	str	r0, [r7, #12]
 80058be:	60b9      	str	r1, [r7, #8]
 80058c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6a1a      	ldr	r2, [r3, #32]
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	fa93 f3a3 	rbit	r3, r3
 80058d0:	613b      	str	r3, [r7, #16]
  return result;
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80058dc:	2320      	movs	r3, #32
 80058de:	e003      	b.n	80058e8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	fab3 f383 	clz	r3, r3
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	210f      	movs	r1, #15
 80058ec:	fa01 f303 	lsl.w	r3, r1, r3
 80058f0:	43db      	mvns	r3, r3
 80058f2:	401a      	ands	r2, r3
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058f8:	6a3b      	ldr	r3, [r7, #32]
 80058fa:	fa93 f3a3 	rbit	r3, r3
 80058fe:	61fb      	str	r3, [r7, #28]
  return result;
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800590a:	2320      	movs	r3, #32
 800590c:	e003      	b.n	8005916 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800590e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005910:	fab3 f383 	clz	r3, r3
 8005914:	b2db      	uxtb	r3, r3
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	6879      	ldr	r1, [r7, #4]
 800591a:	fa01 f303 	lsl.w	r3, r1, r3
 800591e:	431a      	orrs	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	621a      	str	r2, [r3, #32]
}
 8005924:	bf00      	nop
 8005926:	372c      	adds	r7, #44	@ 0x2c
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <LL_GPIO_SetAFPin_8_15>:
{
 8005930:	b480      	push	{r7}
 8005932:	b08b      	sub	sp, #44	@ 0x2c
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	0a1b      	lsrs	r3, r3, #8
 8005944:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	fa93 f3a3 	rbit	r3, r3
 800594c:	613b      	str	r3, [r7, #16]
  return result;
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d101      	bne.n	800595c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005958:	2320      	movs	r3, #32
 800595a:	e003      	b.n	8005964 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	fab3 f383 	clz	r3, r3
 8005962:	b2db      	uxtb	r3, r3
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	210f      	movs	r1, #15
 8005968:	fa01 f303 	lsl.w	r3, r1, r3
 800596c:	43db      	mvns	r3, r3
 800596e:	401a      	ands	r2, r3
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	0a1b      	lsrs	r3, r3, #8
 8005974:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	fa93 f3a3 	rbit	r3, r3
 800597c:	61fb      	str	r3, [r7, #28]
  return result;
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005984:	2b00      	cmp	r3, #0
 8005986:	d101      	bne.n	800598c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005988:	2320      	movs	r3, #32
 800598a:	e003      	b.n	8005994 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800598c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598e:	fab3 f383 	clz	r3, r3
 8005992:	b2db      	uxtb	r3, r3
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	6879      	ldr	r1, [r7, #4]
 8005998:	fa01 f303 	lsl.w	r3, r1, r3
 800599c:	431a      	orrs	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80059a2:	bf00      	nop
 80059a4:	372c      	adds	r7, #44	@ 0x2c
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b08a      	sub	sp, #40	@ 0x28
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80059b8:	2300      	movs	r3, #0
 80059ba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 80059bc:	2300      	movs	r3, #0
 80059be:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	fa93 f3a3 	rbit	r3, r3
 80059cc:	617b      	str	r3, [r7, #20]
  return result;
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d101      	bne.n	80059dc <LL_GPIO_Init+0x2e>
    return 32U;
 80059d8:	2320      	movs	r3, #32
 80059da:	e003      	b.n	80059e4 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	fab3 f383 	clz	r3, r3
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80059e6:	e057      	b.n	8005a98 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	2101      	movs	r1, #1
 80059ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f0:	fa01 f303 	lsl.w	r3, r1, r3
 80059f4:	4013      	ands	r3, r2
 80059f6:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 80059f8:	6a3b      	ldr	r3, [r7, #32]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d049      	beq.n	8005a92 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d003      	beq.n	8005a0e <LL_GPIO_Init+0x60>
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d10d      	bne.n	8005a2a <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	461a      	mov	r2, r3
 8005a14:	6a39      	ldr	r1, [r7, #32]
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7ff fed3 	bl	80057c2 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	461a      	mov	r2, r3
 8005a22:	6a39      	ldr	r1, [r7, #32]
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f7ff feb4 	bl	8005792 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	6a39      	ldr	r1, [r7, #32]
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7ff ff02 	bl	800583c <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d121      	bne.n	8005a84 <LL_GPIO_Init+0xd6>
 8005a40:	6a3b      	ldr	r3, [r7, #32]
 8005a42:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	fa93 f3a3 	rbit	r3, r3
 8005a4a:	60bb      	str	r3, [r7, #8]
  return result;
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <LL_GPIO_Init+0xac>
    return 32U;
 8005a56:	2320      	movs	r3, #32
 8005a58:	e003      	b.n	8005a62 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	fab3 f383 	clz	r3, r3
 8005a60:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8005a62:	2b07      	cmp	r3, #7
 8005a64:	d807      	bhi.n	8005a76 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	6a39      	ldr	r1, [r7, #32]
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f7ff ff21 	bl	80058b6 <LL_GPIO_SetAFPin_0_7>
 8005a74:	e006      	b.n	8005a84 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	6a39      	ldr	r1, [r7, #32]
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f7ff ff56 	bl	8005930 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	461a      	mov	r2, r3
 8005a8a:	6a39      	ldr	r1, [r7, #32]
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f7ff fe43 	bl	8005718 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a94:	3301      	adds	r3, #1
 8005a96:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1a0      	bne.n	80059e8 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3728      	adds	r7, #40	@ 0x28
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <LL_I2C_Enable>:
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f043 0201 	orr.w	r2, r3, #1
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	601a      	str	r2, [r3, #0]
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <LL_I2C_Disable>:
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f023 0201 	bic.w	r2, r3, #1
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	601a      	str	r2, [r3, #0]
}
 8005ae4:	bf00      	nop
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <LL_I2C_SetOwnAddress1>:
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005b04:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005b08:	68b9      	ldr	r1, [r7, #8]
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	609a      	str	r2, [r3, #8]
}
 8005b14:	bf00      	nop
 8005b16:	3714      	adds	r7, #20
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b087      	sub	sp, #28
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
 8005b2c:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 8005b32:	2300      	movs	r3, #0
 8005b34:	617b      	str	r3, [r7, #20]

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	4a42      	ldr	r2, [pc, #264]	@ (8005c44 <LL_I2C_ConfigSpeed+0x124>)
 8005b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b3e:	0c9b      	lsrs	r3, r3, #18
 8005b40:	613b      	str	r3, [r7, #16]

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	493a      	ldr	r1, [pc, #232]	@ (8005c48 <LL_I2C_ConfigSpeed+0x128>)
 8005b5e:	428b      	cmp	r3, r1
 8005b60:	d802      	bhi.n	8005b68 <LL_I2C_ConfigSpeed+0x48>
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	3301      	adds	r3, #1
 8005b66:	e009      	b.n	8005b7c <LL_I2C_ConfigSpeed+0x5c>
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8005b6e:	fb01 f303 	mul.w	r3, r1, r3
 8005b72:	4936      	ldr	r1, [pc, #216]	@ (8005c4c <LL_I2C_ConfigSpeed+0x12c>)
 8005b74:	fba1 1303 	umull	r1, r3, r1, r3
 8005b78:	099b      	lsrs	r3, r3, #6
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a30      	ldr	r2, [pc, #192]	@ (8005c48 <LL_I2C_ConfigSpeed+0x128>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d939      	bls.n	8005bfe <LL_I2C_ConfigSpeed+0xde>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d117      	bne.n	8005bc0 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	4613      	mov	r3, r2
 8005b94:	005b      	lsls	r3, r3, #1
 8005b96:	4413      	add	r3, r2
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d009      	beq.n	8005bba <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	005b      	lsls	r3, r3, #1
 8005bac:	4413      	add	r3, r2
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8005bb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bb8:	e01d      	b.n	8005bf6 <LL_I2C_ConfigSpeed+0xd6>
 8005bba:	f248 0301 	movw	r3, #32769	@ 0x8001
 8005bbe:	e01a      	b.n	8005bf6 <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4413      	add	r3, r2
 8005bc8:	009a      	lsls	r2, r3, #2
 8005bca:	4413      	add	r3, r2
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00b      	beq.n	8005bf2 <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4413      	add	r3, r2
 8005be2:	009a      	lsls	r2, r3, #2
 8005be4:	4413      	add	r3, r2
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8005bec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bf0:	e001      	b.n	8005bf6 <LL_I2C_ConfigSpeed+0xd6>
 8005bf2:	f248 0301 	movw	r3, #32769	@ 0x8001
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	617b      	str	r3, [r7, #20]
 8005bfc:	e011      	b.n	8005c22 <LL_I2C_ConfigSpeed+0x102>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	005b      	lsls	r3, r3, #1
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c08:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005c0c:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d005      	beq.n	8005c1e <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c1c:	e000      	b.n	8005c20 <LL_I2C_ConfigSpeed+0x100>
 8005c1e:	2304      	movs	r3, #4
 8005c20:	617b      	str	r3, [r7, #20]
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	f423 434f 	bic.w	r3, r3, #52992	@ 0xcf00
 8005c2a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	431a      	orrs	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	61da      	str	r2, [r3, #28]
}
 8005c36:	bf00      	nop
 8005c38:	371c      	adds	r7, #28
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	431bde83 	.word	0x431bde83
 8005c48:	000186a0 	.word	0x000186a0
 8005c4c:	10624dd3 	.word	0x10624dd3

08005c50 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f023 021a 	bic.w	r2, r3, #26
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	431a      	orrs	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	601a      	str	r2, [r3, #0]
}
 8005c6a:	bf00      	nop
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8005c76:	b480      	push	{r7}
 8005c78:	b083      	sub	sp, #12
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
 8005c7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	601a      	str	r2, [r3, #0]
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f7ff ff12 	bl	8005ad0 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005cac:	f107 0308 	add.w	r3, r7, #8
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 f895 	bl	8005de0 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8005cb6:	6939      	ldr	r1, [r7, #16]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f7ff ff2d 	bl	8005b20 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	68d9      	ldr	r1, [r3, #12]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	461a      	mov	r2, r3
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f7ff ff0d 	bl	8005af0 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4619      	mov	r1, r3
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f7ff ffb7 	bl	8005c50 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f7ff fee4 	bl	8005ab0 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	4619      	mov	r1, r3
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7ff ffc1 	bl	8005c76 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3718      	adds	r7, #24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
	...

08005d00 <LL_RCC_GetSysClkSource>:
{
 8005d00:	b480      	push	{r7}
 8005d02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005d04:	4b04      	ldr	r3, [pc, #16]	@ (8005d18 <LL_RCC_GetSysClkSource+0x18>)
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f003 030c 	and.w	r3, r3, #12
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	40023800 	.word	0x40023800

08005d1c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005d20:	4b04      	ldr	r3, [pc, #16]	@ (8005d34 <LL_RCC_GetAHBPrescaler+0x18>)
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	40023800 	.word	0x40023800

08005d38 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005d3c:	4b04      	ldr	r3, [pc, #16]	@ (8005d50 <LL_RCC_GetAPB1Prescaler+0x18>)
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	40023800 	.word	0x40023800

08005d54 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8005d54:	b480      	push	{r7}
 8005d56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005d58:	4b04      	ldr	r3, [pc, #16]	@ (8005d6c <LL_RCC_GetAPB2Prescaler+0x18>)
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	40023800 	.word	0x40023800

08005d70 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005d70:	b480      	push	{r7}
 8005d72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005d74:	4b04      	ldr	r3, [pc, #16]	@ (8005d88 <LL_RCC_PLL_GetMainSource+0x18>)
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	40023800 	.word	0x40023800

08005d8c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005d90:	4b04      	ldr	r3, [pc, #16]	@ (8005da4 <LL_RCC_PLL_GetN+0x18>)
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	099b      	lsrs	r3, r3, #6
 8005d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr
 8005da4:	40023800 	.word	0x40023800

08005da8 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8005da8:	b480      	push	{r7}
 8005daa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8005dac:	4b04      	ldr	r3, [pc, #16]	@ (8005dc0 <LL_RCC_PLL_GetP+0x18>)
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	40023800 	.word	0x40023800

08005dc4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005dc8:	4b04      	ldr	r3, [pc, #16]	@ (8005ddc <LL_RCC_PLL_GetDivider+0x18>)
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	40023800 	.word	0x40023800

08005de0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8005de8:	f000 f820 	bl	8005e2c <RCC_GetSystemClockFreq>
 8005dec:	4602      	mov	r2, r0
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 f840 	bl	8005e7c <RCC_GetHCLKClockFreq>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 f84e 	bl	8005ea8 <RCC_GetPCLK1ClockFreq>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 f85a 	bl	8005ed0 <RCC_GetPCLK2ClockFreq>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	60da      	str	r2, [r3, #12]
}
 8005e22:	bf00      	nop
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
	...

08005e2c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8005e32:	2300      	movs	r3, #0
 8005e34:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005e36:	f7ff ff63 	bl	8005d00 <LL_RCC_GetSysClkSource>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b08      	cmp	r3, #8
 8005e3e:	d00c      	beq.n	8005e5a <RCC_GetSystemClockFreq+0x2e>
 8005e40:	2b08      	cmp	r3, #8
 8005e42:	d80f      	bhi.n	8005e64 <RCC_GetSystemClockFreq+0x38>
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d002      	beq.n	8005e4e <RCC_GetSystemClockFreq+0x22>
 8005e48:	2b04      	cmp	r3, #4
 8005e4a:	d003      	beq.n	8005e54 <RCC_GetSystemClockFreq+0x28>
 8005e4c:	e00a      	b.n	8005e64 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005e4e:	4b09      	ldr	r3, [pc, #36]	@ (8005e74 <RCC_GetSystemClockFreq+0x48>)
 8005e50:	607b      	str	r3, [r7, #4]
      break;
 8005e52:	e00a      	b.n	8005e6a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8005e54:	4b08      	ldr	r3, [pc, #32]	@ (8005e78 <RCC_GetSystemClockFreq+0x4c>)
 8005e56:	607b      	str	r3, [r7, #4]
      break;
 8005e58:	e007      	b.n	8005e6a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8005e5a:	2008      	movs	r0, #8
 8005e5c:	f000 f84c 	bl	8005ef8 <RCC_PLL_GetFreqDomain_SYS>
 8005e60:	6078      	str	r0, [r7, #4]
      break;
 8005e62:	e002      	b.n	8005e6a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8005e64:	4b03      	ldr	r3, [pc, #12]	@ (8005e74 <RCC_GetSystemClockFreq+0x48>)
 8005e66:	607b      	str	r3, [r7, #4]
      break;
 8005e68:	bf00      	nop
  }

  return frequency;
 8005e6a:	687b      	ldr	r3, [r7, #4]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3708      	adds	r7, #8
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	00f42400 	.word	0x00f42400
 8005e78:	007a1200 	.word	0x007a1200

08005e7c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005e84:	f7ff ff4a 	bl	8005d1c <LL_RCC_GetAHBPrescaler>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	091b      	lsrs	r3, r3, #4
 8005e8c:	f003 030f 	and.w	r3, r3, #15
 8005e90:	4a04      	ldr	r2, [pc, #16]	@ (8005ea4 <RCC_GetHCLKClockFreq+0x28>)
 8005e92:	5cd3      	ldrb	r3, [r2, r3]
 8005e94:	461a      	mov	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	40d3      	lsrs	r3, r2
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3708      	adds	r7, #8
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	08007f88 	.word	0x08007f88

08005ea8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005eb0:	f7ff ff42 	bl	8005d38 <LL_RCC_GetAPB1Prescaler>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	0a9b      	lsrs	r3, r3, #10
 8005eb8:	4a04      	ldr	r2, [pc, #16]	@ (8005ecc <RCC_GetPCLK1ClockFreq+0x24>)
 8005eba:	5cd3      	ldrb	r3, [r2, r3]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	40d3      	lsrs	r3, r2
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	08007f98 	.word	0x08007f98

08005ed0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005ed8:	f7ff ff3c 	bl	8005d54 <LL_RCC_GetAPB2Prescaler>
 8005edc:	4603      	mov	r3, r0
 8005ede:	0b5b      	lsrs	r3, r3, #13
 8005ee0:	4a04      	ldr	r2, [pc, #16]	@ (8005ef4 <RCC_GetPCLK2ClockFreq+0x24>)
 8005ee2:	5cd3      	ldrb	r3, [r2, r3]
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	40d3      	lsrs	r3, r2
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	08007f98 	.word	0x08007f98

08005ef8 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8005ef8:	b590      	push	{r4, r7, lr}
 8005efa:	b087      	sub	sp, #28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8005f04:	2300      	movs	r3, #0
 8005f06:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005f0c:	f7ff ff30 	bl	8005d70 <LL_RCC_PLL_GetMainSource>
 8005f10:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d004      	beq.n	8005f22 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f1e:	d003      	beq.n	8005f28 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8005f20:	e005      	b.n	8005f2e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005f22:	4b12      	ldr	r3, [pc, #72]	@ (8005f6c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8005f24:	617b      	str	r3, [r7, #20]
      break;
 8005f26:	e005      	b.n	8005f34 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8005f28:	4b11      	ldr	r3, [pc, #68]	@ (8005f70 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8005f2a:	617b      	str	r3, [r7, #20]
      break;
 8005f2c:	e002      	b.n	8005f34 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8005f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8005f6c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8005f30:	617b      	str	r3, [r7, #20]
      break;
 8005f32:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b08      	cmp	r3, #8
 8005f38:	d113      	bne.n	8005f62 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005f3a:	f7ff ff43 	bl	8005dc4 <LL_RCC_PLL_GetDivider>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	fbb3 f4f2 	udiv	r4, r3, r2
 8005f46:	f7ff ff21 	bl	8005d8c <LL_RCC_PLL_GetN>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	fb03 f404 	mul.w	r4, r3, r4
 8005f50:	f7ff ff2a 	bl	8005da8 <LL_RCC_PLL_GetP>
 8005f54:	4603      	mov	r3, r0
 8005f56:	0c1b      	lsrs	r3, r3, #16
 8005f58:	3301      	adds	r3, #1
 8005f5a:	005b      	lsls	r3, r3, #1
 8005f5c:	fbb4 f3f3 	udiv	r3, r4, r3
 8005f60:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8005f62:	693b      	ldr	r3, [r7, #16]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	371c      	adds	r7, #28
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd90      	pop	{r4, r7, pc}
 8005f6c:	00f42400 	.word	0x00f42400
 8005f70:	007a1200 	.word	0x007a1200

08005f74 <LL_SPI_IsEnabled>:
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f84:	2b40      	cmp	r3, #64	@ 0x40
 8005f86:	d101      	bne.n	8005f8c <LL_SPI_IsEnabled+0x18>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e000      	b.n	8005f8e <LL_SPI_IsEnabled+0x1a>
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <LL_SPI_SetCRCPolynomial>:
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b083      	sub	sp, #12
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
 8005fa2:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	461a      	mov	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	611a      	str	r2, [r3, #16]
}
 8005fae:	bf00      	nop
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b084      	sub	sp, #16
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
 8005fc2:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7ff ffd3 	bl	8005f74 <LL_SPI_IsEnabled>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d139      	bne.n	8006048 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005fdc:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	6811      	ldr	r1, [r2, #0]
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	6852      	ldr	r2, [r2, #4]
 8005fe8:	4311      	orrs	r1, r2
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	6892      	ldr	r2, [r2, #8]
 8005fee:	4311      	orrs	r1, r2
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	68d2      	ldr	r2, [r2, #12]
 8005ff4:	4311      	orrs	r1, r2
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	6912      	ldr	r2, [r2, #16]
 8005ffa:	4311      	orrs	r1, r2
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	6952      	ldr	r2, [r2, #20]
 8006000:	4311      	orrs	r1, r2
 8006002:	683a      	ldr	r2, [r7, #0]
 8006004:	6992      	ldr	r2, [r2, #24]
 8006006:	4311      	orrs	r1, r2
 8006008:	683a      	ldr	r2, [r7, #0]
 800600a:	69d2      	ldr	r2, [r2, #28]
 800600c:	4311      	orrs	r1, r2
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	6a12      	ldr	r2, [r2, #32]
 8006012:	430a      	orrs	r2, r1
 8006014:	431a      	orrs	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f023 0204 	bic.w	r2, r3, #4
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	0c1b      	lsrs	r3, r3, #16
 8006028:	431a      	orrs	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006036:	d105      	bne.n	8006044 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800603c:	4619      	mov	r1, r3
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7ff ffab 	bl	8005f9a <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8006044:	2300      	movs	r3, #0
 8006046:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	61da      	str	r2, [r3, #28]
  return status;
 8006054:	7bfb      	ldrb	r3, [r7, #15]
}
 8006056:	4618      	mov	r0, r3
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <LL_TIM_SetPrescaler>:
{
 800605e:	b480      	push	{r7}
 8006060:	b083      	sub	sp, #12
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
 8006066:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800606e:	bf00      	nop
 8006070:	370c      	adds	r7, #12
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <LL_TIM_SetAutoReload>:
{
 800607a:	b480      	push	{r7}
 800607c:	b083      	sub	sp, #12
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
 8006082:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800608a:	bf00      	nop
 800608c:	370c      	adds	r7, #12
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <LL_TIM_SetRepetitionCounter>:
{
 8006096:	b480      	push	{r7}
 8006098:	b083      	sub	sp, #12
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
 800609e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80060a6:	bf00      	nop
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <LL_TIM_OC_SetCompareCH1>:
{
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
 80060ba:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80060c2:	bf00      	nop
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <LL_TIM_OC_SetCompareCH2>:
{
 80060ce:	b480      	push	{r7}
 80060d0:	b083      	sub	sp, #12
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
 80060d6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80060de:	bf00      	nop
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <LL_TIM_OC_SetCompareCH3>:
{
 80060ea:	b480      	push	{r7}
 80060ec:	b083      	sub	sp, #12
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80060fa:	bf00      	nop
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr

08006106 <LL_TIM_OC_SetCompareCH4>:
{
 8006106:	b480      	push	{r7}
 8006108:	b083      	sub	sp, #12
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
 800610e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	683a      	ldr	r2, [r7, #0]
 8006114:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8006116:	bf00      	nop
 8006118:	370c      	adds	r7, #12
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8006122:	b480      	push	{r7}
 8006124:	b083      	sub	sp, #12
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	f043 0201 	orr.w	r2, r3, #1
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	615a      	str	r2, [r3, #20]
}
 8006136:	bf00      	nop
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
	...

08006144 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a3d      	ldr	r2, [pc, #244]	@ (800624c <LL_TIM_Init+0x108>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d013      	beq.n	8006184 <LL_TIM_Init+0x40>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006162:	d00f      	beq.n	8006184 <LL_TIM_Init+0x40>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a3a      	ldr	r2, [pc, #232]	@ (8006250 <LL_TIM_Init+0x10c>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d00b      	beq.n	8006184 <LL_TIM_Init+0x40>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a39      	ldr	r2, [pc, #228]	@ (8006254 <LL_TIM_Init+0x110>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d007      	beq.n	8006184 <LL_TIM_Init+0x40>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a38      	ldr	r2, [pc, #224]	@ (8006258 <LL_TIM_Init+0x114>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d003      	beq.n	8006184 <LL_TIM_Init+0x40>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a37      	ldr	r2, [pc, #220]	@ (800625c <LL_TIM_Init+0x118>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d106      	bne.n	8006192 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	4313      	orrs	r3, r2
 8006190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a2d      	ldr	r2, [pc, #180]	@ (800624c <LL_TIM_Init+0x108>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d02b      	beq.n	80061f2 <LL_TIM_Init+0xae>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061a0:	d027      	beq.n	80061f2 <LL_TIM_Init+0xae>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a2a      	ldr	r2, [pc, #168]	@ (8006250 <LL_TIM_Init+0x10c>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d023      	beq.n	80061f2 <LL_TIM_Init+0xae>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a29      	ldr	r2, [pc, #164]	@ (8006254 <LL_TIM_Init+0x110>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d01f      	beq.n	80061f2 <LL_TIM_Init+0xae>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a28      	ldr	r2, [pc, #160]	@ (8006258 <LL_TIM_Init+0x114>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d01b      	beq.n	80061f2 <LL_TIM_Init+0xae>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a27      	ldr	r2, [pc, #156]	@ (800625c <LL_TIM_Init+0x118>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d017      	beq.n	80061f2 <LL_TIM_Init+0xae>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a26      	ldr	r2, [pc, #152]	@ (8006260 <LL_TIM_Init+0x11c>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d013      	beq.n	80061f2 <LL_TIM_Init+0xae>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a25      	ldr	r2, [pc, #148]	@ (8006264 <LL_TIM_Init+0x120>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d00f      	beq.n	80061f2 <LL_TIM_Init+0xae>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a24      	ldr	r2, [pc, #144]	@ (8006268 <LL_TIM_Init+0x124>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d00b      	beq.n	80061f2 <LL_TIM_Init+0xae>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a23      	ldr	r2, [pc, #140]	@ (800626c <LL_TIM_Init+0x128>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d007      	beq.n	80061f2 <LL_TIM_Init+0xae>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a22      	ldr	r2, [pc, #136]	@ (8006270 <LL_TIM_Init+0x12c>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d003      	beq.n	80061f2 <LL_TIM_Init+0xae>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a21      	ldr	r2, [pc, #132]	@ (8006274 <LL_TIM_Init+0x130>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d106      	bne.n	8006200 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	4619      	mov	r1, r3
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f7ff ff34 	bl	800607a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	881b      	ldrh	r3, [r3, #0]
 8006216:	4619      	mov	r1, r3
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f7ff ff20 	bl	800605e <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a0a      	ldr	r2, [pc, #40]	@ (800624c <LL_TIM_Init+0x108>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d003      	beq.n	800622e <LL_TIM_Init+0xea>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a0c      	ldr	r2, [pc, #48]	@ (800625c <LL_TIM_Init+0x118>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d105      	bne.n	800623a <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	4619      	mov	r1, r3
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f7ff ff2e 	bl	8006096 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f7ff ff71 	bl	8006122 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	40010000 	.word	0x40010000
 8006250:	40000400 	.word	0x40000400
 8006254:	40000800 	.word	0x40000800
 8006258:	40000c00 	.word	0x40000c00
 800625c:	40010400 	.word	0x40010400
 8006260:	40014000 	.word	0x40014000
 8006264:	40014400 	.word	0x40014400
 8006268:	40014800 	.word	0x40014800
 800626c:	40001800 	.word	0x40001800
 8006270:	40001c00 	.word	0x40001c00
 8006274:	40002000 	.word	0x40002000

08006278 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800628e:	d027      	beq.n	80062e0 <LL_TIM_OC_Init+0x68>
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006296:	d82a      	bhi.n	80062ee <LL_TIM_OC_Init+0x76>
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800629e:	d018      	beq.n	80062d2 <LL_TIM_OC_Init+0x5a>
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062a6:	d822      	bhi.n	80062ee <LL_TIM_OC_Init+0x76>
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d003      	beq.n	80062b6 <LL_TIM_OC_Init+0x3e>
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	2b10      	cmp	r3, #16
 80062b2:	d007      	beq.n	80062c4 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80062b4:	e01b      	b.n	80062ee <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80062b6:	6879      	ldr	r1, [r7, #4]
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f000 f861 	bl	8006380 <OC1Config>
 80062be:	4603      	mov	r3, r0
 80062c0:	75fb      	strb	r3, [r7, #23]
      break;
 80062c2:	e015      	b.n	80062f0 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80062c4:	6879      	ldr	r1, [r7, #4]
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f000 f8c6 	bl	8006458 <OC2Config>
 80062cc:	4603      	mov	r3, r0
 80062ce:	75fb      	strb	r3, [r7, #23]
      break;
 80062d0:	e00e      	b.n	80062f0 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80062d2:	6879      	ldr	r1, [r7, #4]
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f000 f92f 	bl	8006538 <OC3Config>
 80062da:	4603      	mov	r3, r0
 80062dc:	75fb      	strb	r3, [r7, #23]
      break;
 80062de:	e007      	b.n	80062f0 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80062e0:	6879      	ldr	r1, [r7, #4]
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f000 f998 	bl	8006618 <OC4Config>
 80062e8:	4603      	mov	r3, r0
 80062ea:	75fb      	strb	r3, [r7, #23]
      break;
 80062ec:	e000      	b.n	80062f0 <LL_TIM_OC_Init+0x78>
      break;
 80062ee:	bf00      	nop
  }

  return result;
 80062f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3718      	adds	r7, #24
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, const LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b085      	sub	sp, #20
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
 8006302:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8006304:	2300      	movs	r3, #0
 8006306:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800630e:	683a      	ldr	r2, [r7, #0]
 8006310:	7b12      	ldrb	r2, [r2, #12]
 8006312:	4313      	orrs	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	4313      	orrs	r3, r2
 8006322:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	4313      	orrs	r3, r2
 8006330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4313      	orrs	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	89d2      	ldrh	r2, [r2, #14]
 800634a:	4313      	orrs	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	4313      	orrs	r3, r2
 800635a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	645a      	str	r2, [r3, #68]	@ 0x44

  return SUCCESS;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
	...

08006380 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	f023 0201 	bic.w	r2, r3, #1
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f023 0303 	bic.w	r3, r3, #3
 80063ae:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f023 0202 	bic.w	r2, r3, #2
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	f023 0201 	bic.w	r2, r3, #1
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a1c      	ldr	r2, [pc, #112]	@ (8006450 <OC1Config+0xd0>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d003      	beq.n	80063ea <OC1Config+0x6a>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a1b      	ldr	r2, [pc, #108]	@ (8006454 <OC1Config+0xd4>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d11e      	bne.n	8006428 <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f023 0208 	bic.w	r2, r3, #8
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4313      	orrs	r3, r2
 80063f8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f023 0204 	bic.w	r2, r3, #4
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	4313      	orrs	r3, r2
 8006408:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	4313      	orrs	r3, r2
 8006416:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	69db      	ldr	r3, [r3, #28]
 8006422:	005b      	lsls	r3, r3, #1
 8006424:	4313      	orrs	r3, r2
 8006426:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	4619      	mov	r1, r3
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f7ff fe39 	bl	80060b2 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3718      	adds	r7, #24
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	40010000 	.word	0x40010000
 8006454:	40010400 	.word	0x40010400

08006458 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	f023 0210 	bic.w	r2, r3, #16
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006486:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	021b      	lsls	r3, r3, #8
 8006494:	4313      	orrs	r3, r2
 8006496:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	f023 0220 	bic.w	r2, r3, #32
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	011b      	lsls	r3, r3, #4
 80064a4:	4313      	orrs	r3, r2
 80064a6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f023 0210 	bic.w	r2, r3, #16
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	011b      	lsls	r3, r3, #4
 80064b4:	4313      	orrs	r3, r2
 80064b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a1d      	ldr	r2, [pc, #116]	@ (8006530 <OC2Config+0xd8>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d003      	beq.n	80064c8 <OC2Config+0x70>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a1c      	ldr	r2, [pc, #112]	@ (8006534 <OC2Config+0xdc>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d11f      	bne.n	8006508 <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	019b      	lsls	r3, r3, #6
 80064d4:	4313      	orrs	r3, r2
 80064d6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	019b      	lsls	r3, r3, #6
 80064e4:	4313      	orrs	r3, r2
 80064e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	4313      	orrs	r3, r2
 80064f6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	00db      	lsls	r3, r3, #3
 8006504:	4313      	orrs	r3, r2
 8006506:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	4619      	mov	r1, r3
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7ff fdd7 	bl	80060ce <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3718      	adds	r7, #24
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	40010000 	.word	0x40010000
 8006534:	40010400 	.word	0x40010400

08006538 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b086      	sub	sp, #24
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	69db      	ldr	r3, [r3, #28]
 800655e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f023 0303 	bic.w	r3, r3, #3
 8006566:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4313      	orrs	r3, r2
 8006574:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	021b      	lsls	r3, r3, #8
 8006582:	4313      	orrs	r3, r2
 8006584:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	021b      	lsls	r3, r3, #8
 8006592:	4313      	orrs	r3, r2
 8006594:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a1d      	ldr	r2, [pc, #116]	@ (8006610 <OC3Config+0xd8>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d003      	beq.n	80065a6 <OC3Config+0x6e>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a1c      	ldr	r2, [pc, #112]	@ (8006614 <OC3Config+0xdc>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d11f      	bne.n	80065e6 <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	029b      	lsls	r3, r3, #10
 80065b2:	4313      	orrs	r3, r2
 80065b4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	029b      	lsls	r3, r3, #10
 80065c2:	4313      	orrs	r3, r2
 80065c4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	699b      	ldr	r3, [r3, #24]
 80065d0:	011b      	lsls	r3, r3, #4
 80065d2:	4313      	orrs	r3, r2
 80065d4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	69db      	ldr	r3, [r3, #28]
 80065e0:	015b      	lsls	r3, r3, #5
 80065e2:	4313      	orrs	r3, r2
 80065e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	4619      	mov	r1, r3
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f7ff fd76 	bl	80060ea <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3718      	adds	r7, #24
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	40010000 	.word	0x40010000
 8006614:	40010400 	.word	0x40010400

08006618 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	69db      	ldr	r3, [r3, #28]
 800663e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006646:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	021b      	lsls	r3, r3, #8
 8006654:	4313      	orrs	r3, r2
 8006656:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	031b      	lsls	r3, r3, #12
 8006664:	4313      	orrs	r3, r2
 8006666:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	031b      	lsls	r3, r3, #12
 8006674:	4313      	orrs	r3, r2
 8006676:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a11      	ldr	r2, [pc, #68]	@ (80066c0 <OC4Config+0xa8>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d003      	beq.n	8006688 <OC4Config+0x70>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a10      	ldr	r2, [pc, #64]	@ (80066c4 <OC4Config+0xac>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d107      	bne.n	8006698 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	019b      	lsls	r3, r3, #6
 8006694:	4313      	orrs	r3, r2
 8006696:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	4619      	mov	r1, r3
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f7ff fd2b 	bl	8006106 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	693a      	ldr	r2, [r7, #16]
 80066b4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3718      	adds	r7, #24
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	40010000 	.word	0x40010000
 80066c4:	40010400 	.word	0x40010400

080066c8 <LL_USART_IsEnabled>:
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066dc:	bf0c      	ite	eq
 80066de:	2301      	moveq	r3, #1
 80066e0:	2300      	movne	r3, #0
 80066e2:	b2db      	uxtb	r3, r3
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <LL_USART_SetStopBitsLength>:
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	431a      	orrs	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	611a      	str	r2, [r3, #16]
}
 800670a:	bf00      	nop
 800670c:	370c      	adds	r7, #12
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <LL_USART_SetHWFlowCtrl>:
{
 8006716:	b480      	push	{r7}
 8006718:	b083      	sub	sp, #12
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
 800671e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	695b      	ldr	r3, [r3, #20]
 8006724:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	431a      	orrs	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	615a      	str	r2, [r3, #20]
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <LL_USART_SetBaudRate>:
{
 800673c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006740:	b0c0      	sub	sp, #256	@ 0x100
 8006742:	af00      	add	r7, sp, #0
 8006744:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006748:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 800674c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8006750:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8006754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006758:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800675c:	f040 810c 	bne.w	8006978 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8006760:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006764:	2200      	movs	r2, #0
 8006766:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800676a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800676e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006772:	4622      	mov	r2, r4
 8006774:	462b      	mov	r3, r5
 8006776:	1891      	adds	r1, r2, r2
 8006778:	6639      	str	r1, [r7, #96]	@ 0x60
 800677a:	415b      	adcs	r3, r3
 800677c:	667b      	str	r3, [r7, #100]	@ 0x64
 800677e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8006782:	4621      	mov	r1, r4
 8006784:	eb12 0801 	adds.w	r8, r2, r1
 8006788:	4629      	mov	r1, r5
 800678a:	eb43 0901 	adc.w	r9, r3, r1
 800678e:	f04f 0200 	mov.w	r2, #0
 8006792:	f04f 0300 	mov.w	r3, #0
 8006796:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800679a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800679e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067a2:	4690      	mov	r8, r2
 80067a4:	4699      	mov	r9, r3
 80067a6:	4623      	mov	r3, r4
 80067a8:	eb18 0303 	adds.w	r3, r8, r3
 80067ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80067b0:	462b      	mov	r3, r5
 80067b2:	eb49 0303 	adc.w	r3, r9, r3
 80067b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80067ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80067be:	2200      	movs	r2, #0
 80067c0:	469a      	mov	sl, r3
 80067c2:	4693      	mov	fp, r2
 80067c4:	eb1a 030a 	adds.w	r3, sl, sl
 80067c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80067ca:	eb4b 030b 	adc.w	r3, fp, fp
 80067ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067d0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80067d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80067d8:	f7f9 fd58 	bl	800028c <__aeabi_uldivmod>
 80067dc:	4602      	mov	r2, r0
 80067de:	460b      	mov	r3, r1
 80067e0:	4b64      	ldr	r3, [pc, #400]	@ (8006974 <LL_USART_SetBaudRate+0x238>)
 80067e2:	fba3 2302 	umull	r2, r3, r3, r2
 80067e6:	095b      	lsrs	r3, r3, #5
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	011b      	lsls	r3, r3, #4
 80067ec:	b29c      	uxth	r4, r3
 80067ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80067f2:	2200      	movs	r2, #0
 80067f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80067f8:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80067fc:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8006800:	4642      	mov	r2, r8
 8006802:	464b      	mov	r3, r9
 8006804:	1891      	adds	r1, r2, r2
 8006806:	6539      	str	r1, [r7, #80]	@ 0x50
 8006808:	415b      	adcs	r3, r3
 800680a:	657b      	str	r3, [r7, #84]	@ 0x54
 800680c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006810:	4641      	mov	r1, r8
 8006812:	1851      	adds	r1, r2, r1
 8006814:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006816:	4649      	mov	r1, r9
 8006818:	414b      	adcs	r3, r1
 800681a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800681c:	f04f 0200 	mov.w	r2, #0
 8006820:	f04f 0300 	mov.w	r3, #0
 8006824:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8006828:	4659      	mov	r1, fp
 800682a:	00cb      	lsls	r3, r1, #3
 800682c:	4651      	mov	r1, sl
 800682e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006832:	4651      	mov	r1, sl
 8006834:	00ca      	lsls	r2, r1, #3
 8006836:	4610      	mov	r0, r2
 8006838:	4619      	mov	r1, r3
 800683a:	4603      	mov	r3, r0
 800683c:	4642      	mov	r2, r8
 800683e:	189b      	adds	r3, r3, r2
 8006840:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006844:	464b      	mov	r3, r9
 8006846:	460a      	mov	r2, r1
 8006848:	eb42 0303 	adc.w	r3, r2, r3
 800684c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006850:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006854:	2200      	movs	r2, #0
 8006856:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800685a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800685e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006862:	460b      	mov	r3, r1
 8006864:	18db      	adds	r3, r3, r3
 8006866:	643b      	str	r3, [r7, #64]	@ 0x40
 8006868:	4613      	mov	r3, r2
 800686a:	eb42 0303 	adc.w	r3, r2, r3
 800686e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006870:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006874:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8006878:	f7f9 fd08 	bl	800028c <__aeabi_uldivmod>
 800687c:	4602      	mov	r2, r0
 800687e:	460b      	mov	r3, r1
 8006880:	4611      	mov	r1, r2
 8006882:	4b3c      	ldr	r3, [pc, #240]	@ (8006974 <LL_USART_SetBaudRate+0x238>)
 8006884:	fba3 2301 	umull	r2, r3, r3, r1
 8006888:	095b      	lsrs	r3, r3, #5
 800688a:	2264      	movs	r2, #100	@ 0x64
 800688c:	fb02 f303 	mul.w	r3, r2, r3
 8006890:	1acb      	subs	r3, r1, r3
 8006892:	00db      	lsls	r3, r3, #3
 8006894:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006898:	4b36      	ldr	r3, [pc, #216]	@ (8006974 <LL_USART_SetBaudRate+0x238>)
 800689a:	fba3 2302 	umull	r2, r3, r3, r2
 800689e:	095b      	lsrs	r3, r3, #5
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	005b      	lsls	r3, r3, #1
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	4423      	add	r3, r4
 80068ae:	b29c      	uxth	r4, r3
 80068b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80068b4:	2200      	movs	r2, #0
 80068b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80068ba:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80068be:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 80068c2:	4642      	mov	r2, r8
 80068c4:	464b      	mov	r3, r9
 80068c6:	1891      	adds	r1, r2, r2
 80068c8:	63b9      	str	r1, [r7, #56]	@ 0x38
 80068ca:	415b      	adcs	r3, r3
 80068cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068ce:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80068d2:	4641      	mov	r1, r8
 80068d4:	1851      	adds	r1, r2, r1
 80068d6:	6339      	str	r1, [r7, #48]	@ 0x30
 80068d8:	4649      	mov	r1, r9
 80068da:	414b      	adcs	r3, r1
 80068dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80068de:	f04f 0200 	mov.w	r2, #0
 80068e2:	f04f 0300 	mov.w	r3, #0
 80068e6:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80068ea:	4659      	mov	r1, fp
 80068ec:	00cb      	lsls	r3, r1, #3
 80068ee:	4651      	mov	r1, sl
 80068f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068f4:	4651      	mov	r1, sl
 80068f6:	00ca      	lsls	r2, r1, #3
 80068f8:	4610      	mov	r0, r2
 80068fa:	4619      	mov	r1, r3
 80068fc:	4603      	mov	r3, r0
 80068fe:	4642      	mov	r2, r8
 8006900:	189b      	adds	r3, r3, r2
 8006902:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006906:	464b      	mov	r3, r9
 8006908:	460a      	mov	r2, r1
 800690a:	eb42 0303 	adc.w	r3, r2, r3
 800690e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006912:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006916:	2200      	movs	r2, #0
 8006918:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800691c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8006920:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006924:	460b      	mov	r3, r1
 8006926:	18db      	adds	r3, r3, r3
 8006928:	62bb      	str	r3, [r7, #40]	@ 0x28
 800692a:	4613      	mov	r3, r2
 800692c:	eb42 0303 	adc.w	r3, r2, r3
 8006930:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006932:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006936:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800693a:	f7f9 fca7 	bl	800028c <__aeabi_uldivmod>
 800693e:	4602      	mov	r2, r0
 8006940:	460b      	mov	r3, r1
 8006942:	4b0c      	ldr	r3, [pc, #48]	@ (8006974 <LL_USART_SetBaudRate+0x238>)
 8006944:	fba3 1302 	umull	r1, r3, r3, r2
 8006948:	095b      	lsrs	r3, r3, #5
 800694a:	2164      	movs	r1, #100	@ 0x64
 800694c:	fb01 f303 	mul.w	r3, r1, r3
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	00db      	lsls	r3, r3, #3
 8006954:	3332      	adds	r3, #50	@ 0x32
 8006956:	4a07      	ldr	r2, [pc, #28]	@ (8006974 <LL_USART_SetBaudRate+0x238>)
 8006958:	fba2 2303 	umull	r2, r3, r2, r3
 800695c:	095b      	lsrs	r3, r3, #5
 800695e:	b29b      	uxth	r3, r3
 8006960:	f003 0307 	and.w	r3, r3, #7
 8006964:	b29b      	uxth	r3, r3
 8006966:	4423      	add	r3, r4
 8006968:	b29b      	uxth	r3, r3
 800696a:	461a      	mov	r2, r3
 800696c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006970:	609a      	str	r2, [r3, #8]
}
 8006972:	e108      	b.n	8006b86 <LL_USART_SetBaudRate+0x44a>
 8006974:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8006978:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800697c:	2200      	movs	r2, #0
 800697e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006982:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006986:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800698a:	4642      	mov	r2, r8
 800698c:	464b      	mov	r3, r9
 800698e:	1891      	adds	r1, r2, r2
 8006990:	6239      	str	r1, [r7, #32]
 8006992:	415b      	adcs	r3, r3
 8006994:	627b      	str	r3, [r7, #36]	@ 0x24
 8006996:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800699a:	4641      	mov	r1, r8
 800699c:	1854      	adds	r4, r2, r1
 800699e:	4649      	mov	r1, r9
 80069a0:	eb43 0501 	adc.w	r5, r3, r1
 80069a4:	f04f 0200 	mov.w	r2, #0
 80069a8:	f04f 0300 	mov.w	r3, #0
 80069ac:	00eb      	lsls	r3, r5, #3
 80069ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069b2:	00e2      	lsls	r2, r4, #3
 80069b4:	4614      	mov	r4, r2
 80069b6:	461d      	mov	r5, r3
 80069b8:	4643      	mov	r3, r8
 80069ba:	18e3      	adds	r3, r4, r3
 80069bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80069c0:	464b      	mov	r3, r9
 80069c2:	eb45 0303 	adc.w	r3, r5, r3
 80069c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80069ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80069ce:	2200      	movs	r2, #0
 80069d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80069d4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80069d8:	f04f 0200 	mov.w	r2, #0
 80069dc:	f04f 0300 	mov.w	r3, #0
 80069e0:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80069e4:	4629      	mov	r1, r5
 80069e6:	008b      	lsls	r3, r1, #2
 80069e8:	4621      	mov	r1, r4
 80069ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069ee:	4621      	mov	r1, r4
 80069f0:	008a      	lsls	r2, r1, #2
 80069f2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80069f6:	f7f9 fc49 	bl	800028c <__aeabi_uldivmod>
 80069fa:	4602      	mov	r2, r0
 80069fc:	460b      	mov	r3, r1
 80069fe:	4b65      	ldr	r3, [pc, #404]	@ (8006b94 <LL_USART_SetBaudRate+0x458>)
 8006a00:	fba3 2302 	umull	r2, r3, r3, r2
 8006a04:	095b      	lsrs	r3, r3, #5
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	011b      	lsls	r3, r3, #4
 8006a0a:	b29c      	uxth	r4, r3
 8006a0c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006a10:	2200      	movs	r2, #0
 8006a12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006a16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006a1a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8006a1e:	4642      	mov	r2, r8
 8006a20:	464b      	mov	r3, r9
 8006a22:	1891      	adds	r1, r2, r2
 8006a24:	61b9      	str	r1, [r7, #24]
 8006a26:	415b      	adcs	r3, r3
 8006a28:	61fb      	str	r3, [r7, #28]
 8006a2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a2e:	4641      	mov	r1, r8
 8006a30:	1851      	adds	r1, r2, r1
 8006a32:	6139      	str	r1, [r7, #16]
 8006a34:	4649      	mov	r1, r9
 8006a36:	414b      	adcs	r3, r1
 8006a38:	617b      	str	r3, [r7, #20]
 8006a3a:	f04f 0200 	mov.w	r2, #0
 8006a3e:	f04f 0300 	mov.w	r3, #0
 8006a42:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a46:	4659      	mov	r1, fp
 8006a48:	00cb      	lsls	r3, r1, #3
 8006a4a:	4651      	mov	r1, sl
 8006a4c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a50:	4651      	mov	r1, sl
 8006a52:	00ca      	lsls	r2, r1, #3
 8006a54:	4610      	mov	r0, r2
 8006a56:	4619      	mov	r1, r3
 8006a58:	4603      	mov	r3, r0
 8006a5a:	4642      	mov	r2, r8
 8006a5c:	189b      	adds	r3, r3, r2
 8006a5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006a62:	464b      	mov	r3, r9
 8006a64:	460a      	mov	r2, r1
 8006a66:	eb42 0303 	adc.w	r3, r2, r3
 8006a6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006a6e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006a72:	2200      	movs	r2, #0
 8006a74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a78:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006a7c:	f04f 0200 	mov.w	r2, #0
 8006a80:	f04f 0300 	mov.w	r3, #0
 8006a84:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8006a88:	4649      	mov	r1, r9
 8006a8a:	008b      	lsls	r3, r1, #2
 8006a8c:	4641      	mov	r1, r8
 8006a8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a92:	4641      	mov	r1, r8
 8006a94:	008a      	lsls	r2, r1, #2
 8006a96:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8006a9a:	f7f9 fbf7 	bl	800028c <__aeabi_uldivmod>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	4611      	mov	r1, r2
 8006aa4:	4b3b      	ldr	r3, [pc, #236]	@ (8006b94 <LL_USART_SetBaudRate+0x458>)
 8006aa6:	fba3 2301 	umull	r2, r3, r3, r1
 8006aaa:	095b      	lsrs	r3, r3, #5
 8006aac:	2264      	movs	r2, #100	@ 0x64
 8006aae:	fb02 f303 	mul.w	r3, r2, r3
 8006ab2:	1acb      	subs	r3, r1, r3
 8006ab4:	011b      	lsls	r3, r3, #4
 8006ab6:	3332      	adds	r3, #50	@ 0x32
 8006ab8:	4a36      	ldr	r2, [pc, #216]	@ (8006b94 <LL_USART_SetBaudRate+0x458>)
 8006aba:	fba2 2303 	umull	r2, r3, r2, r3
 8006abe:	095b      	lsrs	r3, r3, #5
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	4423      	add	r3, r4
 8006aca:	b29c      	uxth	r4, r3
 8006acc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ad4:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006ad6:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006ada:	4642      	mov	r2, r8
 8006adc:	464b      	mov	r3, r9
 8006ade:	1891      	adds	r1, r2, r2
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	415b      	adcs	r3, r3
 8006ae4:	60fb      	str	r3, [r7, #12]
 8006ae6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006aea:	4641      	mov	r1, r8
 8006aec:	1851      	adds	r1, r2, r1
 8006aee:	6039      	str	r1, [r7, #0]
 8006af0:	4649      	mov	r1, r9
 8006af2:	414b      	adcs	r3, r1
 8006af4:	607b      	str	r3, [r7, #4]
 8006af6:	f04f 0200 	mov.w	r2, #0
 8006afa:	f04f 0300 	mov.w	r3, #0
 8006afe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006b02:	4659      	mov	r1, fp
 8006b04:	00cb      	lsls	r3, r1, #3
 8006b06:	4651      	mov	r1, sl
 8006b08:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b0c:	4651      	mov	r1, sl
 8006b0e:	00ca      	lsls	r2, r1, #3
 8006b10:	4610      	mov	r0, r2
 8006b12:	4619      	mov	r1, r3
 8006b14:	4603      	mov	r3, r0
 8006b16:	4642      	mov	r2, r8
 8006b18:	189b      	adds	r3, r3, r2
 8006b1a:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b1c:	464b      	mov	r3, r9
 8006b1e:	460a      	mov	r2, r1
 8006b20:	eb42 0303 	adc.w	r3, r2, r3
 8006b24:	677b      	str	r3, [r7, #116]	@ 0x74
 8006b26:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006b30:	f04f 0200 	mov.w	r2, #0
 8006b34:	f04f 0300 	mov.w	r3, #0
 8006b38:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8006b3c:	4649      	mov	r1, r9
 8006b3e:	008b      	lsls	r3, r1, #2
 8006b40:	4641      	mov	r1, r8
 8006b42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b46:	4641      	mov	r1, r8
 8006b48:	008a      	lsls	r2, r1, #2
 8006b4a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8006b4e:	f7f9 fb9d 	bl	800028c <__aeabi_uldivmod>
 8006b52:	4602      	mov	r2, r0
 8006b54:	460b      	mov	r3, r1
 8006b56:	4b0f      	ldr	r3, [pc, #60]	@ (8006b94 <LL_USART_SetBaudRate+0x458>)
 8006b58:	fba3 1302 	umull	r1, r3, r3, r2
 8006b5c:	095b      	lsrs	r3, r3, #5
 8006b5e:	2164      	movs	r1, #100	@ 0x64
 8006b60:	fb01 f303 	mul.w	r3, r1, r3
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	011b      	lsls	r3, r3, #4
 8006b68:	3332      	adds	r3, #50	@ 0x32
 8006b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8006b94 <LL_USART_SetBaudRate+0x458>)
 8006b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b70:	095b      	lsrs	r3, r3, #5
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	f003 030f 	and.w	r3, r3, #15
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	4423      	add	r3, r4
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	461a      	mov	r2, r3
 8006b80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b84:	609a      	str	r2, [r3, #8]
}
 8006b86:	bf00      	nop
 8006b88:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b92:	bf00      	nop
 8006b94:	51eb851f 	.word	0x51eb851f

08006b98 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b088      	sub	sp, #32
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f7ff fd8c 	bl	80066c8 <LL_USART_IsEnabled>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d15e      	bne.n	8006c74 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8006bbe:	f023 030c 	bic.w	r3, r3, #12
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	6851      	ldr	r1, [r2, #4]
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	68d2      	ldr	r2, [r2, #12]
 8006bca:	4311      	orrs	r1, r2
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	6912      	ldr	r2, [r2, #16]
 8006bd0:	4311      	orrs	r1, r2
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	6992      	ldr	r2, [r2, #24]
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	431a      	orrs	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	4619      	mov	r1, r3
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f7ff fd83 	bl	80066f0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	4619      	mov	r1, r3
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f7ff fd90 	bl	8006716 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8006bf6:	f107 0308 	add.w	r3, r7, #8
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7ff f8f0 	bl	8005de0 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a1f      	ldr	r2, [pc, #124]	@ (8006c80 <LL_USART_Init+0xe8>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d102      	bne.n	8006c0e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	61bb      	str	r3, [r7, #24]
 8006c0c:	e021      	b.n	8006c52 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a1c      	ldr	r2, [pc, #112]	@ (8006c84 <LL_USART_Init+0xec>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d102      	bne.n	8006c1c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	61bb      	str	r3, [r7, #24]
 8006c1a:	e01a      	b.n	8006c52 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a1a      	ldr	r2, [pc, #104]	@ (8006c88 <LL_USART_Init+0xf0>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d102      	bne.n	8006c2a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	61bb      	str	r3, [r7, #24]
 8006c28:	e013      	b.n	8006c52 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a17      	ldr	r2, [pc, #92]	@ (8006c8c <LL_USART_Init+0xf4>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d102      	bne.n	8006c38 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	61bb      	str	r3, [r7, #24]
 8006c36:	e00c      	b.n	8006c52 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a15      	ldr	r2, [pc, #84]	@ (8006c90 <LL_USART_Init+0xf8>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d102      	bne.n	8006c46 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	61bb      	str	r3, [r7, #24]
 8006c44:	e005      	b.n	8006c52 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a12      	ldr	r2, [pc, #72]	@ (8006c94 <LL_USART_Init+0xfc>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d101      	bne.n	8006c52 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00d      	beq.n	8006c74 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d009      	beq.n	8006c74 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8006c60:	2300      	movs	r3, #0
 8006c62:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8006c6c:	69b9      	ldr	r1, [r7, #24]
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f7ff fd64 	bl	800673c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8006c74:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3720      	adds	r7, #32
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	40011000 	.word	0x40011000
 8006c84:	40004400 	.word	0x40004400
 8006c88:	40004800 	.word	0x40004800
 8006c8c:	40011400 	.word	0x40011400
 8006c90:	40004c00 	.word	0x40004c00
 8006c94:	40005000 	.word	0x40005000

08006c98 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006caa:	4a07      	ldr	r2, [pc, #28]	@ (8006cc8 <LL_InitTick+0x30>)
 8006cac:	3b01      	subs	r3, #1
 8006cae:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8006cb0:	4b05      	ldr	r3, [pc, #20]	@ (8006cc8 <LL_InitTick+0x30>)
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006cb6:	4b04      	ldr	r3, [pc, #16]	@ (8006cc8 <LL_InitTick+0x30>)
 8006cb8:	2205      	movs	r2, #5
 8006cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	e000e010 	.word	0xe000e010

08006ccc <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8006cd4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f7ff ffdd 	bl	8006c98 <LL_InitTick>
}
 8006cde:	bf00      	nop
 8006ce0:	3708      	adds	r7, #8
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
	...

08006ce8 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8006cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8006d30 <LL_mDelay+0x48>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8006cf6:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cfe:	d00c      	beq.n	8006d1a <LL_mDelay+0x32>
  {
    Delay++;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	3301      	adds	r3, #1
 8006d04:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8006d06:	e008      	b.n	8006d1a <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8006d08:	4b09      	ldr	r3, [pc, #36]	@ (8006d30 <LL_mDelay+0x48>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d002      	beq.n	8006d1a <LL_mDelay+0x32>
    {
      Delay--;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	3b01      	subs	r3, #1
 8006d18:	607b      	str	r3, [r7, #4]
  while (Delay)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1f3      	bne.n	8006d08 <LL_mDelay+0x20>
    }
  }
}
 8006d20:	bf00      	nop
 8006d22:	bf00      	nop
 8006d24:	3714      	adds	r7, #20
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	e000e010 	.word	0xe000e010

08006d34 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8006d3c:	4a04      	ldr	r2, [pc, #16]	@ (8006d50 <LL_SetSystemCoreClock+0x1c>)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6013      	str	r3, [r2, #0]
}
 8006d42:	bf00      	nop
 8006d44:	370c      	adds	r7, #12
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	20000218 	.word	0x20000218

08006d54 <SCH_Initialize>:
  * @param  None
  * @retval None
  *****************************************************************************/

void SCH_Initialize(void)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	af00      	add	r7, sp, #0
  s_SystemTick = RESET;
 8006d58:	4b0d      	ldr	r3, [pc, #52]	@ (8006d90 <SCH_Initialize+0x3c>)
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	601a      	str	r2, [r3, #0]
  s_NumOfTaskScheduled = RESET;
 8006d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d94 <SCH_Initialize+0x40>)
 8006d60:	2200      	movs	r2, #0
 8006d62:	701a      	strb	r2, [r3, #0]
  s_NumOfTimers = RESET;
 8006d64:	4b0c      	ldr	r3, [pc, #48]	@ (8006d98 <SCH_Initialize+0x44>)
 8006d66:	2200      	movs	r2, #0
 8006d68:	701a      	strb	r2, [r3, #0]

  // Initial Scheduler Context
  memset((uint8_t*)&s_TaskContext[0], RESET, (sizeof(SCH_TaskContextTypedef) * MAX_TASK));
 8006d6a:	22f0      	movs	r2, #240	@ 0xf0
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	480b      	ldr	r0, [pc, #44]	@ (8006d9c <SCH_Initialize+0x48>)
 8006d70:	f000 fcaa 	bl	80076c8 <memset>
  memset((uint8_t*)&s_TimerContext[0], RESET, (sizeof(SCH_TimerContextTypedef) * MAX_TIMERS));
 8006d74:	22f0      	movs	r2, #240	@ 0xf0
 8006d76:	2100      	movs	r1, #0
 8006d78:	4809      	ldr	r0, [pc, #36]	@ (8006da0 <SCH_Initialize+0x4c>)
 8006d7a:	f000 fca5 	bl	80076c8 <memset>
  memset((uint8_t*)&s_SoftTimers[0], RESET, (sizeof(uint32_t) * SCH_TIM_LAST));
 8006d7e:	2228      	movs	r2, #40	@ 0x28
 8006d80:	2100      	movs	r1, #0
 8006d82:	4808      	ldr	r0, [pc, #32]	@ (8006da4 <SCH_Initialize+0x50>)
 8006d84:	f000 fca0 	bl	80076c8 <memset>

    // Initialize Scheduler context
  systick_timer_init();
 8006d88:	f7f9 fc8c 	bl	80006a4 <systick_timer_init>
}
 8006d8c:	bf00      	nop
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	2000076c 	.word	0x2000076c
 8006d94:	20000674 	.word	0x20000674
 8006d98:	20000768 	.word	0x20000768
 8006d9c:	20000584 	.word	0x20000584
 8006da0:	20000678 	.word	0x20000678
 8006da4:	20000770 	.word	0x20000770

08006da8 <SCH_TIM_Start>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  *         const uint32_t timeInMs - time in mSec
  * @retval None
  *****************************************************************************/
void SCH_TIM_Start(const SCH_SoftTimerTypedef timer, const uint32_t timeInMs)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	4603      	mov	r3, r0
 8006db0:	6039      	str	r1, [r7, #0]
 8006db2:	71fb      	strb	r3, [r7, #7]
  if(timer < SCH_TIM_LAST)
 8006db4:	79fb      	ldrb	r3, [r7, #7]
 8006db6:	2b09      	cmp	r3, #9
 8006db8:	d804      	bhi.n	8006dc4 <SCH_TIM_Start+0x1c>
  {
	//s_SoftTimers[timer] = timeInMs + s_SystemTick;
    s_SoftTimers[timer] = timeInMs;
 8006dba:	79fb      	ldrb	r3, [r7, #7]
 8006dbc:	4904      	ldr	r1, [pc, #16]	@ (8006dd0 <SCH_TIM_Start+0x28>)
 8006dbe:	683a      	ldr	r2, [r7, #0]
 8006dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr
 8006dd0:	20000770 	.word	0x20000770

08006dd4 <SCH_TIM_HasCompleted>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  * @retval TRUE / FALSE
  *****************************************************************************/

uint16_t SCH_TIM_HasCompleted(const SCH_SoftTimerTypedef timer)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	4603      	mov	r3, r0
 8006ddc:	71fb      	strb	r3, [r7, #7]
  return (s_SoftTimers[timer] == 0 ? 1:0 ) ;
 8006dde:	79fb      	ldrb	r3, [r7, #7]
 8006de0:	4a06      	ldr	r2, [pc, #24]	@ (8006dfc <SCH_TIM_HasCompleted+0x28>)
 8006de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	bf0c      	ite	eq
 8006dea:	2301      	moveq	r3, #1
 8006dec:	2300      	movne	r3, #0
 8006dee:	b2db      	uxtb	r3, r3
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	20000770 	.word	0x20000770

08006e00 <SCH_TASK_CreateTask>:
  * @param  SCH_TASK_HANDLE* pHandle - pointer to task handle
  *         SCH_TaskPropertyTypedef* pTaskProperty - pointer to task property
  * @retval status
  *****************************************************************************/
t_Status SCH_TASK_CreateTask(SCH_TASK_HANDLE* pHandle, SCH_TaskPropertyTypedef* pTaskProperty)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  t_Status                      status = STS_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	73fb      	strb	r3, [r7, #15]

  // make sure that we have valid parameters
  if((pHandle) && (pTaskProperty))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d029      	beq.n	8006e68 <SCH_TASK_CreateTask+0x68>
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d026      	beq.n	8006e68 <SCH_TASK_CreateTask+0x68>
  {
    // Check for number of task defined
    if(s_NumOfTaskScheduled < (MAX_TASK - 1))
 8006e1a:	4b17      	ldr	r3, [pc, #92]	@ (8006e78 <SCH_TASK_CreateTask+0x78>)
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	2b12      	cmp	r3, #18
 8006e20:	d822      	bhi.n	8006e68 <SCH_TASK_CreateTask+0x68>
    {
      SCH_TaskContextTypedef* pTaskContext = &s_TaskContext[s_NumOfTaskScheduled];
 8006e22:	4b15      	ldr	r3, [pc, #84]	@ (8006e78 <SCH_TASK_CreateTask+0x78>)
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	461a      	mov	r2, r3
 8006e28:	4613      	mov	r3, r2
 8006e2a:	005b      	lsls	r3, r3, #1
 8006e2c:	4413      	add	r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	4a12      	ldr	r2, [pc, #72]	@ (8006e7c <SCH_TASK_CreateTask+0x7c>)
 8006e32:	4413      	add	r3, r2
 8006e34:	60bb      	str	r3, [r7, #8]
      // get task context
      // memcpy((uint8_t*)pTaskContext->pTaskProperty, (uint8_t*)pTaskProperty, sizeof(SCH_TaskPropertyTypedef));
      pTaskContext->pTaskProperty = pTaskProperty;
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	683a      	ldr	r2, [r7, #0]
 8006e3a:	609a      	str	r2, [r3, #8]
      // Make sure we are initializing other members of task context
      pTaskContext->taskFlag = FALSE;
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	805a      	strh	r2, [r3, #2]
      pTaskContext->taskTick = pTaskProperty->taskTick;;
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	68da      	ldr	r2, [r3, #12]
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	605a      	str	r2, [r3, #4]
      // Put task in Ready State
      pTaskContext->taskState = TASK_StateReady;
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	701a      	strb	r2, [r3, #0]

      // Give Task Handle back to caller
      *pHandle = s_NumOfTaskScheduled;
 8006e50:	4b09      	ldr	r3, [pc, #36]	@ (8006e78 <SCH_TASK_CreateTask+0x78>)
 8006e52:	781a      	ldrb	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	701a      	strb	r2, [r3, #0]

      s_NumOfTaskScheduled++;
 8006e58:	4b07      	ldr	r3, [pc, #28]	@ (8006e78 <SCH_TASK_CreateTask+0x78>)
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	b2da      	uxtb	r2, r3
 8006e60:	4b05      	ldr	r3, [pc, #20]	@ (8006e78 <SCH_TASK_CreateTask+0x78>)
 8006e62:	701a      	strb	r2, [r3, #0]
      // We were able to register task with schedular
      status = STS_DONE;
 8006e64:	2300      	movs	r3, #0
 8006e66:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8006e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	20000674 	.word	0x20000674
 8006e7c:	20000584 	.word	0x20000584

08006e80 <SCH_RunSystemTickTimer>:
  * @brief  Function handles system tick timer
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_RunSystemTickTimer(void)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // Increment System Tick counter

  s_SystemTick++;
 8006e86:	4b42      	ldr	r3, [pc, #264]	@ (8006f90 <SCH_RunSystemTickTimer+0x110>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	4a40      	ldr	r2, [pc, #256]	@ (8006f90 <SCH_RunSystemTickTimer+0x110>)
 8006e8e:	6013      	str	r3, [r2, #0]
//  if(s_SystemTick > 100000){
//	  LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_15);
//  }
  // Check Status of other Periodic Task
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8006e90:	2300      	movs	r3, #0
 8006e92:	73fb      	strb	r3, [r7, #15]
 8006e94:	e025      	b.n	8006ee2 <SCH_RunSystemTickTimer+0x62>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 8006e96:	7bfa      	ldrb	r2, [r7, #15]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	005b      	lsls	r3, r3, #1
 8006e9c:	4413      	add	r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4a3c      	ldr	r2, [pc, #240]	@ (8006f94 <SCH_RunSystemTickTimer+0x114>)
 8006ea2:	4413      	add	r3, r2
 8006ea4:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((SCH_TASK_SYNC == pTaskContext->pTaskProperty->taskType) && (TASK_StateReady == pTaskContext->taskState))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d115      	bne.n	8006edc <SCH_RunSystemTickTimer+0x5c>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d111      	bne.n	8006edc <SCH_RunSystemTickTimer+0x5c>
    {
      // Increment task tick
      pTaskContext->taskTick += 1;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	1c5a      	adds	r2, r3, #1
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTaskContext->taskTick >= pTaskContext->pTaskProperty->taskPeriodInMS)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	685a      	ldr	r2, [r3, #4]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d305      	bcc.n	8006edc <SCH_RunSystemTickTimer+0x5c>
      {
        // Yes
        // Reset Task tick timer
        pTaskContext->taskTick = RESET;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	605a      	str	r2, [r3, #4]
        // Enable Flag
        pTaskContext->taskFlag = TRUE;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	805a      	strh	r2, [r3, #2]
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	73fb      	strb	r3, [r7, #15]
 8006ee2:	4b2d      	ldr	r3, [pc, #180]	@ (8006f98 <SCH_RunSystemTickTimer+0x118>)
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	7bfa      	ldrb	r2, [r7, #15]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d3d4      	bcc.n	8006e96 <SCH_RunSystemTickTimer+0x16>
      }
    }
  }

  // Check Status of other Periodic Task
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8006eec:	2300      	movs	r3, #0
 8006eee:	73bb      	strb	r3, [r7, #14]
 8006ef0:	e02b      	b.n	8006f4a <SCH_RunSystemTickTimer+0xca>
  {
    // Get Task Context
    pTimerContext = &s_TimerContext[timerIndex];
 8006ef2:	7bba      	ldrb	r2, [r7, #14]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	005b      	lsls	r3, r3, #1
 8006ef8:	4413      	add	r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4a27      	ldr	r2, [pc, #156]	@ (8006f9c <SCH_RunSystemTickTimer+0x11c>)
 8006efe:	4413      	add	r3, r2
 8006f00:	60bb      	str	r3, [r7, #8]

    // Check type and State of the task
    if(TIM_StateRun == pTimerContext->timerState)
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d11c      	bne.n	8006f44 <SCH_RunSystemTickTimer+0xc4>
    {
      // Increment task tick
      pTimerContext->timerTick += 1;
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	1c5a      	adds	r2, r3, #1
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTimerContext->timerTick >= pTimerContext->pTimerProperty->timerPeriodInMS)
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	685a      	ldr	r2, [r3, #4]
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d310      	bcc.n	8006f44 <SCH_RunSystemTickTimer+0xc4>
      {
        // Yes
        // Enable Flag
        pTimerContext->timerFlag = TRUE;
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	2201      	movs	r2, #1
 8006f26:	805a      	strh	r2, [r3, #2]
        // Reset tick timer
        pTimerContext->timerTick = RESET;
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	605a      	str	r2, [r3, #4]
        // Check timer type and change the state
        pTimerContext->timerState = (SCH_TIMER_PERIODIC == pTimerContext->pTimerProperty->timerType)?TIM_StateRun:TIM_StateStop;
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	bf0c      	ite	eq
 8006f38:	2301      	moveq	r3, #1
 8006f3a:	2300      	movne	r3, #0
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	461a      	mov	r2, r3
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	701a      	strb	r2, [r3, #0]
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8006f44:	7bbb      	ldrb	r3, [r7, #14]
 8006f46:	3301      	adds	r3, #1
 8006f48:	73bb      	strb	r3, [r7, #14]
 8006f4a:	4b15      	ldr	r3, [pc, #84]	@ (8006fa0 <SCH_RunSystemTickTimer+0x120>)
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	7bba      	ldrb	r2, [r7, #14]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d3ce      	bcc.n	8006ef2 <SCH_RunSystemTickTimer+0x72>
      }
    }
  }
  // Update software timer
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 8006f54:	2300      	movs	r3, #0
 8006f56:	73bb      	strb	r3, [r7, #14]
 8006f58:	e010      	b.n	8006f7c <SCH_RunSystemTickTimer+0xfc>
 	if (s_SoftTimers[timerIndex] > 0)	s_SoftTimers[timerIndex] --;
 8006f5a:	7bbb      	ldrb	r3, [r7, #14]
 8006f5c:	4a11      	ldr	r2, [pc, #68]	@ (8006fa4 <SCH_RunSystemTickTimer+0x124>)
 8006f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d007      	beq.n	8006f76 <SCH_RunSystemTickTimer+0xf6>
 8006f66:	7bbb      	ldrb	r3, [r7, #14]
 8006f68:	4a0e      	ldr	r2, [pc, #56]	@ (8006fa4 <SCH_RunSystemTickTimer+0x124>)
 8006f6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006f6e:	3a01      	subs	r2, #1
 8006f70:	490c      	ldr	r1, [pc, #48]	@ (8006fa4 <SCH_RunSystemTickTimer+0x124>)
 8006f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 8006f76:	7bbb      	ldrb	r3, [r7, #14]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	73bb      	strb	r3, [r7, #14]
 8006f7c:	7bbb      	ldrb	r3, [r7, #14]
 8006f7e:	2b09      	cmp	r3, #9
 8006f80:	d9eb      	bls.n	8006f5a <SCH_RunSystemTickTimer+0xda>
}
 8006f82:	bf00      	nop
 8006f84:	bf00      	nop
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr
 8006f90:	2000076c 	.word	0x2000076c
 8006f94:	20000584 	.word	0x20000584
 8006f98:	20000674 	.word	0x20000674
 8006f9c:	20000678 	.word	0x20000678
 8006fa0:	20000768 	.word	0x20000768
 8006fa4:	20000770 	.word	0x20000770

08006fa8 <SCH_StartSchedular>:
  * @brief  Start schedular
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_StartSchedular(void)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	af00      	add	r7, sp, #0
  // Start Schedular..i.e. start system tick timer
  SCH_START;
 8006fac:	f7f9 fb6a 	bl	8000684 <systick_timer_start>
}
 8006fb0:	bf00      	nop
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <SCH_HandleScheduledTask>:
  * @brief  Function handles scheduled task and timer events
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_HandleScheduledTask(void)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
  SCH_TaskContextTypedef*       pTaskContext;
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // check for schedule flag
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8006fba:	2300      	movs	r3, #0
 8006fbc:	73fb      	strb	r3, [r7, #15]
 8006fbe:	e01e      	b.n	8006ffe <SCH_HandleScheduledTask+0x4a>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 8006fc0:	7bfa      	ldrb	r2, [r7, #15]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	005b      	lsls	r3, r3, #1
 8006fc6:	4413      	add	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	4a23      	ldr	r2, [pc, #140]	@ (8007058 <SCH_HandleScheduledTask+0xa4>)
 8006fcc:	4413      	add	r3, r2
 8006fce:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((TRUE == pTaskContext->taskFlag) && (TASK_StateReady == pTaskContext->taskState))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	885b      	ldrh	r3, [r3, #2]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d10f      	bne.n	8006ff8 <SCH_HandleScheduledTask+0x44>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d10b      	bne.n	8006ff8 <SCH_HandleScheduledTask+0x44>
    {
      pTaskContext->taskFlag = FALSE;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	805a      	strh	r2, [r3, #2]
      if(pTaskContext->pTaskProperty->taskFunction)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d003      	beq.n	8006ff8 <SCH_HandleScheduledTask+0x44>
      {
        pTaskContext->pTaskProperty->taskFunction();
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	4798      	blx	r3
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8006ff8:	7bfb      	ldrb	r3, [r7, #15]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	73fb      	strb	r3, [r7, #15]
 8006ffe:	4b17      	ldr	r3, [pc, #92]	@ (800705c <SCH_HandleScheduledTask+0xa8>)
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	7bfa      	ldrb	r2, [r7, #15]
 8007004:	429a      	cmp	r2, r3
 8007006:	d3db      	bcc.n	8006fc0 <SCH_HandleScheduledTask+0xc>
      }
    }
  }

  // check for timer flag
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8007008:	2300      	movs	r3, #0
 800700a:	73bb      	strb	r3, [r7, #14]
 800700c:	e01a      	b.n	8007044 <SCH_HandleScheduledTask+0x90>
  {
    // Get Timer Context
    pTimerContext = &s_TimerContext[timerIndex];
 800700e:	7bba      	ldrb	r2, [r7, #14]
 8007010:	4613      	mov	r3, r2
 8007012:	005b      	lsls	r3, r3, #1
 8007014:	4413      	add	r3, r2
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4a11      	ldr	r2, [pc, #68]	@ (8007060 <SCH_HandleScheduledTask+0xac>)
 800701a:	4413      	add	r3, r2
 800701c:	60bb      	str	r3, [r7, #8]

    // Check timer flag
    if(TRUE == pTimerContext->timerFlag)
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	885b      	ldrh	r3, [r3, #2]
 8007022:	2b01      	cmp	r3, #1
 8007024:	d10b      	bne.n	800703e <SCH_HandleScheduledTask+0x8a>
    {
      pTimerContext->timerFlag = FALSE;
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	2200      	movs	r2, #0
 800702a:	805a      	strh	r2, [r3, #2]
      if(pTimerContext->pTimerProperty->timerCallbackFunction)
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d003      	beq.n	800703e <SCH_HandleScheduledTask+0x8a>
      {
        pTimerContext->pTimerProperty->timerCallbackFunction();
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	4798      	blx	r3
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800703e:	7bbb      	ldrb	r3, [r7, #14]
 8007040:	3301      	adds	r3, #1
 8007042:	73bb      	strb	r3, [r7, #14]
 8007044:	4b07      	ldr	r3, [pc, #28]	@ (8007064 <SCH_HandleScheduledTask+0xb0>)
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	7bba      	ldrb	r2, [r7, #14]
 800704a:	429a      	cmp	r2, r3
 800704c:	d3df      	bcc.n	800700e <SCH_HandleScheduledTask+0x5a>
      }
    }
  }
}
 800704e:	bf00      	nop
 8007050:	bf00      	nop
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	20000584 	.word	0x20000584
 800705c:	20000674 	.word	0x20000674
 8007060:	20000678 	.word	0x20000678
 8007064:	20000768 	.word	0x20000768

08007068 <crc16_CCITT>:


#include "crc.h"

uint16_t crc16_CCITT(uint16_t initial_value, uint8_t* data, uint16_t size)
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	4603      	mov	r3, r0
 8007070:	6039      	str	r1, [r7, #0]
 8007072:	80fb      	strh	r3, [r7, #6]
 8007074:	4613      	mov	r3, r2
 8007076:	80bb      	strh	r3, [r7, #4]
    uint8_t x;
    uint16_t crc = initial_value;
 8007078:	88fb      	ldrh	r3, [r7, #6]
 800707a:	81fb      	strh	r3, [r7, #14]

    while(size--)
 800707c:	e023      	b.n	80070c6 <crc16_CCITT+0x5e>
    {
        x = crc >> 8 ^ *data++;
 800707e:	89fb      	ldrh	r3, [r7, #14]
 8007080:	0a1b      	lsrs	r3, r3, #8
 8007082:	b29b      	uxth	r3, r3
 8007084:	b2da      	uxtb	r2, r3
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	1c59      	adds	r1, r3, #1
 800708a:	6039      	str	r1, [r7, #0]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	4053      	eors	r3, r2
 8007090:	737b      	strb	r3, [r7, #13]
        x ^= x >> 4;
 8007092:	7b7b      	ldrb	r3, [r7, #13]
 8007094:	091b      	lsrs	r3, r3, #4
 8007096:	b2da      	uxtb	r2, r3
 8007098:	7b7b      	ldrb	r3, [r7, #13]
 800709a:	4053      	eors	r3, r2
 800709c:	737b      	strb	r3, [r7, #13]
        crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x << 5)) ^ ((uint16_t)x);
 800709e:	89fb      	ldrh	r3, [r7, #14]
 80070a0:	021b      	lsls	r3, r3, #8
 80070a2:	b21a      	sxth	r2, r3
 80070a4:	7b7b      	ldrb	r3, [r7, #13]
 80070a6:	b21b      	sxth	r3, r3
 80070a8:	031b      	lsls	r3, r3, #12
 80070aa:	b21b      	sxth	r3, r3
 80070ac:	4053      	eors	r3, r2
 80070ae:	b21a      	sxth	r2, r3
 80070b0:	7b7b      	ldrb	r3, [r7, #13]
 80070b2:	b21b      	sxth	r3, r3
 80070b4:	015b      	lsls	r3, r3, #5
 80070b6:	b21b      	sxth	r3, r3
 80070b8:	4053      	eors	r3, r2
 80070ba:	b21a      	sxth	r2, r3
 80070bc:	7b7b      	ldrb	r3, [r7, #13]
 80070be:	b21b      	sxth	r3, r3
 80070c0:	4053      	eors	r3, r2
 80070c2:	b21b      	sxth	r3, r3
 80070c4:	81fb      	strh	r3, [r7, #14]
    while(size--)
 80070c6:	88bb      	ldrh	r3, [r7, #4]
 80070c8:	1e5a      	subs	r2, r3, #1
 80070ca:	80ba      	strh	r2, [r7, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1d6      	bne.n	800707e <crc16_CCITT+0x16>
    }

    return crc;
 80070d0:	89fb      	ldrh	r3, [r7, #14]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3714      	adds	r7, #20
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
	...

080070e0 <fsp_init>:
uint8_t fsp_my_adr;

uint8_t fsp_decode_pos = 0;

void fsp_init(uint8_t module_adr)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	4603      	mov	r3, r0
 80070e8:	71fb      	strb	r3, [r7, #7]
    fsp_my_adr = module_adr;
 80070ea:	4a06      	ldr	r2, [pc, #24]	@ (8007104 <fsp_init+0x24>)
 80070ec:	79fb      	ldrb	r3, [r7, #7]
 80070ee:	7013      	strb	r3, [r2, #0]
    fsp_decode_pos = 0;
 80070f0:	4b05      	ldr	r3, [pc, #20]	@ (8007108 <fsp_init+0x28>)
 80070f2:	2200      	movs	r2, #0
 80070f4:	701a      	strb	r2, [r3, #0]
}
 80070f6:	bf00      	nop
 80070f8:	370c      	adds	r7, #12
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	20000798 	.word	0x20000798
 8007108:	20000799 	.word	0x20000799

0800710c <fsp_gen_cmd_w_data_pkt>:
		fsp_gen_pkt(&cmd,(void*)0,  0, dst_adr, FSP_PKT_TYPE_CMD, fsp);
	}
}

void fsp_gen_cmd_w_data_pkt(uint8_t cmd, uint8_t *data, uint8_t data_len, uint8_t dst_adr, uint8_t ack, fsp_packet_t *fsp)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af02      	add	r7, sp, #8
 8007112:	6039      	str	r1, [r7, #0]
 8007114:	4611      	mov	r1, r2
 8007116:	461a      	mov	r2, r3
 8007118:	4603      	mov	r3, r0
 800711a:	71fb      	strb	r3, [r7, #7]
 800711c:	460b      	mov	r3, r1
 800711e:	71bb      	strb	r3, [r7, #6]
 8007120:	4613      	mov	r3, r2
 8007122:	717b      	strb	r3, [r7, #5]
	if (ack == FSP_PKT_WITH_ACK)
 8007124:	7c3b      	ldrb	r3, [r7, #16]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d10b      	bne.n	8007142 <fsp_gen_cmd_w_data_pkt+0x36>
	{
		fsp_gen_pkt(&cmd, data, data_len, dst_adr, FSP_PKT_TYPE_CMD_W_DATA_ACK, fsp);
 800712a:	7979      	ldrb	r1, [r7, #5]
 800712c:	79ba      	ldrb	r2, [r7, #6]
 800712e:	1df8      	adds	r0, r7, #7
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	9301      	str	r3, [sp, #4]
 8007134:	2308      	movs	r3, #8
 8007136:	9300      	str	r3, [sp, #0]
 8007138:	460b      	mov	r3, r1
 800713a:	6839      	ldr	r1, [r7, #0]
 800713c:	f000 f810 	bl	8007160 <fsp_gen_pkt>
	}
	else
	{
		fsp_gen_pkt(&cmd, data, data_len, dst_adr, FSP_PKT_TYPE_CMD_W_DATA, fsp);
	}
}
 8007140:	e00a      	b.n	8007158 <fsp_gen_cmd_w_data_pkt+0x4c>
		fsp_gen_pkt(&cmd, data, data_len, dst_adr, FSP_PKT_TYPE_CMD_W_DATA, fsp);
 8007142:	7979      	ldrb	r1, [r7, #5]
 8007144:	79ba      	ldrb	r2, [r7, #6]
 8007146:	1df8      	adds	r0, r7, #7
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	9301      	str	r3, [sp, #4]
 800714c:	2307      	movs	r3, #7
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	460b      	mov	r3, r1
 8007152:	6839      	ldr	r1, [r7, #0]
 8007154:	f000 f804 	bl	8007160 <fsp_gen_pkt>
}
 8007158:	bf00      	nop
 800715a:	3708      	adds	r7, #8
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <fsp_gen_pkt>:
{
	fsp_gen_pkt((void*)0, (void*)0, 0, dst_adr, FSP_PKT_TYPE_NACK, fsp);
}

void fsp_gen_pkt(uint8_t *cmd, uint8_t *payload, uint8_t payload_len, uint8_t dst_adr, uint8_t type, fsp_packet_t *fsp)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b086      	sub	sp, #24
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	4611      	mov	r1, r2
 800716c:	461a      	mov	r2, r3
 800716e:	460b      	mov	r3, r1
 8007170:	71fb      	strb	r3, [r7, #7]
 8007172:	4613      	mov	r3, r2
 8007174:	71bb      	strb	r3, [r7, #6]
	fsp->sod        = FSP_PKT_SOD;
 8007176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007178:	22ca      	movs	r2, #202	@ 0xca
 800717a:	701a      	strb	r2, [r3, #0]
	fsp->src_adr    = fsp_my_adr;
 800717c:	4b27      	ldr	r3, [pc, #156]	@ (800721c <fsp_gen_pkt+0xbc>)
 800717e:	781a      	ldrb	r2, [r3, #0]
 8007180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007182:	705a      	strb	r2, [r3, #1]
	fsp->dst_adr    = dst_adr;
 8007184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007186:	79ba      	ldrb	r2, [r7, #6]
 8007188:	709a      	strb	r2, [r3, #2]
	fsp->length     = payload_len;
 800718a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718c:	79fa      	ldrb	r2, [r7, #7]
 800718e:	70da      	strb	r2, [r3, #3]
	fsp->type       = type;
 8007190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007192:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007196:	711a      	strb	r2, [r3, #4]
	fsp->eof		= FSP_PKT_EOF;
 8007198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719a:	22ef      	movs	r2, #239	@ 0xef
 800719c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

	uint8_t i = 0;
 80071a0:	2300      	movs	r3, #0
 80071a2:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 80071a4:	2300      	movs	r3, #0
 80071a6:	75bb      	strb	r3, [r7, #22]

	// Copy cmd payload
	if (cmd != 0) {
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00e      	beq.n	80071cc <fsp_gen_pkt+0x6c>
		fsp->length++; // length + byte cmd
 80071ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b0:	78db      	ldrb	r3, [r3, #3]
 80071b2:	3301      	adds	r3, #1
 80071b4:	b2da      	uxtb	r2, r3
 80071b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b8:	70da      	strb	r2, [r3, #3]
		fsp->payload[j++] = *cmd;
 80071ba:	7dbb      	ldrb	r3, [r7, #22]
 80071bc:	1c5a      	adds	r2, r3, #1
 80071be:	75ba      	strb	r2, [r7, #22]
 80071c0:	4619      	mov	r1, r3
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	781a      	ldrb	r2, [r3, #0]
 80071c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c8:	440b      	add	r3, r1
 80071ca:	715a      	strb	r2, [r3, #5]
	}

	// Copy payload fsp->payload
	for(i=0; i<payload_len; i++)
 80071cc:	2300      	movs	r3, #0
 80071ce:	75fb      	strb	r3, [r7, #23]
 80071d0:	e00d      	b.n	80071ee <fsp_gen_pkt+0x8e>
	{
		fsp->payload[j++] = payload[i];
 80071d2:	7dfb      	ldrb	r3, [r7, #23]
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	441a      	add	r2, r3
 80071d8:	7dbb      	ldrb	r3, [r7, #22]
 80071da:	1c59      	adds	r1, r3, #1
 80071dc:	75b9      	strb	r1, [r7, #22]
 80071de:	4619      	mov	r1, r3
 80071e0:	7812      	ldrb	r2, [r2, #0]
 80071e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e4:	440b      	add	r3, r1
 80071e6:	715a      	strb	r2, [r3, #5]
	for(i=0; i<payload_len; i++)
 80071e8:	7dfb      	ldrb	r3, [r7, #23]
 80071ea:	3301      	adds	r3, #1
 80071ec:	75fb      	strb	r3, [r7, #23]
 80071ee:	7dfa      	ldrb	r2, [r7, #23]
 80071f0:	79fb      	ldrb	r3, [r7, #7]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d3ed      	bcc.n	80071d2 <fsp_gen_pkt+0x72>
	}

	fsp->crc16 = crc16_CCITT(FSP_CRC16_INITIAL_VALUE, &fsp->src_adr, fsp->length + 4);
 80071f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f8:	1c59      	adds	r1, r3, #1
 80071fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fc:	78db      	ldrb	r3, [r3, #3]
 80071fe:	3304      	adds	r3, #4
 8007200:	b29b      	uxth	r3, r3
 8007202:	461a      	mov	r2, r3
 8007204:	2000      	movs	r0, #0
 8007206:	f7ff ff2f 	bl	8007068 <crc16_CCITT>
 800720a:	4603      	mov	r3, r0
 800720c:	461a      	mov	r2, r3
 800720e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007210:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

}
 8007214:	bf00      	nop
 8007216:	3718      	adds	r7, #24
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	20000798 	.word	0x20000798

08007220 <fsp_encode>:

void fsp_encode(fsp_packet_t *fsp, uint8_t *pkt, uint8_t *pkt_len)
{
 8007220:	b480      	push	{r7}
 8007222:	b087      	sub	sp, #28
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
	uint8_t i = 0;
 800722c:	2300      	movs	r3, #0
 800722e:	75fb      	strb	r3, [r7, #23]
	uint8_t crc_msb = (uint8_t)(fsp->crc16 >> 8);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8007236:	0a1b      	lsrs	r3, r3, #8
 8007238:	b29b      	uxth	r3, r3
 800723a:	757b      	strb	r3, [r7, #21]
	uint8_t crc_lsb = (uint8_t)(fsp->crc16 & 0xFF);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8007242:	753b      	strb	r3, [r7, #20]
	pkt[i++] = fsp->sod;
 8007244:	7dfb      	ldrb	r3, [r7, #23]
 8007246:	1c5a      	adds	r2, r3, #1
 8007248:	75fa      	strb	r2, [r7, #23]
 800724a:	461a      	mov	r2, r3
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	4413      	add	r3, r2
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	7812      	ldrb	r2, [r2, #0]
 8007254:	701a      	strb	r2, [r3, #0]
	pkt[i++] = fsp->src_adr;
 8007256:	7dfb      	ldrb	r3, [r7, #23]
 8007258:	1c5a      	adds	r2, r3, #1
 800725a:	75fa      	strb	r2, [r7, #23]
 800725c:	461a      	mov	r2, r3
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	4413      	add	r3, r2
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	7852      	ldrb	r2, [r2, #1]
 8007266:	701a      	strb	r2, [r3, #0]
	pkt[i++] = fsp->dst_adr;
 8007268:	7dfb      	ldrb	r3, [r7, #23]
 800726a:	1c5a      	adds	r2, r3, #1
 800726c:	75fa      	strb	r2, [r7, #23]
 800726e:	461a      	mov	r2, r3
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	4413      	add	r3, r2
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	7892      	ldrb	r2, [r2, #2]
 8007278:	701a      	strb	r2, [r3, #0]
	pkt[i++] = fsp->length;
 800727a:	7dfb      	ldrb	r3, [r7, #23]
 800727c:	1c5a      	adds	r2, r3, #1
 800727e:	75fa      	strb	r2, [r7, #23]
 8007280:	461a      	mov	r2, r3
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	4413      	add	r3, r2
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	78d2      	ldrb	r2, [r2, #3]
 800728a:	701a      	strb	r2, [r3, #0]
	pkt[i++] = fsp->type;
 800728c:	7dfb      	ldrb	r3, [r7, #23]
 800728e:	1c5a      	adds	r2, r3, #1
 8007290:	75fa      	strb	r2, [r7, #23]
 8007292:	461a      	mov	r2, r3
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	4413      	add	r3, r2
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	7912      	ldrb	r2, [r2, #4]
 800729c:	701a      	strb	r2, [r3, #0]

	uint8_t j = 0;
 800729e:	2300      	movs	r3, #0
 80072a0:	75bb      	strb	r3, [r7, #22]
	for(j=0; j<fsp->length; j++)
 80072a2:	2300      	movs	r3, #0
 80072a4:	75bb      	strb	r3, [r7, #22]
 80072a6:	e052      	b.n	800734e <fsp_encode+0x12e>
	{
		if (fsp->payload[j] == FSP_PKT_SOD) {
 80072a8:	7dbb      	ldrb	r3, [r7, #22]
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	4413      	add	r3, r2
 80072ae:	795b      	ldrb	r3, [r3, #5]
 80072b0:	2bca      	cmp	r3, #202	@ 0xca
 80072b2:	d110      	bne.n	80072d6 <fsp_encode+0xb6>
			pkt[i++] = FSP_PKT_ESC;
 80072b4:	7dfb      	ldrb	r3, [r7, #23]
 80072b6:	1c5a      	adds	r2, r3, #1
 80072b8:	75fa      	strb	r2, [r7, #23]
 80072ba:	461a      	mov	r2, r3
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	4413      	add	r3, r2
 80072c0:	22bd      	movs	r2, #189	@ 0xbd
 80072c2:	701a      	strb	r2, [r3, #0]
			pkt[i++] = FSP_PKT_TSOD;
 80072c4:	7dfb      	ldrb	r3, [r7, #23]
 80072c6:	1c5a      	adds	r2, r3, #1
 80072c8:	75fa      	strb	r2, [r7, #23]
 80072ca:	461a      	mov	r2, r3
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	4413      	add	r3, r2
 80072d0:	22dc      	movs	r2, #220	@ 0xdc
 80072d2:	701a      	strb	r2, [r3, #0]
 80072d4:	e038      	b.n	8007348 <fsp_encode+0x128>
			} else if (fsp->payload[j] == FSP_PKT_EOF) {
 80072d6:	7dbb      	ldrb	r3, [r7, #22]
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	4413      	add	r3, r2
 80072dc:	795b      	ldrb	r3, [r3, #5]
 80072de:	2bef      	cmp	r3, #239	@ 0xef
 80072e0:	d110      	bne.n	8007304 <fsp_encode+0xe4>
			pkt[i++] = FSP_PKT_ESC;
 80072e2:	7dfb      	ldrb	r3, [r7, #23]
 80072e4:	1c5a      	adds	r2, r3, #1
 80072e6:	75fa      	strb	r2, [r7, #23]
 80072e8:	461a      	mov	r2, r3
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	4413      	add	r3, r2
 80072ee:	22bd      	movs	r2, #189	@ 0xbd
 80072f0:	701a      	strb	r2, [r3, #0]
			pkt[i++] = FSP_PKT_TEOF;
 80072f2:	7dfb      	ldrb	r3, [r7, #23]
 80072f4:	1c5a      	adds	r2, r3, #1
 80072f6:	75fa      	strb	r2, [r7, #23]
 80072f8:	461a      	mov	r2, r3
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	4413      	add	r3, r2
 80072fe:	22de      	movs	r2, #222	@ 0xde
 8007300:	701a      	strb	r2, [r3, #0]
 8007302:	e021      	b.n	8007348 <fsp_encode+0x128>
			} else if (fsp->payload[j] == FSP_PKT_ESC) {
 8007304:	7dbb      	ldrb	r3, [r7, #22]
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	4413      	add	r3, r2
 800730a:	795b      	ldrb	r3, [r3, #5]
 800730c:	2bbd      	cmp	r3, #189	@ 0xbd
 800730e:	d110      	bne.n	8007332 <fsp_encode+0x112>
			pkt[i++] = FSP_PKT_ESC;
 8007310:	7dfb      	ldrb	r3, [r7, #23]
 8007312:	1c5a      	adds	r2, r3, #1
 8007314:	75fa      	strb	r2, [r7, #23]
 8007316:	461a      	mov	r2, r3
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	4413      	add	r3, r2
 800731c:	22bd      	movs	r2, #189	@ 0xbd
 800731e:	701a      	strb	r2, [r3, #0]
			pkt[i++] = FSP_PKT_TESC;
 8007320:	7dfb      	ldrb	r3, [r7, #23]
 8007322:	1c5a      	adds	r2, r3, #1
 8007324:	75fa      	strb	r2, [r7, #23]
 8007326:	461a      	mov	r2, r3
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	4413      	add	r3, r2
 800732c:	22db      	movs	r2, #219	@ 0xdb
 800732e:	701a      	strb	r2, [r3, #0]
 8007330:	e00a      	b.n	8007348 <fsp_encode+0x128>
		} else
		pkt[i++] = fsp->payload[j];
 8007332:	7dba      	ldrb	r2, [r7, #22]
 8007334:	7dfb      	ldrb	r3, [r7, #23]
 8007336:	1c59      	adds	r1, r3, #1
 8007338:	75f9      	strb	r1, [r7, #23]
 800733a:	4619      	mov	r1, r3
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	440b      	add	r3, r1
 8007340:	68f9      	ldr	r1, [r7, #12]
 8007342:	440a      	add	r2, r1
 8007344:	7952      	ldrb	r2, [r2, #5]
 8007346:	701a      	strb	r2, [r3, #0]
	for(j=0; j<fsp->length; j++)
 8007348:	7dbb      	ldrb	r3, [r7, #22]
 800734a:	3301      	adds	r3, #1
 800734c:	75bb      	strb	r3, [r7, #22]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	78db      	ldrb	r3, [r3, #3]
 8007352:	7dba      	ldrb	r2, [r7, #22]
 8007354:	429a      	cmp	r2, r3
 8007356:	d3a7      	bcc.n	80072a8 <fsp_encode+0x88>
	}

	if (crc_msb == FSP_PKT_SOD) {
 8007358:	7d7b      	ldrb	r3, [r7, #21]
 800735a:	2bca      	cmp	r3, #202	@ 0xca
 800735c:	d110      	bne.n	8007380 <fsp_encode+0x160>
		pkt[i++] = FSP_PKT_ESC;
 800735e:	7dfb      	ldrb	r3, [r7, #23]
 8007360:	1c5a      	adds	r2, r3, #1
 8007362:	75fa      	strb	r2, [r7, #23]
 8007364:	461a      	mov	r2, r3
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	4413      	add	r3, r2
 800736a:	22bd      	movs	r2, #189	@ 0xbd
 800736c:	701a      	strb	r2, [r3, #0]
		pkt[i++] = FSP_PKT_TSOD;
 800736e:	7dfb      	ldrb	r3, [r7, #23]
 8007370:	1c5a      	adds	r2, r3, #1
 8007372:	75fa      	strb	r2, [r7, #23]
 8007374:	461a      	mov	r2, r3
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	4413      	add	r3, r2
 800737a:	22dc      	movs	r2, #220	@ 0xdc
 800737c:	701a      	strb	r2, [r3, #0]
 800737e:	e02f      	b.n	80073e0 <fsp_encode+0x1c0>
		} else if (crc_msb == FSP_PKT_EOF) {
 8007380:	7d7b      	ldrb	r3, [r7, #21]
 8007382:	2bef      	cmp	r3, #239	@ 0xef
 8007384:	d110      	bne.n	80073a8 <fsp_encode+0x188>
		pkt[i++] = FSP_PKT_ESC;
 8007386:	7dfb      	ldrb	r3, [r7, #23]
 8007388:	1c5a      	adds	r2, r3, #1
 800738a:	75fa      	strb	r2, [r7, #23]
 800738c:	461a      	mov	r2, r3
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	4413      	add	r3, r2
 8007392:	22bd      	movs	r2, #189	@ 0xbd
 8007394:	701a      	strb	r2, [r3, #0]
		pkt[i++] = FSP_PKT_TEOF;
 8007396:	7dfb      	ldrb	r3, [r7, #23]
 8007398:	1c5a      	adds	r2, r3, #1
 800739a:	75fa      	strb	r2, [r7, #23]
 800739c:	461a      	mov	r2, r3
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	4413      	add	r3, r2
 80073a2:	22de      	movs	r2, #222	@ 0xde
 80073a4:	701a      	strb	r2, [r3, #0]
 80073a6:	e01b      	b.n	80073e0 <fsp_encode+0x1c0>
		} else if (crc_msb == FSP_PKT_ESC) {
 80073a8:	7d7b      	ldrb	r3, [r7, #21]
 80073aa:	2bbd      	cmp	r3, #189	@ 0xbd
 80073ac:	d110      	bne.n	80073d0 <fsp_encode+0x1b0>
		pkt[i++] = FSP_PKT_ESC;
 80073ae:	7dfb      	ldrb	r3, [r7, #23]
 80073b0:	1c5a      	adds	r2, r3, #1
 80073b2:	75fa      	strb	r2, [r7, #23]
 80073b4:	461a      	mov	r2, r3
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	4413      	add	r3, r2
 80073ba:	22bd      	movs	r2, #189	@ 0xbd
 80073bc:	701a      	strb	r2, [r3, #0]
		pkt[i++] = FSP_PKT_TESC;
 80073be:	7dfb      	ldrb	r3, [r7, #23]
 80073c0:	1c5a      	adds	r2, r3, #1
 80073c2:	75fa      	strb	r2, [r7, #23]
 80073c4:	461a      	mov	r2, r3
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	4413      	add	r3, r2
 80073ca:	22db      	movs	r2, #219	@ 0xdb
 80073cc:	701a      	strb	r2, [r3, #0]
 80073ce:	e007      	b.n	80073e0 <fsp_encode+0x1c0>
	} else
	pkt[i++] = crc_msb;
 80073d0:	7dfb      	ldrb	r3, [r7, #23]
 80073d2:	1c5a      	adds	r2, r3, #1
 80073d4:	75fa      	strb	r2, [r7, #23]
 80073d6:	461a      	mov	r2, r3
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	4413      	add	r3, r2
 80073dc:	7d7a      	ldrb	r2, [r7, #21]
 80073de:	701a      	strb	r2, [r3, #0]

	if (crc_lsb == FSP_PKT_SOD) {
 80073e0:	7d3b      	ldrb	r3, [r7, #20]
 80073e2:	2bca      	cmp	r3, #202	@ 0xca
 80073e4:	d110      	bne.n	8007408 <fsp_encode+0x1e8>
		pkt[i++] = FSP_PKT_ESC;
 80073e6:	7dfb      	ldrb	r3, [r7, #23]
 80073e8:	1c5a      	adds	r2, r3, #1
 80073ea:	75fa      	strb	r2, [r7, #23]
 80073ec:	461a      	mov	r2, r3
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	4413      	add	r3, r2
 80073f2:	22bd      	movs	r2, #189	@ 0xbd
 80073f4:	701a      	strb	r2, [r3, #0]
		pkt[i++] = FSP_PKT_TSOD;
 80073f6:	7dfb      	ldrb	r3, [r7, #23]
 80073f8:	1c5a      	adds	r2, r3, #1
 80073fa:	75fa      	strb	r2, [r7, #23]
 80073fc:	461a      	mov	r2, r3
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	4413      	add	r3, r2
 8007402:	22dc      	movs	r2, #220	@ 0xdc
 8007404:	701a      	strb	r2, [r3, #0]
 8007406:	e02f      	b.n	8007468 <fsp_encode+0x248>
		} else if (crc_lsb == FSP_PKT_EOF) {
 8007408:	7d3b      	ldrb	r3, [r7, #20]
 800740a:	2bef      	cmp	r3, #239	@ 0xef
 800740c:	d110      	bne.n	8007430 <fsp_encode+0x210>
		pkt[i++] = FSP_PKT_ESC;
 800740e:	7dfb      	ldrb	r3, [r7, #23]
 8007410:	1c5a      	adds	r2, r3, #1
 8007412:	75fa      	strb	r2, [r7, #23]
 8007414:	461a      	mov	r2, r3
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	4413      	add	r3, r2
 800741a:	22bd      	movs	r2, #189	@ 0xbd
 800741c:	701a      	strb	r2, [r3, #0]
		pkt[i++] = FSP_PKT_TEOF;
 800741e:	7dfb      	ldrb	r3, [r7, #23]
 8007420:	1c5a      	adds	r2, r3, #1
 8007422:	75fa      	strb	r2, [r7, #23]
 8007424:	461a      	mov	r2, r3
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	4413      	add	r3, r2
 800742a:	22de      	movs	r2, #222	@ 0xde
 800742c:	701a      	strb	r2, [r3, #0]
 800742e:	e01b      	b.n	8007468 <fsp_encode+0x248>
		} else if (crc_lsb == FSP_PKT_ESC) {
 8007430:	7d3b      	ldrb	r3, [r7, #20]
 8007432:	2bbd      	cmp	r3, #189	@ 0xbd
 8007434:	d110      	bne.n	8007458 <fsp_encode+0x238>
		pkt[i++] = FSP_PKT_ESC;
 8007436:	7dfb      	ldrb	r3, [r7, #23]
 8007438:	1c5a      	adds	r2, r3, #1
 800743a:	75fa      	strb	r2, [r7, #23]
 800743c:	461a      	mov	r2, r3
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	4413      	add	r3, r2
 8007442:	22bd      	movs	r2, #189	@ 0xbd
 8007444:	701a      	strb	r2, [r3, #0]
		pkt[i++] = FSP_PKT_TESC;
 8007446:	7dfb      	ldrb	r3, [r7, #23]
 8007448:	1c5a      	adds	r2, r3, #1
 800744a:	75fa      	strb	r2, [r7, #23]
 800744c:	461a      	mov	r2, r3
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	4413      	add	r3, r2
 8007452:	22db      	movs	r2, #219	@ 0xdb
 8007454:	701a      	strb	r2, [r3, #0]
 8007456:	e007      	b.n	8007468 <fsp_encode+0x248>
	} else
	pkt[i++] = crc_lsb;
 8007458:	7dfb      	ldrb	r3, [r7, #23]
 800745a:	1c5a      	adds	r2, r3, #1
 800745c:	75fa      	strb	r2, [r7, #23]
 800745e:	461a      	mov	r2, r3
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	4413      	add	r3, r2
 8007464:	7d3a      	ldrb	r2, [r7, #20]
 8007466:	701a      	strb	r2, [r3, #0]

	pkt[i++] = FSP_PKT_EOF;
 8007468:	7dfb      	ldrb	r3, [r7, #23]
 800746a:	1c5a      	adds	r2, r3, #1
 800746c:	75fa      	strb	r2, [r7, #23]
 800746e:	461a      	mov	r2, r3
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	4413      	add	r3, r2
 8007474:	22ef      	movs	r2, #239	@ 0xef
 8007476:	701a      	strb	r2, [r3, #0]
	*pkt_len = i;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	7dfa      	ldrb	r2, [r7, #23]
 800747c:	701a      	strb	r2, [r3, #0]
}
 800747e:	bf00      	nop
 8007480:	371c      	adds	r7, #28
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr
	...

0800748c <frame_decode>:
			return FSP_PKT_ERROR;
		}
    }
}

int frame_decode(uint8_t *buffer, uint8_t length, fsp_packet_t *pkt){
 800748c:	b580      	push	{r7, lr}
 800748e:	b086      	sub	sp, #24
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	460b      	mov	r3, r1
 8007496:	607a      	str	r2, [r7, #4]
 8007498:	72fb      	strb	r3, [r7, #11]

	//	fsp_packet_t fsp_pkt;
	uint8_t i = 0;
 800749a:	2300      	movs	r3, #0
 800749c:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 800749e:	2300      	movs	r3, #0
 80074a0:	75bb      	strb	r3, [r7, #22]
	//	uint8_t escape = 0;
	//	uint8_t decoded_payload[FSP_PAYLOAD_MAX_LENGTH];

	if (length < FSP_PKT_MIN_LENGTH - 2) {
 80074a2:	7afb      	ldrb	r3, [r7, #11]
 80074a4:	2b04      	cmp	r3, #4
 80074a6:	d801      	bhi.n	80074ac <frame_decode+0x20>
		return FSP_PKT_INVALID;
 80074a8:	2302      	movs	r3, #2
 80074aa:	e07e      	b.n	80075aa <frame_decode+0x11e>
	}

	i = 0;
 80074ac:	2300      	movs	r3, #0
 80074ae:	75fb      	strb	r3, [r7, #23]
	pkt->src_adr = buffer[i++];
 80074b0:	7dfb      	ldrb	r3, [r7, #23]
 80074b2:	1c5a      	adds	r2, r3, #1
 80074b4:	75fa      	strb	r2, [r7, #23]
 80074b6:	461a      	mov	r2, r3
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	4413      	add	r3, r2
 80074bc:	781a      	ldrb	r2, [r3, #0]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	705a      	strb	r2, [r3, #1]
	pkt->dst_adr = buffer[i++];
 80074c2:	7dfb      	ldrb	r3, [r7, #23]
 80074c4:	1c5a      	adds	r2, r3, #1
 80074c6:	75fa      	strb	r2, [r7, #23]
 80074c8:	461a      	mov	r2, r3
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	4413      	add	r3, r2
 80074ce:	781a      	ldrb	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	709a      	strb	r2, [r3, #2]
	pkt->length = buffer[i++];
 80074d4:	7dfb      	ldrb	r3, [r7, #23]
 80074d6:	1c5a      	adds	r2, r3, #1
 80074d8:	75fa      	strb	r2, [r7, #23]
 80074da:	461a      	mov	r2, r3
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	4413      	add	r3, r2
 80074e0:	781a      	ldrb	r2, [r3, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	70da      	strb	r2, [r3, #3]
	pkt->type = buffer[i++];
 80074e6:	7dfb      	ldrb	r3, [r7, #23]
 80074e8:	1c5a      	adds	r2, r3, #1
 80074ea:	75fa      	strb	r2, [r7, #23]
 80074ec:	461a      	mov	r2, r3
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	4413      	add	r3, r2
 80074f2:	781a      	ldrb	r2, [r3, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	711a      	strb	r2, [r3, #4]

	while(i < length - FSP_PKT_CRC_LENGTH)
 80074f8:	e00d      	b.n	8007516 <frame_decode+0x8a>
	pkt->payload[j++] = buffer[i++];
 80074fa:	7dfb      	ldrb	r3, [r7, #23]
 80074fc:	1c5a      	adds	r2, r3, #1
 80074fe:	75fa      	strb	r2, [r7, #23]
 8007500:	461a      	mov	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	441a      	add	r2, r3
 8007506:	7dbb      	ldrb	r3, [r7, #22]
 8007508:	1c59      	adds	r1, r3, #1
 800750a:	75b9      	strb	r1, [r7, #22]
 800750c:	4619      	mov	r1, r3
 800750e:	7812      	ldrb	r2, [r2, #0]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	440b      	add	r3, r1
 8007514:	715a      	strb	r2, [r3, #5]
	while(i < length - FSP_PKT_CRC_LENGTH)
 8007516:	7dfa      	ldrb	r2, [r7, #23]
 8007518:	7afb      	ldrb	r3, [r7, #11]
 800751a:	3b02      	subs	r3, #2
 800751c:	429a      	cmp	r2, r3
 800751e:	dbec      	blt.n	80074fa <frame_decode+0x6e>
	j = length;
 8007520:	7afb      	ldrb	r3, [r7, #11]
 8007522:	75bb      	strb	r3, [r7, #22]
	if (pkt->length > FSP_PAYLOAD_MAX_LENGTH || pkt->length != j - FSP_PKT_HEADER_LENGTH  - FSP_PKT_CRC_LENGTH) {
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	78db      	ldrb	r3, [r3, #3]
 8007528:	2b3c      	cmp	r3, #60	@ 0x3c
 800752a:	d806      	bhi.n	800753a <frame_decode+0xae>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	78db      	ldrb	r3, [r3, #3]
 8007530:	461a      	mov	r2, r3
 8007532:	7dbb      	ldrb	r3, [r7, #22]
 8007534:	3b06      	subs	r3, #6
 8007536:	429a      	cmp	r2, r3
 8007538:	d001      	beq.n	800753e <frame_decode+0xb2>
		return FSP_PKT_WRONG_LENGTH;
 800753a:	2306      	movs	r3, #6
 800753c:	e035      	b.n	80075aa <frame_decode+0x11e>
	}

	//	memcpy(fsp_pkt.payload, &decoded_payload[i], fsp_pkt.length);
	i = 4;
 800753e:	2304      	movs	r3, #4
 8007540:	75fb      	strb	r3, [r7, #23]
	i += pkt->length;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	78da      	ldrb	r2, [r3, #3]
 8007546:	7dfb      	ldrb	r3, [r7, #23]
 8007548:	4413      	add	r3, r2
 800754a:	75fb      	strb	r3, [r7, #23]
	//CRC
	uint16_t crc_received = (uint16_t)(buffer[i++] << 8);
 800754c:	7dfb      	ldrb	r3, [r7, #23]
 800754e:	1c5a      	adds	r2, r3, #1
 8007550:	75fa      	strb	r2, [r7, #23]
 8007552:	461a      	mov	r2, r3
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	4413      	add	r3, r2
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	021b      	lsls	r3, r3, #8
 800755c:	82bb      	strh	r3, [r7, #20]
	crc_received |= (uint16_t)(buffer[i++]);
 800755e:	7dfb      	ldrb	r3, [r7, #23]
 8007560:	1c5a      	adds	r2, r3, #1
 8007562:	75fa      	strb	r2, [r7, #23]
 8007564:	461a      	mov	r2, r3
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	4413      	add	r3, r2
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	461a      	mov	r2, r3
 800756e:	8abb      	ldrh	r3, [r7, #20]
 8007570:	4313      	orrs	r3, r2
 8007572:	82bb      	strh	r3, [r7, #20]


	// CAL CRC
	uint16_t crc_calculated = crc16_CCITT(FSP_CRC16_INITIAL_VALUE, &pkt->src_adr, pkt->length + 4);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	1c59      	adds	r1, r3, #1
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	78db      	ldrb	r3, [r3, #3]
 800757c:	3304      	adds	r3, #4
 800757e:	b29b      	uxth	r3, r3
 8007580:	461a      	mov	r2, r3
 8007582:	2000      	movs	r0, #0
 8007584:	f7ff fd70 	bl	8007068 <crc16_CCITT>
 8007588:	4603      	mov	r3, r0
 800758a:	827b      	strh	r3, [r7, #18]

	// CHECK CRC
	if (crc_received != crc_calculated) {
 800758c:	8aba      	ldrh	r2, [r7, #20]
 800758e:	8a7b      	ldrh	r3, [r7, #18]
 8007590:	429a      	cmp	r2, r3
 8007592:	d001      	beq.n	8007598 <frame_decode+0x10c>
		return FSP_PKT_CRC_FAIL;
 8007594:	2305      	movs	r3, #5
 8007596:	e008      	b.n	80075aa <frame_decode+0x11e>
	}

	// Address
	if (pkt->dst_adr != fsp_my_adr) {
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	789a      	ldrb	r2, [r3, #2]
 800759c:	4b05      	ldr	r3, [pc, #20]	@ (80075b4 <frame_decode+0x128>)
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d001      	beq.n	80075a8 <frame_decode+0x11c>
		return FSP_PKT_WRONG_ADR;
 80075a4:	2303      	movs	r3, #3
 80075a6:	e000      	b.n	80075aa <frame_decode+0x11e>
	}

	//	*pkt = fsp_pkt;

	//	frame_processing(&fsp_pkt);
	return FSP_PKT_READY;
 80075a8:	2301      	movs	r3, #1
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3718      	adds	r7, #24
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	20000798 	.word	0x20000798

080075b8 <atoi>:
 80075b8:	220a      	movs	r2, #10
 80075ba:	2100      	movs	r1, #0
 80075bc:	f000 b87a 	b.w	80076b4 <strtol>

080075c0 <_strtol_l.constprop.0>:
 80075c0:	2b24      	cmp	r3, #36	@ 0x24
 80075c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075c6:	4686      	mov	lr, r0
 80075c8:	4690      	mov	r8, r2
 80075ca:	d801      	bhi.n	80075d0 <_strtol_l.constprop.0+0x10>
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d106      	bne.n	80075de <_strtol_l.constprop.0+0x1e>
 80075d0:	f000 f882 	bl	80076d8 <__errno>
 80075d4:	2316      	movs	r3, #22
 80075d6:	6003      	str	r3, [r0, #0]
 80075d8:	2000      	movs	r0, #0
 80075da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075de:	4834      	ldr	r0, [pc, #208]	@ (80076b0 <_strtol_l.constprop.0+0xf0>)
 80075e0:	460d      	mov	r5, r1
 80075e2:	462a      	mov	r2, r5
 80075e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075e8:	5d06      	ldrb	r6, [r0, r4]
 80075ea:	f016 0608 	ands.w	r6, r6, #8
 80075ee:	d1f8      	bne.n	80075e2 <_strtol_l.constprop.0+0x22>
 80075f0:	2c2d      	cmp	r4, #45	@ 0x2d
 80075f2:	d12d      	bne.n	8007650 <_strtol_l.constprop.0+0x90>
 80075f4:	782c      	ldrb	r4, [r5, #0]
 80075f6:	2601      	movs	r6, #1
 80075f8:	1c95      	adds	r5, r2, #2
 80075fa:	f033 0210 	bics.w	r2, r3, #16
 80075fe:	d109      	bne.n	8007614 <_strtol_l.constprop.0+0x54>
 8007600:	2c30      	cmp	r4, #48	@ 0x30
 8007602:	d12a      	bne.n	800765a <_strtol_l.constprop.0+0x9a>
 8007604:	782a      	ldrb	r2, [r5, #0]
 8007606:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800760a:	2a58      	cmp	r2, #88	@ 0x58
 800760c:	d125      	bne.n	800765a <_strtol_l.constprop.0+0x9a>
 800760e:	786c      	ldrb	r4, [r5, #1]
 8007610:	2310      	movs	r3, #16
 8007612:	3502      	adds	r5, #2
 8007614:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007618:	f10c 3cff 	add.w	ip, ip, #4294967295
 800761c:	2200      	movs	r2, #0
 800761e:	fbbc f9f3 	udiv	r9, ip, r3
 8007622:	4610      	mov	r0, r2
 8007624:	fb03 ca19 	mls	sl, r3, r9, ip
 8007628:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800762c:	2f09      	cmp	r7, #9
 800762e:	d81b      	bhi.n	8007668 <_strtol_l.constprop.0+0xa8>
 8007630:	463c      	mov	r4, r7
 8007632:	42a3      	cmp	r3, r4
 8007634:	dd27      	ble.n	8007686 <_strtol_l.constprop.0+0xc6>
 8007636:	1c57      	adds	r7, r2, #1
 8007638:	d007      	beq.n	800764a <_strtol_l.constprop.0+0x8a>
 800763a:	4581      	cmp	r9, r0
 800763c:	d320      	bcc.n	8007680 <_strtol_l.constprop.0+0xc0>
 800763e:	d101      	bne.n	8007644 <_strtol_l.constprop.0+0x84>
 8007640:	45a2      	cmp	sl, r4
 8007642:	db1d      	blt.n	8007680 <_strtol_l.constprop.0+0xc0>
 8007644:	fb00 4003 	mla	r0, r0, r3, r4
 8007648:	2201      	movs	r2, #1
 800764a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800764e:	e7eb      	b.n	8007628 <_strtol_l.constprop.0+0x68>
 8007650:	2c2b      	cmp	r4, #43	@ 0x2b
 8007652:	bf04      	itt	eq
 8007654:	782c      	ldrbeq	r4, [r5, #0]
 8007656:	1c95      	addeq	r5, r2, #2
 8007658:	e7cf      	b.n	80075fa <_strtol_l.constprop.0+0x3a>
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1da      	bne.n	8007614 <_strtol_l.constprop.0+0x54>
 800765e:	2c30      	cmp	r4, #48	@ 0x30
 8007660:	bf0c      	ite	eq
 8007662:	2308      	moveq	r3, #8
 8007664:	230a      	movne	r3, #10
 8007666:	e7d5      	b.n	8007614 <_strtol_l.constprop.0+0x54>
 8007668:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800766c:	2f19      	cmp	r7, #25
 800766e:	d801      	bhi.n	8007674 <_strtol_l.constprop.0+0xb4>
 8007670:	3c37      	subs	r4, #55	@ 0x37
 8007672:	e7de      	b.n	8007632 <_strtol_l.constprop.0+0x72>
 8007674:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007678:	2f19      	cmp	r7, #25
 800767a:	d804      	bhi.n	8007686 <_strtol_l.constprop.0+0xc6>
 800767c:	3c57      	subs	r4, #87	@ 0x57
 800767e:	e7d8      	b.n	8007632 <_strtol_l.constprop.0+0x72>
 8007680:	f04f 32ff 	mov.w	r2, #4294967295
 8007684:	e7e1      	b.n	800764a <_strtol_l.constprop.0+0x8a>
 8007686:	1c53      	adds	r3, r2, #1
 8007688:	d108      	bne.n	800769c <_strtol_l.constprop.0+0xdc>
 800768a:	2322      	movs	r3, #34	@ 0x22
 800768c:	f8ce 3000 	str.w	r3, [lr]
 8007690:	4660      	mov	r0, ip
 8007692:	f1b8 0f00 	cmp.w	r8, #0
 8007696:	d0a0      	beq.n	80075da <_strtol_l.constprop.0+0x1a>
 8007698:	1e69      	subs	r1, r5, #1
 800769a:	e006      	b.n	80076aa <_strtol_l.constprop.0+0xea>
 800769c:	b106      	cbz	r6, 80076a0 <_strtol_l.constprop.0+0xe0>
 800769e:	4240      	negs	r0, r0
 80076a0:	f1b8 0f00 	cmp.w	r8, #0
 80076a4:	d099      	beq.n	80075da <_strtol_l.constprop.0+0x1a>
 80076a6:	2a00      	cmp	r2, #0
 80076a8:	d1f6      	bne.n	8007698 <_strtol_l.constprop.0+0xd8>
 80076aa:	f8c8 1000 	str.w	r1, [r8]
 80076ae:	e794      	b.n	80075da <_strtol_l.constprop.0+0x1a>
 80076b0:	08007fa1 	.word	0x08007fa1

080076b4 <strtol>:
 80076b4:	4613      	mov	r3, r2
 80076b6:	460a      	mov	r2, r1
 80076b8:	4601      	mov	r1, r0
 80076ba:	4802      	ldr	r0, [pc, #8]	@ (80076c4 <strtol+0x10>)
 80076bc:	6800      	ldr	r0, [r0, #0]
 80076be:	f7ff bf7f 	b.w	80075c0 <_strtol_l.constprop.0>
 80076c2:	bf00      	nop
 80076c4:	20000294 	.word	0x20000294

080076c8 <memset>:
 80076c8:	4402      	add	r2, r0
 80076ca:	4603      	mov	r3, r0
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d100      	bne.n	80076d2 <memset+0xa>
 80076d0:	4770      	bx	lr
 80076d2:	f803 1b01 	strb.w	r1, [r3], #1
 80076d6:	e7f9      	b.n	80076cc <memset+0x4>

080076d8 <__errno>:
 80076d8:	4b01      	ldr	r3, [pc, #4]	@ (80076e0 <__errno+0x8>)
 80076da:	6818      	ldr	r0, [r3, #0]
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	20000294 	.word	0x20000294

080076e4 <__libc_init_array>:
 80076e4:	b570      	push	{r4, r5, r6, lr}
 80076e6:	4d0d      	ldr	r5, [pc, #52]	@ (800771c <__libc_init_array+0x38>)
 80076e8:	4c0d      	ldr	r4, [pc, #52]	@ (8007720 <__libc_init_array+0x3c>)
 80076ea:	1b64      	subs	r4, r4, r5
 80076ec:	10a4      	asrs	r4, r4, #2
 80076ee:	2600      	movs	r6, #0
 80076f0:	42a6      	cmp	r6, r4
 80076f2:	d109      	bne.n	8007708 <__libc_init_array+0x24>
 80076f4:	4d0b      	ldr	r5, [pc, #44]	@ (8007724 <__libc_init_array+0x40>)
 80076f6:	4c0c      	ldr	r4, [pc, #48]	@ (8007728 <__libc_init_array+0x44>)
 80076f8:	f000 f818 	bl	800772c <_init>
 80076fc:	1b64      	subs	r4, r4, r5
 80076fe:	10a4      	asrs	r4, r4, #2
 8007700:	2600      	movs	r6, #0
 8007702:	42a6      	cmp	r6, r4
 8007704:	d105      	bne.n	8007712 <__libc_init_array+0x2e>
 8007706:	bd70      	pop	{r4, r5, r6, pc}
 8007708:	f855 3b04 	ldr.w	r3, [r5], #4
 800770c:	4798      	blx	r3
 800770e:	3601      	adds	r6, #1
 8007710:	e7ee      	b.n	80076f0 <__libc_init_array+0xc>
 8007712:	f855 3b04 	ldr.w	r3, [r5], #4
 8007716:	4798      	blx	r3
 8007718:	3601      	adds	r6, #1
 800771a:	e7f2      	b.n	8007702 <__libc_init_array+0x1e>
 800771c:	080080ac 	.word	0x080080ac
 8007720:	080080ac 	.word	0x080080ac
 8007724:	080080ac 	.word	0x080080ac
 8007728:	080080b0 	.word	0x080080b0

0800772c <_init>:
 800772c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772e:	bf00      	nop
 8007730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007732:	bc08      	pop	{r3}
 8007734:	469e      	mov	lr, r3
 8007736:	4770      	bx	lr

08007738 <_fini>:
 8007738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800773a:	bf00      	nop
 800773c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800773e:	bc08      	pop	{r3}
 8007740:	469e      	mov	lr, r3
 8007742:	4770      	bx	lr
