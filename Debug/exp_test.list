
exp_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039e0  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  08003b68  08003b68  00004b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f00  08003f00  00005140  2**0
                  CONTENTS
  4 .ARM          00000008  08003f00  08003f00  00004f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f08  08003f08  00005140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f08  08003f08  00004f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f0c  08003f0c  00004f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000140  20000000  08003f10  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005140  2**0
                  CONTENTS
 10 .bss          0000034c  20000140  20000140  00005140  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000048c  2000048c  00005140  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005140  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008679  00000000  00000000  00005170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022c7  00000000  00000000  0000d7e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009c0  00000000  00000000  0000fab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000716  00000000  00000000  00010470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d44d  00000000  00000000  00010b86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009da7  00000000  00000000  0002dfd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d935  00000000  00000000  00037d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d56af  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000264c  00000000  00000000  000d56f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  000d7d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000140 	.word	0x20000140
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b50 	.word	0x08003b50

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000144 	.word	0x20000144
 80001c4:	08003b50 	.word	0x08003b50

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_ldivmod>:
 80001ec:	b97b      	cbnz	r3, 800020e <__aeabi_ldivmod+0x22>
 80001ee:	b972      	cbnz	r2, 800020e <__aeabi_ldivmod+0x22>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bfbe      	ittt	lt
 80001f4:	2000      	movlt	r0, #0
 80001f6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80001fa:	e006      	blt.n	800020a <__aeabi_ldivmod+0x1e>
 80001fc:	bf08      	it	eq
 80001fe:	2800      	cmpeq	r0, #0
 8000200:	bf1c      	itt	ne
 8000202:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000206:	f04f 30ff 	movne.w	r0, #4294967295
 800020a:	f000 b9b5 	b.w	8000578 <__aeabi_idiv0>
 800020e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000212:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000216:	2900      	cmp	r1, #0
 8000218:	db09      	blt.n	800022e <__aeabi_ldivmod+0x42>
 800021a:	2b00      	cmp	r3, #0
 800021c:	db1a      	blt.n	8000254 <__aeabi_ldivmod+0x68>
 800021e:	f000 f84d 	bl	80002bc <__udivmoddi4>
 8000222:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000226:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022a:	b004      	add	sp, #16
 800022c:	4770      	bx	lr
 800022e:	4240      	negs	r0, r0
 8000230:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000234:	2b00      	cmp	r3, #0
 8000236:	db1b      	blt.n	8000270 <__aeabi_ldivmod+0x84>
 8000238:	f000 f840 	bl	80002bc <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	4252      	negs	r2, r2
 800024e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000252:	4770      	bx	lr
 8000254:	4252      	negs	r2, r2
 8000256:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800025a:	f000 f82f 	bl	80002bc <__udivmoddi4>
 800025e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000262:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000266:	b004      	add	sp, #16
 8000268:	4240      	negs	r0, r0
 800026a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026e:	4770      	bx	lr
 8000270:	4252      	negs	r2, r2
 8000272:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000276:	f000 f821 	bl	80002bc <__udivmoddi4>
 800027a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800027e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000282:	b004      	add	sp, #16
 8000284:	4252      	negs	r2, r2
 8000286:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028a:	4770      	bx	lr

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b96a 	b.w	8000578 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c0:	9d08      	ldr	r5, [sp, #32]
 80002c2:	460c      	mov	r4, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14e      	bne.n	8000366 <__udivmoddi4+0xaa>
 80002c8:	4694      	mov	ip, r2
 80002ca:	458c      	cmp	ip, r1
 80002cc:	4686      	mov	lr, r0
 80002ce:	fab2 f282 	clz	r2, r2
 80002d2:	d962      	bls.n	800039a <__udivmoddi4+0xde>
 80002d4:	b14a      	cbz	r2, 80002ea <__udivmoddi4+0x2e>
 80002d6:	f1c2 0320 	rsb	r3, r2, #32
 80002da:	4091      	lsls	r1, r2
 80002dc:	fa20 f303 	lsr.w	r3, r0, r3
 80002e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e4:	4319      	orrs	r1, r3
 80002e6:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f f68c 	uxth.w	r6, ip
 80002f2:	fbb1 f4f7 	udiv	r4, r1, r7
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb07 1114 	mls	r1, r7, r4, r1
 80002fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000302:	fb04 f106 	mul.w	r1, r4, r6
 8000306:	4299      	cmp	r1, r3
 8000308:	d90a      	bls.n	8000320 <__udivmoddi4+0x64>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000312:	f080 8112 	bcs.w	800053a <__udivmoddi4+0x27e>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 810f 	bls.w	800053a <__udivmoddi4+0x27e>
 800031c:	3c02      	subs	r4, #2
 800031e:	4463      	add	r3, ip
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb1 f0f7 	udiv	r0, r1, r7
 800032a:	fb07 1110 	mls	r1, r7, r0, r1
 800032e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000332:	fb00 f606 	mul.w	r6, r0, r6
 8000336:	429e      	cmp	r6, r3
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x94>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000342:	f080 80fc 	bcs.w	800053e <__udivmoddi4+0x282>
 8000346:	429e      	cmp	r6, r3
 8000348:	f240 80f9 	bls.w	800053e <__udivmoddi4+0x282>
 800034c:	4463      	add	r3, ip
 800034e:	3802      	subs	r0, #2
 8000350:	1b9b      	subs	r3, r3, r6
 8000352:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa6>
 800035a:	40d3      	lsrs	r3, r2
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xba>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb4>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa6>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x150>
 800037e:	42a3      	cmp	r3, r4
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xcc>
 8000382:	4290      	cmp	r0, r2
 8000384:	f0c0 80f0 	bcc.w	8000568 <__udivmoddi4+0x2ac>
 8000388:	1a86      	subs	r6, r0, r2
 800038a:	eb64 0303 	sbc.w	r3, r4, r3
 800038e:	2001      	movs	r0, #1
 8000390:	2d00      	cmp	r5, #0
 8000392:	d0e6      	beq.n	8000362 <__udivmoddi4+0xa6>
 8000394:	e9c5 6300 	strd	r6, r3, [r5]
 8000398:	e7e3      	b.n	8000362 <__udivmoddi4+0xa6>
 800039a:	2a00      	cmp	r2, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x204>
 80003a0:	eba1 040c 	sub.w	r4, r1, ip
 80003a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003a8:	fa1f f78c 	uxth.w	r7, ip
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003b6:	fb08 4416 	mls	r4, r8, r6, r4
 80003ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003be:	fb07 f006 	mul.w	r0, r7, r6
 80003c2:	4298      	cmp	r0, r3
 80003c4:	d908      	bls.n	80003d8 <__udivmoddi4+0x11c>
 80003c6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ca:	f106 34ff 	add.w	r4, r6, #4294967295
 80003ce:	d202      	bcs.n	80003d6 <__udivmoddi4+0x11a>
 80003d0:	4298      	cmp	r0, r3
 80003d2:	f200 80cd 	bhi.w	8000570 <__udivmoddi4+0x2b4>
 80003d6:	4626      	mov	r6, r4
 80003d8:	1a1c      	subs	r4, r3, r0
 80003da:	fa1f f38e 	uxth.w	r3, lr
 80003de:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e2:	fb08 4410 	mls	r4, r8, r0, r4
 80003e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ea:	fb00 f707 	mul.w	r7, r0, r7
 80003ee:	429f      	cmp	r7, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x148>
 80003f2:	eb1c 0303 	adds.w	r3, ip, r3
 80003f6:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x146>
 80003fc:	429f      	cmp	r7, r3
 80003fe:	f200 80b0 	bhi.w	8000562 <__udivmoddi4+0x2a6>
 8000402:	4620      	mov	r0, r4
 8000404:	1bdb      	subs	r3, r3, r7
 8000406:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x9c>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa20 fc06 	lsr.w	ip, r0, r6
 800041c:	fa04 f301 	lsl.w	r3, r4, r1
 8000420:	ea43 030c 	orr.w	r3, r3, ip
 8000424:	40f4      	lsrs	r4, r6
 8000426:	fa00 f801 	lsl.w	r8, r0, r1
 800042a:	0c38      	lsrs	r0, r7, #16
 800042c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000430:	fbb4 fef0 	udiv	lr, r4, r0
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	fb00 441e 	mls	r4, r0, lr, r4
 800043c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000440:	fb0e f90c 	mul.w	r9, lr, ip
 8000444:	45a1      	cmp	r9, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x1a6>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000452:	f080 8084 	bcs.w	800055e <__udivmoddi4+0x2a2>
 8000456:	45a1      	cmp	r9, r4
 8000458:	f240 8081 	bls.w	800055e <__udivmoddi4+0x2a2>
 800045c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000460:	443c      	add	r4, r7
 8000462:	eba4 0409 	sub.w	r4, r4, r9
 8000466:	fa1f f983 	uxth.w	r9, r3
 800046a:	fbb4 f3f0 	udiv	r3, r4, r0
 800046e:	fb00 4413 	mls	r4, r0, r3, r4
 8000472:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000476:	fb03 fc0c 	mul.w	ip, r3, ip
 800047a:	45a4      	cmp	ip, r4
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x1d2>
 800047e:	193c      	adds	r4, r7, r4
 8000480:	f103 30ff 	add.w	r0, r3, #4294967295
 8000484:	d267      	bcs.n	8000556 <__udivmoddi4+0x29a>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d965      	bls.n	8000556 <__udivmoddi4+0x29a>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000492:	fba0 9302 	umull	r9, r3, r0, r2
 8000496:	eba4 040c 	sub.w	r4, r4, ip
 800049a:	429c      	cmp	r4, r3
 800049c:	46ce      	mov	lr, r9
 800049e:	469c      	mov	ip, r3
 80004a0:	d351      	bcc.n	8000546 <__udivmoddi4+0x28a>
 80004a2:	d04e      	beq.n	8000542 <__udivmoddi4+0x286>
 80004a4:	b155      	cbz	r5, 80004bc <__udivmoddi4+0x200>
 80004a6:	ebb8 030e 	subs.w	r3, r8, lr
 80004aa:	eb64 040c 	sbc.w	r4, r4, ip
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	40cb      	lsrs	r3, r1
 80004b4:	431e      	orrs	r6, r3
 80004b6:	40cc      	lsrs	r4, r1
 80004b8:	e9c5 6400 	strd	r6, r4, [r5]
 80004bc:	2100      	movs	r1, #0
 80004be:	e750      	b.n	8000362 <__udivmoddi4+0xa6>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f103 	lsr.w	r1, r0, r3
 80004c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80004cc:	fa24 f303 	lsr.w	r3, r4, r3
 80004d0:	4094      	lsls	r4, r2
 80004d2:	430c      	orrs	r4, r1
 80004d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004d8:	fa00 fe02 	lsl.w	lr, r0, r2
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e4:	fb08 3110 	mls	r1, r8, r0, r3
 80004e8:	0c23      	lsrs	r3, r4, #16
 80004ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ee:	fb00 f107 	mul.w	r1, r0, r7
 80004f2:	4299      	cmp	r1, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x24c>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 36ff 	add.w	r6, r0, #4294967295
 80004fe:	d22c      	bcs.n	800055a <__udivmoddi4+0x29e>
 8000500:	4299      	cmp	r1, r3
 8000502:	d92a      	bls.n	800055a <__udivmoddi4+0x29e>
 8000504:	3802      	subs	r0, #2
 8000506:	4463      	add	r3, ip
 8000508:	1a5b      	subs	r3, r3, r1
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000510:	fb08 3311 	mls	r3, r8, r1, r3
 8000514:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000518:	fb01 f307 	mul.w	r3, r1, r7
 800051c:	42a3      	cmp	r3, r4
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x276>
 8000520:	eb1c 0404 	adds.w	r4, ip, r4
 8000524:	f101 36ff 	add.w	r6, r1, #4294967295
 8000528:	d213      	bcs.n	8000552 <__udivmoddi4+0x296>
 800052a:	42a3      	cmp	r3, r4
 800052c:	d911      	bls.n	8000552 <__udivmoddi4+0x296>
 800052e:	3902      	subs	r1, #2
 8000530:	4464      	add	r4, ip
 8000532:	1ae4      	subs	r4, r4, r3
 8000534:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000538:	e739      	b.n	80003ae <__udivmoddi4+0xf2>
 800053a:	4604      	mov	r4, r0
 800053c:	e6f0      	b.n	8000320 <__udivmoddi4+0x64>
 800053e:	4608      	mov	r0, r1
 8000540:	e706      	b.n	8000350 <__udivmoddi4+0x94>
 8000542:	45c8      	cmp	r8, r9
 8000544:	d2ae      	bcs.n	80004a4 <__udivmoddi4+0x1e8>
 8000546:	ebb9 0e02 	subs.w	lr, r9, r2
 800054a:	eb63 0c07 	sbc.w	ip, r3, r7
 800054e:	3801      	subs	r0, #1
 8000550:	e7a8      	b.n	80004a4 <__udivmoddi4+0x1e8>
 8000552:	4631      	mov	r1, r6
 8000554:	e7ed      	b.n	8000532 <__udivmoddi4+0x276>
 8000556:	4603      	mov	r3, r0
 8000558:	e799      	b.n	800048e <__udivmoddi4+0x1d2>
 800055a:	4630      	mov	r0, r6
 800055c:	e7d4      	b.n	8000508 <__udivmoddi4+0x24c>
 800055e:	46d6      	mov	lr, sl
 8000560:	e77f      	b.n	8000462 <__udivmoddi4+0x1a6>
 8000562:	4463      	add	r3, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e74d      	b.n	8000404 <__udivmoddi4+0x148>
 8000568:	4606      	mov	r6, r0
 800056a:	4623      	mov	r3, r4
 800056c:	4608      	mov	r0, r1
 800056e:	e70f      	b.n	8000390 <__udivmoddi4+0xd4>
 8000570:	3e02      	subs	r6, #2
 8000572:	4463      	add	r3, ip
 8000574:	e730      	b.n	80003d8 <__udivmoddi4+0x11c>
 8000576:	bf00      	nop

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8000580:	4b07      	ldr	r3, [pc, #28]	@ (80005a0 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800058c:	bf0c      	ite	eq
 800058e:	2301      	moveq	r3, #1
 8000590:	2300      	movne	r3, #0
 8000592:	b2db      	uxtb	r3, r3
}
 8000594:	4618      	mov	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	e000e010 	.word	0xe000e010

080005a4 <delay_us>:
#include "delay.h"
#include "stm32f4xx_ll_utils.h"
#include "stm32f4xx_ll_cortex.h"

void delay_us(uint8_t micro_seconds)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
    uint32_t ticks = micro_seconds * (SystemCoreClock / 1000000);
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	4a0c      	ldr	r2, [pc, #48]	@ (80005e4 <delay_us+0x40>)
 80005b2:	6812      	ldr	r2, [r2, #0]
 80005b4:	490c      	ldr	r1, [pc, #48]	@ (80005e8 <delay_us+0x44>)
 80005b6:	fba1 1202 	umull	r1, r2, r1, r2
 80005ba:	0c92      	lsrs	r2, r2, #18
 80005bc:	fb02 f303 	mul.w	r3, r2, r3
 80005c0:	60fb      	str	r3, [r7, #12]
    while (ticks > 0)
 80005c2:	e007      	b.n	80005d4 <delay_us+0x30>
    {
        if (LL_SYSTICK_IsActiveCounterFlag())
 80005c4:	f7ff ffda 	bl	800057c <LL_SYSTICK_IsActiveCounterFlag>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d002      	beq.n	80005d4 <delay_us+0x30>
        {
            ticks--;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	3b01      	subs	r3, #1
 80005d2:	60fb      	str	r3, [r7, #12]
    while (ticks > 0)
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d1f4      	bne.n	80005c4 <delay_us+0x20>
        }
    }
}
 80005da:	bf00      	nop
 80005dc:	bf00      	nop
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	200000c8 	.word	0x200000c8
 80005e8:	431bde83 	.word	0x431bde83

080005ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	6039      	str	r1, [r7, #0]
 80005f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	db0a      	blt.n	8000616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	b2da      	uxtb	r2, r3
 8000604:	490c      	ldr	r1, [pc, #48]	@ (8000638 <__NVIC_SetPriority+0x4c>)
 8000606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060a:	0112      	lsls	r2, r2, #4
 800060c:	b2d2      	uxtb	r2, r2
 800060e:	440b      	add	r3, r1
 8000610:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000614:	e00a      	b.n	800062c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	b2da      	uxtb	r2, r3
 800061a:	4908      	ldr	r1, [pc, #32]	@ (800063c <__NVIC_SetPriority+0x50>)
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	f003 030f 	and.w	r3, r3, #15
 8000622:	3b04      	subs	r3, #4
 8000624:	0112      	lsls	r2, r2, #4
 8000626:	b2d2      	uxtb	r2, r2
 8000628:	440b      	add	r3, r1
 800062a:	761a      	strb	r2, [r3, #24]
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	e000e100 	.word	0xe000e100
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	3b01      	subs	r3, #1
 800064c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000650:	d301      	bcc.n	8000656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000652:	2301      	movs	r3, #1
 8000654:	e00f      	b.n	8000676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000656:	4a0a      	ldr	r2, [pc, #40]	@ (8000680 <SysTick_Config+0x40>)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	3b01      	subs	r3, #1
 800065c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800065e:	210f      	movs	r1, #15
 8000660:	f04f 30ff 	mov.w	r0, #4294967295
 8000664:	f7ff ffc2 	bl	80005ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000668:	4b05      	ldr	r3, [pc, #20]	@ (8000680 <SysTick_Config+0x40>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800066e:	4b04      	ldr	r3, [pc, #16]	@ (8000680 <SysTick_Config+0x40>)
 8000670:	2207      	movs	r2, #7
 8000672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000674:	2300      	movs	r3, #0
}
 8000676:	4618      	mov	r0, r3
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	e000e010 	.word	0xe000e010

08000684 <systick_timer_start>:

#include "systick.h"
#include "stm32f4xx.h"

void systick_timer_start(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
    // Reset SysTick counter value
   // SysTick->VAL = 0;

    // Enable SysTick counter
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8000688:	4b05      	ldr	r3, [pc, #20]	@ (80006a0 <systick_timer_start+0x1c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a04      	ldr	r2, [pc, #16]	@ (80006a0 <systick_timer_start+0x1c>)
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	6013      	str	r3, [r2, #0]
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	e000e010 	.word	0xe000e010

080006a4 <systick_timer_init>:
    // Disable SysTick counter
   // SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
}

void systick_timer_init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
    // Set SysTick to trigger interrupt every 1ms
    SysTick_Config(SystemCoreClock/1000);
 80006a8:	4b05      	ldr	r3, [pc, #20]	@ (80006c0 <systick_timer_init+0x1c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a05      	ldr	r2, [pc, #20]	@ (80006c4 <systick_timer_init+0x20>)
 80006ae:	fba2 2303 	umull	r2, r3, r2, r3
 80006b2:	099b      	lsrs	r3, r3, #6
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff ffc3 	bl	8000640 <SysTick_Config>
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	200000c8 	.word	0x200000c8
 80006c4:	10624dd3 	.word	0x10624dd3

080006c8 <__NVIC_EnableIRQ>:
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	db0b      	blt.n	80006f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	f003 021f 	and.w	r2, r3, #31
 80006e0:	4907      	ldr	r1, [pc, #28]	@ (8000700 <__NVIC_EnableIRQ+0x38>)
 80006e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e6:	095b      	lsrs	r3, r3, #5
 80006e8:	2001      	movs	r0, #1
 80006ea:	fa00 f202 	lsl.w	r2, r0, r2
 80006ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e000e100 	.word	0xe000e100

08000704 <__NVIC_DisableIRQ>:
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800070e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000712:	2b00      	cmp	r3, #0
 8000714:	db12      	blt.n	800073c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	f003 021f 	and.w	r2, r3, #31
 800071c:	490a      	ldr	r1, [pc, #40]	@ (8000748 <__NVIC_DisableIRQ+0x44>)
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	095b      	lsrs	r3, r3, #5
 8000724:	2001      	movs	r0, #1
 8000726:	fa00 f202 	lsl.w	r2, r0, r2
 800072a:	3320      	adds	r3, #32
 800072c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000730:	f3bf 8f4f 	dsb	sy
}
 8000734:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000736:	f3bf 8f6f 	isb	sy
}
 800073a:	bf00      	nop
}
 800073c:	bf00      	nop
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	e000e100 	.word	0xe000e100

0800074c <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800074c:	b480      	push	{r7}
 800074e:	b089      	sub	sp, #36	@ 0x24
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	330c      	adds	r3, #12
 8000758:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	e853 3f00 	ldrex	r3, [r3]
 8000760:	60bb      	str	r3, [r7, #8]
   return(result);
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	f043 0320 	orr.w	r3, r3, #32
 8000768:	61fb      	str	r3, [r7, #28]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	330c      	adds	r3, #12
 800076e:	69fa      	ldr	r2, [r7, #28]
 8000770:	61ba      	str	r2, [r7, #24]
 8000772:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000774:	6979      	ldr	r1, [r7, #20]
 8000776:	69ba      	ldr	r2, [r7, #24]
 8000778:	e841 2300 	strex	r3, r2, [r1]
 800077c:	613b      	str	r3, [r7, #16]
   return(result);
 800077e:	693b      	ldr	r3, [r7, #16]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d1e7      	bne.n	8000754 <LL_USART_EnableIT_RXNE+0x8>
}
 8000784:	bf00      	nop
 8000786:	bf00      	nop
 8000788:	3724      	adds	r7, #36	@ 0x24
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr

08000792 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8000792:	b480      	push	{r7}
 8000794:	b089      	sub	sp, #36	@ 0x24
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	330c      	adds	r3, #12
 800079e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	e853 3f00 	ldrex	r3, [r3]
 80007a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ae:	61fb      	str	r3, [r7, #28]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	330c      	adds	r3, #12
 80007b4:	69fa      	ldr	r2, [r7, #28]
 80007b6:	61ba      	str	r2, [r7, #24]
 80007b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80007ba:	6979      	ldr	r1, [r7, #20]
 80007bc:	69ba      	ldr	r2, [r7, #24]
 80007be:	e841 2300 	strex	r3, r2, [r1]
 80007c2:	613b      	str	r3, [r7, #16]
   return(result);
 80007c4:	693b      	ldr	r3, [r7, #16]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d1e7      	bne.n	800079a <LL_USART_EnableIT_TXE+0x8>
}
 80007ca:	bf00      	nop
 80007cc:	bf00      	nop
 80007ce:	3724      	adds	r7, #36	@ 0x24
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 80007d8:	b480      	push	{r7}
 80007da:	b089      	sub	sp, #36	@ 0x24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	330c      	adds	r3, #12
 80007e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	e853 3f00 	ldrex	r3, [r3]
 80007ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80007f4:	61fb      	str	r3, [r7, #28]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	330c      	adds	r3, #12
 80007fa:	69fa      	ldr	r2, [r7, #28]
 80007fc:	61ba      	str	r2, [r7, #24]
 80007fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000800:	6979      	ldr	r1, [r7, #20]
 8000802:	69ba      	ldr	r2, [r7, #24]
 8000804:	e841 2300 	strex	r3, r2, [r1]
 8000808:	613b      	str	r3, [r7, #16]
   return(result);
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d1e7      	bne.n	80007e0 <LL_USART_DisableIT_TXE+0x8>
}
 8000810:	bf00      	nop
 8000812:	bf00      	nop
 8000814:	3724      	adds	r7, #36	@ 0x24
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 800081e:	b480      	push	{r7}
 8000820:	b083      	sub	sp, #12
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	68db      	ldr	r3, [r3, #12]
 800082a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800082e:	2b80      	cmp	r3, #128	@ 0x80
 8000830:	bf0c      	ite	eq
 8000832:	2301      	moveq	r3, #1
 8000834:	2300      	movne	r3, #0
 8000836:	b2db      	uxtb	r3, r3
}
 8000838:	4618      	mov	r0, r3
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000850:	78fa      	ldrb	r2, [r7, #3]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	605a      	str	r2, [r3, #4]
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <UART_Init>:
 */

void UART_Init( uart_stdio_typedef* p_uart, USART_TypeDef* _handle,
                IRQn_Type _irqn, char* _p_TX_buffer, char* _p_RX_buffer,
                uint16_t _TX_size, uint16_t _RX_size)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b084      	sub	sp, #16
 8000866:	af00      	add	r7, sp, #0
 8000868:	60f8      	str	r0, [r7, #12]
 800086a:	60b9      	str	r1, [r7, #8]
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	4613      	mov	r3, r2
 8000870:	71fb      	strb	r3, [r7, #7]
    p_uart->handle  = _handle;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	68ba      	ldr	r2, [r7, #8]
 8000876:	601a      	str	r2, [r3, #0]
    p_uart->irqn    = _irqn;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	79fa      	ldrb	r2, [r7, #7]
 800087c:	711a      	strb	r2, [r3, #4]
    p_uart->TX_size = _TX_size;
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	8bba      	ldrh	r2, [r7, #28]
 8000882:	80da      	strh	r2, [r3, #6]
    p_uart->RX_size = _RX_size;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	8c3a      	ldrh	r2, [r7, #32]
 8000888:	811a      	strh	r2, [r3, #8]

    p_uart->p_TX_buffer = _p_TX_buffer;
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	683a      	ldr	r2, [r7, #0]
 800088e:	60da      	str	r2, [r3, #12]
    p_uart->p_RX_buffer = _p_RX_buffer;
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	69ba      	ldr	r2, [r7, #24]
 8000894:	615a      	str	r2, [r3, #20]

    p_uart->TX_write_index  = 0;
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	2200      	movs	r2, #0
 800089a:	821a      	strh	r2, [r3, #16]
    p_uart->TX_read_index   = 0;
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	2200      	movs	r2, #0
 80008a0:	825a      	strh	r2, [r3, #18]
    p_uart->RX_write_index  = 0;
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	2200      	movs	r2, #0
 80008a6:	831a      	strh	r2, [r3, #24]
    p_uart->RX_read_index   = 0;
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	2200      	movs	r2, #0
 80008ac:	835a      	strh	r2, [r3, #26]

    if(TX_BUFFER_SIZE(p_uart) != 0)
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	88db      	ldrh	r3, [r3, #6]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d006      	beq.n	80008c4 <UART_Init+0x62>
    {
        //p_uart->p_TX_buffer = (uint8_t *)malloc(TX_BUFFER_SIZE(p_uart) * sizeof(uint8_t));
        memset((void *)p_uart->p_TX_buffer, 0, sizeof(p_uart->p_TX_buffer));
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	68db      	ldr	r3, [r3, #12]
 80008ba:	2204      	movs	r2, #4
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f003 f91a 	bl	8003af8 <memset>
    }

    if(RX_BUFFER_SIZE(p_uart) != 0)
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	891b      	ldrh	r3, [r3, #8]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d006      	beq.n	80008da <UART_Init+0x78>
    {
        //p_uart->p_RX_buffer = (uint8_t *)malloc(RX_BUFFER_SIZE(p_uart) * sizeof(uint8_t));
        memset((void *)p_uart->p_RX_buffer, 0, sizeof(p_uart->p_RX_buffer));
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	695b      	ldr	r3, [r3, #20]
 80008d0:	2204      	movs	r2, #4
 80008d2:	2100      	movs	r1, #0
 80008d4:	4618      	mov	r0, r3
 80008d6:	f003 f90f 	bl	8003af8 <memset>
    }

    // Disable the TX IT
    LL_USART_DisableIT_TXE(p_uart->handle);
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff ff7a 	bl	80007d8 <LL_USART_DisableIT_TXE>

    // Start the RX IT, it will only run when there is a data send to the MCU.
    LL_USART_EnableIT_RXNE(p_uart->handle);
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff2f 	bl	800074c <LL_USART_EnableIT_RXNE>
}
 80008ee:	bf00      	nop
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <UART_Send_Char>:
//!
//! \param pcBuf points to a buffer containing the string to transmit.
//
//*****************************************************************************
void UART_Send_Char(uart_stdio_typedef* p_uart, const char Char)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b082      	sub	sp, #8
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
 80008fe:	460b      	mov	r3, r1
 8000900:	70fb      	strb	r3, [r7, #3]
	UART_Write(p_uart, &Char, 1);
 8000902:	1cfb      	adds	r3, r7, #3
 8000904:	2201      	movs	r2, #1
 8000906:	4619      	mov	r1, r3
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 f817 	bl	800093c <UART_Write>
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <UART_Send_String>:
//!
//! \param pcBuf points to a buffer containing the string to transmit.
//
//*****************************************************************************
void UART_Send_String(uart_stdio_typedef* p_uart, const char *pcBuf)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b082      	sub	sp, #8
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
 800091e:	6039      	str	r1, [r7, #0]
	UART_Write(p_uart, pcBuf, strlen(pcBuf));
 8000920:	6838      	ldr	r0, [r7, #0]
 8000922:	f7ff fc5b 	bl	80001dc <strlen>
 8000926:	4603      	mov	r3, r0
 8000928:	b29b      	uxth	r3, r3
 800092a:	461a      	mov	r2, r3
 800092c:	6839      	ldr	r1, [r7, #0]
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f000 f804 	bl	800093c <UART_Write>
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <UART_Write>:
//!
//! \return Returns the count of characters written.
//
//*****************************************************************************
uint16_t UART_Write(uart_stdio_typedef* p_uart, const char *pcBuf, uint16_t ui16Len)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	4613      	mov	r3, r2
 8000948:	80fb      	strh	r3, [r7, #6]
    // Check for valid arguments.
    //
    //
    // Send the characters
    //
    for(uIdx = 0; uIdx < ui16Len; uIdx++)
 800094a:	2300      	movs	r3, #0
 800094c:	75fb      	strb	r3, [r7, #23]
 800094e:	e053      	b.n	80009f8 <UART_Write+0xbc>
    {
        //
        // If the character to the UART is \n, then add a \r before it so that
        // \n is translated to \n\r in the output. This is for the enter key.
        //
        if(pcBuf[uIdx] == '\n')
 8000950:	7dfb      	ldrb	r3, [r7, #23]
 8000952:	68ba      	ldr	r2, [r7, #8]
 8000954:	4413      	add	r3, r2
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b0a      	cmp	r3, #10
 800095a:	d11e      	bne.n	800099a <UART_Write+0x5e>
        {
            if(!TX_BUFFER_FULL(p_uart))
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	f103 0012 	add.w	r0, r3, #18
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	f103 0110 	add.w	r1, r3, #16
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	88db      	ldrh	r3, [r3, #6]
 800096c:	461a      	mov	r2, r3
 800096e:	f000 fa8b 	bl	8000e88 <UART_is_buffer_full>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d145      	bne.n	8000a04 <UART_Write+0xc8>
            {
                p_uart->p_TX_buffer[p_uart->TX_write_index] = '\r';
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	68fa      	ldr	r2, [r7, #12]
 800097e:	8a12      	ldrh	r2, [r2, #16]
 8000980:	b292      	uxth	r2, r2
 8000982:	4413      	add	r3, r2
 8000984:	220d      	movs	r2, #13
 8000986:	701a      	strb	r2, [r3, #0]
                ADVANCE_TX_WRITE_INDEX(p_uart);
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f103 0210 	add.w	r2, r3, #16
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	88db      	ldrh	r3, [r3, #6]
 8000992:	4619      	mov	r1, r3
 8000994:	4610      	mov	r0, r2
 8000996:	f000 fab0 	bl	8000efa <UART_advance_buffer_index>
                //
                break;
            }
        }

        if(!TX_BUFFER_FULL(p_uart))
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	f103 0012 	add.w	r0, r3, #18
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f103 0110 	add.w	r1, r3, #16
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	88db      	ldrh	r3, [r3, #6]
 80009aa:	461a      	mov	r2, r3
 80009ac:	f000 fa6c 	bl	8000e88 <UART_is_buffer_full>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d114      	bne.n	80009e0 <UART_Write+0xa4>
        {
        	p_uart->p_TX_buffer[p_uart->TX_write_index] = pcBuf[uIdx];
 80009b6:	7dfb      	ldrb	r3, [r7, #23]
 80009b8:	68ba      	ldr	r2, [r7, #8]
 80009ba:	441a      	add	r2, r3
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	68f9      	ldr	r1, [r7, #12]
 80009c2:	8a09      	ldrh	r1, [r1, #16]
 80009c4:	b289      	uxth	r1, r1
 80009c6:	440b      	add	r3, r1
 80009c8:	7812      	ldrb	r2, [r2, #0]
 80009ca:	701a      	strb	r2, [r3, #0]
            ADVANCE_TX_WRITE_INDEX(p_uart);
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	f103 0210 	add.w	r2, r3, #16
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	88db      	ldrh	r3, [r3, #6]
 80009d6:	4619      	mov	r1, r3
 80009d8:	4610      	mov	r0, r2
 80009da:	f000 fa8e 	bl	8000efa <UART_advance_buffer_index>
 80009de:	e008      	b.n	80009f2 <UART_Write+0xb6>
        else
        {
            //
            // Buffer is full - discard remaining characters and return.
            //
            p_uart->p_TX_buffer[p_uart->TX_write_index] = '\r';
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	68fa      	ldr	r2, [r7, #12]
 80009e6:	8a12      	ldrh	r2, [r2, #16]
 80009e8:	b292      	uxth	r2, r2
 80009ea:	4413      	add	r3, r2
 80009ec:	220d      	movs	r2, #13
 80009ee:	701a      	strb	r2, [r3, #0]
            break;
 80009f0:	e009      	b.n	8000a06 <UART_Write+0xca>
    for(uIdx = 0; uIdx < ui16Len; uIdx++)
 80009f2:	7dfb      	ldrb	r3, [r7, #23]
 80009f4:	3301      	adds	r3, #1
 80009f6:	75fb      	strb	r3, [r7, #23]
 80009f8:	7dfb      	ldrb	r3, [r7, #23]
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	88fa      	ldrh	r2, [r7, #6]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d8a6      	bhi.n	8000950 <UART_Write+0x14>
 8000a02:	e000      	b.n	8000a06 <UART_Write+0xca>
                break;
 8000a04:	bf00      	nop

    //
    // If the usart txe irq is disable, this mean an usart phase is finished
    // we need to enable the txe irq and kick start the transmit process.
    //
    if (LL_USART_IsEnabledIT_TXE(p_uart->handle) == false)
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff ff07 	bl	800081e <LL_USART_IsEnabledIT_TXE>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d107      	bne.n	8000a26 <UART_Write+0xea>
        // if turn on TXE b4 prime transmit create a
        // bug where the index = 2 char don't get
        // send.

        //LL_USART_EnableIT_TXE(p_uart->handle);
        UART_Prime_Transmit(p_uart);
 8000a16:	68f8      	ldr	r0, [r7, #12]
 8000a18:	f000 fa8b 	bl	8000f32 <UART_Prime_Transmit>
        LL_USART_EnableIT_TXE(p_uart->handle);
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff feb6 	bl	8000792 <LL_USART_EnableIT_TXE>
    }

    //
    // Return the number of characters written.
    //
    return(uIdx);
 8000a26:	7dfb      	ldrb	r3, [r7, #23]
 8000a28:	b29b      	uxth	r3, r3
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <UART_Printf>:
//!
//! \return None.
//
//*****************************************************************************
void UART_Printf(uart_stdio_typedef* p_uart, const char *pc_string, ...)
{
 8000a34:	b40e      	push	{r1, r2, r3}
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b08d      	sub	sp, #52	@ 0x34
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
    // Check the arguments.
    //

    va_list vaArgP;

    va_start(vaArgP, pc_string);
 8000a3e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a42:	60bb      	str	r3, [r7, #8]

    //
    // Loop while there are more characters in the string.
    //
    while(*pc_string)
 8000a44:	e1e5      	b.n	8000e12 <UART_Printf+0x3de>
    {
        //
        // Find the first non-% character, or the end of the string.
        //
        for(ui16Idx = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000a4a:	e002      	b.n	8000a52 <UART_Printf+0x1e>
            (pc_string[ui16Idx] != '%') && (pc_string[ui16Idx] != '\0');
            ui16Idx++)
 8000a4c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000a4e:	3301      	adds	r3, #1
 8000a50:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            (pc_string[ui16Idx] != '%') && (pc_string[ui16Idx] != '\0');
 8000a52:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000a54:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000a56:	4413      	add	r3, r2
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b25      	cmp	r3, #37	@ 0x25
 8000a5c:	d005      	beq.n	8000a6a <UART_Printf+0x36>
 8000a5e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000a60:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000a62:	4413      	add	r3, r2
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d1f0      	bne.n	8000a4c <UART_Printf+0x18>
        }

        //
        // Write this portion of the string.
        //
        UART_Write(p_uart, pc_string, ui16Idx);
 8000a6a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f7ff ff63 	bl	800093c <UART_Write>

        //
        // Skip the portion of the string that was written.
        //
        pc_string += ui16Idx;
 8000a76:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000a78:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000a7a:	4413      	add	r3, r2
 8000a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c

        //
        // See if the next character is a %.
        //
        if(*pc_string == '%')
 8000a7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b25      	cmp	r3, #37	@ 0x25
 8000a84:	f040 81c5 	bne.w	8000e12 <UART_Printf+0x3de>
        {
            //
            // Skip the %.
            //
            pc_string++;
 8000a88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c

            //
            // Set the digit count to zero, and the fill character to space
            // (in other words, to the defaults).
            //
            ui16Count = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	857b      	strh	r3, [r7, #42]	@ 0x2a
            cFill = ' ';
 8000a92:	2320      	movs	r3, #32
 8000a94:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
again:

            //
            // Determine how to handle the next character.
            //
            switch(*pc_string++)
 8000a98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a9a:	1c5a      	adds	r2, r3, #1
 8000a9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	3b25      	subs	r3, #37	@ 0x25
 8000aa2:	2b53      	cmp	r3, #83	@ 0x53
 8000aa4:	f200 81ae 	bhi.w	8000e04 <UART_Printf+0x3d0>
 8000aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8000ab0 <UART_Printf+0x7c>)
 8000aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aae:	bf00      	nop
 8000ab0:	08000df5 	.word	0x08000df5
 8000ab4:	08000e05 	.word	0x08000e05
 8000ab8:	08000e05 	.word	0x08000e05
 8000abc:	08000e05 	.word	0x08000e05
 8000ac0:	08000e05 	.word	0x08000e05
 8000ac4:	08000e05 	.word	0x08000e05
 8000ac8:	08000e05 	.word	0x08000e05
 8000acc:	08000e05 	.word	0x08000e05
 8000ad0:	08000e05 	.word	0x08000e05
 8000ad4:	08000e05 	.word	0x08000e05
 8000ad8:	08000e05 	.word	0x08000e05
 8000adc:	08000c01 	.word	0x08000c01
 8000ae0:	08000c01 	.word	0x08000c01
 8000ae4:	08000c01 	.word	0x08000c01
 8000ae8:	08000c01 	.word	0x08000c01
 8000aec:	08000c01 	.word	0x08000c01
 8000af0:	08000c01 	.word	0x08000c01
 8000af4:	08000c01 	.word	0x08000c01
 8000af8:	08000c01 	.word	0x08000c01
 8000afc:	08000c01 	.word	0x08000c01
 8000b00:	08000c01 	.word	0x08000c01
 8000b04:	08000e05 	.word	0x08000e05
 8000b08:	08000e05 	.word	0x08000e05
 8000b0c:	08000e05 	.word	0x08000e05
 8000b10:	08000e05 	.word	0x08000e05
 8000b14:	08000e05 	.word	0x08000e05
 8000b18:	08000e05 	.word	0x08000e05
 8000b1c:	08000e05 	.word	0x08000e05
 8000b20:	08000e05 	.word	0x08000e05
 8000b24:	08000e05 	.word	0x08000e05
 8000b28:	08000e05 	.word	0x08000e05
 8000b2c:	08000e05 	.word	0x08000e05
 8000b30:	08000e05 	.word	0x08000e05
 8000b34:	08000e05 	.word	0x08000e05
 8000b38:	08000e05 	.word	0x08000e05
 8000b3c:	08000e05 	.word	0x08000e05
 8000b40:	08000e05 	.word	0x08000e05
 8000b44:	08000e05 	.word	0x08000e05
 8000b48:	08000e05 	.word	0x08000e05
 8000b4c:	08000e05 	.word	0x08000e05
 8000b50:	08000e05 	.word	0x08000e05
 8000b54:	08000e05 	.word	0x08000e05
 8000b58:	08000e05 	.word	0x08000e05
 8000b5c:	08000e05 	.word	0x08000e05
 8000b60:	08000e05 	.word	0x08000e05
 8000b64:	08000e05 	.word	0x08000e05
 8000b68:	08000e05 	.word	0x08000e05
 8000b6c:	08000e05 	.word	0x08000e05
 8000b70:	08000e05 	.word	0x08000e05
 8000b74:	08000e05 	.word	0x08000e05
 8000b78:	08000e05 	.word	0x08000e05
 8000b7c:	08000cf5 	.word	0x08000cf5
 8000b80:	08000e05 	.word	0x08000e05
 8000b84:	08000e05 	.word	0x08000e05
 8000b88:	08000e05 	.word	0x08000e05
 8000b8c:	08000e05 	.word	0x08000e05
 8000b90:	08000e05 	.word	0x08000e05
 8000b94:	08000e05 	.word	0x08000e05
 8000b98:	08000e05 	.word	0x08000e05
 8000b9c:	08000e05 	.word	0x08000e05
 8000ba0:	08000e05 	.word	0x08000e05
 8000ba4:	08000e05 	.word	0x08000e05
 8000ba8:	08000c37 	.word	0x08000c37
 8000bac:	08000c53 	.word	0x08000c53
 8000bb0:	08000e05 	.word	0x08000e05
 8000bb4:	08000e05 	.word	0x08000e05
 8000bb8:	08000e05 	.word	0x08000e05
 8000bbc:	08000e05 	.word	0x08000e05
 8000bc0:	08000c53 	.word	0x08000c53
 8000bc4:	08000e05 	.word	0x08000e05
 8000bc8:	08000e05 	.word	0x08000e05
 8000bcc:	08000e05 	.word	0x08000e05
 8000bd0:	08000e05 	.word	0x08000e05
 8000bd4:	08000e05 	.word	0x08000e05
 8000bd8:	08000e05 	.word	0x08000e05
 8000bdc:	08000cf5 	.word	0x08000cf5
 8000be0:	08000e05 	.word	0x08000e05
 8000be4:	08000e05 	.word	0x08000e05
 8000be8:	08000c83 	.word	0x08000c83
 8000bec:	08000e05 	.word	0x08000e05
 8000bf0:	08000cdb 	.word	0x08000cdb
 8000bf4:	08000e05 	.word	0x08000e05
 8000bf8:	08000e05 	.word	0x08000e05
 8000bfc:	08000cf5 	.word	0x08000cf5
                {
                    //
                    // If this is a zero, and it is the first digit, then the
                    // fill character is a zero instead of a space.
                    //
                    if((pc_string[-1] == '0') && (ui16Count == 0))
 8000c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c02:	3b01      	subs	r3, #1
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b30      	cmp	r3, #48	@ 0x30
 8000c08:	d105      	bne.n	8000c16 <UART_Printf+0x1e2>
 8000c0a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d102      	bne.n	8000c16 <UART_Printf+0x1e2>
                    {
                        cFill = '0';
 8000c10:	2330      	movs	r3, #48	@ 0x30
 8000c12:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                    }

                    //
                    // Update the digit count.
                    //
                    ui16Count *= 10;
 8000c16:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000c18:	461a      	mov	r2, r3
 8000c1a:	0092      	lsls	r2, r2, #2
 8000c1c:	4413      	add	r3, r2
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	857b      	strh	r3, [r7, #42]	@ 0x2a
                    ui16Count += pc_string[-1] - '0';
 8000c22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c24:	3b01      	subs	r3, #1
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000c2c:	4413      	add	r3, r2
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	3b30      	subs	r3, #48	@ 0x30
 8000c32:	857b      	strh	r3, [r7, #42]	@ 0x2a

                    //
                    // Get the next character.
                    //
                    goto again;
 8000c34:	e730      	b.n	8000a98 <UART_Printf+0x64>
                case 'c':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui16Value = va_arg(vaArgP, int);
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	1d1a      	adds	r2, r3, #4
 8000c3a:	60ba      	str	r2, [r7, #8]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	83fb      	strh	r3, [r7, #30]

                    //
                    // Print out the character.
                    //
                    UART_Write(p_uart, (char *)&ui16Value, 1);
 8000c42:	f107 031e 	add.w	r3, r7, #30
 8000c46:	2201      	movs	r2, #1
 8000c48:	4619      	mov	r1, r3
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff fe76 	bl	800093c <UART_Write>

                    //
                    // This command has been handled.
                    //
                    break;
 8000c50:	e0df      	b.n	8000e12 <UART_Printf+0x3de>
                case 'i':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui16Value = va_arg(vaArgP, int);
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	1d1a      	adds	r2, r3, #4
 8000c56:	60ba      	str	r2, [r7, #8]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	83fb      	strh	r3, [r7, #30]

                    //
                    // Reset the buffer position.
                    //
                    ui16Pos = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	85bb      	strh	r3, [r7, #44]	@ 0x2c

                    //
                    // If the value is negative, make it positive and indicate
                    // that a minus sign is needed.
                    //
                    if((int16_t)ui16Value < 0)
 8000c62:	8bfb      	ldrh	r3, [r7, #30]
 8000c64:	b21b      	sxth	r3, r3
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	da06      	bge.n	8000c78 <UART_Printf+0x244>
                    {
                        //
                        // Make the value positive.
                        //
                        ui16Value = -(int16_t)ui16Value;
 8000c6a:	8bfb      	ldrh	r3, [r7, #30]
 8000c6c:	425b      	negs	r3, r3
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	83fb      	strh	r3, [r7, #30]

                        //
                        // Indicate that the value is negative.
                        //
                        ui16Neg = 1;
 8000c72:	2301      	movs	r3, #1
 8000c74:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000c76:	e001      	b.n	8000c7c <UART_Printf+0x248>
                    {
                        //
                        // Indicate that the value is positive so that a minus
                        // sign isn't inserted.
                        //
                        ui16Neg = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	84fb      	strh	r3, [r7, #38]	@ 0x26
                    }

                    //
                    // Set the base to 10.
                    //
                    ui16Base = 10;
 8000c7c:	230a      	movs	r3, #10
 8000c7e:	853b      	strh	r3, [r7, #40]	@ 0x28

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
 8000c80:	e044      	b.n	8000d0c <UART_Printf+0x2d8>
                case 's':
                {
                    //
                    // Get the string pointer from the varargs.
                    //
                    pcStr = va_arg(vaArgP, char *);
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	1d1a      	adds	r2, r3, #4
 8000c86:	60ba      	str	r2, [r7, #8]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	623b      	str	r3, [r7, #32]

                    //
                    // Determine the length of the string.
                    //
                    for(ui16Idx = 0; pcStr[ui16Idx] != '\0'; ui16Idx++)
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000c90:	e002      	b.n	8000c98 <UART_Printf+0x264>
 8000c92:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000c94:	3301      	adds	r3, #1
 8000c96:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000c98:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000c9a:	6a3a      	ldr	r2, [r7, #32]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d1f6      	bne.n	8000c92 <UART_Printf+0x25e>
                    }

                    //
                    // Write the string.
                    //
                    UART_Write(p_uart, pcStr, ui16Idx);
 8000ca4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	6a39      	ldr	r1, [r7, #32]
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff fe46 	bl	800093c <UART_Write>

                    //
                    // Write any required padding spaces
                    //
                    if(ui16Count > ui16Idx)
 8000cb0:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8000cb2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	f240 80ab 	bls.w	8000e10 <UART_Printf+0x3dc>
                    {
                        ui16Count -= ui16Idx;
 8000cba:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8000cbc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	857b      	strh	r3, [r7, #42]	@ 0x2a
                        while(ui16Count--)
 8000cc2:	e004      	b.n	8000cce <UART_Printf+0x29a>
                        {
                            UART_Write(p_uart, " ", 1);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	4959      	ldr	r1, [pc, #356]	@ (8000e2c <UART_Printf+0x3f8>)
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f7ff fe37 	bl	800093c <UART_Write>
                        while(ui16Count--)
 8000cce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000cd0:	1e5a      	subs	r2, r3, #1
 8000cd2:	857a      	strh	r2, [r7, #42]	@ 0x2a
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d1f5      	bne.n	8000cc4 <UART_Printf+0x290>
                    }

                    //
                    // This command has been handled.
                    //
                    break;
 8000cd8:	e09a      	b.n	8000e10 <UART_Printf+0x3dc>
                case 'u':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui16Value = va_arg(vaArgP, int);
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	1d1a      	adds	r2, r3, #4
 8000cde:	60ba      	str	r2, [r7, #8]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	83fb      	strh	r3, [r7, #30]

                    //
                    // Reset the buffer position.
                    //
                    ui16Pos = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	85bb      	strh	r3, [r7, #44]	@ 0x2c

                    //
                    // Set the base to 10.
                    //
                    ui16Base = 10;
 8000cea:	230a      	movs	r3, #10
 8000cec:	853b      	strh	r3, [r7, #40]	@ 0x28

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui16Neg = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	84fb      	strh	r3, [r7, #38]	@ 0x26

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
 8000cf2:	e00b      	b.n	8000d0c <UART_Printf+0x2d8>
                case 'p':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui16Value = va_arg(vaArgP, int);
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	1d1a      	adds	r2, r3, #4
 8000cf8:	60ba      	str	r2, [r7, #8]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	83fb      	strh	r3, [r7, #30]

                    //
                    // Reset the buffer position.
                    //
                    ui16Pos = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	85bb      	strh	r3, [r7, #44]	@ 0x2c

                    //
                    // Set the base to 16.
                    //
                    ui16Base = 16;
 8000d04:	2310      	movs	r3, #16
 8000d06:	853b      	strh	r3, [r7, #40]	@ 0x28

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui16Neg = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	84fb      	strh	r3, [r7, #38]	@ 0x26
                    //
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ui16Idx = 1;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000d10:	e007      	b.n	8000d22 <UART_Printf+0x2ee>
                        (((ui16Idx * ui16Base) <= ui16Value) &&
                         (((ui16Idx * ui16Base) / ui16Base) == ui16Idx));
                        ui16Idx *= ui16Base, ui16Count--)
 8000d12:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000d14:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000d16:	fb12 f303 	smulbb	r3, r2, r3
 8000d1a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000d1c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	857b      	strh	r3, [r7, #42]	@ 0x2a
                        (((ui16Idx * ui16Base) <= ui16Value) &&
 8000d22:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000d24:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000d26:	fb02 f303 	mul.w	r3, r2, r3
 8000d2a:	8bfa      	ldrh	r2, [r7, #30]
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	ddf0      	ble.n	8000d12 <UART_Printf+0x2de>

                    //
                    // If the value is negative, reduce the count of padding
                    // characters needed.
                    //
                    if(ui16Neg)
 8000d30:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d002      	beq.n	8000d3c <UART_Printf+0x308>
                    {
                        ui16Count--;
 8000d36:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	857b      	strh	r3, [r7, #42]	@ 0x2a

                    //
                    // If the value is negative and the value is padded with
                    // zeros, then place the minus sign before the padding.
                    //
                    if(ui16Neg && (cFill == '0'))
 8000d3c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d00d      	beq.n	8000d5e <UART_Printf+0x32a>
 8000d42:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000d46:	2b30      	cmp	r3, #48	@ 0x30
 8000d48:	d109      	bne.n	8000d5e <UART_Printf+0x32a>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui16Pos++] = '-';
 8000d4a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000d4c:	1c5a      	adds	r2, r3, #1
 8000d4e:	85ba      	strh	r2, [r7, #44]	@ 0x2c
 8000d50:	3330      	adds	r3, #48	@ 0x30
 8000d52:	443b      	add	r3, r7
 8000d54:	222d      	movs	r2, #45	@ 0x2d
 8000d56:	f803 2c24 	strb.w	r2, [r3, #-36]

                        //
                        // The minus sign has been placed, so turn off the
                        // negative flag.
                        //
                        ui16Neg = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	84fb      	strh	r3, [r7, #38]	@ 0x26

                    //
                    // Provide additional padding at the beginning of the
                    // string conversion if needed.
                    //
                    if((ui16Count > 1) && (ui16Count < 16))
 8000d5e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d915      	bls.n	8000d90 <UART_Printf+0x35c>
 8000d64:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000d66:	2b0f      	cmp	r3, #15
 8000d68:	d812      	bhi.n	8000d90 <UART_Printf+0x35c>
                    {
                        for(ui16Count--; ui16Count; ui16Count--)
 8000d6a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000d6c:	3b01      	subs	r3, #1
 8000d6e:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8000d70:	e00b      	b.n	8000d8a <UART_Printf+0x356>
                        {
                            pcBuf[ui16Pos++] = cFill;
 8000d72:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000d74:	1c5a      	adds	r2, r3, #1
 8000d76:	85ba      	strh	r2, [r7, #44]	@ 0x2c
 8000d78:	3330      	adds	r3, #48	@ 0x30
 8000d7a:	443b      	add	r3, r7
 8000d7c:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8000d80:	f803 2c24 	strb.w	r2, [r3, #-36]
                        for(ui16Count--; ui16Count; ui16Count--)
 8000d84:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000d86:	3b01      	subs	r3, #1
 8000d88:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8000d8a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d1f0      	bne.n	8000d72 <UART_Printf+0x33e>

                    //
                    // If the value is negative, then place the minus sign
                    // before the number.
                    //
                    if(ui16Neg)
 8000d90:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d023      	beq.n	8000dde <UART_Printf+0x3aa>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui16Pos++] = '-';
 8000d96:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000d98:	1c5a      	adds	r2, r3, #1
 8000d9a:	85ba      	strh	r2, [r7, #44]	@ 0x2c
 8000d9c:	3330      	adds	r3, #48	@ 0x30
 8000d9e:	443b      	add	r3, r7
 8000da0:	222d      	movs	r2, #45	@ 0x2d
 8000da2:	f803 2c24 	strb.w	r2, [r3, #-36]
                    }

                    //
                    // Convert the value into a string.
                    //
                    for(; ui16Idx; ui16Idx /= ui16Base)
 8000da6:	e01a      	b.n	8000dde <UART_Printf+0x3aa>
                    {
                        pcBuf[ui16Pos++] =
                            HEX_reference[(ui16Value / ui16Idx) % ui16Base];
 8000da8:	4821      	ldr	r0, [pc, #132]	@ (8000e30 <UART_Printf+0x3fc>)
 8000daa:	8bfa      	ldrh	r2, [r7, #30]
 8000dac:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	461a      	mov	r2, r3
 8000db6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000db8:	fb92 f1f3 	sdiv	r1, r2, r3
 8000dbc:	fb01 f303 	mul.w	r3, r1, r3
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	18c2      	adds	r2, r0, r3
                        pcBuf[ui16Pos++] =
 8000dc4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000dc6:	1c59      	adds	r1, r3, #1
 8000dc8:	85b9      	strh	r1, [r7, #44]	@ 0x2c
                            HEX_reference[(ui16Value / ui16Idx) % ui16Base];
 8000dca:	7812      	ldrb	r2, [r2, #0]
                        pcBuf[ui16Pos++] =
 8000dcc:	3330      	adds	r3, #48	@ 0x30
 8000dce:	443b      	add	r3, r7
 8000dd0:	f803 2c24 	strb.w	r2, [r3, #-36]
                    for(; ui16Idx; ui16Idx /= ui16Base)
 8000dd4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000dd6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ddc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000dde:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1e1      	bne.n	8000da8 <UART_Printf+0x374>
                    }

                    //
                    // Write the string.
                    //
                    UART_Write(p_uart, pcBuf, ui16Pos);
 8000de4:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	4619      	mov	r1, r3
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff fda5 	bl	800093c <UART_Write>

                    //
                    // This command has been handled.
                    //
                    break;
 8000df2:	e00e      	b.n	8000e12 <UART_Printf+0x3de>
                case '%':
                {
                    //
                    // Simply write a single %.
                    //
                    UART_Write(p_uart, pc_string - 1, 1);
 8000df4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000df6:	3b01      	subs	r3, #1
 8000df8:	2201      	movs	r2, #1
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff fd9d 	bl	800093c <UART_Write>

                    //
                    // This command has been handled.
                    //
                    break;
 8000e02:	e006      	b.n	8000e12 <UART_Printf+0x3de>
                default:
                {
                    //
                    // Indicate an error.
                    //
                    UART_Write(p_uart, "ERROR", 5);
 8000e04:	2205      	movs	r2, #5
 8000e06:	490b      	ldr	r1, [pc, #44]	@ (8000e34 <UART_Printf+0x400>)
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff fd97 	bl	800093c <UART_Write>

                    //
                    // This command has been handled.
                    //
                    break;
 8000e0e:	e000      	b.n	8000e12 <UART_Printf+0x3de>
                    break;
 8000e10:	bf00      	nop
    while(*pc_string)
 8000e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f47f ae15 	bne.w	8000a46 <UART_Printf+0x12>
                }
            }
        }
    }
    va_end(vaArgP);
}
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
 8000e20:	3734      	adds	r7, #52	@ 0x34
 8000e22:	46bd      	mov	sp, r7
 8000e24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e28:	b003      	add	sp, #12
 8000e2a:	4770      	bx	lr
 8000e2c:	08003b7c 	.word	0x08003b7c
 8000e30:	08003b68 	.word	0x08003b68
 8000e34:	08003b80 	.word	0x08003b80

08000e38 <UART_Get_Char>:
//!
//! \return Returns the character read.
//
//*****************************************************************************
char UART_Get_Char(uart_stdio_typedef* p_uart)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

    char return_char;

    if (RX_BUFFER_EMPTY(p_uart))
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f103 021a 	add.w	r2, r3, #26
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3318      	adds	r3, #24
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4610      	mov	r0, r2
 8000e4e:	f000 f83c 	bl	8000eca <UART_is_buffer_empty>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <UART_Get_Char+0x24>
    {
        return 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	e011      	b.n	8000e80 <UART_Get_Char+0x48>
    }

    //
    // Read a character from the buffer.
    //
    return_char = p_uart->p_RX_buffer[p_uart->RX_read_index];
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	695b      	ldr	r3, [r3, #20]
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	8b52      	ldrh	r2, [r2, #26]
 8000e64:	b292      	uxth	r2, r2
 8000e66:	4413      	add	r3, r2
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	73fb      	strb	r3, [r7, #15]
    ADVANCE_RX_READ_INDEX(p_uart);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f103 021a 	add.w	r2, r3, #26
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	891b      	ldrh	r3, [r3, #8]
 8000e76:	4619      	mov	r1, r3
 8000e78:	4610      	mov	r0, r2
 8000e7a:	f000 f83e 	bl	8000efa <UART_advance_buffer_index>

    //
    // Return the character to the caller.
    //
    return(return_char);
 8000e7e:	7bfb      	ldrb	r3, [r7, #15]

}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <UART_is_buffer_full>:
//
//*****************************************************************************

uint8_t UART_is_buffer_full(volatile uint16_t *pui16Read,
             volatile uint16_t *pui16Write, uint16_t ui16Size)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b087      	sub	sp, #28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	4613      	mov	r3, r2
 8000e94:	80fb      	strh	r3, [r7, #6]
    uint16_t ui16Write;
    uint16_t ui16Read;

    ui16Write = *pui16Write;
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	881b      	ldrh	r3, [r3, #0]
 8000e9a:	82fb      	strh	r3, [r7, #22]
    ui16Read = *pui16Read;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	82bb      	strh	r3, [r7, #20]

    return((((ui16Write + 1) % ui16Size) == ui16Read) ? 1 : 0);
 8000ea2:	8afb      	ldrh	r3, [r7, #22]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	88fa      	ldrh	r2, [r7, #6]
 8000ea8:	fb93 f1f2 	sdiv	r1, r3, r2
 8000eac:	fb01 f202 	mul.w	r2, r1, r2
 8000eb0:	1a9a      	subs	r2, r3, r2
 8000eb2:	8abb      	ldrh	r3, [r7, #20]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	bf0c      	ite	eq
 8000eb8:	2301      	moveq	r3, #1
 8000eba:	2300      	movne	r3, #0
 8000ebc:	b2db      	uxtb	r3, r3
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	371c      	adds	r7, #28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <UART_is_buffer_empty>:
//
//*****************************************************************************

uint8_t UART_is_buffer_empty(volatile uint16_t *pui16Read,
              volatile uint16_t *pui16Write)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b085      	sub	sp, #20
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
 8000ed2:	6039      	str	r1, [r7, #0]
    uint16_t ui16Write;
    uint16_t ui16Read;

    ui16Write = *pui16Write;
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	881b      	ldrh	r3, [r3, #0]
 8000ed8:	81fb      	strh	r3, [r7, #14]
    ui16Read = *pui16Read;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	81bb      	strh	r3, [r7, #12]

    return((ui16Read == ui16Write) ? 1 : 0);
 8000ee0:	89ba      	ldrh	r2, [r7, #12]
 8000ee2:	89fb      	ldrh	r3, [r7, #14]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	bf0c      	ite	eq
 8000ee8:	2301      	moveq	r3, #1
 8000eea:	2300      	movne	r3, #0
 8000eec:	b2db      	uxtb	r3, r3
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <UART_advance_buffer_index>:
//! \return Returns the number of bytes of data currently in the buffer.
//
//*****************************************************************************

uint16_t UART_advance_buffer_index(volatile uint16_t* pui16Index, uint16_t ui16Size)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
 8000f02:	460b      	mov	r3, r1
 8000f04:	807b      	strh	r3, [r7, #2]
    *pui16Index = (*pui16Index + 1) % ui16Size;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	881b      	ldrh	r3, [r3, #0]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	887a      	ldrh	r2, [r7, #2]
 8000f10:	fb93 f1f2 	sdiv	r1, r3, r2
 8000f14:	fb01 f202 	mul.w	r2, r1, r2
 8000f18:	1a9b      	subs	r3, r3, r2
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	801a      	strh	r2, [r3, #0]

    return(*pui16Index);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	b29b      	uxth	r3, r3
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <UART_Prime_Transmit>:
// Take as many bytes from the transmit buffer as we have space for and move
// them into the UART transmit FIFO.
//
//*****************************************************************************
void UART_Prime_Transmit(uart_stdio_typedef* p_uart)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
    //
    // Do we have any data to transmit?
    //
    if(!TX_BUFFER_EMPTY(p_uart))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f103 0212 	add.w	r2, r3, #18
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3310      	adds	r3, #16
 8000f44:	4619      	mov	r1, r3
 8000f46:	4610      	mov	r0, r2
 8000f48:	f7ff ffbf 	bl	8000eca <UART_is_buffer_empty>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d120      	bne.n	8000f94 <UART_Prime_Transmit+0x62>
    {
        NVIC_DisableIRQ(p_uart->irqn);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fbd3 	bl	8000704 <__NVIC_DisableIRQ>

        LL_USART_TransmitData8(p_uart->handle, p_uart->p_TX_buffer[p_uart->TX_read_index]);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6818      	ldr	r0, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	8a52      	ldrh	r2, [r2, #18]
 8000f6a:	b292      	uxth	r2, r2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4619      	mov	r1, r3
 8000f72:	f7ff fc67 	bl	8000844 <LL_USART_TransmitData8>
        ADVANCE_TX_READ_INDEX(p_uart);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f103 0212 	add.w	r2, r3, #18
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	88db      	ldrh	r3, [r3, #6]
 8000f80:	4619      	mov	r1, r3
 8000f82:	4610      	mov	r0, r2
 8000f84:	f7ff ffb9 	bl	8000efa <UART_advance_buffer_index>

        NVIC_EnableIRQ(p_uart->irqn);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fb9a 	bl	80006c8 <__NVIC_EnableIRQ>
    }
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <CmdLineProcess>:
//! \b CMDLINE_TOO_MANY_ARGS if there are more arguments than can be parsed.
//! Otherwise it returns the code that was returned by the command function.
//
//*****************************************************************************
uint8_t CmdLineProcess(char *pcCmdLine, USART_TypeDef* USARTx)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
    char *pcChar;
    uint_fast8_t ui8Argc;
    bool bFindArg = true;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]

    //
    // Initialize the argument counter, and point to the beginning of the
    // command line string.
    //
    ui8Argc = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
    pcChar = pcCmdLine;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	617b      	str	r3, [r7, #20]

    //
    // Advance through the command line until a zero character is found.
    //
    while(*pcChar)
 8000fb2:	e01f      	b.n	8000ff4 <CmdLineProcess+0x58>
    {
        //
        // If there is a space, then replace it with a zero, and set the flag
        // to search for the next argument.
        //
        if(*pcChar == ' ')
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b20      	cmp	r3, #32
 8000fba:	d105      	bne.n	8000fc8 <CmdLineProcess+0x2c>
        {
            *pcChar = 0;
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
            bFindArg = true;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	73fb      	strb	r3, [r7, #15]
 8000fc6:	e012      	b.n	8000fee <CmdLineProcess+0x52>
        {
            //
            // If bFindArg is set, then that means we are looking for the start
            // of the next argument.
            //
            if(bFindArg)
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d00f      	beq.n	8000fee <CmdLineProcess+0x52>
                //
                // As long as the maximum number of arguments has not been
                // reached, then save the pointer to the start of this new arg
                // in the argv array, and increment the count of args, argc.
                //
                if(ui8Argc < CMDLINE_MAX_ARGS)
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	2b07      	cmp	r3, #7
 8000fd2:	d80a      	bhi.n	8000fea <CmdLineProcess+0x4e>
                {
                    g_ppcArgv[ui8Argc] = pcChar;
 8000fd4:	4920      	ldr	r1, [pc, #128]	@ (8001058 <CmdLineProcess+0xbc>)
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	697a      	ldr	r2, [r7, #20]
 8000fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    ui8Argc++;
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	613b      	str	r3, [r7, #16]
                    bFindArg = false;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	73fb      	strb	r3, [r7, #15]
 8000fe8:	e001      	b.n	8000fee <CmdLineProcess+0x52>
                // The maximum number of arguments has been reached so return
                // the error.
                //
                else
                {
                    return(CMDLINE_TOO_MANY_ARGS);
 8000fea:	2302      	movs	r3, #2
 8000fec:	e030      	b.n	8001050 <CmdLineProcess+0xb4>
        }

        //
        // Advance to the next character in the command line.
        //
        pcChar++;
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	617b      	str	r3, [r7, #20]
    while(*pcChar)
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1db      	bne.n	8000fb4 <CmdLineProcess+0x18>
    }

    //
    // If one or more arguments was found, then process the command.
    //
    if(ui8Argc)
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d025      	beq.n	800104e <CmdLineProcess+0xb2>
    {
        g_ppcArgv[ui8Argc] = (char*)USARTx;
 8001002:	4915      	ldr	r1, [pc, #84]	@ (8001058 <CmdLineProcess+0xbc>)
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        ui8Argc++;
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	3301      	adds	r3, #1
 8001010:	613b      	str	r3, [r7, #16]
        //
        // Start at the beginning of the command table, to look for a matching
        // command.
        //
        psCmdEntry = &g_psCmdTable[0];
 8001012:	4b12      	ldr	r3, [pc, #72]	@ (800105c <CmdLineProcess+0xc0>)
 8001014:	60bb      	str	r3, [r7, #8]

        //
        // Search through the command table until a null command string is
        // found, which marks the end of the table.
        //
        while(psCmdEntry->pcCmd)
 8001016:	e016      	b.n	8001046 <CmdLineProcess+0xaa>
            //
            // If this command entry command string matches argv[0], then call
            // the function for this command, passing the command line
            // arguments.
            //
            if(!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
 8001018:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <CmdLineProcess+0xbc>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4619      	mov	r1, r3
 8001022:	4610      	mov	r0, r2
 8001024:	f7ff f8d0 	bl	80001c8 <strcmp>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d108      	bne.n	8001040 <CmdLineProcess+0xa4>
            {
                return(psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4908      	ldr	r1, [pc, #32]	@ (8001058 <CmdLineProcess+0xbc>)
 8001036:	4610      	mov	r0, r2
 8001038:	4798      	blx	r3
 800103a:	4603      	mov	r3, r0
 800103c:	b2db      	uxtb	r3, r3
 800103e:	e007      	b.n	8001050 <CmdLineProcess+0xb4>
            }

            //
            // Not found, so advance to the next entry.
            //
            psCmdEntry++;
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	330c      	adds	r3, #12
 8001044:	60bb      	str	r3, [r7, #8]
        while(psCmdEntry->pcCmd)
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1e4      	bne.n	8001018 <CmdLineProcess+0x7c>

    //
    // Fall through to here means that no matching command was found, so return
    // an error.
    //
    return(CMDLINE_BAD_CMD);
 800104e:	2301      	movs	r3, #1
}
 8001050:	4618      	mov	r0, r3
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	2000015c 	.word	0x2000015c
 800105c:	20000018 	.word	0x20000018

08001060 <LL_USART_IsActiveFlag_RXNE>:
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0320 	and.w	r3, r3, #32
 8001070:	2b20      	cmp	r3, #32
 8001072:	bf0c      	ite	eq
 8001074:	2301      	moveq	r3, #1
 8001076:	2300      	movne	r3, #0
 8001078:	b2db      	uxtb	r3, r3
}
 800107a:	4618      	mov	r0, r3
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <LL_USART_IsActiveFlag_TXE>:
{
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001096:	2b80      	cmp	r3, #128	@ 0x80
 8001098:	bf0c      	ite	eq
 800109a:	2301      	moveq	r3, #1
 800109c:	2300      	movne	r3, #0
 800109e:	b2db      	uxtb	r3, r3
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <LL_USART_DisableIT_TXE>:
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	@ 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	330c      	adds	r3, #12
 80010b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	e853 3f00 	ldrex	r3, [r3]
 80010c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80010c8:	61fb      	str	r3, [r7, #28]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	330c      	adds	r3, #12
 80010ce:	69fa      	ldr	r2, [r7, #28]
 80010d0:	61ba      	str	r2, [r7, #24]
 80010d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80010d4:	6979      	ldr	r1, [r7, #20]
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	e841 2300 	strex	r3, r2, [r1]
 80010dc:	613b      	str	r3, [r7, #16]
   return(result);
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1e7      	bne.n	80010b4 <LL_USART_DisableIT_TXE+0x8>
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3724      	adds	r7, #36	@ 0x24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <LL_USART_ReceiveData8>:
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	b2db      	uxtb	r3, r3
}
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	619a      	str	r2, [r3, #24]
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <command_init>:
		9
	}
};

void	command_init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af04      	add	r7, sp, #16
    UART_Init( &CONSOLE_UART, EXP_UART_HANDLE, EXP_UART_IRQ,
 800112e:	2340      	movs	r3, #64	@ 0x40
 8001130:	9302      	str	r3, [sp, #8]
 8001132:	2340      	movs	r3, #64	@ 0x40
 8001134:	9301      	str	r3, [sp, #4]
 8001136:	4b13      	ldr	r3, [pc, #76]	@ (8001184 <command_init+0x5c>)
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <command_init+0x60>)
 800113c:	2227      	movs	r2, #39	@ 0x27
 800113e:	4913      	ldr	r1, [pc, #76]	@ (800118c <command_init+0x64>)
 8001140:	4813      	ldr	r0, [pc, #76]	@ (8001190 <command_init+0x68>)
 8001142:	f7ff fb8e 	bl	8000862 <UART_Init>
				g_EXP_UART_TX_buffer, g_EXP_UART_RX_buffer,
				sizeof(g_EXP_UART_TX_buffer), sizeof(g_EXP_UART_RX_buffer));
    CMD_line.p_buffer       = g_CMD_line_buffer;
 8001146:	4b13      	ldr	r3, [pc, #76]	@ (8001194 <command_init+0x6c>)
 8001148:	4a13      	ldr	r2, [pc, #76]	@ (8001198 <command_init+0x70>)
 800114a:	605a      	str	r2, [r3, #4]
	CMD_line.buffer_size    = 64;
 800114c:	4b11      	ldr	r3, [pc, #68]	@ (8001194 <command_init+0x6c>)
 800114e:	2240      	movs	r2, #64	@ 0x40
 8001150:	801a      	strh	r2, [r3, #0]
	CMD_line.write_index 	= 0;
 8001152:	4b10      	ldr	r3, [pc, #64]	@ (8001194 <command_init+0x6c>)
 8001154:	2200      	movs	r2, #0
 8001156:	811a      	strh	r2, [r3, #8]
	if(CMD_line.buffer_size != 0)
 8001158:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <command_init+0x6c>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d006      	beq.n	800116e <command_init+0x46>
	{
		memset((void *)CMD_line.p_buffer, 0, sizeof(CMD_line.p_buffer));
 8001160:	4b0c      	ldr	r3, [pc, #48]	@ (8001194 <command_init+0x6c>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2204      	movs	r2, #4
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f002 fcc5 	bl	8003af8 <memset>
	}
	//command_send_splash();
	UART_Send_String(&CONSOLE_UART, "EXP FIRMWARE V1.0.0\n");
 800116e:	490b      	ldr	r1, [pc, #44]	@ (800119c <command_init+0x74>)
 8001170:	4807      	ldr	r0, [pc, #28]	@ (8001190 <command_init+0x68>)
 8001172:	f7ff fbd0 	bl	8000916 <UART_Send_String>
	UART_Send_String(&CONSOLE_UART, "> ");
 8001176:	490a      	ldr	r1, [pc, #40]	@ (80011a0 <command_init+0x78>)
 8001178:	4805      	ldr	r0, [pc, #20]	@ (8001190 <command_init+0x68>)
 800117a:	f7ff fbcc 	bl	8000916 <UART_Send_String>
}
 800117e:	bf00      	nop
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200001e0 	.word	0x200001e0
 8001188:	200001a0 	.word	0x200001a0
 800118c:	40004800 	.word	0x40004800
 8001190:	20000180 	.word	0x20000180
 8001194:	20000220 	.word	0x20000220
 8001198:	2000022c 	.word	0x2000022c
 800119c:	08003cf4 	.word	0x08003cf4
 80011a0:	08003d0c 	.word	0x08003d0c

080011a4 <command_task_update>:
//static char s_commandHistory[MAX_HISTORY][MAX_CMD_LENGTH];
//static int s_historyCount = 0;
//static int s_historyIndex = 0;

static void command_task_update(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
	uint8_t cmd_return, time_out;
	for(time_out = 50; (!RX_BUFFER_EMPTY(&CONSOLE_UART)) && (time_out != 0); time_out--)
 80011aa:	2332      	movs	r3, #50	@ 0x32
 80011ac:	71fb      	strb	r3, [r7, #7]
 80011ae:	e08d      	b.n	80012cc <command_task_update+0x128>
	{
		CMD_line.RX_char = UART_Get_Char(&CONSOLE_UART);
 80011b0:	484f      	ldr	r0, [pc, #316]	@ (80012f0 <command_task_update+0x14c>)
 80011b2:	f7ff fe41 	bl	8000e38 <UART_Get_Char>
 80011b6:	4603      	mov	r3, r0
 80011b8:	461a      	mov	r2, r3
 80011ba:	4b4e      	ldr	r3, [pc, #312]	@ (80012f4 <command_task_update+0x150>)
 80011bc:	729a      	strb	r2, [r3, #10]

		if(((CMD_line.RX_char == 8) || (CMD_line.RX_char == 127)))
 80011be:	4b4d      	ldr	r3, [pc, #308]	@ (80012f4 <command_task_update+0x150>)
 80011c0:	7a9b      	ldrb	r3, [r3, #10]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b08      	cmp	r3, #8
 80011c6:	d004      	beq.n	80011d2 <command_task_update+0x2e>
 80011c8:	4b4a      	ldr	r3, [pc, #296]	@ (80012f4 <command_task_update+0x150>)
 80011ca:	7a9b      	ldrb	r3, [r3, #10]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80011d0:	d114      	bne.n	80011fc <command_task_update+0x58>
		{
			if (CMD_line.write_index == 0)
 80011d2:	4b48      	ldr	r3, [pc, #288]	@ (80012f4 <command_task_update+0x150>)
 80011d4:	891b      	ldrh	r3, [r3, #8]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f000 8083 	beq.w	80012e4 <command_task_update+0x140>
				break;
			CMD_line.write_index--;
 80011de:	4b45      	ldr	r3, [pc, #276]	@ (80012f4 <command_task_update+0x150>)
 80011e0:	891b      	ldrh	r3, [r3, #8]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	3b01      	subs	r3, #1
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	4b42      	ldr	r3, [pc, #264]	@ (80012f4 <command_task_update+0x150>)
 80011ea:	811a      	strh	r2, [r3, #8]
			UART_Send_Char(&CONSOLE_UART, CMD_line.RX_char);
 80011ec:	4b41      	ldr	r3, [pc, #260]	@ (80012f4 <command_task_update+0x150>)
 80011ee:	7a9b      	ldrb	r3, [r3, #10]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	4619      	mov	r1, r3
 80011f4:	483e      	ldr	r0, [pc, #248]	@ (80012f0 <command_task_update+0x14c>)
 80011f6:	f7ff fb7e 	bl	80008f6 <UART_Send_Char>
			break;
 80011fa:	e074      	b.n	80012e6 <command_task_update+0x142>
		}

		UART_Send_Char(&CONSOLE_UART, CMD_line.RX_char);
 80011fc:	4b3d      	ldr	r3, [pc, #244]	@ (80012f4 <command_task_update+0x150>)
 80011fe:	7a9b      	ldrb	r3, [r3, #10]
 8001200:	b2db      	uxtb	r3, r3
 8001202:	4619      	mov	r1, r3
 8001204:	483a      	ldr	r0, [pc, #232]	@ (80012f0 <command_task_update+0x14c>)
 8001206:	f7ff fb76 	bl	80008f6 <UART_Send_Char>

		if((CMD_line.RX_char == '\r') || (CMD_line.RX_char == '\n'))
 800120a:	4b3a      	ldr	r3, [pc, #232]	@ (80012f4 <command_task_update+0x150>)
 800120c:	7a9b      	ldrb	r3, [r3, #10]
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b0d      	cmp	r3, #13
 8001212:	d004      	beq.n	800121e <command_task_update+0x7a>
 8001214:	4b37      	ldr	r3, [pc, #220]	@ (80012f4 <command_task_update+0x150>)
 8001216:	7a9b      	ldrb	r3, [r3, #10]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b0a      	cmp	r3, #10
 800121c:	d134      	bne.n	8001288 <command_task_update+0xe4>
		{
			if(CMD_line.write_index > 0)
 800121e:	4b35      	ldr	r3, [pc, #212]	@ (80012f4 <command_task_update+0x150>)
 8001220:	891b      	ldrh	r3, [r3, #8]
 8001222:	b29b      	uxth	r3, r3
 8001224:	2b00      	cmp	r3, #0
 8001226:	d02a      	beq.n	800127e <command_task_update+0xda>
			{
				// Add a NUL char at the end of the CMD
				CMD_line.p_buffer[CMD_line.write_index] = 0;
 8001228:	4b32      	ldr	r3, [pc, #200]	@ (80012f4 <command_task_update+0x150>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	4a31      	ldr	r2, [pc, #196]	@ (80012f4 <command_task_update+0x150>)
 800122e:	8912      	ldrh	r2, [r2, #8]
 8001230:	b292      	uxth	r2, r2
 8001232:	4413      	add	r3, r2
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
				CMD_line.write_index++;
 8001238:	4b2e      	ldr	r3, [pc, #184]	@ (80012f4 <command_task_update+0x150>)
 800123a:	891b      	ldrh	r3, [r3, #8]
 800123c:	b29b      	uxth	r3, r3
 800123e:	3301      	adds	r3, #1
 8001240:	b29a      	uxth	r2, r3
 8001242:	4b2c      	ldr	r3, [pc, #176]	@ (80012f4 <command_task_update+0x150>)
 8001244:	811a      	strh	r2, [r3, #8]

				cmd_return = CmdLineProcess(CMD_line.p_buffer, CONSOLE_UART_HANDLE);
 8001246:	4b2b      	ldr	r3, [pc, #172]	@ (80012f4 <command_task_update+0x150>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	492b      	ldr	r1, [pc, #172]	@ (80012f8 <command_task_update+0x154>)
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fea5 	bl	8000f9c <CmdLineProcess>
 8001252:	4603      	mov	r3, r0
 8001254:	71bb      	strb	r3, [r7, #6]
				CMD_line.write_index    = 0;
 8001256:	4b27      	ldr	r3, [pc, #156]	@ (80012f4 <command_task_update+0x150>)
 8001258:	2200      	movs	r2, #0
 800125a:	811a      	strh	r2, [r3, #8]

				UART_Send_String(&CONSOLE_UART, "> ");
 800125c:	4927      	ldr	r1, [pc, #156]	@ (80012fc <command_task_update+0x158>)
 800125e:	4824      	ldr	r0, [pc, #144]	@ (80012f0 <command_task_update+0x14c>)
 8001260:	f7ff fb59 	bl	8000916 <UART_Send_String>
				UART_Printf(&CONSOLE_UART, ErrorCode[cmd_return]);
 8001264:	79bb      	ldrb	r3, [r7, #6]
 8001266:	4a26      	ldr	r2, [pc, #152]	@ (8001300 <command_task_update+0x15c>)
 8001268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126c:	4619      	mov	r1, r3
 800126e:	4820      	ldr	r0, [pc, #128]	@ (80012f0 <command_task_update+0x14c>)
 8001270:	f7ff fbe0 	bl	8000a34 <UART_Printf>
				UART_Send_String(&CONSOLE_UART, "> ");
 8001274:	4921      	ldr	r1, [pc, #132]	@ (80012fc <command_task_update+0x158>)
 8001276:	481e      	ldr	r0, [pc, #120]	@ (80012f0 <command_task_update+0x14c>)
 8001278:	f7ff fb4d 	bl	8000916 <UART_Send_String>
			if(CMD_line.write_index > 0)
 800127c:	e023      	b.n	80012c6 <command_task_update+0x122>
			}
			else
			{
				UART_Send_String(&CONSOLE_UART, "> ");
 800127e:	491f      	ldr	r1, [pc, #124]	@ (80012fc <command_task_update+0x158>)
 8001280:	481b      	ldr	r0, [pc, #108]	@ (80012f0 <command_task_update+0x14c>)
 8001282:	f7ff fb48 	bl	8000916 <UART_Send_String>
			if(CMD_line.write_index > 0)
 8001286:	e01e      	b.n	80012c6 <command_task_update+0x122>
			}
		}
		else
		{
			CMD_line.p_buffer[CMD_line.write_index] = CMD_line.RX_char;
 8001288:	4b1a      	ldr	r3, [pc, #104]	@ (80012f4 <command_task_update+0x150>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	4a19      	ldr	r2, [pc, #100]	@ (80012f4 <command_task_update+0x150>)
 800128e:	8912      	ldrh	r2, [r2, #8]
 8001290:	b292      	uxth	r2, r2
 8001292:	4413      	add	r3, r2
 8001294:	4a17      	ldr	r2, [pc, #92]	@ (80012f4 <command_task_update+0x150>)
 8001296:	7a92      	ldrb	r2, [r2, #10]
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	701a      	strb	r2, [r3, #0]
			CMD_line.write_index++;
 800129c:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <command_task_update+0x150>)
 800129e:	891b      	ldrh	r3, [r3, #8]
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	3301      	adds	r3, #1
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	4b13      	ldr	r3, [pc, #76]	@ (80012f4 <command_task_update+0x150>)
 80012a8:	811a      	strh	r2, [r3, #8]

			if (CMD_line.write_index > CMD_line.buffer_size)
 80012aa:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <command_task_update+0x150>)
 80012ac:	891b      	ldrh	r3, [r3, #8]
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	4b10      	ldr	r3, [pc, #64]	@ (80012f4 <command_task_update+0x150>)
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d906      	bls.n	80012c6 <command_task_update+0x122>
			{
				// SDKLFJSDFKS
				// > CMD too long!
				// >
				UART_Send_String(&CONSOLE_UART, "\n> CMD too long!\n> ");
 80012b8:	4912      	ldr	r1, [pc, #72]	@ (8001304 <command_task_update+0x160>)
 80012ba:	480d      	ldr	r0, [pc, #52]	@ (80012f0 <command_task_update+0x14c>)
 80012bc:	f7ff fb2b 	bl	8000916 <UART_Send_String>
				CMD_line.write_index    = 0;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	@ (80012f4 <command_task_update+0x150>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	811a      	strh	r2, [r3, #8]
	for(time_out = 50; (!RX_BUFFER_EMPTY(&CONSOLE_UART)) && (time_out != 0); time_out--)
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	3b01      	subs	r3, #1
 80012ca:	71fb      	strb	r3, [r7, #7]
 80012cc:	490e      	ldr	r1, [pc, #56]	@ (8001308 <command_task_update+0x164>)
 80012ce:	480f      	ldr	r0, [pc, #60]	@ (800130c <command_task_update+0x168>)
 80012d0:	f7ff fdfb 	bl	8000eca <UART_is_buffer_empty>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d105      	bne.n	80012e6 <command_task_update+0x142>
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f47f af67 	bne.w	80011b0 <command_task_update+0xc>
//            Uart_write(USART2, rxData);
//            process_command(USART2, rxData);
//        }
//    }

}
 80012e2:	e000      	b.n	80012e6 <command_task_update+0x142>
				break;
 80012e4:	bf00      	nop
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000180 	.word	0x20000180
 80012f4:	20000220 	.word	0x20000220
 80012f8:	40004800 	.word	0x40004800
 80012fc:	08003d0c 	.word	0x08003d0c
 8001300:	20000000 	.word	0x20000000
 8001304:	08003d10 	.word	0x08003d10
 8001308:	20000198 	.word	0x20000198
 800130c:	2000019a 	.word	0x2000019a

08001310 <Cmd_help>:
//            s_commandBufferIndex = 0;
//        }
//    }
//}

int Cmd_help(int argc, char *argv[]) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
    tCmdLineEntry * pEntry;
//    USART_TypeDef * USARTx = (USART_TypeDef*)argv[argc-1];

    pEntry = &g_psCmdTable[0];
 800131a:	4b0f      	ldr	r3, [pc, #60]	@ (8001358 <Cmd_help+0x48>)
 800131c:	60fb      	str	r3, [r7, #12]
	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
    while (pEntry->pcCmd)
 800131e:	e012      	b.n	8001346 <Cmd_help+0x36>
    {
    	// Print the command name and the brief description.
        UART_Send_String(&CONSOLE_UART, pEntry->pcCmd);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4619      	mov	r1, r3
 8001326:	480d      	ldr	r0, [pc, #52]	@ (800135c <Cmd_help+0x4c>)
 8001328:	f7ff faf5 	bl	8000916 <UART_Send_String>
        UART_Send_String(&CONSOLE_UART, pEntry->pcHelp);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	4619      	mov	r1, r3
 8001332:	480a      	ldr	r0, [pc, #40]	@ (800135c <Cmd_help+0x4c>)
 8001334:	f7ff faef 	bl	8000916 <UART_Send_String>
    	UART_Send_String(&CONSOLE_UART, "\n");
 8001338:	4909      	ldr	r1, [pc, #36]	@ (8001360 <Cmd_help+0x50>)
 800133a:	4808      	ldr	r0, [pc, #32]	@ (800135c <Cmd_help+0x4c>)
 800133c:	f7ff faeb 	bl	8000916 <UART_Send_String>
        // Advance to the next entry in the table.
        pEntry++;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	330c      	adds	r3, #12
 8001344:	60fb      	str	r3, [r7, #12]
    while (pEntry->pcCmd)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1e8      	bne.n	8001320 <Cmd_help+0x10>
    }
    return (CMDLINE_OK);
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000018 	.word	0x20000018
 800135c:	20000180 	.word	0x20000180
 8001360:	08003d24 	.word	0x08003d24

08001364 <Cmd_on_tec_pw>:

int Cmd_on_tec_pw(int argc, char *argv[])
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
	LL_GPIO_SetOutputPin(EF_TEC_EN_GPIO_Port, EF_TEC_EN_Pin);
 800136e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001372:	4804      	ldr	r0, [pc, #16]	@ (8001384 <Cmd_on_tec_pw+0x20>)
 8001374:	f7ff feca 	bl	800110c <LL_GPIO_SetOutputPin>
	return (CMDLINE_OK);
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40020800 	.word	0x40020800

08001388 <Cmd_reset>:

int Cmd_reset(int argc, char *argv[])
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
	lt8722_reset();
 8001392:	f001 f9eb 	bl	800276c <lt8722_reset>
	return (CMDLINE_OK);
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <Cmd_set_en_req>:

int Cmd_set_en_req(int argc, char *argv[])
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
	LL_GPIO_SetOutputPin(TEC_1_EN_GPIO_Port, TEC_1_EN_Pin);
 80013aa:	2120      	movs	r1, #32
 80013ac:	4806      	ldr	r0, [pc, #24]	@ (80013c8 <Cmd_set_en_req+0x28>)
 80013ae:	f7ff fead 	bl	800110c <LL_GPIO_SetOutputPin>
	lt8722_reg_write(LT8722_SPIS_COMMAND, 0x00004000);
 80013b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013b6:	2000      	movs	r0, #0
 80013b8:	f001 f95e 	bl	8002678 <lt8722_reg_write>
//	lt8722_set_enable_req(LT8722_ENABLE_REQ_ENABLED);
	return (CMDLINE_OK);
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40021000 	.word	0x40021000

080013cc <Cmd_reset_en_req>:

int Cmd_reset_en_req(int argc, char *argv[])
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
	lt8722_set_enable_req(LT8722_ENABLE_REQ_DISABLED);
 80013d6:	2000      	movs	r0, #0
 80013d8:	f001 f9ef 	bl	80027ba <lt8722_set_enable_req>
	return (CMDLINE_OK);
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <Cmd_clear_status_reg>:

int Cmd_clear_status_reg(int argc, char *argv[])
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	6039      	str	r1, [r7, #0]
	lt8722_reg_write(LT8722_SPIS_STATUS, 0);
 80013f0:	2100      	movs	r1, #0
 80013f2:	2001      	movs	r0, #1
 80013f4:	f001 f940 	bl	8002678 <lt8722_reg_write>
	return (CMDLINE_OK);
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <Cmd_read>:

int Cmd_read(int argc, char *argv[])
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
	uint32_t data;
	lt8722_reg_read(LT8722_SPIS_COMMAND, &data);
 800140e:	f107 030c 	add.w	r3, r7, #12
 8001412:	4619      	mov	r1, r3
 8001414:	2000      	movs	r0, #0
 8001416:	f001 f907 	bl	8002628 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_COMMAND: 0x%X-%X \n", data>>16, data);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	0c1a      	lsrs	r2, r3, #16
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4930      	ldr	r1, [pc, #192]	@ (80014e4 <Cmd_read+0xe0>)
 8001422:	4831      	ldr	r0, [pc, #196]	@ (80014e8 <Cmd_read+0xe4>)
 8001424:	f7ff fb06 	bl	8000a34 <UART_Printf>

	lt8722_reg_read(LT8722_SPIS_STATUS, &data);
 8001428:	f107 030c 	add.w	r3, r7, #12
 800142c:	4619      	mov	r1, r3
 800142e:	2001      	movs	r0, #1
 8001430:	f001 f8fa 	bl	8002628 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_STATUS: 0x%X-%X \n", data>>16, data);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	0c1a      	lsrs	r2, r3, #16
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	492c      	ldr	r1, [pc, #176]	@ (80014ec <Cmd_read+0xe8>)
 800143c:	482a      	ldr	r0, [pc, #168]	@ (80014e8 <Cmd_read+0xe4>)
 800143e:	f7ff faf9 	bl	8000a34 <UART_Printf>

	lt8722_reg_read(LT8722_SPIS_DAC_ILIMN, &data);
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	4619      	mov	r1, r3
 8001448:	2002      	movs	r0, #2
 800144a:	f001 f8ed 	bl	8002628 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_DAC_ILIMN: 0x%X-%X \n", data>>16, data);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	0c1a      	lsrs	r2, r3, #16
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	4926      	ldr	r1, [pc, #152]	@ (80014f0 <Cmd_read+0xec>)
 8001456:	4824      	ldr	r0, [pc, #144]	@ (80014e8 <Cmd_read+0xe4>)
 8001458:	f7ff faec 	bl	8000a34 <UART_Printf>

	lt8722_reg_read(LT8722_SPIS_DAC_ILIMP, &data);
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	4619      	mov	r1, r3
 8001462:	2003      	movs	r0, #3
 8001464:	f001 f8e0 	bl	8002628 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_DAC_ILIMP: 0x%X-%X \n", data>>16, data);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	0c1a      	lsrs	r2, r3, #16
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4921      	ldr	r1, [pc, #132]	@ (80014f4 <Cmd_read+0xf0>)
 8001470:	481d      	ldr	r0, [pc, #116]	@ (80014e8 <Cmd_read+0xe4>)
 8001472:	f7ff fadf 	bl	8000a34 <UART_Printf>

	lt8722_reg_read(LT8722_SPIS_DAC, &data);
 8001476:	f107 030c 	add.w	r3, r7, #12
 800147a:	4619      	mov	r1, r3
 800147c:	2004      	movs	r0, #4
 800147e:	f001 f8d3 	bl	8002628 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_DAC: 0x%X-%X \n", data>>16, data);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	0c1a      	lsrs	r2, r3, #16
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	491b      	ldr	r1, [pc, #108]	@ (80014f8 <Cmd_read+0xf4>)
 800148a:	4817      	ldr	r0, [pc, #92]	@ (80014e8 <Cmd_read+0xe4>)
 800148c:	f7ff fad2 	bl	8000a34 <UART_Printf>

	lt8722_reg_read(LT8722_SPIS_OV_CLAMP, &data);
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	4619      	mov	r1, r3
 8001496:	2005      	movs	r0, #5
 8001498:	f001 f8c6 	bl	8002628 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_OV_CLAMP: 0x%X  \n", data);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	461a      	mov	r2, r3
 80014a0:	4916      	ldr	r1, [pc, #88]	@ (80014fc <Cmd_read+0xf8>)
 80014a2:	4811      	ldr	r0, [pc, #68]	@ (80014e8 <Cmd_read+0xe4>)
 80014a4:	f7ff fac6 	bl	8000a34 <UART_Printf>

	lt8722_reg_read(LT8722_SPIS_UV_CLAMP, &data);
 80014a8:	f107 030c 	add.w	r3, r7, #12
 80014ac:	4619      	mov	r1, r3
 80014ae:	2006      	movs	r0, #6
 80014b0:	f001 f8ba 	bl	8002628 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_UV_CLAMP: 0x%X \n", data);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	461a      	mov	r2, r3
 80014b8:	4911      	ldr	r1, [pc, #68]	@ (8001500 <Cmd_read+0xfc>)
 80014ba:	480b      	ldr	r0, [pc, #44]	@ (80014e8 <Cmd_read+0xe4>)
 80014bc:	f7ff faba 	bl	8000a34 <UART_Printf>

	lt8722_reg_read(LT8722_SPIS_AMUX, &data);
 80014c0:	f107 030c 	add.w	r3, r7, #12
 80014c4:	4619      	mov	r1, r3
 80014c6:	2007      	movs	r0, #7
 80014c8:	f001 f8ae 	bl	8002628 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_AMUX: 0x%X  \n", data);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	461a      	mov	r2, r3
 80014d0:	490c      	ldr	r1, [pc, #48]	@ (8001504 <Cmd_read+0x100>)
 80014d2:	4805      	ldr	r0, [pc, #20]	@ (80014e8 <Cmd_read+0xe4>)
 80014d4:	f7ff faae 	bl	8000a34 <UART_Printf>

	return (CMDLINE_OK);
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	08003d28 	.word	0x08003d28
 80014e8:	20000180 	.word	0x20000180
 80014ec:	08003d40 	.word	0x08003d40
 80014f0:	08003d58 	.word	0x08003d58
 80014f4:	08003d74 	.word	0x08003d74
 80014f8:	08003d90 	.word	0x08003d90
 80014fc:	08003da4 	.word	0x08003da4
 8001500:	08003dbc 	.word	0x08003dbc
 8001504:	08003dd4 	.word	0x08003dd4

08001508 <Cmd_on_tec>:


int Cmd_on_tec(int argc, char *argv[])
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
	tec_init();
 8001512:	f000 ff07 	bl	8002324 <tec_init>
	return (CMDLINE_OK);
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <Cmd_get_status>:

int Cmd_get_status(int argc, char *argv[])
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
	uint16_t status;
	lt8722_get_status(&status);
 800152a:	f107 030e 	add.w	r3, r7, #14
 800152e:	4618      	mov	r0, r3
 8001530:	f001 f8f0 	bl	8002714 <lt8722_get_status>
	UART_Printf(&CONSOLE_UART, "status: 0x%X \n", status);
 8001534:	89fb      	ldrh	r3, [r7, #14]
 8001536:	461a      	mov	r2, r3
 8001538:	4904      	ldr	r1, [pc, #16]	@ (800154c <Cmd_get_status+0x2c>)
 800153a:	4805      	ldr	r0, [pc, #20]	@ (8001550 <Cmd_get_status+0x30>)
 800153c:	f7ff fa7a 	bl	8000a34 <UART_Printf>
	return (CMDLINE_OK);
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	08003de8 	.word	0x08003de8
 8001550:	20000180 	.word	0x20000180

08001554 <Cmd_get_all>:

int Cmd_get_all(int argc, char *argv[])
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
	UART_Send_String(&CONSOLE_UART, "hehe \r\n");
 800155e:	4904      	ldr	r1, [pc, #16]	@ (8001570 <Cmd_get_all+0x1c>)
 8001560:	4804      	ldr	r0, [pc, #16]	@ (8001574 <Cmd_get_all+0x20>)
 8001562:	f7ff f9d8 	bl	8000916 <UART_Send_String>
	return (CMDLINE_OK);
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	08003df8 	.word	0x08003df8
 8001574:	20000180 	.word	0x20000180

08001578 <command_create_task>:

void	command_create_task(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_CommandTaskContext.taskHandle, &s_CommandTaskContext.taskProperty);
 800157c:	4902      	ldr	r1, [pc, #8]	@ (8001588 <command_create_task+0x10>)
 800157e:	4803      	ldr	r0, [pc, #12]	@ (800158c <command_create_task+0x14>)
 8001580:	f002 f986 	bl	8003890 <SCH_TASK_CreateTask>
}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	200000a0 	.word	0x200000a0
 800158c:	2000009c 	.word	0x2000009c

08001590 <CONSOLE_UART_IRQHandler>:
}


/* :::::::::: CONSOLE_UART_IRQHandler ::::::::::::: */
void CONSOLE_UART_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
    if(LL_USART_IsActiveFlag_TXE(CONSOLE_UART.handle) == true)
 8001594:	4b2e      	ldr	r3, [pc, #184]	@ (8001650 <CONSOLE_UART_IRQHandler+0xc0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fd74 	bl	8001086 <LL_USART_IsActiveFlag_TXE>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d10f      	bne.n	80015c4 <CONSOLE_UART_IRQHandler+0x34>
    {
        if(TX_BUFFER_EMPTY(&CONSOLE_UART))
 80015a4:	492b      	ldr	r1, [pc, #172]	@ (8001654 <CONSOLE_UART_IRQHandler+0xc4>)
 80015a6:	482c      	ldr	r0, [pc, #176]	@ (8001658 <CONSOLE_UART_IRQHandler+0xc8>)
 80015a8:	f7ff fc8f 	bl	8000eca <UART_is_buffer_empty>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d005      	beq.n	80015be <CONSOLE_UART_IRQHandler+0x2e>
        {
            // Buffer empty, so disable interrupts
            LL_USART_DisableIT_TXE(CONSOLE_UART.handle);
 80015b2:	4b27      	ldr	r3, [pc, #156]	@ (8001650 <CONSOLE_UART_IRQHandler+0xc0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff fd78 	bl	80010ac <LL_USART_DisableIT_TXE>
 80015bc:	e002      	b.n	80015c4 <CONSOLE_UART_IRQHandler+0x34>
        }
        else
        {
            // There is more data in the output buffer. Send the next byte
            UART_Prime_Transmit(&CONSOLE_UART);
 80015be:	4824      	ldr	r0, [pc, #144]	@ (8001650 <CONSOLE_UART_IRQHandler+0xc0>)
 80015c0:	f7ff fcb7 	bl	8000f32 <UART_Prime_Transmit>
        }
    }

    if(LL_USART_IsActiveFlag_RXNE(CONSOLE_UART.handle) == true)
 80015c4:	4b22      	ldr	r3, [pc, #136]	@ (8001650 <CONSOLE_UART_IRQHandler+0xc0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fd49 	bl	8001060 <LL_USART_IsActiveFlag_RXNE>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d13b      	bne.n	800164c <CONSOLE_UART_IRQHandler+0xbc>
    {
    	CONSOLE_UART.RX_irq_char = LL_USART_ReceiveData8(CONSOLE_UART.handle);
 80015d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001650 <CONSOLE_UART_IRQHandler+0xc0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fd8a 	bl	80010f2 <LL_USART_ReceiveData8>
 80015de:	4603      	mov	r3, r0
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001650 <CONSOLE_UART_IRQHandler+0xc0>)
 80015e4:	771a      	strb	r2, [r3, #28]

        // NOTE: On win 10, default PUTTY when hit enter only send back '\r',
        // while on default HERCULES when hit enter send '\r\n' in that order.
        // The code bellow is modified so that it can work on PUTTY and HERCULES.
        if((!RX_BUFFER_FULL(&CONSOLE_UART)) && (CONSOLE_UART.RX_irq_char != '\n'))
 80015e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001650 <CONSOLE_UART_IRQHandler+0xc0>)
 80015e8:	891b      	ldrh	r3, [r3, #8]
 80015ea:	461a      	mov	r2, r3
 80015ec:	491b      	ldr	r1, [pc, #108]	@ (800165c <CONSOLE_UART_IRQHandler+0xcc>)
 80015ee:	481c      	ldr	r0, [pc, #112]	@ (8001660 <CONSOLE_UART_IRQHandler+0xd0>)
 80015f0:	f7ff fc4a 	bl	8000e88 <UART_is_buffer_full>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d128      	bne.n	800164c <CONSOLE_UART_IRQHandler+0xbc>
 80015fa:	4b15      	ldr	r3, [pc, #84]	@ (8001650 <CONSOLE_UART_IRQHandler+0xc0>)
 80015fc:	7f1b      	ldrb	r3, [r3, #28]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b0a      	cmp	r3, #10
 8001602:	d023      	beq.n	800164c <CONSOLE_UART_IRQHandler+0xbc>
        {
            if (CONSOLE_UART.RX_irq_char == '\r')
 8001604:	4b12      	ldr	r3, [pc, #72]	@ (8001650 <CONSOLE_UART_IRQHandler+0xc0>)
 8001606:	7f1b      	ldrb	r3, [r3, #28]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b0d      	cmp	r3, #13
 800160c:	d10e      	bne.n	800162c <CONSOLE_UART_IRQHandler+0x9c>
            {
            	CONSOLE_UART.p_RX_buffer[CONSOLE_UART.RX_write_index] = '\n';
 800160e:	4b10      	ldr	r3, [pc, #64]	@ (8001650 <CONSOLE_UART_IRQHandler+0xc0>)
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	4a0f      	ldr	r2, [pc, #60]	@ (8001650 <CONSOLE_UART_IRQHandler+0xc0>)
 8001614:	8b12      	ldrh	r2, [r2, #24]
 8001616:	b292      	uxth	r2, r2
 8001618:	4413      	add	r3, r2
 800161a:	220a      	movs	r2, #10
 800161c:	701a      	strb	r2, [r3, #0]
                ADVANCE_RX_WRITE_INDEX(&CONSOLE_UART);
 800161e:	4b0c      	ldr	r3, [pc, #48]	@ (8001650 <CONSOLE_UART_IRQHandler+0xc0>)
 8001620:	891b      	ldrh	r3, [r3, #8]
 8001622:	4619      	mov	r1, r3
 8001624:	480d      	ldr	r0, [pc, #52]	@ (800165c <CONSOLE_UART_IRQHandler+0xcc>)
 8001626:	f7ff fc68 	bl	8000efa <UART_advance_buffer_index>
            	CONSOLE_UART.p_RX_buffer[EXP_UART.RX_write_index] = CONSOLE_UART.RX_irq_char;
                ADVANCE_RX_WRITE_INDEX(&CONSOLE_UART);
            }
        }
    }
}
 800162a:	e00f      	b.n	800164c <CONSOLE_UART_IRQHandler+0xbc>
            	CONSOLE_UART.p_RX_buffer[EXP_UART.RX_write_index] = CONSOLE_UART.RX_irq_char;
 800162c:	4b08      	ldr	r3, [pc, #32]	@ (8001650 <CONSOLE_UART_IRQHandler+0xc0>)
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	4a07      	ldr	r2, [pc, #28]	@ (8001650 <CONSOLE_UART_IRQHandler+0xc0>)
 8001632:	8b12      	ldrh	r2, [r2, #24]
 8001634:	b292      	uxth	r2, r2
 8001636:	4413      	add	r3, r2
 8001638:	4a05      	ldr	r2, [pc, #20]	@ (8001650 <CONSOLE_UART_IRQHandler+0xc0>)
 800163a:	7f12      	ldrb	r2, [r2, #28]
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	701a      	strb	r2, [r3, #0]
                ADVANCE_RX_WRITE_INDEX(&CONSOLE_UART);
 8001640:	4b03      	ldr	r3, [pc, #12]	@ (8001650 <CONSOLE_UART_IRQHandler+0xc0>)
 8001642:	891b      	ldrh	r3, [r3, #8]
 8001644:	4619      	mov	r1, r3
 8001646:	4805      	ldr	r0, [pc, #20]	@ (800165c <CONSOLE_UART_IRQHandler+0xcc>)
 8001648:	f7ff fc57 	bl	8000efa <UART_advance_buffer_index>
}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000180 	.word	0x20000180
 8001654:	20000190 	.word	0x20000190
 8001658:	20000192 	.word	0x20000192
 800165c:	20000198 	.word	0x20000198
 8001660:	2000019a 	.word	0x2000019a

08001664 <LL_GPIO_SetOutputPin>:
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	619a      	str	r2, [r3, #24]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	041a      	lsls	r2, r3, #16
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	619a      	str	r2, [r3, #24]
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
	...

080016a0 <status_led_init>:
		48									// taskTick
	},
};

void status_led_init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
    s_led_display_status.led_green = 0;
 80016a4:	4a0a      	ldr	r2, [pc, #40]	@ (80016d0 <status_led_init+0x30>)
 80016a6:	7813      	ldrb	r3, [r2, #0]
 80016a8:	f36f 0300 	bfc	r3, #0, #1
 80016ac:	7013      	strb	r3, [r2, #0]
    s_led_display_status.led_blue = 0;
 80016ae:	4a08      	ldr	r2, [pc, #32]	@ (80016d0 <status_led_init+0x30>)
 80016b0:	7813      	ldrb	r3, [r2, #0]
 80016b2:	f36f 0341 	bfc	r3, #1, #1
 80016b6:	7013      	strb	r3, [r2, #0]
    s_led_display_status.state = EXP_POWERUP;
 80016b8:	4a05      	ldr	r2, [pc, #20]	@ (80016d0 <status_led_init+0x30>)
 80016ba:	7813      	ldrb	r3, [r2, #0]
 80016bc:	f36f 0387 	bfc	r3, #2, #6
 80016c0:	7013      	strb	r3, [r2, #0]
	status_led_led_green_off();
 80016c2:	f000 f8e1 	bl	8001888 <status_led_led_green_off>
	status_led_led_blue_off();
 80016c6:	f000 f8f7 	bl	80018b8 <status_led_led_blue_off>
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	2000026c 	.word	0x2000026c

080016d4 <status_led_update>:

void	status_led_update(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
	switch (s_led_display_status.state) {
 80016d8:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <status_led_update+0x38>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	f3c3 0385 	ubfx	r3, r3, #2, #6
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d00c      	beq.n	8001700 <status_led_update+0x2c>
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	dc0d      	bgt.n	8001706 <status_led_update+0x32>
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d002      	beq.n	80016f4 <status_led_update+0x20>
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d003      	beq.n	80016fa <status_led_update+0x26>
		break;
	case EXP_ERROR:
		status_led_error();
		break;
	default:
		break;
 80016f2:	e008      	b.n	8001706 <status_led_update+0x32>
		status_led_powerup();
 80016f4:	f000 f80c 	bl	8001710 <status_led_powerup>
		break;
 80016f8:	e006      	b.n	8001708 <status_led_update+0x34>
		status_led_normal();
 80016fa:	f000 f851 	bl	80017a0 <status_led_normal>
		break;
 80016fe:	e003      	b.n	8001708 <status_led_update+0x34>
		status_led_error();
 8001700:	f000 f870 	bl	80017e4 <status_led_error>
		break;
 8001704:	e000      	b.n	8001708 <status_led_update+0x34>
		break;
 8001706:	bf00      	nop
	}
}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	2000026c 	.word	0x2000026c

08001710 <status_led_powerup>:

static void status_led_powerup(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	if (s_led_display_status.led_green && s_led_display_status.led_blue) {
 8001714:	4b21      	ldr	r3, [pc, #132]	@ (800179c <status_led_powerup+0x8c>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	d020      	beq.n	8001764 <status_led_powerup+0x54>
 8001722:	4b1e      	ldr	r3, [pc, #120]	@ (800179c <status_led_powerup+0x8c>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b00      	cmp	r3, #0
 800172e:	d019      	beq.n	8001764 <status_led_powerup+0x54>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 8001730:	2000      	movs	r0, #0
 8001732:	f002 f897 	bl	8003864 <SCH_TIM_HasCompleted>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d02d      	beq.n	8001798 <status_led_powerup+0x88>
			s_led_display_status.led_green = 0;
 800173c:	4a17      	ldr	r2, [pc, #92]	@ (800179c <status_led_powerup+0x8c>)
 800173e:	7813      	ldrb	r3, [r2, #0]
 8001740:	f36f 0300 	bfc	r3, #0, #1
 8001744:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 0;
 8001746:	4a15      	ldr	r2, [pc, #84]	@ (800179c <status_led_powerup+0x8c>)
 8001748:	7813      	ldrb	r3, [r2, #0]
 800174a:	f36f 0341 	bfc	r3, #1, #1
 800174e:	7013      	strb	r3, [r2, #0]
			status_led_led_green_off();
 8001750:	f000 f89a 	bl	8001888 <status_led_led_green_off>
			status_led_led_blue_off();
 8001754:	f000 f8b0 	bl	80018b8 <status_led_led_blue_off>
			SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD);
 8001758:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800175c:	2000      	movs	r0, #0
 800175e:	f002 f86b 	bl	8003838 <SCH_TIM_Start>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 8001762:	e019      	b.n	8001798 <status_led_powerup+0x88>
		}
	} else {
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 8001764:	2000      	movs	r0, #0
 8001766:	f002 f87d 	bl	8003864 <SCH_TIM_HasCompleted>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d013      	beq.n	8001798 <status_led_powerup+0x88>
			s_led_display_status.led_green = 1;
 8001770:	4a0a      	ldr	r2, [pc, #40]	@ (800179c <status_led_powerup+0x8c>)
 8001772:	7813      	ldrb	r3, [r2, #0]
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 1;
 800177a:	4a08      	ldr	r2, [pc, #32]	@ (800179c <status_led_powerup+0x8c>)
 800177c:	7813      	ldrb	r3, [r2, #0]
 800177e:	f043 0302 	orr.w	r3, r3, #2
 8001782:	7013      	strb	r3, [r2, #0]
			status_led_led_green_on();
 8001784:	f000 f874 	bl	8001870 <status_led_led_green_on>
			status_led_led_blue_on();
 8001788:	f000 f88a 	bl	80018a0 <status_led_led_blue_on>
			SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD);
 800178c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001790:	2000      	movs	r0, #0
 8001792:	f002 f851 	bl	8003838 <SCH_TIM_Start>
		}
	}
}
 8001796:	e7ff      	b.n	8001798 <status_led_powerup+0x88>
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}
 800179c:	2000026c 	.word	0x2000026c

080017a0 <status_led_normal>:

static void status_led_normal(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
	// viết tạm
	LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 80017a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80017a8:	480d      	ldr	r0, [pc, #52]	@ (80017e0 <status_led_normal+0x40>)
 80017aa:	f7ff ff69 	bl	8001680 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 80017ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017b2:	480b      	ldr	r0, [pc, #44]	@ (80017e0 <status_led_normal+0x40>)
 80017b4:	f7ff ff56 	bl	8001664 <LL_GPIO_SetOutputPin>
	LL_mDelay(500);
 80017b8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017bc:	f001 ffdc 	bl	8003778 <LL_mDelay>
	LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 80017c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017c4:	4806      	ldr	r0, [pc, #24]	@ (80017e0 <status_led_normal+0x40>)
 80017c6:	f7ff ff5b 	bl	8001680 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 80017ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80017ce:	4804      	ldr	r0, [pc, #16]	@ (80017e0 <status_led_normal+0x40>)
 80017d0:	f7ff ff48 	bl	8001664 <LL_GPIO_SetOutputPin>
	LL_mDelay(500);
 80017d4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017d8:	f001 ffce 	bl	8003778 <LL_mDelay>
}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40020c00 	.word	0x40020c00

080017e4 <status_led_error>:

static void status_led_error(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
	if (s_led_display_status.led_green && s_led_display_status.led_blue) {
 80017e8:	4b20      	ldr	r3, [pc, #128]	@ (800186c <status_led_error+0x88>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d01f      	beq.n	8001836 <status_led_error+0x52>
 80017f6:	4b1d      	ldr	r3, [pc, #116]	@ (800186c <status_led_error+0x88>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b00      	cmp	r3, #0
 8001802:	d018      	beq.n	8001836 <status_led_error+0x52>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 8001804:	2000      	movs	r0, #0
 8001806:	f002 f82d 	bl	8003864 <SCH_TIM_HasCompleted>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d02b      	beq.n	8001868 <status_led_error+0x84>
			s_led_display_status.led_green = 0;
 8001810:	4a16      	ldr	r2, [pc, #88]	@ (800186c <status_led_error+0x88>)
 8001812:	7813      	ldrb	r3, [r2, #0]
 8001814:	f36f 0300 	bfc	r3, #0, #1
 8001818:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 0;
 800181a:	4a14      	ldr	r2, [pc, #80]	@ (800186c <status_led_error+0x88>)
 800181c:	7813      	ldrb	r3, [r2, #0]
 800181e:	f36f 0341 	bfc	r3, #1, #1
 8001822:	7013      	strb	r3, [r2, #0]
			status_led_led_green_off();
 8001824:	f000 f830 	bl	8001888 <status_led_led_green_off>
			status_led_led_blue_off();
 8001828:	f000 f846 	bl	80018b8 <status_led_led_blue_off>
			SCH_TIM_Start(SCH_TIM_LED, ERROR_PERIOD);
 800182c:	2132      	movs	r1, #50	@ 0x32
 800182e:	2000      	movs	r0, #0
 8001830:	f002 f802 	bl	8003838 <SCH_TIM_Start>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 8001834:	e018      	b.n	8001868 <status_led_error+0x84>
		}
	} else {
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 8001836:	2000      	movs	r0, #0
 8001838:	f002 f814 	bl	8003864 <SCH_TIM_HasCompleted>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d012      	beq.n	8001868 <status_led_error+0x84>
			s_led_display_status.led_green = 1;
 8001842:	4a0a      	ldr	r2, [pc, #40]	@ (800186c <status_led_error+0x88>)
 8001844:	7813      	ldrb	r3, [r2, #0]
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 1;
 800184c:	4a07      	ldr	r2, [pc, #28]	@ (800186c <status_led_error+0x88>)
 800184e:	7813      	ldrb	r3, [r2, #0]
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	7013      	strb	r3, [r2, #0]
			status_led_led_green_on();
 8001856:	f000 f80b 	bl	8001870 <status_led_led_green_on>
			status_led_led_blue_on();
 800185a:	f000 f821 	bl	80018a0 <status_led_led_blue_on>
			SCH_TIM_Start(SCH_TIM_LED, ERROR_PERIOD);
 800185e:	2132      	movs	r1, #50	@ 0x32
 8001860:	2000      	movs	r0, #0
 8001862:	f001 ffe9 	bl	8003838 <SCH_TIM_Start>
		}
	}
}
 8001866:	e7ff      	b.n	8001868 <status_led_error+0x84>
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	2000026c 	.word	0x2000026c

08001870 <status_led_led_green_on>:

static void status_led_led_green_on(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8001874:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001878:	4802      	ldr	r0, [pc, #8]	@ (8001884 <status_led_led_green_on+0x14>)
 800187a:	f7ff fef3 	bl	8001664 <LL_GPIO_SetOutputPin>
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40020c00 	.word	0x40020c00

08001888 <status_led_led_green_off>:
static void status_led_led_green_off(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 800188c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001890:	4802      	ldr	r0, [pc, #8]	@ (800189c <status_led_led_green_off+0x14>)
 8001892:	f7ff fef5 	bl	8001680 <LL_GPIO_ResetOutputPin>
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40020c00 	.word	0x40020c00

080018a0 <status_led_led_blue_on>:
static void status_led_led_blue_on(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 80018a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018a8:	4802      	ldr	r0, [pc, #8]	@ (80018b4 <status_led_led_blue_on+0x14>)
 80018aa:	f7ff fedb 	bl	8001664 <LL_GPIO_SetOutputPin>
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40020c00 	.word	0x40020c00

080018b8 <status_led_led_blue_off>:
static void status_led_led_blue_off(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 80018bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018c0:	4802      	ldr	r0, [pc, #8]	@ (80018cc <status_led_led_blue_off+0x14>)
 80018c2:	f7ff fedd 	bl	8001680 <LL_GPIO_ResetOutputPin>
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40020c00 	.word	0x40020c00

080018d0 <status_led_create_task>:

void	status_led_create_task(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_task_context.taskHandle, &s_task_context.taskProperty);
 80018d4:	4902      	ldr	r1, [pc, #8]	@ (80018e0 <status_led_create_task+0x10>)
 80018d6:	4803      	ldr	r0, [pc, #12]	@ (80018e4 <status_led_create_task+0x14>)
 80018d8:	f001 ffda 	bl	8003890 <SCH_TASK_CreateTask>
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	200000b4 	.word	0x200000b4
 80018e4:	200000b0 	.word	0x200000b0

080018e8 <__NVIC_SetPriorityGrouping>:
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f8:	4b0c      	ldr	r3, [pc, #48]	@ (800192c <__NVIC_SetPriorityGrouping+0x44>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001904:	4013      	ands	r3, r2
 8001906:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001910:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001914:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800191a:	4a04      	ldr	r2, [pc, #16]	@ (800192c <__NVIC_SetPriorityGrouping+0x44>)
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	60d3      	str	r3, [r2, #12]
}
 8001920:	bf00      	nop
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <__NVIC_GetPriorityGrouping>:
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001934:	4b04      	ldr	r3, [pc, #16]	@ (8001948 <__NVIC_GetPriorityGrouping+0x18>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	0a1b      	lsrs	r3, r3, #8
 800193a:	f003 0307 	and.w	r3, r3, #7
}
 800193e:	4618      	mov	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <__NVIC_EnableIRQ>:
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	2b00      	cmp	r3, #0
 800195c:	db0b      	blt.n	8001976 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	f003 021f 	and.w	r2, r3, #31
 8001964:	4907      	ldr	r1, [pc, #28]	@ (8001984 <__NVIC_EnableIRQ+0x38>)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	095b      	lsrs	r3, r3, #5
 800196c:	2001      	movs	r0, #1
 800196e:	fa00 f202 	lsl.w	r2, r0, r2
 8001972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000e100 	.word	0xe000e100

08001988 <__NVIC_SetPriority>:
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	6039      	str	r1, [r7, #0]
 8001992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	2b00      	cmp	r3, #0
 800199a:	db0a      	blt.n	80019b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	490c      	ldr	r1, [pc, #48]	@ (80019d4 <__NVIC_SetPriority+0x4c>)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	0112      	lsls	r2, r2, #4
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	440b      	add	r3, r1
 80019ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80019b0:	e00a      	b.n	80019c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4908      	ldr	r1, [pc, #32]	@ (80019d8 <__NVIC_SetPriority+0x50>)
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	3b04      	subs	r3, #4
 80019c0:	0112      	lsls	r2, r2, #4
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	440b      	add	r3, r1
 80019c6:	761a      	strb	r2, [r3, #24]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000e100 	.word	0xe000e100
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <NVIC_EncodePriority>:
{
 80019dc:	b480      	push	{r7}
 80019de:	b089      	sub	sp, #36	@ 0x24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f1c3 0307 	rsb	r3, r3, #7
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	bf28      	it	cs
 80019fa:	2304      	movcs	r3, #4
 80019fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3304      	adds	r3, #4
 8001a02:	2b06      	cmp	r3, #6
 8001a04:	d902      	bls.n	8001a0c <NVIC_EncodePriority+0x30>
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3b03      	subs	r3, #3
 8001a0a:	e000      	b.n	8001a0e <NVIC_EncodePriority+0x32>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	f04f 32ff 	mov.w	r2, #4294967295
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43da      	mvns	r2, r3
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	401a      	ands	r2, r3
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a24:	f04f 31ff 	mov.w	r1, #4294967295
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	43d9      	mvns	r1, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a34:	4313      	orrs	r3, r2
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3724      	adds	r7, #36	@ 0x24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
	...

08001a44 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001a48:	4b05      	ldr	r3, [pc, #20]	@ (8001a60 <LL_RCC_HSI_Enable+0x1c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a04      	ldr	r2, [pc, #16]	@ (8001a60 <LL_RCC_HSI_Enable+0x1c>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	6013      	str	r3, [r2, #0]
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800

08001a64 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001a68:	4b06      	ldr	r3, [pc, #24]	@ (8001a84 <LL_RCC_HSI_IsReady+0x20>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	bf0c      	ite	eq
 8001a74:	2301      	moveq	r3, #1
 8001a76:	2300      	movne	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	40023800 	.word	0x40023800

08001a88 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001a90:	4b07      	ldr	r3, [pc, #28]	@ (8001ab0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	4904      	ldr	r1, [pc, #16]	@ (8001ab0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	600b      	str	r3, [r1, #0]
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800

08001ab4 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001abc:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <LL_RCC_SetSysClkSource+0x24>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f023 0203 	bic.w	r2, r3, #3
 8001ac4:	4904      	ldr	r1, [pc, #16]	@ (8001ad8 <LL_RCC_SetSysClkSource+0x24>)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	608b      	str	r3, [r1, #8]
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	40023800 	.word	0x40023800

08001adc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001ae0:	4b04      	ldr	r3, [pc, #16]	@ (8001af4 <LL_RCC_GetSysClkSource+0x18>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 030c 	and.w	r3, r3, #12
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800

08001af8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001b00:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <LL_RCC_SetAHBPrescaler+0x24>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b08:	4904      	ldr	r1, [pc, #16]	@ (8001b1c <LL_RCC_SetAHBPrescaler+0x24>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	608b      	str	r3, [r1, #8]
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	40023800 	.word	0x40023800

08001b20 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001b28:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b30:	4904      	ldr	r1, [pc, #16]	@ (8001b44 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	608b      	str	r3, [r1, #8]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	40023800 	.word	0x40023800

08001b48 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001b50:	4b06      	ldr	r3, [pc, #24]	@ (8001b6c <LL_RCC_SetAPB2Prescaler+0x24>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b58:	4904      	ldr	r1, [pc, #16]	@ (8001b6c <LL_RCC_SetAPB2Prescaler+0x24>)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	608b      	str	r3, [r1, #8]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	40023800 	.word	0x40023800

08001b70 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001b78:	4b08      	ldr	r3, [pc, #32]	@ (8001b9c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b7c:	4907      	ldr	r1, [pc, #28]	@ (8001b9c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001b84:	4b05      	ldr	r3, [pc, #20]	@ (8001b9c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	40023800 	.word	0x40023800

08001ba0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001ba8:	4b08      	ldr	r3, [pc, #32]	@ (8001bcc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001baa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bac:	4907      	ldr	r1, [pc, #28]	@ (8001bcc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001bb4:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001bb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	40023800 	.word	0x40023800

08001bd0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001bd8:	4b08      	ldr	r3, [pc, #32]	@ (8001bfc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001bda:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001bdc:	4907      	ldr	r1, [pc, #28]	@ (8001bfc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001be4:	4b05      	ldr	r3, [pc, #20]	@ (8001bfc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001be6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4013      	ands	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bee:	68fb      	ldr	r3, [r7, #12]
}
 8001bf0:	bf00      	nop
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	40023800 	.word	0x40023800

08001c00 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001c08:	4b06      	ldr	r3, [pc, #24]	@ (8001c24 <LL_FLASH_SetLatency+0x24>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f023 0207 	bic.w	r2, r3, #7
 8001c10:	4904      	ldr	r1, [pc, #16]	@ (8001c24 <LL_FLASH_SetLatency+0x24>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	600b      	str	r3, [r1, #0]
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	40023c00 	.word	0x40023c00

08001c28 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001c2c:	4b04      	ldr	r3, [pc, #16]	@ (8001c40 <LL_FLASH_GetLatency+0x18>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0307 	and.w	r3, r3, #7
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40023c00 	.word	0x40023c00

08001c44 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8001c4c:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8001c54:	4904      	ldr	r1, [pc, #16]	@ (8001c68 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	600b      	str	r3, [r1, #0]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	40007000 	.word	0x40007000

08001c6c <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	601a      	str	r2, [r3, #0]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f023 0210 	bic.w	r2, r3, #16
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	605a      	str	r2, [r3, #4]
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <LL_USART_Enable>:
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	60da      	str	r2, [r3, #12]
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <LL_USART_ConfigAsyncMode>:
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	615a      	str	r2, [r3, #20]
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <LL_GPIO_SetOutputPin>:
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	619a      	str	r2, [r3, #24]
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <LL_GPIO_ResetOutputPin>:
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	041a      	lsls	r2, r3, #16
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	619a      	str	r2, [r3, #24]
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001d3c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001d40:	f7ff ff46 	bl	8001bd0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001d44:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001d48:	f7ff ff2a 	bl	8001ba0 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d4c:	2003      	movs	r0, #3
 8001d4e:	f7ff fdcb 	bl	80018e8 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8001d52:	f7ff fded 	bl	8001930 <__NVIC_GetPriorityGrouping>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2200      	movs	r2, #0
 8001d5a:	210f      	movs	r1, #15
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff fe3d 	bl	80019dc <NVIC_EncodePriority>
 8001d62:	4603      	mov	r3, r0
 8001d64:	4619      	mov	r1, r3
 8001d66:	f04f 30ff 	mov.w	r0, #4294967295
 8001d6a:	f7ff fe0d 	bl	8001988 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d6e:	f000 f819 	bl	8001da4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d72:	f000 f905 	bl	8001f80 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001d76:	f000 f8a1 	bl	8001ebc <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001d7a:	f000 f849 	bl	8001e10 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
    WDT_init();
 8001d7e:	f000 fe27 	bl	80029d0 <WDT_init>
    status_led_init();
 8001d82:	f7ff fc8d 	bl	80016a0 <status_led_init>
    command_init();
 8001d86:	f7ff f9cf 	bl	8001128 <command_init>
    //tec_init();

    SCH_Initialize();
 8001d8a:	f001 fd2b 	bl	80037e4 <SCH_Initialize>
    WDT_create_task();
 8001d8e:	f000 fe2b 	bl	80029e8 <WDT_create_task>
    status_led_create_task();
 8001d92:	f7ff fd9d 	bl	80018d0 <status_led_create_task>
    command_create_task();
 8001d96:	f7ff fbef 	bl	8001578 <command_create_task>
    //tec_create_task();

    SCH_StartSchedular();
 8001d9a:	f001 fe4d 	bl	8003a38 <SCH_StartSchedular>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_HandleScheduledTask();
 8001d9e:	f001 fe51 	bl	8003a44 <SCH_HandleScheduledTask>
 8001da2:	e7fc      	b.n	8001d9e <main+0x66>

08001da4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001da8:	2000      	movs	r0, #0
 8001daa:	f7ff ff29 	bl	8001c00 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8001dae:	bf00      	nop
 8001db0:	f7ff ff3a 	bl	8001c28 <LL_FLASH_GetLatency>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1fa      	bne.n	8001db0 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001dba:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001dbe:	f7ff ff41 	bl	8001c44 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8001dc2:	2010      	movs	r0, #16
 8001dc4:	f7ff fe60 	bl	8001a88 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8001dc8:	f7ff fe3c 	bl	8001a44 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001dcc:	bf00      	nop
 8001dce:	f7ff fe49 	bl	8001a64 <LL_RCC_HSI_IsReady>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d1fa      	bne.n	8001dce <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 8001dd8:	2080      	movs	r0, #128	@ 0x80
 8001dda:	f7ff fe8d 	bl	8001af8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001dde:	2000      	movs	r0, #0
 8001de0:	f7ff fe9e 	bl	8001b20 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001de4:	2000      	movs	r0, #0
 8001de6:	f7ff feaf 	bl	8001b48 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001dea:	2000      	movs	r0, #0
 8001dec:	f7ff fe62 	bl	8001ab4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001df0:	bf00      	nop
 8001df2:	f7ff fe73 	bl	8001adc <LL_RCC_GetSysClkSource>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1fa      	bne.n	8001df2 <SystemClock_Config+0x4e>
  {

  }
  LL_Init1msTick(8000000);
 8001dfc:	4803      	ldr	r0, [pc, #12]	@ (8001e0c <SystemClock_Config+0x68>)
 8001dfe:	f001 fcad 	bl	800375c <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 8001e02:	4802      	ldr	r0, [pc, #8]	@ (8001e0c <SystemClock_Config+0x68>)
 8001e04:	f001 fcde 	bl	80037c4 <LL_SetSystemCoreClock>
}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	007a1200 	.word	0x007a1200

08001e10 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b090      	sub	sp, #64	@ 0x40
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001e16:	f107 0318 	add.w	r3, r7, #24
 8001e1a:	2228      	movs	r2, #40	@ 0x28
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f001 fe6a 	bl	8003af8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	463b      	mov	r3, r7
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	60da      	str	r2, [r3, #12]
 8001e30:	611a      	str	r2, [r3, #16]
 8001e32:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001e34:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001e38:	f7ff feca 	bl	8001bd0 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001e3c:	2002      	movs	r0, #2
 8001e3e:	f7ff fe97 	bl	8001b70 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PB3   ------> SPI1_SCK
  PB4   ------> SPI1_MISO
  PB5   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = TEC_SCK_Pin|TEC_MISO_Pin|TEC_MOSI_Pin;
 8001e42:	2338      	movs	r3, #56	@ 0x38
 8001e44:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001e46:	2302      	movs	r3, #2
 8001e48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e52:	2300      	movs	r3, #0
 8001e54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001e56:	2305      	movs	r3, #5
 8001e58:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5a:	463b      	mov	r3, r7
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4815      	ldr	r0, [pc, #84]	@ (8001eb4 <MX_SPI1_Init+0xa4>)
 8001e60:	f000 ff49 	bl	8002cf6 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001e68:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001e6c:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001e76:	2300      	movs	r3, #0
 8001e78:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001e7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8001e80:	2318      	movs	r3, #24
 8001e82:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001e84:	2300      	movs	r3, #0
 8001e86:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001e8c:	230a      	movs	r3, #10
 8001e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8001e90:	f107 0318 	add.w	r3, r7, #24
 8001e94:	4619      	mov	r1, r3
 8001e96:	4808      	ldr	r0, [pc, #32]	@ (8001eb8 <MX_SPI1_Init+0xa8>)
 8001e98:	f001 f90b 	bl	80030b2 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	4806      	ldr	r0, [pc, #24]	@ (8001eb8 <MX_SPI1_Init+0xa8>)
 8001ea0:	f7ff fef4 	bl	8001c8c <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */
  LL_SPI_Enable(SPI1);
 8001ea4:	4804      	ldr	r0, [pc, #16]	@ (8001eb8 <MX_SPI1_Init+0xa8>)
 8001ea6:	f7ff fee1 	bl	8001c6c <LL_SPI_Enable>
  /* USER CODE END SPI1_Init 2 */

}
 8001eaa:	bf00      	nop
 8001eac:	3740      	adds	r7, #64	@ 0x40
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40020400 	.word	0x40020400
 8001eb8:	40013000 	.word	0x40013000

08001ebc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08e      	sub	sp, #56	@ 0x38
 8001ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001ec2:	f107 031c 	add.w	r3, r7, #28
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	605a      	str	r2, [r3, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
 8001ece:	60da      	str	r2, [r3, #12]
 8001ed0:	611a      	str	r2, [r3, #16]
 8001ed2:	615a      	str	r2, [r3, #20]
 8001ed4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed6:	1d3b      	adds	r3, r7, #4
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	611a      	str	r2, [r3, #16]
 8001ee4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8001ee6:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8001eea:	f7ff fe59 	bl	8001ba0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001eee:	2008      	movs	r0, #8
 8001ef0:	f7ff fe3e 	bl	8001b70 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = EXP_URRT_TX_Pin|EXP_UART_RX_Pin;
 8001ef4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ef8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001efa:	2302      	movs	r3, #2
 8001efc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001efe:	2303      	movs	r3, #3
 8001f00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001f0a:	2307      	movs	r3, #7
 8001f0c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f0e:	1d3b      	adds	r3, r7, #4
 8001f10:	4619      	mov	r1, r3
 8001f12:	4819      	ldr	r0, [pc, #100]	@ (8001f78 <MX_USART3_UART_Init+0xbc>)
 8001f14:	f000 feef 	bl	8002cf6 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001f18:	f7ff fd0a 	bl	8001930 <__NVIC_GetPriorityGrouping>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2100      	movs	r1, #0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fd5a 	bl	80019dc <NVIC_EncodePriority>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	2027      	movs	r0, #39	@ 0x27
 8001f2e:	f7ff fd2b 	bl	8001988 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8001f32:	2027      	movs	r0, #39	@ 0x27
 8001f34:	f7ff fd0a 	bl	800194c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001f38:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001f3c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001f42:	2300      	movs	r3, #0
 8001f44:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001f46:	2300      	movs	r3, #0
 8001f48:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001f4a:	230c      	movs	r3, #12
 8001f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001f52:	2300      	movs	r3, #0
 8001f54:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8001f56:	f107 031c 	add.w	r3, r7, #28
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4807      	ldr	r0, [pc, #28]	@ (8001f7c <MX_USART3_UART_Init+0xc0>)
 8001f5e:	f001 fb63 	bl	8003628 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8001f62:	4806      	ldr	r0, [pc, #24]	@ (8001f7c <MX_USART3_UART_Init+0xc0>)
 8001f64:	f7ff feb5 	bl	8001cd2 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8001f68:	4804      	ldr	r0, [pc, #16]	@ (8001f7c <MX_USART3_UART_Init+0xc0>)
 8001f6a:	f7ff fea2 	bl	8001cb2 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f6e:	bf00      	nop
 8001f70:	3738      	adds	r7, #56	@ 0x38
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40020c00 	.word	0x40020c00
 8001f7c:	40004800 	.word	0x40004800

08001f80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f86:	463b      	mov	r3, r7
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
 8001f94:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8001f96:	2010      	movs	r0, #16
 8001f98:	f7ff fdea 	bl	8001b70 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001f9c:	2004      	movs	r0, #4
 8001f9e:	f7ff fde7 	bl	8001b70 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001fa2:	2080      	movs	r0, #128	@ 0x80
 8001fa4:	f7ff fde4 	bl	8001b70 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001fa8:	2001      	movs	r0, #1
 8001faa:	f7ff fde1 	bl	8001b70 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001fae:	2008      	movs	r0, #8
 8001fb0:	f7ff fdde 	bl	8001b70 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001fb4:	2002      	movs	r0, #2
 8001fb6:	f7ff fddb 	bl	8001b70 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, TEC_1_SWEN_Pin|TEC_1_EN_Pin);
 8001fba:	2124      	movs	r1, #36	@ 0x24
 8001fbc:	4842      	ldr	r0, [pc, #264]	@ (80020c8 <MX_GPIO_Init+0x148>)
 8001fbe:	f7ff feac 	bl	8001d1a <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(EF_TEC_EN_GPIO_Port, EF_TEC_EN_Pin);
 8001fc2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fc6:	4841      	ldr	r0, [pc, #260]	@ (80020cc <MX_GPIO_Init+0x14c>)
 8001fc8:	f7ff fea7 	bl	8001d1a <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 8001fcc:	2102      	movs	r1, #2
 8001fce:	4840      	ldr	r0, [pc, #256]	@ (80020d0 <MX_GPIO_Init+0x150>)
 8001fd0:	f7ff fea3 	bl	8001d1a <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LED_B_Pin|LED_G_Pin);
 8001fd4:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001fd8:	483e      	ldr	r0, [pc, #248]	@ (80020d4 <MX_GPIO_Init+0x154>)
 8001fda:	f7ff fe9e 	bl	8001d1a <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOB, TEC_4_CS_Pin|TEC_3_CS_Pin);
 8001fde:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001fe2:	483d      	ldr	r0, [pc, #244]	@ (80020d8 <MX_GPIO_Init+0x158>)
 8001fe4:	f7ff fe8b 	bl	8001cfe <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOE, TEC_2_CS_Pin|TEC_1_CS_Pin);
 8001fe8:	2103      	movs	r1, #3
 8001fea:	4837      	ldr	r0, [pc, #220]	@ (80020c8 <MX_GPIO_Init+0x148>)
 8001fec:	f7ff fe87 	bl	8001cfe <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = TEC_1_SWEN_Pin|TEC_1_EN_Pin;
 8001ff0:	2324      	movs	r3, #36	@ 0x24
 8001ff2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8002000:	2302      	movs	r3, #2
 8002002:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002004:	463b      	mov	r3, r7
 8002006:	4619      	mov	r1, r3
 8002008:	482f      	ldr	r0, [pc, #188]	@ (80020c8 <MX_GPIO_Init+0x148>)
 800200a:	f000 fe74 	bl	8002cf6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EF_TEC_AUX_Pin;
 800200e:	2340      	movs	r3, #64	@ 0x40
 8002010:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002012:	2300      	movs	r3, #0
 8002014:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(EF_TEC_AUX_GPIO_Port, &GPIO_InitStruct);
 800201a:	463b      	mov	r3, r7
 800201c:	4619      	mov	r1, r3
 800201e:	482a      	ldr	r0, [pc, #168]	@ (80020c8 <MX_GPIO_Init+0x148>)
 8002020:	f000 fe69 	bl	8002cf6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EF_TEC_EN_Pin;
 8002024:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002028:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800202a:	2301      	movs	r3, #1
 800202c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800202e:	2300      	movs	r3, #0
 8002030:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002036:	2300      	movs	r3, #0
 8002038:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(EF_TEC_EN_GPIO_Port, &GPIO_InitStruct);
 800203a:	463b      	mov	r3, r7
 800203c:	4619      	mov	r1, r3
 800203e:	4823      	ldr	r0, [pc, #140]	@ (80020cc <MX_GPIO_Init+0x14c>)
 8002040:	f000 fe59 	bl	8002cf6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = WD_DONE_Pin;
 8002044:	2302      	movs	r3, #2
 8002046:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002048:	2301      	movs	r3, #1
 800204a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800204c:	2300      	movs	r3, #0
 800204e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002054:	2300      	movs	r3, #0
 8002056:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(WD_DONE_GPIO_Port, &GPIO_InitStruct);
 8002058:	463b      	mov	r3, r7
 800205a:	4619      	mov	r1, r3
 800205c:	481c      	ldr	r0, [pc, #112]	@ (80020d0 <MX_GPIO_Init+0x150>)
 800205e:	f000 fe4a 	bl	8002cf6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_B_Pin|LED_G_Pin;
 8002062:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002066:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002068:	2301      	movs	r3, #1
 800206a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800206c:	2300      	movs	r3, #0
 800206e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002074:	2300      	movs	r3, #0
 8002076:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002078:	463b      	mov	r3, r7
 800207a:	4619      	mov	r1, r3
 800207c:	4815      	ldr	r0, [pc, #84]	@ (80020d4 <MX_GPIO_Init+0x154>)
 800207e:	f000 fe3a 	bl	8002cf6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_4_CS_Pin|TEC_3_CS_Pin;
 8002082:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002086:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002088:	2301      	movs	r3, #1
 800208a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800208c:	2300      	movs	r3, #0
 800208e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002094:	2300      	movs	r3, #0
 8002096:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002098:	463b      	mov	r3, r7
 800209a:	4619      	mov	r1, r3
 800209c:	480e      	ldr	r0, [pc, #56]	@ (80020d8 <MX_GPIO_Init+0x158>)
 800209e:	f000 fe2a 	bl	8002cf6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_2_CS_Pin|TEC_1_CS_Pin;
 80020a2:	2303      	movs	r3, #3
 80020a4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80020a6:	2301      	movs	r3, #1
 80020a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80020aa:	2300      	movs	r3, #0
 80020ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80020b2:	2300      	movs	r3, #0
 80020b4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020b6:	463b      	mov	r3, r7
 80020b8:	4619      	mov	r1, r3
 80020ba:	4803      	ldr	r0, [pc, #12]	@ (80020c8 <MX_GPIO_Init+0x148>)
 80020bc:	f000 fe1b 	bl	8002cf6 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020c0:	bf00      	nop
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40020800 	.word	0x40020800
 80020d0:	40020000 	.word	0x40020000
 80020d4:	40020c00 	.word	0x40020c00
 80020d8:	40020400 	.word	0x40020400

080020dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020e0:	bf00      	nop
 80020e2:	e7fd      	b.n	80020e0 <NMI_Handler+0x4>

080020e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020e8:	bf00      	nop
 80020ea:	e7fd      	b.n	80020e8 <HardFault_Handler+0x4>

080020ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020f0:	bf00      	nop
 80020f2:	e7fd      	b.n	80020f0 <MemManage_Handler+0x4>

080020f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020f8:	bf00      	nop
 80020fa:	e7fd      	b.n	80020f8 <BusFault_Handler+0x4>

080020fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002100:	bf00      	nop
 8002102:	e7fd      	b.n	8002100 <UsageFault_Handler+0x4>

08002104 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002124:	bf00      	nop
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
	...

08002130 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	g_systick_count++;
 8002134:	4b04      	ldr	r3, [pc, #16]	@ (8002148 <SysTick_Handler+0x18>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	3301      	adds	r3, #1
 800213a:	4a03      	ldr	r2, [pc, #12]	@ (8002148 <SysTick_Handler+0x18>)
 800213c:	6013      	str	r3, [r2, #0]
	SCH_RunSystemTickTimer();
 800213e:	f001 fbe7 	bl	8003910 <SCH_RunSystemTickTimer>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20000270 	.word	0x20000270

0800214c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	CONSOLE_UART_IRQHandler();
 8002150:	f7ff fa1e 	bl	8001590 <CONSOLE_UART_IRQHandler>
  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002154:	bf00      	nop
 8002156:	bd80      	pop	{r7, pc}

08002158 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800215c:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <SystemInit+0x20>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002162:	4a05      	ldr	r2, [pc, #20]	@ (8002178 <SystemInit+0x20>)
 8002164:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002168:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800217c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002180:	f7ff ffea 	bl	8002158 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002184:	480c      	ldr	r0, [pc, #48]	@ (80021b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002186:	490d      	ldr	r1, [pc, #52]	@ (80021bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002188:	4a0d      	ldr	r2, [pc, #52]	@ (80021c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800218a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800218c:	e002      	b.n	8002194 <LoopCopyDataInit>

0800218e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800218e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002192:	3304      	adds	r3, #4

08002194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002198:	d3f9      	bcc.n	800218e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800219a:	4a0a      	ldr	r2, [pc, #40]	@ (80021c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800219c:	4c0a      	ldr	r4, [pc, #40]	@ (80021c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800219e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a0:	e001      	b.n	80021a6 <LoopFillZerobss>

080021a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a4:	3204      	adds	r2, #4

080021a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a8:	d3fb      	bcc.n	80021a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021aa:	f001 fcad 	bl	8003b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ae:	f7ff fdc3 	bl	8001d38 <main>
  bx  lr    
 80021b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021bc:	20000140 	.word	0x20000140
  ldr r2, =_sidata
 80021c0:	08003f10 	.word	0x08003f10
  ldr r2, =_sbss
 80021c4:	20000140 	.word	0x20000140
  ldr r4, =_ebss
 80021c8:	2000048c 	.word	0x2000048c

080021cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021cc:	e7fe      	b.n	80021cc <ADC_IRQHandler>

080021ce <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(const SPI_TypeDef *SPIx)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021de:	2b80      	cmp	r3, #128	@ 0x80
 80021e0:	d101      	bne.n	80021e6 <LL_SPI_IsActiveFlag_BSY+0x18>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <LL_SPI_IsActiveFlag_BSY+0x1a>
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	330c      	adds	r3, #12
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	b2db      	uxtb	r3, r3
}
 8002204:	4618      	mov	r0, r3
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	330c      	adds	r3, #12
 8002220:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	78fa      	ldrb	r2, [r7, #3]
 8002226:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8002228:	bf00      	nop
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <LL_GPIO_SetOutputPin>:
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	619a      	str	r2, [r3, #24]
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <LL_GPIO_ResetOutputPin>:
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	041a      	lsls	r2, r3, #16
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	619a      	str	r2, [r3, #24]
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
	...

08002270 <csLOW>:
} Tec_TaskContextTypedef;

/* Private function -----------------------------------------------------------*/
static void tec_task_update(void);

static inline void csLOW(void){
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(TEC_1_CS_GPIO_Port, TEC_1_CS_Pin);
 8002274:	2102      	movs	r1, #2
 8002276:	4802      	ldr	r0, [pc, #8]	@ (8002280 <csLOW+0x10>)
 8002278:	f7ff ffea 	bl	8002250 <LL_GPIO_ResetOutputPin>
}
 800227c:	bf00      	nop
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40021000 	.word	0x40021000

08002284 <csHIGH>:

static inline void csHIGH(void){
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(TEC_1_CS_GPIO_Port, TEC_1_CS_Pin);
 8002288:	2102      	movs	r1, #2
 800228a:	4802      	ldr	r0, [pc, #8]	@ (8002294 <csHIGH+0x10>)
 800228c:	f7ff ffd2 	bl	8002234 <LL_GPIO_SetOutputPin>
}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40021000 	.word	0x40021000

08002298 <SPI_LL_Transmit>:

static uint8_t SPI_LL_Transmit(uint8_t data){
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	71fb      	strb	r3, [r7, #7]
//	uint32_t timeout = SPI_TIMEOUT;
	LL_SPI_TransmitData8(SPI1, data);
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	4619      	mov	r1, r3
 80022a6:	4809      	ldr	r0, [pc, #36]	@ (80022cc <SPI_LL_Transmit+0x34>)
 80022a8:	f7ff ffb2 	bl	8002210 <LL_SPI_TransmitData8>

	while(LL_SPI_IsActiveFlag_BSY(SPI1));
 80022ac:	bf00      	nop
 80022ae:	4807      	ldr	r0, [pc, #28]	@ (80022cc <SPI_LL_Transmit+0x34>)
 80022b0:	f7ff ff8d 	bl	80021ce <LL_SPI_IsActiveFlag_BSY>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f9      	bne.n	80022ae <SPI_LL_Transmit+0x16>
//    while(LL_SPI_IsActiveFlag_BSY(SPI1) && timeout--);
//    if (timeout == 0) return 0;

	return LL_SPI_ReceiveData8(SPI1);
 80022ba:	4804      	ldr	r0, [pc, #16]	@ (80022cc <SPI_LL_Transmit+0x34>)
 80022bc:	f7ff ff9a 	bl	80021f4 <LL_SPI_ReceiveData8>
 80022c0:	4603      	mov	r3, r0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40013000 	.word	0x40013000

080022d0 <SPI_write_and_read_buffer>:

uint8_t SPI_write_and_read_buffer(uint8_t *buffer, uint8_t byte_number) {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	70fb      	strb	r3, [r7, #3]
    uint8_t received_data = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	73fb      	strb	r3, [r7, #15]
    csLOW();
 80022e0:	f7ff ffc6 	bl	8002270 <csLOW>
    for (uint8_t i = 0; i < byte_number; i++) {
 80022e4:	2300      	movs	r3, #0
 80022e6:	73bb      	strb	r3, [r7, #14]
 80022e8:	e010      	b.n	800230c <SPI_write_and_read_buffer+0x3c>
        received_data = SPI_LL_Transmit(buffer[i]); // Gửi từng byte từ buffer
 80022ea:	7bbb      	ldrb	r3, [r7, #14]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	4413      	add	r3, r2
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff ffd0 	bl	8002298 <SPI_LL_Transmit>
 80022f8:	4603      	mov	r3, r0
 80022fa:	73fb      	strb	r3, [r7, #15]
        buffer[i] = received_data;
 80022fc:	7bbb      	ldrb	r3, [r7, #14]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	7bfa      	ldrb	r2, [r7, #15]
 8002304:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < byte_number; i++) {
 8002306:	7bbb      	ldrb	r3, [r7, #14]
 8002308:	3301      	adds	r3, #1
 800230a:	73bb      	strb	r3, [r7, #14]
 800230c:	7bba      	ldrb	r2, [r7, #14]
 800230e:	78fb      	ldrb	r3, [r7, #3]
 8002310:	429a      	cmp	r2, r3
 8002312:	d3ea      	bcc.n	80022ea <SPI_write_and_read_buffer+0x1a>
    }
    csHIGH();
 8002314:	f7ff ffb6 	bl	8002284 <csHIGH>
    return received_data; // Trả về dữ liệu nhận được từ byte cuối cùng
 8002318:	7bfb      	ldrb	r3, [r7, #15]
}
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <tec_init>:
		LT8722_SPIS_AMUX_SIZE
	},
};

int8_t tec_init(void)
{
 8002324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002328:	b08f      	sub	sp, #60	@ 0x3c
 800232a:	af00      	add	r7, sp, #0
	int32_t dac;
	int64_t voltage;
	int64_t start_voltage;
	int64_t end_voltage;

	LL_GPIO_ResetOutputPin(TEC_1_EN_GPIO_Port, TEC_1_EN_Pin);
 800232c:	2120      	movs	r1, #32
 800232e:	4848      	ldr	r0, [pc, #288]	@ (8002450 <tec_init+0x12c>)
 8002330:	f7ff ff8e 	bl	8002250 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(TEC_1_SWEN_GPIO_Port, TEC_1_SWEN_Pin);
 8002334:	2104      	movs	r1, #4
 8002336:	4846      	ldr	r0, [pc, #280]	@ (8002450 <tec_init+0x12c>)
 8002338:	f7ff ff8a 	bl	8002250 <LL_GPIO_ResetOutputPin>
	// Reset LT8722
	lt8722_reset();
 800233c:	f000 fa16 	bl	800276c <lt8722_reset>
	 * Start-up sequence
	 * 1. Apply proper VIN and VDDIO voltages
	 *
	 * 2. Enable VCC LDO and other LT8722 circuitry
	 */
	ret = lt8722_clear_faults();
 8002340:	f000 fa1f 	bl	8002782 <lt8722_clear_faults>
 8002344:	4603      	mov	r3, r0
 8002346:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	LL_GPIO_SetOutputPin(TEC_1_EN_GPIO_Port, TEC_1_EN_Pin);
 800234a:	2120      	movs	r1, #32
 800234c:	4840      	ldr	r0, [pc, #256]	@ (8002450 <tec_init+0x12c>)
 800234e:	f7ff ff71 	bl	8002234 <LL_GPIO_SetOutputPin>
	ret = lt8722_set_enable_req(LT8722_ENABLE_REQ_ENABLED);
 8002352:	2001      	movs	r0, #1
 8002354:	f000 fa31 	bl	80027ba <lt8722_set_enable_req>
 8002358:	4603      	mov	r3, r0
 800235a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	// 3. Configure output voltage control DAC to 0xFF000000
	ret = lt8722_set_dac(0xFF000000);
 800235e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8002362:	f000 fb05 	bl	8002970 <lt8722_set_dac>
 8002366:	4603      	mov	r3, r0
 8002368:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	// 4. Write all SPIS_STATUS registers to 0
	ret = lt8722_reg_write(LT8722_SPIS_STATUS, 0);
 800236c:	2100      	movs	r1, #0
 800236e:	2001      	movs	r0, #1
 8002370:	f000 f982 	bl	8002678 <lt8722_reg_write>
 8002374:	4603      	mov	r3, r0
 8002376:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	LL_mDelay(1);
 800237a:	2001      	movs	r0, #1
 800237c:	f001 f9fc 	bl	8003778 <LL_mDelay>
	// 5. Ramp the output voltage control DAC from 0xFF000000 to 0x00000000
	start_voltage = lt8722_dac_to_voltage(0xFF000000);
 8002380:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8002384:	f000 f88e 	bl	80024a4 <lt8722_dac_to_voltage>
 8002388:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
	end_voltage = lt8722_dac_to_voltage(0x00000000);
 800238c:	2000      	movs	r0, #0
 800238e:	f000 f889 	bl	80024a4 <lt8722_dac_to_voltage>
 8002392:	e9c7 0108 	strd	r0, r1, [r7, #32]
	for (i = 0;  i < 5; i++)
 8002396:	2300      	movs	r3, #0
 8002398:	637b      	str	r3, [r7, #52]	@ 0x34
 800239a:	e042      	b.n	8002422 <tec_init+0xfe>
	{
		voltage = (start_voltage + (end_voltage - start_voltage) * i / 4);
 800239c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80023a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80023a4:	1a84      	subs	r4, r0, r2
 80023a6:	eb61 0503 	sbc.w	r5, r1, r3
 80023aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023ac:	2200      	movs	r2, #0
 80023ae:	4698      	mov	r8, r3
 80023b0:	4691      	mov	r9, r2
 80023b2:	fb08 f205 	mul.w	r2, r8, r5
 80023b6:	fb04 f309 	mul.w	r3, r4, r9
 80023ba:	4413      	add	r3, r2
 80023bc:	fba4 ab08 	umull	sl, fp, r4, r8
 80023c0:	445b      	add	r3, fp
 80023c2:	469b      	mov	fp, r3
 80023c4:	4652      	mov	r2, sl
 80023c6:	465b      	mov	r3, fp
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	da06      	bge.n	80023da <tec_init+0xb6>
 80023cc:	1cd1      	adds	r1, r2, #3
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	f143 0300 	adc.w	r3, r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023da:	f04f 0000 	mov.w	r0, #0
 80023de:	f04f 0100 	mov.w	r1, #0
 80023e2:	0890      	lsrs	r0, r2, #2
 80023e4:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 80023e8:	1099      	asrs	r1, r3, #2
 80023ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80023ee:	1816      	adds	r6, r2, r0
 80023f0:	603e      	str	r6, [r7, #0]
 80023f2:	414b      	adcs	r3, r1
 80023f4:	607b      	str	r3, [r7, #4]
 80023f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023fa:	e9c7 2306 	strd	r2, r3, [r7, #24]
		dac = lt8722_voltage_to_dac(voltage);
 80023fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002402:	f000 f829 	bl	8002458 <lt8722_voltage_to_dac>
 8002406:	6178      	str	r0, [r7, #20]
		ret = lt8722_set_dac(dac);
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	4618      	mov	r0, r3
 800240c:	f000 fab0 	bl	8002970 <lt8722_set_dac>
 8002410:	4603      	mov	r3, r0
 8002412:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		LL_mDelay(1);
 8002416:	2001      	movs	r0, #1
 8002418:	f001 f9ae 	bl	8003778 <LL_mDelay>
	for (i = 0;  i < 5; i++)
 800241c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800241e:	3301      	adds	r3, #1
 8002420:	637b      	str	r3, [r7, #52]	@ 0x34
 8002422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002424:	2b04      	cmp	r3, #4
 8002426:	d9b9      	bls.n	800239c <tec_init+0x78>
	}

	// 6. Enable the PWM switching behavior
	LL_GPIO_SetOutputPin(TEC_1_SWEN_GPIO_Port, TEC_1_SWEN_Pin);
 8002428:	2104      	movs	r1, #4
 800242a:	4809      	ldr	r0, [pc, #36]	@ (8002450 <tec_init+0x12c>)
 800242c:	f7ff ff02 	bl	8002234 <LL_GPIO_SetOutputPin>
	ret = lt8722_set_swen_req(LT8722_SWEN_REQ_ENABLED);
 8002430:	2001      	movs	r0, #1
 8002432:	f000 f9d2 	bl	80027da <lt8722_set_swen_req>
 8002436:	4603      	mov	r3, r0
 8002438:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	delay_us(160);
 800243c:	20a0      	movs	r0, #160	@ 0xa0
 800243e:	f7fe f8b1 	bl	80005a4 <delay_us>


	// 7. Set the desired output voltage

	return ret;
 8002442:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33

}
 8002446:	4618      	mov	r0, r3
 8002448:	373c      	adds	r7, #60	@ 0x3c
 800244a:	46bd      	mov	sp, r7
 800244c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002450:	40021000 	.word	0x40021000
 8002454:	00000000 	.word	0x00000000

08002458 <lt8722_voltage_to_dac>:
 * @brief Convert voltage to DAC code.
 * @param voltage - Voltage value in nanovolts.
 * @return DAC code.
 */
int32_t lt8722_voltage_to_dac(int64_t voltage)
{
 8002458:	b5b0      	push	{r4, r5, r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	e9c7 0100 	strd	r0, r1, [r7]
	return (LT8722_DAC_OFFSET - voltage) * (1 << LT8722_DAC_RESOLUTION) /
 8002462:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002466:	4d0e      	ldr	r5, [pc, #56]	@ (80024a0 <lt8722_voltage_to_dac+0x48>)
 8002468:	2400      	movs	r4, #0
 800246a:	1a2a      	subs	r2, r5, r0
 800246c:	eb64 0301 	sbc.w	r3, r4, r1
 8002470:	f04f 0000 	mov.w	r0, #0
 8002474:	f04f 0100 	mov.w	r1, #0
 8002478:	0659      	lsls	r1, r3, #25
 800247a:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 800247e:	0650      	lsls	r0, r2, #25
 8002480:	a305      	add	r3, pc, #20	@ (adr r3, 8002498 <lt8722_voltage_to_dac+0x40>)
 8002482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002486:	f7fd feb1 	bl	80001ec <__aeabi_ldivmod>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	4613      	mov	r3, r2
	       LT8722_DAC_VREF;
}
 8002490:	4618      	mov	r0, r3
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bdb0      	pop	{r4, r5, r7, pc}
 8002498:	9502f900 	.word	0x9502f900
 800249c:	00000000 	.word	0x00000000
 80024a0:	4a817c80 	.word	0x4a817c80

080024a4 <lt8722_dac_to_voltage>:
 * @brief Convert DAC code to nanovolts.
 * @param dac - DAC code.
 * @return Voltage value in nanovolts.
 */
int64_t lt8722_dac_to_voltage(int32_t dac)
{
 80024a4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80024a8:	b085      	sub	sp, #20
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	60f8      	str	r0, [r7, #12]
	return LT8722_DAC_OFFSET - dac * LT8722_DAC_VREF /
 80024ae:	68f9      	ldr	r1, [r7, #12]
 80024b0:	17c8      	asrs	r0, r1, #31
 80024b2:	460c      	mov	r4, r1
 80024b4:	4605      	mov	r5, r0
 80024b6:	491b      	ldr	r1, [pc, #108]	@ (8002524 <lt8722_dac_to_voltage+0x80>)
 80024b8:	fb01 f005 	mul.w	r0, r1, r5
 80024bc:	2100      	movs	r1, #0
 80024be:	fb04 f101 	mul.w	r1, r4, r1
 80024c2:	4401      	add	r1, r0
 80024c4:	4817      	ldr	r0, [pc, #92]	@ (8002524 <lt8722_dac_to_voltage+0x80>)
 80024c6:	fba4 2300 	umull	r2, r3, r4, r0
 80024ca:	4419      	add	r1, r3
 80024cc:	460b      	mov	r3, r1
 80024ce:	4610      	mov	r0, r2
 80024d0:	4619      	mov	r1, r3
 80024d2:	2900      	cmp	r1, #0
 80024d4:	da08      	bge.n	80024e8 <lt8722_dac_to_voltage+0x44>
 80024d6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80024da:	18c3      	adds	r3, r0, r3
 80024dc:	603b      	str	r3, [r7, #0]
 80024de:	f141 0300 	adc.w	r3, r1, #0
 80024e2:	607b      	str	r3, [r7, #4]
 80024e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	f04f 0300 	mov.w	r3, #0
 80024f0:	0e42      	lsrs	r2, r0, #25
 80024f2:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80024f6:	164b      	asrs	r3, r1, #25
 80024f8:	2100      	movs	r1, #0
 80024fa:	f1d2 0a00 	rsbs	sl, r2, #0
 80024fe:	eb61 0b03 	sbc.w	fp, r1, r3
 8002502:	4652      	mov	r2, sl
 8002504:	465b      	mov	r3, fp
 8002506:	4908      	ldr	r1, [pc, #32]	@ (8002528 <lt8722_dac_to_voltage+0x84>)
 8002508:	eb12 0801 	adds.w	r8, r2, r1
 800250c:	f143 0900 	adc.w	r9, r3, #0
 8002510:	4642      	mov	r2, r8
 8002512:	464b      	mov	r3, r9
	       (1 << LT8722_DAC_RESOLUTION);
}
 8002514:	4610      	mov	r0, r2
 8002516:	4619      	mov	r1, r3
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	9502f900 	.word	0x9502f900
 8002528:	4a817c80 	.word	0x4a817c80

0800252c <lt8722_transaction>:

int lt8722_transaction(struct lt8722_packet *packet)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
	uint8_t buffer[8] = {0};
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	2300      	movs	r3, #0
 800253a:	613b      	str	r3, [r7, #16]

	buffer[0] = packet->command.byte;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	733b      	strb	r3, [r7, #12]
	buffer[1] = packet->reg.address << 1;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	791b      	ldrb	r3, [r3, #4]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	b2db      	uxtb	r3, r3
 800254a:	737b      	strb	r3, [r7, #13]

	if (packet->command.byte == LT8722_DATA_WRITE_COMMAND)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2bf2      	cmp	r3, #242	@ 0xf2
 8002552:	d111      	bne.n	8002578 <lt8722_transaction+0x4c>
	{
		put_unaligned_be32(packet->data, &buffer[2]);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	f107 030c 	add.w	r3, r7, #12
 800255c:	3302      	adds	r3, #2
 800255e:	4619      	mov	r1, r3
 8002560:	4610      	mov	r0, r2
 8002562:	f000 f985 	bl	8002870 <put_unaligned_be32>
		buffer[6] = Calculate_CRC8(buffer, 6);
 8002566:	f107 030c 	add.w	r3, r7, #12
 800256a:	2106      	movs	r1, #6
 800256c:	4618      	mov	r0, r3
 800256e:	f000 f944 	bl	80027fa <Calculate_CRC8>
 8002572:	4603      	mov	r3, r0
 8002574:	74bb      	strb	r3, [r7, #18]
 8002576:	e007      	b.n	8002588 <lt8722_transaction+0x5c>
	} else
		buffer[2] = Calculate_CRC8(buffer, 2);
 8002578:	f107 030c 	add.w	r3, r7, #12
 800257c:	2102      	movs	r1, #2
 800257e:	4618      	mov	r0, r3
 8002580:	f000 f93b 	bl	80027fa <Calculate_CRC8>
 8002584:	4603      	mov	r3, r0
 8002586:	73bb      	strb	r3, [r7, #14]

	SPI_write_and_read_buffer(buffer, packet->command.size);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	785a      	ldrb	r2, [r3, #1]
 800258c:	f107 030c 	add.w	r3, r7, #12
 8002590:	4611      	mov	r1, r2
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff fe9c 	bl	80022d0 <SPI_write_and_read_buffer>

	packet->status = (get_unaligned_be16(&buffer[0]) & GENMASK(10, 0));
 8002598:	f107 030c 	add.w	r3, r7, #12
 800259c:	4618      	mov	r0, r3
 800259e:	f000 f9a5 	bl	80028ec <get_unaligned_be16>
 80025a2:	4603      	mov	r3, r0
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	f04f 33ff 	mov.w	r3, #4294967295
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	055b      	lsls	r3, r3, #21
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	0d5b      	lsrs	r3, r3, #21
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	4013      	ands	r3, r2
 80025be:	b29a      	uxth	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	82da      	strh	r2, [r3, #22]

	if (packet->command.byte == LT8722_DATA_WRITE_COMMAND)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2bf2      	cmp	r3, #242	@ 0xf2
 80025ca:	d106      	bne.n	80025da <lt8722_transaction+0xae>
	{
		packet->crc = buffer[2];
 80025cc:	7bba      	ldrb	r2, [r7, #14]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	751a      	strb	r2, [r3, #20]
		packet->ack = buffer[7];
 80025d2:	7cfa      	ldrb	r2, [r7, #19]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	755a      	strb	r2, [r3, #21]
 80025d8:	e019      	b.n	800260e <lt8722_transaction+0xe2>
	} else if (packet->command.byte == LT8722_DATA_READ_COMMAND) {
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2bf4      	cmp	r3, #244	@ 0xf4
 80025e0:	d10f      	bne.n	8002602 <lt8722_transaction+0xd6>
		packet->data = get_unaligned_be32(&buffer[2]);
 80025e2:	f107 030c 	add.w	r3, r7, #12
 80025e6:	3302      	adds	r3, #2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f000 f962 	bl	80028b2 <get_unaligned_be32>
 80025ee:	4602      	mov	r2, r0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	611a      	str	r2, [r3, #16]
		packet->crc = buffer[6];
 80025f4:	7cba      	ldrb	r2, [r7, #18]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	751a      	strb	r2, [r3, #20]
		packet->ack = buffer[7];
 80025fa:	7cfa      	ldrb	r2, [r7, #19]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	755a      	strb	r2, [r3, #21]
 8002600:	e005      	b.n	800260e <lt8722_transaction+0xe2>
	} else {
		packet->crc = buffer[2];
 8002602:	7bba      	ldrb	r2, [r7, #14]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	751a      	strb	r2, [r3, #20]
		packet->ack = buffer[3];
 8002608:	7bfa      	ldrb	r2, [r7, #15]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	755a      	strb	r2, [r3, #21]
	}

	if (packet->ack != LT8722_ACK_ACKNOWLEDGE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	7d5b      	ldrb	r3, [r3, #21]
 8002612:	2ba5      	cmp	r3, #165	@ 0xa5
 8002614:	d002      	beq.n	800261c <lt8722_transaction+0xf0>
		return -1;
 8002616:	f04f 33ff 	mov.w	r3, #4294967295
 800261a:	e000      	b.n	800261e <lt8722_transaction+0xf2>

	return 0;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <lt8722_reg_read>:

int lt8722_reg_read(uint8_t address, uint32_t *data)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08a      	sub	sp, #40	@ 0x28
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	6039      	str	r1, [r7, #0]
 8002632:	71fb      	strb	r3, [r7, #7]
	struct lt8722_packet packet;
	struct lt8722_command command = {
 8002634:	4b0e      	ldr	r3, [pc, #56]	@ (8002670 <lt8722_reg_read+0x48>)
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	81bb      	strh	r3, [r7, #12]
		LT8722_DATA_READ_COMMAND,
		LT8722_DATA_READ_COMMAND_SIZE
	};

	packet.command = command;
 800263a:	89bb      	ldrh	r3, [r7, #12]
 800263c:	823b      	strh	r3, [r7, #16]
	packet.reg = lt8722_regs[address];
 800263e:	79fa      	ldrb	r2, [r7, #7]
 8002640:	490c      	ldr	r1, [pc, #48]	@ (8002674 <lt8722_reg_read+0x4c>)
 8002642:	4613      	mov	r3, r2
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	4413      	add	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	18ca      	adds	r2, r1, r3
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	ca07      	ldmia	r2, {r0, r1, r2}
 8002652:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	lt8722_transaction(&packet);
 8002656:	f107 0310 	add.w	r3, r7, #16
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff ff66 	bl	800252c <lt8722_transaction>

	*data = packet.data;
 8002660:	6a3a      	ldr	r2, [r7, #32]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	601a      	str	r2, [r3, #0]

	return 0;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3728      	adds	r7, #40	@ 0x28
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	08003edc 	.word	0x08003edc
 8002674:	200000cc 	.word	0x200000cc

08002678 <lt8722_reg_write>:


int lt8722_reg_write(uint8_t address, uint32_t data)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08a      	sub	sp, #40	@ 0x28
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	6039      	str	r1, [r7, #0]
 8002682:	71fb      	strb	r3, [r7, #7]
	struct lt8722_packet packet;
	struct lt8722_command command = {
 8002684:	4b0e      	ldr	r3, [pc, #56]	@ (80026c0 <lt8722_reg_write+0x48>)
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	81bb      	strh	r3, [r7, #12]
		LT8722_DATA_WRITE_COMMAND,
		LT8722_DATA_WRITE_COMMAND_SIZE
	};

	packet.command = command;
 800268a:	89bb      	ldrh	r3, [r7, #12]
 800268c:	823b      	strh	r3, [r7, #16]
	packet.reg = lt8722_regs[address];
 800268e:	79fa      	ldrb	r2, [r7, #7]
 8002690:	490c      	ldr	r1, [pc, #48]	@ (80026c4 <lt8722_reg_write+0x4c>)
 8002692:	4613      	mov	r3, r2
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	4413      	add	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	18ca      	adds	r2, r1, r3
 800269c:	f107 0314 	add.w	r3, r7, #20
 80026a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80026a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	packet.data = data;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	623b      	str	r3, [r7, #32]

	return lt8722_transaction(&packet);
 80026aa:	f107 0310 	add.w	r3, r7, #16
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff ff3c 	bl	800252c <lt8722_transaction>
 80026b4:	4603      	mov	r3, r0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3728      	adds	r7, #40	@ 0x28
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	08003ee0 	.word	0x08003ee0
 80026c4:	200000cc 	.word	0x200000cc

080026c8 <lt8722_reg_write_mask>:

int lt8722_reg_write_mask(uint8_t address, uint32_t mask, uint32_t data)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
 80026d4:	73fb      	strb	r3, [r7, #15]
	uint32_t reg_data;

	lt8722_reg_read(address, &reg_data);
 80026d6:	f107 0214 	add.w	r2, r7, #20
 80026da:	7bfb      	ldrb	r3, [r7, #15]
 80026dc:	4611      	mov	r1, r2
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff ffa2 	bl	8002628 <lt8722_reg_read>

	reg_data &= ~mask;
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	43da      	mvns	r2, r3
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	4013      	ands	r3, r2
 80026ec:	617b      	str	r3, [r7, #20]
	reg_data |= field_prep(mask, data);
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	68b8      	ldr	r0, [r7, #8]
 80026f2:	f000 f92b 	bl	800294c <field_prep>
 80026f6:	4602      	mov	r2, r0
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	617b      	str	r3, [r7, #20]

	return lt8722_reg_write(address, reg_data);
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ffb7 	bl	8002678 <lt8722_reg_write>
 800270a:	4603      	mov	r3, r0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <lt8722_get_status>:

int lt8722_get_status(uint16_t *status)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08a      	sub	sp, #40	@ 0x28
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
	int8_t ret;
	struct lt8722_packet packet;
	struct lt8722_command command = {
 800271c:	4b11      	ldr	r3, [pc, #68]	@ (8002764 <lt8722_get_status+0x50>)
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	813b      	strh	r3, [r7, #8]
		LT8722_STATUS_ACQUISITION_COMMAND,
		LT8722_STATUS_ACQUISITION_COMMAND_SIZE
	};

	packet.command = command;
 8002722:	893b      	ldrh	r3, [r7, #8]
 8002724:	81bb      	strh	r3, [r7, #12]
	packet.reg = lt8722_regs[LT8722_SPIS_STATUS];
 8002726:	4a10      	ldr	r2, [pc, #64]	@ (8002768 <lt8722_get_status+0x54>)
 8002728:	f107 0310 	add.w	r3, r7, #16
 800272c:	320c      	adds	r2, #12
 800272e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002730:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ret = lt8722_transaction(&packet);
 8002734:	f107 030c 	add.w	r3, r7, #12
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff fef7 	bl	800252c <lt8722_transaction>
 800273e:	4603      	mov	r3, r0
 8002740:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (ret)
 8002744:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002748:	2b00      	cmp	r3, #0
 800274a:	d002      	beq.n	8002752 <lt8722_get_status+0x3e>
		return ret;
 800274c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002750:	e003      	b.n	800275a <lt8722_get_status+0x46>

	*status = packet.status;
 8002752:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	801a      	strh	r2, [r3, #0]

	return 0;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3728      	adds	r7, #40	@ 0x28
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	08003ee4 	.word	0x08003ee4
 8002768:	200000cc 	.word	0x200000cc

0800276c <lt8722_reset>:

int lt8722_reset(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
	return lt8722_reg_write_mask(LT8722_SPIS_COMMAND,
 8002770:	2201      	movs	r2, #1
 8002772:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002776:	2000      	movs	r0, #0
 8002778:	f7ff ffa6 	bl	80026c8 <lt8722_reg_write_mask>
 800277c:	4603      	mov	r3, r0
			LT8722_SPI_RST_MASK, LT8722_SPI_RST_RESET);
}
 800277e:	4618      	mov	r0, r3
 8002780:	bd80      	pop	{r7, pc}

08002782 <lt8722_clear_faults>:

int lt8722_clear_faults(void)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
	int ret;
	uint16_t status;

	ret = lt8722_get_status(&status);
 8002788:	1dbb      	adds	r3, r7, #6
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff ffc2 	bl	8002714 <lt8722_get_status>
 8002790:	60f8      	str	r0, [r7, #12]

	return lt8722_reg_write_mask(LT8722_SPIS_STATUS,
				     LT8722_FAULTS_MASK, 0);
 8002792:	f04f 33ff 	mov.w	r3, #4294967295
 8002796:	60bb      	str	r3, [r7, #8]
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	069b      	lsls	r3, r3, #26
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	0d5b      	lsrs	r3, r3, #21
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	68bb      	ldr	r3, [r7, #8]
	return lt8722_reg_write_mask(LT8722_SPIS_STATUS,
 80027a6:	2200      	movs	r2, #0
 80027a8:	4619      	mov	r1, r3
 80027aa:	2001      	movs	r0, #1
 80027ac:	f7ff ff8c 	bl	80026c8 <lt8722_reg_write_mask>
 80027b0:	4603      	mov	r3, r0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <lt8722_set_enable_req>:

int lt8722_set_enable_req(bool value)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	4603      	mov	r3, r0
 80027c2:	71fb      	strb	r3, [r7, #7]
	return lt8722_reg_write_mask(LT8722_SPIS_COMMAND,
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	461a      	mov	r2, r3
 80027c8:	2101      	movs	r1, #1
 80027ca:	2000      	movs	r0, #0
 80027cc:	f7ff ff7c 	bl	80026c8 <lt8722_reg_write_mask>
 80027d0:	4603      	mov	r3, r0
				     LT8722_ENABLE_REQ_MASK, value);
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <lt8722_set_swen_req>:

	return 0;
}

int lt8722_set_swen_req(bool value)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	4603      	mov	r3, r0
 80027e2:	71fb      	strb	r3, [r7, #7]
	return lt8722_reg_write_mask(LT8722_SPIS_COMMAND,
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	461a      	mov	r2, r3
 80027e8:	2102      	movs	r1, #2
 80027ea:	2000      	movs	r0, #0
 80027ec:	f7ff ff6c 	bl	80026c8 <lt8722_reg_write_mask>
 80027f0:	4603      	mov	r3, r0
				     LT8722_SWEN_REQ_MASK, value);
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <Calculate_CRC8>:

uint8_t Calculate_CRC8(uint8_t *data, uint8_t length) {
 80027fa:	b480      	push	{r7}
 80027fc:	b085      	sub	sp, #20
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	460b      	mov	r3, r1
 8002804:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0x00;
 8002806:	2300      	movs	r3, #0
 8002808:	73fb      	strb	r3, [r7, #15]
    uint8_t poly = 0x07;
 800280a:	2307      	movs	r3, #7
 800280c:	733b      	strb	r3, [r7, #12]
    for (uint8_t i = 0; i < length; i++)
 800280e:	2300      	movs	r3, #0
 8002810:	73bb      	strb	r3, [r7, #14]
 8002812:	e022      	b.n	800285a <Calculate_CRC8+0x60>
    {
        crc ^= data[i];
 8002814:	7bbb      	ldrb	r3, [r7, #14]
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	4413      	add	r3, r2
 800281a:	781a      	ldrb	r2, [r3, #0]
 800281c:	7bfb      	ldrb	r3, [r7, #15]
 800281e:	4053      	eors	r3, r2
 8002820:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 0; bit < 8; bit++)
 8002822:	2300      	movs	r3, #0
 8002824:	737b      	strb	r3, [r7, #13]
 8002826:	e012      	b.n	800284e <Calculate_CRC8+0x54>
        {
            if (crc & 0x80)
 8002828:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800282c:	2b00      	cmp	r3, #0
 800282e:	da08      	bge.n	8002842 <Calculate_CRC8+0x48>
                crc = (crc << 1) ^ poly;
 8002830:	7bfb      	ldrb	r3, [r7, #15]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	b25a      	sxtb	r2, r3
 8002836:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800283a:	4053      	eors	r3, r2
 800283c:	b25b      	sxtb	r3, r3
 800283e:	73fb      	strb	r3, [r7, #15]
 8002840:	e002      	b.n	8002848 <Calculate_CRC8+0x4e>
            else
                crc <<= 1;
 8002842:	7bfb      	ldrb	r3, [r7, #15]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 0; bit < 8; bit++)
 8002848:	7b7b      	ldrb	r3, [r7, #13]
 800284a:	3301      	adds	r3, #1
 800284c:	737b      	strb	r3, [r7, #13]
 800284e:	7b7b      	ldrb	r3, [r7, #13]
 8002850:	2b07      	cmp	r3, #7
 8002852:	d9e9      	bls.n	8002828 <Calculate_CRC8+0x2e>
    for (uint8_t i = 0; i < length; i++)
 8002854:	7bbb      	ldrb	r3, [r7, #14]
 8002856:	3301      	adds	r3, #1
 8002858:	73bb      	strb	r3, [r7, #14]
 800285a:	7bba      	ldrb	r2, [r7, #14]
 800285c:	78fb      	ldrb	r3, [r7, #3]
 800285e:	429a      	cmp	r2, r3
 8002860:	d3d8      	bcc.n	8002814 <Calculate_CRC8+0x1a>
        }
    }
    return crc;
 8002862:	7bfb      	ldrb	r3, [r7, #15]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <put_unaligned_be32>:

void put_unaligned_be32(uint32_t val, uint8_t *buf)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
	buf[3] = val & 0xFF;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	3303      	adds	r3, #3
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	701a      	strb	r2, [r3, #0]
	buf[2] = (val >> 8) & 0xFF;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	0a1a      	lsrs	r2, r3, #8
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	3302      	adds	r3, #2
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	701a      	strb	r2, [r3, #0]
	buf[1] = (val >> 16) & 0xFF;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	0c1a      	lsrs	r2, r3, #16
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	3301      	adds	r3, #1
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	701a      	strb	r2, [r3, #0]
	buf[0] = val >> 24;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	0e1b      	lsrs	r3, r3, #24
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	701a      	strb	r2, [r3, #0]
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <get_unaligned_be32>:
	buf[1] = val & 0xFF;
	buf[0] = val >> 8;
}

uint32_t get_unaligned_be32(uint8_t *buf)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
	return buf[3] | ((uint16_t)buf[2] << 8) | ((uint32_t)buf[1] << 16)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	3303      	adds	r3, #3
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	461a      	mov	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3302      	adds	r3, #2
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	021b      	lsls	r3, r3, #8
 80028ca:	4313      	orrs	r3, r2
 80028cc:	461a      	mov	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3301      	adds	r3, #1
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	041b      	lsls	r3, r3, #16
 80028d6:	431a      	orrs	r2, r3
	       | ((uint32_t)buf[0] << 24);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	061b      	lsls	r3, r3, #24
 80028de:	4313      	orrs	r3, r2
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <get_unaligned_be16>:

uint32_t get_unaligned_be16(uint8_t *buf)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
	return buf[1] | ((uint16_t)buf[0] << 8);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3301      	adds	r3, #1
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	461a      	mov	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	021b      	lsls	r3, r3, #8
 8002902:	4313      	orrs	r3, r2
}
 8002904:	4618      	mov	r0, r3
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <find_first_set_bit>:

uint32_t find_first_set_bit(uint32_t word)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
	uint32_t first_set_bit = 0;
 8002918:	2300      	movs	r3, #0
 800291a:	60fb      	str	r3, [r7, #12]

	while (word) {
 800291c:	e00c      	b.n	8002938 <find_first_set_bit+0x28>
		if (word & 0x1)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <find_first_set_bit+0x1c>
			return first_set_bit;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	e009      	b.n	8002940 <find_first_set_bit+0x30>
		word >>= 1;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	085b      	lsrs	r3, r3, #1
 8002930:	607b      	str	r3, [r7, #4]
		first_set_bit ++;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	3301      	adds	r3, #1
 8002936:	60fb      	str	r3, [r7, #12]
	while (word) {
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1ef      	bne.n	800291e <find_first_set_bit+0xe>
	}

	return 32;
 800293e:	2320      	movs	r3, #32
}
 8002940:	4618      	mov	r0, r3
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <field_prep>:

uint32_t field_prep(uint32_t mask, uint32_t val)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
	return (val << find_first_set_bit(mask)) & mask;
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7ff ffda 	bl	8002910 <find_first_set_bit>
 800295c:	4602      	mov	r2, r0
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	fa03 f202 	lsl.w	r2, r3, r2
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4013      	ands	r3, r2
}
 8002968:	4618      	mov	r0, r3
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <lt8722_set_dac>:
{
	return (word & mask) >> find_first_set_bit(mask);
}

int lt8722_set_dac(uint32_t value)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
	return lt8722_reg_write_mask(LT8722_SPIS_DAC,
				     LT8722_SPIS_DAC_MASK, value);
 8002978:	f04f 33ff 	mov.w	r3, #4294967295
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	68fb      	ldr	r3, [r7, #12]
	return lt8722_reg_write_mask(LT8722_SPIS_DAC,
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	4619      	mov	r1, r3
 8002984:	2004      	movs	r0, #4
 8002986:	f7ff fe9f 	bl	80026c8 <lt8722_reg_write_mask>
 800298a:	4603      	mov	r3, r0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <LL_GPIO_SetOutputPin>:
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	619a      	str	r2, [r3, #24]
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <LL_GPIO_ResetOutputPin>:
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	041a      	lsls	r2, r3, #16
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	619a      	str	r2, [r3, #24]
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
	...

080029d0 <WDT_init>:
		181
	}
};

void WDT_init(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
	WDT_Current = 0;
 80029d4:	4b03      	ldr	r3, [pc, #12]	@ (80029e4 <WDT_init+0x14>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	701a      	strb	r2, [r3, #0]
}
 80029da:	bf00      	nop
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	20000274 	.word	0x20000274

080029e8 <WDT_create_task>:

void WDT_create_task(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&wdt_task_context.taskHandle, &wdt_task_context.taskProperty);
 80029ec:	4902      	ldr	r1, [pc, #8]	@ (80029f8 <WDT_create_task+0x10>)
 80029ee:	4803      	ldr	r0, [pc, #12]	@ (80029fc <WDT_create_task+0x14>)
 80029f0:	f000 ff4e 	bl	8003890 <SCH_TASK_CreateTask>
}
 80029f4:	bf00      	nop
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	20000130 	.word	0x20000130
 80029fc:	2000012c 	.word	0x2000012c

08002a00 <status_wdt_update>:

void status_wdt_update(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
	if (WDT_Current)
 8002a04:	4b14      	ldr	r3, [pc, #80]	@ (8002a58 <status_wdt_update+0x58>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d012      	beq.n	8002a32 <status_wdt_update+0x32>
	{
		if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 8002a0c:	2001      	movs	r0, #1
 8002a0e:	f000 ff29 	bl	8003864 <SCH_TIM_HasCompleted>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d01d      	beq.n	8002a54 <status_wdt_update+0x54>
		{
			WDT_Current = 0;
 8002a18:	4b0f      	ldr	r3, [pc, #60]	@ (8002a58 <status_wdt_update+0x58>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
			LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 8002a1e:	2102      	movs	r1, #2
 8002a20:	480e      	ldr	r0, [pc, #56]	@ (8002a5c <status_wdt_update+0x5c>)
 8002a22:	f7ff ffc5 	bl	80029b0 <LL_GPIO_ResetOutputPin>
			SCH_TIM_Start(SCH_TIM_WDT,LOW_PERIOD);	//restart
 8002a26:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8002a2a:	2001      	movs	r0, #1
 8002a2c:	f000 ff04 	bl	8003838 <SCH_TIM_Start>
			WDT_Current = 1;
			LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
			SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
		}
	}
}
 8002a30:	e010      	b.n	8002a54 <status_wdt_update+0x54>
		if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 8002a32:	2001      	movs	r0, #1
 8002a34:	f000 ff16 	bl	8003864 <SCH_TIM_HasCompleted>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00a      	beq.n	8002a54 <status_wdt_update+0x54>
			WDT_Current = 1;
 8002a3e:	4b06      	ldr	r3, [pc, #24]	@ (8002a58 <status_wdt_update+0x58>)
 8002a40:	2201      	movs	r2, #1
 8002a42:	701a      	strb	r2, [r3, #0]
			LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 8002a44:	2102      	movs	r1, #2
 8002a46:	4805      	ldr	r0, [pc, #20]	@ (8002a5c <status_wdt_update+0x5c>)
 8002a48:	f7ff ffa4 	bl	8002994 <LL_GPIO_SetOutputPin>
			SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
 8002a4c:	21c8      	movs	r1, #200	@ 0xc8
 8002a4e:	2001      	movs	r0, #1
 8002a50:	f000 fef2 	bl	8003838 <SCH_TIM_Start>
}
 8002a54:	bf00      	nop
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	20000274 	.word	0x20000274
 8002a5c:	40020000 	.word	0x40020000

08002a60 <LL_GPIO_SetPinMode>:
{
 8002a60:	b480      	push	{r7}
 8002a62:	b08b      	sub	sp, #44	@ 0x2c
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	fa93 f3a3 	rbit	r3, r3
 8002a7a:	613b      	str	r3, [r7, #16]
  return result;
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8002a86:	2320      	movs	r3, #32
 8002a88:	e003      	b.n	8002a92 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	fab3 f383 	clz	r3, r3
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	2103      	movs	r1, #3
 8002a96:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	401a      	ands	r2, r3
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	fa93 f3a3 	rbit	r3, r3
 8002aa8:	61fb      	str	r3, [r7, #28]
  return result;
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002ab4:	2320      	movs	r3, #32
 8002ab6:	e003      	b.n	8002ac0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aba:	fab3 f383 	clz	r3, r3
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	601a      	str	r2, [r3, #0]
}
 8002ace:	bf00      	nop
 8002ad0:	372c      	adds	r7, #44	@ 0x2c
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <LL_GPIO_SetPinOutputType>:
{
 8002ada:	b480      	push	{r7}
 8002adc:	b085      	sub	sp, #20
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	60f8      	str	r0, [r7, #12]
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	43db      	mvns	r3, r3
 8002aee:	401a      	ands	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	fb01 f303 	mul.w	r3, r1, r3
 8002af8:	431a      	orrs	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	605a      	str	r2, [r3, #4]
}
 8002afe:	bf00      	nop
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <LL_GPIO_SetPinSpeed>:
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b08b      	sub	sp, #44	@ 0x2c
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	fa93 f3a3 	rbit	r3, r3
 8002b24:	613b      	str	r3, [r7, #16]
  return result;
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002b30:	2320      	movs	r3, #32
 8002b32:	e003      	b.n	8002b3c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	fab3 f383 	clz	r3, r3
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	2103      	movs	r1, #3
 8002b40:	fa01 f303 	lsl.w	r3, r1, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	401a      	ands	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	fa93 f3a3 	rbit	r3, r3
 8002b52:	61fb      	str	r3, [r7, #28]
  return result;
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002b5e:	2320      	movs	r3, #32
 8002b60:	e003      	b.n	8002b6a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b64:	fab3 f383 	clz	r3, r3
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b72:	431a      	orrs	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	609a      	str	r2, [r3, #8]
}
 8002b78:	bf00      	nop
 8002b7a:	372c      	adds	r7, #44	@ 0x2c
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <LL_GPIO_SetPinPull>:
{
 8002b84:	b480      	push	{r7}
 8002b86:	b08b      	sub	sp, #44	@ 0x2c
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	fa93 f3a3 	rbit	r3, r3
 8002b9e:	613b      	str	r3, [r7, #16]
  return result;
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002baa:	2320      	movs	r3, #32
 8002bac:	e003      	b.n	8002bb6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	fab3 f383 	clz	r3, r3
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	2103      	movs	r1, #3
 8002bba:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	401a      	ands	r2, r3
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	fa93 f3a3 	rbit	r3, r3
 8002bcc:	61fb      	str	r3, [r7, #28]
  return result;
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002bd8:	2320      	movs	r3, #32
 8002bda:	e003      	b.n	8002be4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bde:	fab3 f383 	clz	r3, r3
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bec:	431a      	orrs	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	60da      	str	r2, [r3, #12]
}
 8002bf2:	bf00      	nop
 8002bf4:	372c      	adds	r7, #44	@ 0x2c
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <LL_GPIO_SetAFPin_0_7>:
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b08b      	sub	sp, #44	@ 0x2c
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6a1a      	ldr	r2, [r3, #32]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	fa93 f3a3 	rbit	r3, r3
 8002c18:	613b      	str	r3, [r7, #16]
  return result;
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002c24:	2320      	movs	r3, #32
 8002c26:	e003      	b.n	8002c30 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	fab3 f383 	clz	r3, r3
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	210f      	movs	r1, #15
 8002c34:	fa01 f303 	lsl.w	r3, r1, r3
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	401a      	ands	r2, r3
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	fa93 f3a3 	rbit	r3, r3
 8002c46:	61fb      	str	r3, [r7, #28]
  return result;
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002c52:	2320      	movs	r3, #32
 8002c54:	e003      	b.n	8002c5e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c58:	fab3 f383 	clz	r3, r3
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	fa01 f303 	lsl.w	r3, r1, r3
 8002c66:	431a      	orrs	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	621a      	str	r2, [r3, #32]
}
 8002c6c:	bf00      	nop
 8002c6e:	372c      	adds	r7, #44	@ 0x2c
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <LL_GPIO_SetAFPin_8_15>:
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b08b      	sub	sp, #44	@ 0x2c
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	0a1b      	lsrs	r3, r3, #8
 8002c8c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	fa93 f3a3 	rbit	r3, r3
 8002c94:	613b      	str	r3, [r7, #16]
  return result;
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002ca0:	2320      	movs	r3, #32
 8002ca2:	e003      	b.n	8002cac <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	fab3 f383 	clz	r3, r3
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	210f      	movs	r1, #15
 8002cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	401a      	ands	r2, r3
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	0a1b      	lsrs	r3, r3, #8
 8002cbc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	fa93 f3a3 	rbit	r3, r3
 8002cc4:	61fb      	str	r3, [r7, #28]
  return result;
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002cd0:	2320      	movs	r3, #32
 8002cd2:	e003      	b.n	8002cdc <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd6:	fab3 f383 	clz	r3, r3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002cea:	bf00      	nop
 8002cec:	372c      	adds	r7, #44	@ 0x2c
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b08a      	sub	sp, #40	@ 0x28
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	fa93 f3a3 	rbit	r3, r3
 8002d14:	617b      	str	r3, [r7, #20]
  return result;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <LL_GPIO_Init+0x2e>
    return 32U;
 8002d20:	2320      	movs	r3, #32
 8002d22:	e003      	b.n	8002d2c <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	fab3 f383 	clz	r3, r3
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002d2e:	e057      	b.n	8002de0 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	2101      	movs	r1, #1
 8002d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d38:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d049      	beq.n	8002dda <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d003      	beq.n	8002d56 <LL_GPIO_Init+0x60>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d10d      	bne.n	8002d72 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	6a39      	ldr	r1, [r7, #32]
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7ff fed3 	bl	8002b0a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	6a39      	ldr	r1, [r7, #32]
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff feb4 	bl	8002ada <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	461a      	mov	r2, r3
 8002d78:	6a39      	ldr	r1, [r7, #32]
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7ff ff02 	bl	8002b84 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d121      	bne.n	8002dcc <LL_GPIO_Init+0xd6>
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	fa93 f3a3 	rbit	r3, r3
 8002d92:	60bb      	str	r3, [r7, #8]
  return result;
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <LL_GPIO_Init+0xac>
    return 32U;
 8002d9e:	2320      	movs	r3, #32
 8002da0:	e003      	b.n	8002daa <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	fab3 f383 	clz	r3, r3
 8002da8:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002daa:	2b07      	cmp	r3, #7
 8002dac:	d807      	bhi.n	8002dbe <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	461a      	mov	r2, r3
 8002db4:	6a39      	ldr	r1, [r7, #32]
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7ff ff21 	bl	8002bfe <LL_GPIO_SetAFPin_0_7>
 8002dbc:	e006      	b.n	8002dcc <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	6a39      	ldr	r1, [r7, #32]
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7ff ff56 	bl	8002c78 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	6a39      	ldr	r1, [r7, #32]
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff fe43 	bl	8002a60 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ddc:	3301      	adds	r3, #1
 8002dde:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1a0      	bne.n	8002d30 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3728      	adds	r7, #40	@ 0x28
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <LL_RCC_GetSysClkSource>:
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002dfc:	4b04      	ldr	r3, [pc, #16]	@ (8002e10 <LL_RCC_GetSysClkSource+0x18>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 030c 	and.w	r3, r3, #12
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	40023800 	.word	0x40023800

08002e14 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002e18:	4b04      	ldr	r3, [pc, #16]	@ (8002e2c <LL_RCC_GetAHBPrescaler+0x18>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	40023800 	.word	0x40023800

08002e30 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002e34:	4b04      	ldr	r3, [pc, #16]	@ (8002e48 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	40023800 	.word	0x40023800

08002e4c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002e50:	4b04      	ldr	r3, [pc, #16]	@ (8002e64 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	40023800 	.word	0x40023800

08002e68 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002e6c:	4b04      	ldr	r3, [pc, #16]	@ (8002e80 <LL_RCC_PLL_GetMainSource+0x18>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40023800 	.word	0x40023800

08002e84 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002e88:	4b04      	ldr	r3, [pc, #16]	@ (8002e9c <LL_RCC_PLL_GetN+0x18>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	099b      	lsrs	r3, r3, #6
 8002e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	40023800 	.word	0x40023800

08002ea0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002ea4:	4b04      	ldr	r3, [pc, #16]	@ (8002eb8 <LL_RCC_PLL_GetP+0x18>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	40023800 	.word	0x40023800

08002ebc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002ec0:	4b04      	ldr	r3, [pc, #16]	@ (8002ed4 <LL_RCC_PLL_GetDivider+0x18>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	40023800 	.word	0x40023800

08002ed8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002ee0:	f000 f820 	bl	8002f24 <RCC_GetSystemClockFreq>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 f840 	bl	8002f74 <RCC_GetHCLKClockFreq>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 f84e 	bl	8002fa0 <RCC_GetPCLK1ClockFreq>
 8002f04:	4602      	mov	r2, r0
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f000 f85a 	bl	8002fc8 <RCC_GetPCLK2ClockFreq>
 8002f14:	4602      	mov	r2, r0
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	60da      	str	r2, [r3, #12]
}
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
	...

08002f24 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002f2e:	f7ff ff63 	bl	8002df8 <LL_RCC_GetSysClkSource>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b08      	cmp	r3, #8
 8002f36:	d00c      	beq.n	8002f52 <RCC_GetSystemClockFreq+0x2e>
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d80f      	bhi.n	8002f5c <RCC_GetSystemClockFreq+0x38>
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <RCC_GetSystemClockFreq+0x22>
 8002f40:	2b04      	cmp	r3, #4
 8002f42:	d003      	beq.n	8002f4c <RCC_GetSystemClockFreq+0x28>
 8002f44:	e00a      	b.n	8002f5c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002f46:	4b09      	ldr	r3, [pc, #36]	@ (8002f6c <RCC_GetSystemClockFreq+0x48>)
 8002f48:	607b      	str	r3, [r7, #4]
      break;
 8002f4a:	e00a      	b.n	8002f62 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002f4c:	4b08      	ldr	r3, [pc, #32]	@ (8002f70 <RCC_GetSystemClockFreq+0x4c>)
 8002f4e:	607b      	str	r3, [r7, #4]
      break;
 8002f50:	e007      	b.n	8002f62 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002f52:	2008      	movs	r0, #8
 8002f54:	f000 f84c 	bl	8002ff0 <RCC_PLL_GetFreqDomain_SYS>
 8002f58:	6078      	str	r0, [r7, #4]
      break;
 8002f5a:	e002      	b.n	8002f62 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8002f5c:	4b03      	ldr	r3, [pc, #12]	@ (8002f6c <RCC_GetSystemClockFreq+0x48>)
 8002f5e:	607b      	str	r3, [r7, #4]
      break;
 8002f60:	bf00      	nop
  }

  return frequency;
 8002f62:	687b      	ldr	r3, [r7, #4]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	00f42400 	.word	0x00f42400
 8002f70:	007a1200 	.word	0x007a1200

08002f74 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002f7c:	f7ff ff4a 	bl	8002e14 <LL_RCC_GetAHBPrescaler>
 8002f80:	4603      	mov	r3, r0
 8002f82:	091b      	lsrs	r3, r3, #4
 8002f84:	f003 030f 	and.w	r3, r3, #15
 8002f88:	4a04      	ldr	r2, [pc, #16]	@ (8002f9c <RCC_GetHCLKClockFreq+0x28>)
 8002f8a:	5cd3      	ldrb	r3, [r2, r3]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	40d3      	lsrs	r3, r2
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	08003ee8 	.word	0x08003ee8

08002fa0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002fa8:	f7ff ff42 	bl	8002e30 <LL_RCC_GetAPB1Prescaler>
 8002fac:	4603      	mov	r3, r0
 8002fae:	0a9b      	lsrs	r3, r3, #10
 8002fb0:	4a04      	ldr	r2, [pc, #16]	@ (8002fc4 <RCC_GetPCLK1ClockFreq+0x24>)
 8002fb2:	5cd3      	ldrb	r3, [r2, r3]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	40d3      	lsrs	r3, r2
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	08003ef8 	.word	0x08003ef8

08002fc8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002fd0:	f7ff ff3c 	bl	8002e4c <LL_RCC_GetAPB2Prescaler>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	0b5b      	lsrs	r3, r3, #13
 8002fd8:	4a04      	ldr	r2, [pc, #16]	@ (8002fec <RCC_GetPCLK2ClockFreq+0x24>)
 8002fda:	5cd3      	ldrb	r3, [r2, r3]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	40d3      	lsrs	r3, r2
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	08003ef8 	.word	0x08003ef8

08002ff0 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002ff0:	b590      	push	{r4, r7, lr}
 8002ff2:	b087      	sub	sp, #28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003004:	f7ff ff30 	bl	8002e68 <LL_RCC_PLL_GetMainSource>
 8003008:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d004      	beq.n	800301a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003016:	d003      	beq.n	8003020 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003018:	e005      	b.n	8003026 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800301a:	4b12      	ldr	r3, [pc, #72]	@ (8003064 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800301c:	617b      	str	r3, [r7, #20]
      break;
 800301e:	e005      	b.n	800302c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003020:	4b11      	ldr	r3, [pc, #68]	@ (8003068 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003022:	617b      	str	r3, [r7, #20]
      break;
 8003024:	e002      	b.n	800302c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8003026:	4b0f      	ldr	r3, [pc, #60]	@ (8003064 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003028:	617b      	str	r3, [r7, #20]
      break;
 800302a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b08      	cmp	r3, #8
 8003030:	d113      	bne.n	800305a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003032:	f7ff ff43 	bl	8002ebc <LL_RCC_PLL_GetDivider>
 8003036:	4602      	mov	r2, r0
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	fbb3 f4f2 	udiv	r4, r3, r2
 800303e:	f7ff ff21 	bl	8002e84 <LL_RCC_PLL_GetN>
 8003042:	4603      	mov	r3, r0
 8003044:	fb03 f404 	mul.w	r4, r3, r4
 8003048:	f7ff ff2a 	bl	8002ea0 <LL_RCC_PLL_GetP>
 800304c:	4603      	mov	r3, r0
 800304e:	0c1b      	lsrs	r3, r3, #16
 8003050:	3301      	adds	r3, #1
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	fbb4 f3f3 	udiv	r3, r4, r3
 8003058:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800305a:	693b      	ldr	r3, [r7, #16]
}
 800305c:	4618      	mov	r0, r3
 800305e:	371c      	adds	r7, #28
 8003060:	46bd      	mov	sp, r7
 8003062:	bd90      	pop	{r4, r7, pc}
 8003064:	00f42400 	.word	0x00f42400
 8003068:	007a1200 	.word	0x007a1200

0800306c <LL_SPI_IsEnabled>:
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800307c:	2b40      	cmp	r3, #64	@ 0x40
 800307e:	d101      	bne.n	8003084 <LL_SPI_IsEnabled+0x18>
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <LL_SPI_IsEnabled+0x1a>
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <LL_SPI_SetCRCPolynomial>:
{
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
 800309a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	b29b      	uxth	r3, r3
 80030a0:	461a      	mov	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	611a      	str	r2, [r3, #16]
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b084      	sub	sp, #16
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7ff ffd3 	bl	800306c <LL_SPI_IsEnabled>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d139      	bne.n	8003140 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80030d4:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	6811      	ldr	r1, [r2, #0]
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	6852      	ldr	r2, [r2, #4]
 80030e0:	4311      	orrs	r1, r2
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	6892      	ldr	r2, [r2, #8]
 80030e6:	4311      	orrs	r1, r2
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	68d2      	ldr	r2, [r2, #12]
 80030ec:	4311      	orrs	r1, r2
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	6912      	ldr	r2, [r2, #16]
 80030f2:	4311      	orrs	r1, r2
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	6952      	ldr	r2, [r2, #20]
 80030f8:	4311      	orrs	r1, r2
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	6992      	ldr	r2, [r2, #24]
 80030fe:	4311      	orrs	r1, r2
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	69d2      	ldr	r2, [r2, #28]
 8003104:	4311      	orrs	r1, r2
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	6a12      	ldr	r2, [r2, #32]
 800310a:	430a      	orrs	r2, r1
 800310c:	431a      	orrs	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f023 0204 	bic.w	r2, r3, #4
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	0c1b      	lsrs	r3, r3, #16
 8003120:	431a      	orrs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800312e:	d105      	bne.n	800313c <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003134:	4619      	mov	r1, r3
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7ff ffab 	bl	8003092 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800313c:	2300      	movs	r3, #0
 800313e:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	61da      	str	r2, [r3, #28]
  return status;
 800314c:	7bfb      	ldrb	r3, [r7, #15]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <LL_USART_IsEnabled>:
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003166:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800316a:	bf0c      	ite	eq
 800316c:	2301      	moveq	r3, #1
 800316e:	2300      	movne	r3, #0
 8003170:	b2db      	uxtb	r3, r3
}
 8003172:	4618      	mov	r0, r3
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <LL_USART_SetStopBitsLength>:
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
 8003186:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	611a      	str	r2, [r3, #16]
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <LL_USART_SetHWFlowCtrl>:
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	431a      	orrs	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	615a      	str	r2, [r3, #20]
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
	...

080031cc <LL_USART_SetBaudRate>:
{
 80031cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031d0:	b0c0      	sub	sp, #256	@ 0x100
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80031d8:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 80031dc:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80031e0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80031e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031ec:	f040 810c 	bne.w	8003408 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80031f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80031f4:	2200      	movs	r2, #0
 80031f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80031fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80031fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003202:	4622      	mov	r2, r4
 8003204:	462b      	mov	r3, r5
 8003206:	1891      	adds	r1, r2, r2
 8003208:	6639      	str	r1, [r7, #96]	@ 0x60
 800320a:	415b      	adcs	r3, r3
 800320c:	667b      	str	r3, [r7, #100]	@ 0x64
 800320e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8003212:	4621      	mov	r1, r4
 8003214:	eb12 0801 	adds.w	r8, r2, r1
 8003218:	4629      	mov	r1, r5
 800321a:	eb43 0901 	adc.w	r9, r3, r1
 800321e:	f04f 0200 	mov.w	r2, #0
 8003222:	f04f 0300 	mov.w	r3, #0
 8003226:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800322a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800322e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003232:	4690      	mov	r8, r2
 8003234:	4699      	mov	r9, r3
 8003236:	4623      	mov	r3, r4
 8003238:	eb18 0303 	adds.w	r3, r8, r3
 800323c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003240:	462b      	mov	r3, r5
 8003242:	eb49 0303 	adc.w	r3, r9, r3
 8003246:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800324a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800324e:	2200      	movs	r2, #0
 8003250:	469a      	mov	sl, r3
 8003252:	4693      	mov	fp, r2
 8003254:	eb1a 030a 	adds.w	r3, sl, sl
 8003258:	65bb      	str	r3, [r7, #88]	@ 0x58
 800325a:	eb4b 030b 	adc.w	r3, fp, fp
 800325e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003260:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003264:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003268:	f7fd f810 	bl	800028c <__aeabi_uldivmod>
 800326c:	4602      	mov	r2, r0
 800326e:	460b      	mov	r3, r1
 8003270:	4b64      	ldr	r3, [pc, #400]	@ (8003404 <LL_USART_SetBaudRate+0x238>)
 8003272:	fba3 2302 	umull	r2, r3, r3, r2
 8003276:	095b      	lsrs	r3, r3, #5
 8003278:	b29b      	uxth	r3, r3
 800327a:	011b      	lsls	r3, r3, #4
 800327c:	b29c      	uxth	r4, r3
 800327e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003282:	2200      	movs	r2, #0
 8003284:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003288:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800328c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8003290:	4642      	mov	r2, r8
 8003292:	464b      	mov	r3, r9
 8003294:	1891      	adds	r1, r2, r2
 8003296:	6539      	str	r1, [r7, #80]	@ 0x50
 8003298:	415b      	adcs	r3, r3
 800329a:	657b      	str	r3, [r7, #84]	@ 0x54
 800329c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80032a0:	4641      	mov	r1, r8
 80032a2:	1851      	adds	r1, r2, r1
 80032a4:	64b9      	str	r1, [r7, #72]	@ 0x48
 80032a6:	4649      	mov	r1, r9
 80032a8:	414b      	adcs	r3, r1
 80032aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 80032b8:	4659      	mov	r1, fp
 80032ba:	00cb      	lsls	r3, r1, #3
 80032bc:	4651      	mov	r1, sl
 80032be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032c2:	4651      	mov	r1, sl
 80032c4:	00ca      	lsls	r2, r1, #3
 80032c6:	4610      	mov	r0, r2
 80032c8:	4619      	mov	r1, r3
 80032ca:	4603      	mov	r3, r0
 80032cc:	4642      	mov	r2, r8
 80032ce:	189b      	adds	r3, r3, r2
 80032d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032d4:	464b      	mov	r3, r9
 80032d6:	460a      	mov	r2, r1
 80032d8:	eb42 0303 	adc.w	r3, r2, r3
 80032dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80032e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80032e4:	2200      	movs	r2, #0
 80032e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032ea:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80032ee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80032f2:	460b      	mov	r3, r1
 80032f4:	18db      	adds	r3, r3, r3
 80032f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80032f8:	4613      	mov	r3, r2
 80032fa:	eb42 0303 	adc.w	r3, r2, r3
 80032fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003300:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003304:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8003308:	f7fc ffc0 	bl	800028c <__aeabi_uldivmod>
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	4611      	mov	r1, r2
 8003312:	4b3c      	ldr	r3, [pc, #240]	@ (8003404 <LL_USART_SetBaudRate+0x238>)
 8003314:	fba3 2301 	umull	r2, r3, r3, r1
 8003318:	095b      	lsrs	r3, r3, #5
 800331a:	2264      	movs	r2, #100	@ 0x64
 800331c:	fb02 f303 	mul.w	r3, r2, r3
 8003320:	1acb      	subs	r3, r1, r3
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003328:	4b36      	ldr	r3, [pc, #216]	@ (8003404 <LL_USART_SetBaudRate+0x238>)
 800332a:	fba3 2302 	umull	r2, r3, r3, r2
 800332e:	095b      	lsrs	r3, r3, #5
 8003330:	b29b      	uxth	r3, r3
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	b29b      	uxth	r3, r3
 8003336:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800333a:	b29b      	uxth	r3, r3
 800333c:	4423      	add	r3, r4
 800333e:	b29c      	uxth	r4, r3
 8003340:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003344:	2200      	movs	r2, #0
 8003346:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800334a:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800334e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8003352:	4642      	mov	r2, r8
 8003354:	464b      	mov	r3, r9
 8003356:	1891      	adds	r1, r2, r2
 8003358:	63b9      	str	r1, [r7, #56]	@ 0x38
 800335a:	415b      	adcs	r3, r3
 800335c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800335e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003362:	4641      	mov	r1, r8
 8003364:	1851      	adds	r1, r2, r1
 8003366:	6339      	str	r1, [r7, #48]	@ 0x30
 8003368:	4649      	mov	r1, r9
 800336a:	414b      	adcs	r3, r1
 800336c:	637b      	str	r3, [r7, #52]	@ 0x34
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	f04f 0300 	mov.w	r3, #0
 8003376:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800337a:	4659      	mov	r1, fp
 800337c:	00cb      	lsls	r3, r1, #3
 800337e:	4651      	mov	r1, sl
 8003380:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003384:	4651      	mov	r1, sl
 8003386:	00ca      	lsls	r2, r1, #3
 8003388:	4610      	mov	r0, r2
 800338a:	4619      	mov	r1, r3
 800338c:	4603      	mov	r3, r0
 800338e:	4642      	mov	r2, r8
 8003390:	189b      	adds	r3, r3, r2
 8003392:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003396:	464b      	mov	r3, r9
 8003398:	460a      	mov	r2, r1
 800339a:	eb42 0303 	adc.w	r3, r2, r3
 800339e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80033a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80033a6:	2200      	movs	r2, #0
 80033a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033ac:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80033b0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80033b4:	460b      	mov	r3, r1
 80033b6:	18db      	adds	r3, r3, r3
 80033b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033ba:	4613      	mov	r3, r2
 80033bc:	eb42 0303 	adc.w	r3, r2, r3
 80033c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033c6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80033ca:	f7fc ff5f 	bl	800028c <__aeabi_uldivmod>
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003404 <LL_USART_SetBaudRate+0x238>)
 80033d4:	fba3 1302 	umull	r1, r3, r3, r2
 80033d8:	095b      	lsrs	r3, r3, #5
 80033da:	2164      	movs	r1, #100	@ 0x64
 80033dc:	fb01 f303 	mul.w	r3, r1, r3
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	3332      	adds	r3, #50	@ 0x32
 80033e6:	4a07      	ldr	r2, [pc, #28]	@ (8003404 <LL_USART_SetBaudRate+0x238>)
 80033e8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ec:	095b      	lsrs	r3, r3, #5
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	4423      	add	r3, r4
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	461a      	mov	r2, r3
 80033fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003400:	609a      	str	r2, [r3, #8]
}
 8003402:	e108      	b.n	8003616 <LL_USART_SetBaudRate+0x44a>
 8003404:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003408:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800340c:	2200      	movs	r2, #0
 800340e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003412:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003416:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800341a:	4642      	mov	r2, r8
 800341c:	464b      	mov	r3, r9
 800341e:	1891      	adds	r1, r2, r2
 8003420:	6239      	str	r1, [r7, #32]
 8003422:	415b      	adcs	r3, r3
 8003424:	627b      	str	r3, [r7, #36]	@ 0x24
 8003426:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800342a:	4641      	mov	r1, r8
 800342c:	1854      	adds	r4, r2, r1
 800342e:	4649      	mov	r1, r9
 8003430:	eb43 0501 	adc.w	r5, r3, r1
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	f04f 0300 	mov.w	r3, #0
 800343c:	00eb      	lsls	r3, r5, #3
 800343e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003442:	00e2      	lsls	r2, r4, #3
 8003444:	4614      	mov	r4, r2
 8003446:	461d      	mov	r5, r3
 8003448:	4643      	mov	r3, r8
 800344a:	18e3      	adds	r3, r4, r3
 800344c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003450:	464b      	mov	r3, r9
 8003452:	eb45 0303 	adc.w	r3, r5, r3
 8003456:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800345a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800345e:	2200      	movs	r2, #0
 8003460:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003464:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	f04f 0300 	mov.w	r3, #0
 8003470:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8003474:	4629      	mov	r1, r5
 8003476:	008b      	lsls	r3, r1, #2
 8003478:	4621      	mov	r1, r4
 800347a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800347e:	4621      	mov	r1, r4
 8003480:	008a      	lsls	r2, r1, #2
 8003482:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8003486:	f7fc ff01 	bl	800028c <__aeabi_uldivmod>
 800348a:	4602      	mov	r2, r0
 800348c:	460b      	mov	r3, r1
 800348e:	4b65      	ldr	r3, [pc, #404]	@ (8003624 <LL_USART_SetBaudRate+0x458>)
 8003490:	fba3 2302 	umull	r2, r3, r3, r2
 8003494:	095b      	lsrs	r3, r3, #5
 8003496:	b29b      	uxth	r3, r3
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	b29c      	uxth	r4, r3
 800349c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80034a0:	2200      	movs	r2, #0
 80034a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80034a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034aa:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80034ae:	4642      	mov	r2, r8
 80034b0:	464b      	mov	r3, r9
 80034b2:	1891      	adds	r1, r2, r2
 80034b4:	61b9      	str	r1, [r7, #24]
 80034b6:	415b      	adcs	r3, r3
 80034b8:	61fb      	str	r3, [r7, #28]
 80034ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034be:	4641      	mov	r1, r8
 80034c0:	1851      	adds	r1, r2, r1
 80034c2:	6139      	str	r1, [r7, #16]
 80034c4:	4649      	mov	r1, r9
 80034c6:	414b      	adcs	r3, r1
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	f04f 0200 	mov.w	r2, #0
 80034ce:	f04f 0300 	mov.w	r3, #0
 80034d2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034d6:	4659      	mov	r1, fp
 80034d8:	00cb      	lsls	r3, r1, #3
 80034da:	4651      	mov	r1, sl
 80034dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034e0:	4651      	mov	r1, sl
 80034e2:	00ca      	lsls	r2, r1, #3
 80034e4:	4610      	mov	r0, r2
 80034e6:	4619      	mov	r1, r3
 80034e8:	4603      	mov	r3, r0
 80034ea:	4642      	mov	r2, r8
 80034ec:	189b      	adds	r3, r3, r2
 80034ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034f2:	464b      	mov	r3, r9
 80034f4:	460a      	mov	r2, r1
 80034f6:	eb42 0303 	adc.w	r3, r2, r3
 80034fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80034fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003502:	2200      	movs	r2, #0
 8003504:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003508:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	f04f 0300 	mov.w	r3, #0
 8003514:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8003518:	4649      	mov	r1, r9
 800351a:	008b      	lsls	r3, r1, #2
 800351c:	4641      	mov	r1, r8
 800351e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003522:	4641      	mov	r1, r8
 8003524:	008a      	lsls	r2, r1, #2
 8003526:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800352a:	f7fc feaf 	bl	800028c <__aeabi_uldivmod>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4611      	mov	r1, r2
 8003534:	4b3b      	ldr	r3, [pc, #236]	@ (8003624 <LL_USART_SetBaudRate+0x458>)
 8003536:	fba3 2301 	umull	r2, r3, r3, r1
 800353a:	095b      	lsrs	r3, r3, #5
 800353c:	2264      	movs	r2, #100	@ 0x64
 800353e:	fb02 f303 	mul.w	r3, r2, r3
 8003542:	1acb      	subs	r3, r1, r3
 8003544:	011b      	lsls	r3, r3, #4
 8003546:	3332      	adds	r3, #50	@ 0x32
 8003548:	4a36      	ldr	r2, [pc, #216]	@ (8003624 <LL_USART_SetBaudRate+0x458>)
 800354a:	fba2 2303 	umull	r2, r3, r2, r3
 800354e:	095b      	lsrs	r3, r3, #5
 8003550:	b29b      	uxth	r3, r3
 8003552:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003556:	b29b      	uxth	r3, r3
 8003558:	4423      	add	r3, r4
 800355a:	b29c      	uxth	r4, r3
 800355c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003560:	2200      	movs	r2, #0
 8003562:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003564:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003566:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800356a:	4642      	mov	r2, r8
 800356c:	464b      	mov	r3, r9
 800356e:	1891      	adds	r1, r2, r2
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	415b      	adcs	r3, r3
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800357a:	4641      	mov	r1, r8
 800357c:	1851      	adds	r1, r2, r1
 800357e:	6039      	str	r1, [r7, #0]
 8003580:	4649      	mov	r1, r9
 8003582:	414b      	adcs	r3, r1
 8003584:	607b      	str	r3, [r7, #4]
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	f04f 0300 	mov.w	r3, #0
 800358e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003592:	4659      	mov	r1, fp
 8003594:	00cb      	lsls	r3, r1, #3
 8003596:	4651      	mov	r1, sl
 8003598:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800359c:	4651      	mov	r1, sl
 800359e:	00ca      	lsls	r2, r1, #3
 80035a0:	4610      	mov	r0, r2
 80035a2:	4619      	mov	r1, r3
 80035a4:	4603      	mov	r3, r0
 80035a6:	4642      	mov	r2, r8
 80035a8:	189b      	adds	r3, r3, r2
 80035aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80035ac:	464b      	mov	r3, r9
 80035ae:	460a      	mov	r2, r1
 80035b0:	eb42 0303 	adc.w	r3, r2, r3
 80035b4:	677b      	str	r3, [r7, #116]	@ 0x74
 80035b6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80035ba:	2200      	movs	r2, #0
 80035bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	f04f 0300 	mov.w	r3, #0
 80035c8:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 80035cc:	4649      	mov	r1, r9
 80035ce:	008b      	lsls	r3, r1, #2
 80035d0:	4641      	mov	r1, r8
 80035d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035d6:	4641      	mov	r1, r8
 80035d8:	008a      	lsls	r2, r1, #2
 80035da:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80035de:	f7fc fe55 	bl	800028c <__aeabi_uldivmod>
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	4b0f      	ldr	r3, [pc, #60]	@ (8003624 <LL_USART_SetBaudRate+0x458>)
 80035e8:	fba3 1302 	umull	r1, r3, r3, r2
 80035ec:	095b      	lsrs	r3, r3, #5
 80035ee:	2164      	movs	r1, #100	@ 0x64
 80035f0:	fb01 f303 	mul.w	r3, r1, r3
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	3332      	adds	r3, #50	@ 0x32
 80035fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003624 <LL_USART_SetBaudRate+0x458>)
 80035fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003600:	095b      	lsrs	r3, r3, #5
 8003602:	b29b      	uxth	r3, r3
 8003604:	f003 030f 	and.w	r3, r3, #15
 8003608:	b29b      	uxth	r3, r3
 800360a:	4423      	add	r3, r4
 800360c:	b29b      	uxth	r3, r3
 800360e:	461a      	mov	r2, r3
 8003610:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003614:	609a      	str	r2, [r3, #8]
}
 8003616:	bf00      	nop
 8003618:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800361c:	46bd      	mov	sp, r7
 800361e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003622:	bf00      	nop
 8003624:	51eb851f 	.word	0x51eb851f

08003628 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b088      	sub	sp, #32
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003636:	2300      	movs	r3, #0
 8003638:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7ff fd8b 	bl	8003156 <LL_USART_IsEnabled>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d15e      	bne.n	8003704 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800364e:	f023 030c 	bic.w	r3, r3, #12
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	6851      	ldr	r1, [r2, #4]
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	68d2      	ldr	r2, [r2, #12]
 800365a:	4311      	orrs	r1, r2
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	6912      	ldr	r2, [r2, #16]
 8003660:	4311      	orrs	r1, r2
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	6992      	ldr	r2, [r2, #24]
 8003666:	430a      	orrs	r2, r1
 8003668:	431a      	orrs	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	4619      	mov	r1, r3
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7ff fd82 	bl	800317e <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	4619      	mov	r1, r3
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7ff fd8f 	bl	80031a4 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003686:	f107 0308 	add.w	r3, r7, #8
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff fc24 	bl	8002ed8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a1f      	ldr	r2, [pc, #124]	@ (8003710 <LL_USART_Init+0xe8>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d102      	bne.n	800369e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	61bb      	str	r3, [r7, #24]
 800369c:	e021      	b.n	80036e2 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a1c      	ldr	r2, [pc, #112]	@ (8003714 <LL_USART_Init+0xec>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d102      	bne.n	80036ac <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	61bb      	str	r3, [r7, #24]
 80036aa:	e01a      	b.n	80036e2 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003718 <LL_USART_Init+0xf0>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d102      	bne.n	80036ba <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	61bb      	str	r3, [r7, #24]
 80036b8:	e013      	b.n	80036e2 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a17      	ldr	r2, [pc, #92]	@ (800371c <LL_USART_Init+0xf4>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d102      	bne.n	80036c8 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	61bb      	str	r3, [r7, #24]
 80036c6:	e00c      	b.n	80036e2 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a15      	ldr	r2, [pc, #84]	@ (8003720 <LL_USART_Init+0xf8>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d102      	bne.n	80036d6 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	61bb      	str	r3, [r7, #24]
 80036d4:	e005      	b.n	80036e2 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a12      	ldr	r2, [pc, #72]	@ (8003724 <LL_USART_Init+0xfc>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d101      	bne.n	80036e2 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00d      	beq.n	8003704 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d009      	beq.n	8003704 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80036f0:	2300      	movs	r3, #0
 80036f2:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80036fc:	69b9      	ldr	r1, [r7, #24]
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7ff fd64 	bl	80031cc <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003704:	7ffb      	ldrb	r3, [r7, #31]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3720      	adds	r7, #32
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40011000 	.word	0x40011000
 8003714:	40004400 	.word	0x40004400
 8003718:	40004800 	.word	0x40004800
 800371c:	40011400 	.word	0x40011400
 8003720:	40004c00 	.word	0x40004c00
 8003724:	40005000 	.word	0x40005000

08003728 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	fbb2 f3f3 	udiv	r3, r2, r3
 800373a:	4a07      	ldr	r2, [pc, #28]	@ (8003758 <LL_InitTick+0x30>)
 800373c:	3b01      	subs	r3, #1
 800373e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003740:	4b05      	ldr	r3, [pc, #20]	@ (8003758 <LL_InitTick+0x30>)
 8003742:	2200      	movs	r2, #0
 8003744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003746:	4b04      	ldr	r3, [pc, #16]	@ (8003758 <LL_InitTick+0x30>)
 8003748:	2205      	movs	r2, #5
 800374a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	e000e010 	.word	0xe000e010

0800375c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003764:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7ff ffdd 	bl	8003728 <LL_InitTick>
}
 800376e:	bf00      	nop
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003780:	4b0f      	ldr	r3, [pc, #60]	@ (80037c0 <LL_mDelay+0x48>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003786:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378e:	d00c      	beq.n	80037aa <LL_mDelay+0x32>
  {
    Delay++;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3301      	adds	r3, #1
 8003794:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003796:	e008      	b.n	80037aa <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003798:	4b09      	ldr	r3, [pc, #36]	@ (80037c0 <LL_mDelay+0x48>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d002      	beq.n	80037aa <LL_mDelay+0x32>
    {
      Delay--;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	607b      	str	r3, [r7, #4]
  while (Delay)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1f3      	bne.n	8003798 <LL_mDelay+0x20>
    }
  }
}
 80037b0:	bf00      	nop
 80037b2:	bf00      	nop
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	e000e010 	.word	0xe000e010

080037c4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80037cc:	4a04      	ldr	r2, [pc, #16]	@ (80037e0 <LL_SetSystemCoreClock+0x1c>)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6013      	str	r3, [r2, #0]
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	200000c8 	.word	0x200000c8

080037e4 <SCH_Initialize>:
  * @param  None
  * @retval None
  *****************************************************************************/

void SCH_Initialize(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  s_SystemTick = RESET;
 80037e8:	4b0d      	ldr	r3, [pc, #52]	@ (8003820 <SCH_Initialize+0x3c>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]
  s_NumOfTaskScheduled = RESET;
 80037ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003824 <SCH_Initialize+0x40>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	701a      	strb	r2, [r3, #0]
  s_NumOfTimers = RESET;
 80037f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003828 <SCH_Initialize+0x44>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	701a      	strb	r2, [r3, #0]

  // Initial Scheduler Context
  memset((uint8_t*)&s_TaskContext[0], RESET, (sizeof(SCH_TaskContextTypedef) * MAX_TASK));
 80037fa:	22f0      	movs	r2, #240	@ 0xf0
 80037fc:	2100      	movs	r1, #0
 80037fe:	480b      	ldr	r0, [pc, #44]	@ (800382c <SCH_Initialize+0x48>)
 8003800:	f000 f97a 	bl	8003af8 <memset>
  memset((uint8_t*)&s_TimerContext[0], RESET, (sizeof(SCH_TimerContextTypedef) * MAX_TIMERS));
 8003804:	22f0      	movs	r2, #240	@ 0xf0
 8003806:	2100      	movs	r1, #0
 8003808:	4809      	ldr	r0, [pc, #36]	@ (8003830 <SCH_Initialize+0x4c>)
 800380a:	f000 f975 	bl	8003af8 <memset>
  memset((uint8_t*)&s_SoftTimers[0], RESET, (sizeof(uint32_t) * SCH_TIM_LAST));
 800380e:	2228      	movs	r2, #40	@ 0x28
 8003810:	2100      	movs	r1, #0
 8003812:	4808      	ldr	r0, [pc, #32]	@ (8003834 <SCH_Initialize+0x50>)
 8003814:	f000 f970 	bl	8003af8 <memset>

    // Initialize Scheduler context
  systick_timer_init();
 8003818:	f7fc ff44 	bl	80006a4 <systick_timer_init>
}
 800381c:	bf00      	nop
 800381e:	bd80      	pop	{r7, pc}
 8003820:	20000460 	.word	0x20000460
 8003824:	20000368 	.word	0x20000368
 8003828:	2000045c 	.word	0x2000045c
 800382c:	20000278 	.word	0x20000278
 8003830:	2000036c 	.word	0x2000036c
 8003834:	20000464 	.word	0x20000464

08003838 <SCH_TIM_Start>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  *         const uint32_t timeInMs - time in mSec
  * @retval None
  *****************************************************************************/
void SCH_TIM_Start(const SCH_SoftTimerTypedef timer, const uint32_t timeInMs)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	6039      	str	r1, [r7, #0]
 8003842:	71fb      	strb	r3, [r7, #7]
  if(timer < SCH_TIM_LAST)
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	2b09      	cmp	r3, #9
 8003848:	d804      	bhi.n	8003854 <SCH_TIM_Start+0x1c>
  {
	//s_SoftTimers[timer] = timeInMs + s_SystemTick;
    s_SoftTimers[timer] = timeInMs;
 800384a:	79fb      	ldrb	r3, [r7, #7]
 800384c:	4904      	ldr	r1, [pc, #16]	@ (8003860 <SCH_TIM_Start+0x28>)
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	20000464 	.word	0x20000464

08003864 <SCH_TIM_HasCompleted>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  * @retval TRUE / FALSE
  *****************************************************************************/

uint16_t SCH_TIM_HasCompleted(const SCH_SoftTimerTypedef timer)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	4603      	mov	r3, r0
 800386c:	71fb      	strb	r3, [r7, #7]
  return (s_SoftTimers[timer] == 0 ? 1:0 ) ;
 800386e:	79fb      	ldrb	r3, [r7, #7]
 8003870:	4a06      	ldr	r2, [pc, #24]	@ (800388c <SCH_TIM_HasCompleted+0x28>)
 8003872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003876:	2b00      	cmp	r3, #0
 8003878:	bf0c      	ite	eq
 800387a:	2301      	moveq	r3, #1
 800387c:	2300      	movne	r3, #0
 800387e:	b2db      	uxtb	r3, r3
}
 8003880:	4618      	mov	r0, r3
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	20000464 	.word	0x20000464

08003890 <SCH_TASK_CreateTask>:
  * @param  SCH_TASK_HANDLE* pHandle - pointer to task handle
  *         SCH_TaskPropertyTypedef* pTaskProperty - pointer to task property
  * @retval status
  *****************************************************************************/
t_Status SCH_TASK_CreateTask(SCH_TASK_HANDLE* pHandle, SCH_TaskPropertyTypedef* pTaskProperty)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  t_Status                      status = STS_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	73fb      	strb	r3, [r7, #15]

  // make sure that we have valid parameters
  if((pHandle) && (pTaskProperty))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d029      	beq.n	80038f8 <SCH_TASK_CreateTask+0x68>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d026      	beq.n	80038f8 <SCH_TASK_CreateTask+0x68>
  {
    // Check for number of task defined
    if(s_NumOfTaskScheduled < (MAX_TASK - 1))
 80038aa:	4b17      	ldr	r3, [pc, #92]	@ (8003908 <SCH_TASK_CreateTask+0x78>)
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b12      	cmp	r3, #18
 80038b0:	d822      	bhi.n	80038f8 <SCH_TASK_CreateTask+0x68>
    {
      SCH_TaskContextTypedef* pTaskContext = &s_TaskContext[s_NumOfTaskScheduled];
 80038b2:	4b15      	ldr	r3, [pc, #84]	@ (8003908 <SCH_TASK_CreateTask+0x78>)
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	461a      	mov	r2, r3
 80038b8:	4613      	mov	r3, r2
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	4413      	add	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4a12      	ldr	r2, [pc, #72]	@ (800390c <SCH_TASK_CreateTask+0x7c>)
 80038c2:	4413      	add	r3, r2
 80038c4:	60bb      	str	r3, [r7, #8]
      // get task context
      // memcpy((uint8_t*)pTaskContext->pTaskProperty, (uint8_t*)pTaskProperty, sizeof(SCH_TaskPropertyTypedef));
      pTaskContext->pTaskProperty = pTaskProperty;
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	609a      	str	r2, [r3, #8]
      // Make sure we are initializing other members of task context
      pTaskContext->taskFlag = FALSE;
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2200      	movs	r2, #0
 80038d0:	805a      	strh	r2, [r3, #2]
      pTaskContext->taskTick = pTaskProperty->taskTick;;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	605a      	str	r2, [r3, #4]
      // Put task in Ready State
      pTaskContext->taskState = TASK_StateReady;
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2201      	movs	r2, #1
 80038de:	701a      	strb	r2, [r3, #0]

      // Give Task Handle back to caller
      *pHandle = s_NumOfTaskScheduled;
 80038e0:	4b09      	ldr	r3, [pc, #36]	@ (8003908 <SCH_TASK_CreateTask+0x78>)
 80038e2:	781a      	ldrb	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	701a      	strb	r2, [r3, #0]

      s_NumOfTaskScheduled++;
 80038e8:	4b07      	ldr	r3, [pc, #28]	@ (8003908 <SCH_TASK_CreateTask+0x78>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	3301      	adds	r3, #1
 80038ee:	b2da      	uxtb	r2, r3
 80038f0:	4b05      	ldr	r3, [pc, #20]	@ (8003908 <SCH_TASK_CreateTask+0x78>)
 80038f2:	701a      	strb	r2, [r3, #0]
      // We were able to register task with schedular
      status = STS_DONE;
 80038f4:	2300      	movs	r3, #0
 80038f6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	20000368 	.word	0x20000368
 800390c:	20000278 	.word	0x20000278

08003910 <SCH_RunSystemTickTimer>:
  * @brief  Function handles system tick timer
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_RunSystemTickTimer(void)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // Increment System Tick counter

  s_SystemTick++;
 8003916:	4b42      	ldr	r3, [pc, #264]	@ (8003a20 <SCH_RunSystemTickTimer+0x110>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3301      	adds	r3, #1
 800391c:	4a40      	ldr	r2, [pc, #256]	@ (8003a20 <SCH_RunSystemTickTimer+0x110>)
 800391e:	6013      	str	r3, [r2, #0]
//  if(s_SystemTick > 100000){
//	  LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_15);
//  }
  // Check Status of other Periodic Task
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8003920:	2300      	movs	r3, #0
 8003922:	73fb      	strb	r3, [r7, #15]
 8003924:	e025      	b.n	8003972 <SCH_RunSystemTickTimer+0x62>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 8003926:	7bfa      	ldrb	r2, [r7, #15]
 8003928:	4613      	mov	r3, r2
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	4413      	add	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4a3c      	ldr	r2, [pc, #240]	@ (8003a24 <SCH_RunSystemTickTimer+0x114>)
 8003932:	4413      	add	r3, r2
 8003934:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((SCH_TASK_SYNC == pTaskContext->pTaskProperty->taskType) && (TASK_StateReady == pTaskContext->taskState))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d115      	bne.n	800396c <SCH_RunSystemTickTimer+0x5c>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d111      	bne.n	800396c <SCH_RunSystemTickTimer+0x5c>
    {
      // Increment task tick
      pTaskContext->taskTick += 1;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	1c5a      	adds	r2, r3, #1
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTaskContext->taskTick >= pTaskContext->pTaskProperty->taskPeriodInMS)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	429a      	cmp	r2, r3
 800395e:	d305      	bcc.n	800396c <SCH_RunSystemTickTimer+0x5c>
      {
        // Yes
        // Reset Task tick timer
        pTaskContext->taskTick = RESET;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	605a      	str	r2, [r3, #4]
        // Enable Flag
        pTaskContext->taskFlag = TRUE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	805a      	strh	r2, [r3, #2]
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800396c:	7bfb      	ldrb	r3, [r7, #15]
 800396e:	3301      	adds	r3, #1
 8003970:	73fb      	strb	r3, [r7, #15]
 8003972:	4b2d      	ldr	r3, [pc, #180]	@ (8003a28 <SCH_RunSystemTickTimer+0x118>)
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	7bfa      	ldrb	r2, [r7, #15]
 8003978:	429a      	cmp	r2, r3
 800397a:	d3d4      	bcc.n	8003926 <SCH_RunSystemTickTimer+0x16>
      }
    }
  }

  // Check Status of other Periodic Task
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800397c:	2300      	movs	r3, #0
 800397e:	73bb      	strb	r3, [r7, #14]
 8003980:	e02b      	b.n	80039da <SCH_RunSystemTickTimer+0xca>
  {
    // Get Task Context
    pTimerContext = &s_TimerContext[timerIndex];
 8003982:	7bba      	ldrb	r2, [r7, #14]
 8003984:	4613      	mov	r3, r2
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	4413      	add	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4a27      	ldr	r2, [pc, #156]	@ (8003a2c <SCH_RunSystemTickTimer+0x11c>)
 800398e:	4413      	add	r3, r2
 8003990:	60bb      	str	r3, [r7, #8]

    // Check type and State of the task
    if(TIM_StateRun == pTimerContext->timerState)
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d11c      	bne.n	80039d4 <SCH_RunSystemTickTimer+0xc4>
    {
      // Increment task tick
      pTimerContext->timerTick += 1;
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	1c5a      	adds	r2, r3, #1
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTimerContext->timerTick >= pTimerContext->pTimerProperty->timerPeriodInMS)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d310      	bcc.n	80039d4 <SCH_RunSystemTickTimer+0xc4>
      {
        // Yes
        // Enable Flag
        pTimerContext->timerFlag = TRUE;
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2201      	movs	r2, #1
 80039b6:	805a      	strh	r2, [r3, #2]
        // Reset tick timer
        pTimerContext->timerTick = RESET;
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2200      	movs	r2, #0
 80039bc:	605a      	str	r2, [r3, #4]
        // Check timer type and change the state
        pTimerContext->timerState = (SCH_TIMER_PERIODIC == pTimerContext->pTimerProperty->timerType)?TIM_StateRun:TIM_StateStop;
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	bf0c      	ite	eq
 80039c8:	2301      	moveq	r3, #1
 80039ca:	2300      	movne	r3, #0
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	461a      	mov	r2, r3
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	701a      	strb	r2, [r3, #0]
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 80039d4:	7bbb      	ldrb	r3, [r7, #14]
 80039d6:	3301      	adds	r3, #1
 80039d8:	73bb      	strb	r3, [r7, #14]
 80039da:	4b15      	ldr	r3, [pc, #84]	@ (8003a30 <SCH_RunSystemTickTimer+0x120>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	7bba      	ldrb	r2, [r7, #14]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d3ce      	bcc.n	8003982 <SCH_RunSystemTickTimer+0x72>
      }
    }
  }
  // Update software timer
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 80039e4:	2300      	movs	r3, #0
 80039e6:	73bb      	strb	r3, [r7, #14]
 80039e8:	e010      	b.n	8003a0c <SCH_RunSystemTickTimer+0xfc>
 	if (s_SoftTimers[timerIndex] > 0)	s_SoftTimers[timerIndex] --;
 80039ea:	7bbb      	ldrb	r3, [r7, #14]
 80039ec:	4a11      	ldr	r2, [pc, #68]	@ (8003a34 <SCH_RunSystemTickTimer+0x124>)
 80039ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d007      	beq.n	8003a06 <SCH_RunSystemTickTimer+0xf6>
 80039f6:	7bbb      	ldrb	r3, [r7, #14]
 80039f8:	4a0e      	ldr	r2, [pc, #56]	@ (8003a34 <SCH_RunSystemTickTimer+0x124>)
 80039fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80039fe:	3a01      	subs	r2, #1
 8003a00:	490c      	ldr	r1, [pc, #48]	@ (8003a34 <SCH_RunSystemTickTimer+0x124>)
 8003a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 8003a06:	7bbb      	ldrb	r3, [r7, #14]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	73bb      	strb	r3, [r7, #14]
 8003a0c:	7bbb      	ldrb	r3, [r7, #14]
 8003a0e:	2b09      	cmp	r3, #9
 8003a10:	d9eb      	bls.n	80039ea <SCH_RunSystemTickTimer+0xda>
}
 8003a12:	bf00      	nop
 8003a14:	bf00      	nop
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	20000460 	.word	0x20000460
 8003a24:	20000278 	.word	0x20000278
 8003a28:	20000368 	.word	0x20000368
 8003a2c:	2000036c 	.word	0x2000036c
 8003a30:	2000045c 	.word	0x2000045c
 8003a34:	20000464 	.word	0x20000464

08003a38 <SCH_StartSchedular>:
  * @brief  Start schedular
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_StartSchedular(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  // Start Schedular..i.e. start system tick timer
  SCH_START;
 8003a3c:	f7fc fe22 	bl	8000684 <systick_timer_start>
}
 8003a40:	bf00      	nop
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <SCH_HandleScheduledTask>:
  * @brief  Function handles scheduled task and timer events
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_HandleScheduledTask(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
  SCH_TaskContextTypedef*       pTaskContext;
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // check for schedule flag
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	73fb      	strb	r3, [r7, #15]
 8003a4e:	e01e      	b.n	8003a8e <SCH_HandleScheduledTask+0x4a>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 8003a50:	7bfa      	ldrb	r2, [r7, #15]
 8003a52:	4613      	mov	r3, r2
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	4413      	add	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4a23      	ldr	r2, [pc, #140]	@ (8003ae8 <SCH_HandleScheduledTask+0xa4>)
 8003a5c:	4413      	add	r3, r2
 8003a5e:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((TRUE == pTaskContext->taskFlag) && (TASK_StateReady == pTaskContext->taskState))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	885b      	ldrh	r3, [r3, #2]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d10f      	bne.n	8003a88 <SCH_HandleScheduledTask+0x44>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d10b      	bne.n	8003a88 <SCH_HandleScheduledTask+0x44>
    {
      pTaskContext->taskFlag = FALSE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	805a      	strh	r2, [r3, #2]
      if(pTaskContext->pTaskProperty->taskFunction)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d003      	beq.n	8003a88 <SCH_HandleScheduledTask+0x44>
      {
        pTaskContext->pTaskProperty->taskFunction();
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	4798      	blx	r3
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	73fb      	strb	r3, [r7, #15]
 8003a8e:	4b17      	ldr	r3, [pc, #92]	@ (8003aec <SCH_HandleScheduledTask+0xa8>)
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	7bfa      	ldrb	r2, [r7, #15]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d3db      	bcc.n	8003a50 <SCH_HandleScheduledTask+0xc>
      }
    }
  }

  // check for timer flag
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8003a98:	2300      	movs	r3, #0
 8003a9a:	73bb      	strb	r3, [r7, #14]
 8003a9c:	e01a      	b.n	8003ad4 <SCH_HandleScheduledTask+0x90>
  {
    // Get Timer Context
    pTimerContext = &s_TimerContext[timerIndex];
 8003a9e:	7bba      	ldrb	r2, [r7, #14]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	4413      	add	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4a11      	ldr	r2, [pc, #68]	@ (8003af0 <SCH_HandleScheduledTask+0xac>)
 8003aaa:	4413      	add	r3, r2
 8003aac:	60bb      	str	r3, [r7, #8]

    // Check timer flag
    if(TRUE == pTimerContext->timerFlag)
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	885b      	ldrh	r3, [r3, #2]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d10b      	bne.n	8003ace <SCH_HandleScheduledTask+0x8a>
    {
      pTimerContext->timerFlag = FALSE;
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	805a      	strh	r2, [r3, #2]
      if(pTimerContext->pTimerProperty->timerCallbackFunction)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <SCH_HandleScheduledTask+0x8a>
      {
        pTimerContext->pTimerProperty->timerCallbackFunction();
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	4798      	blx	r3
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8003ace:	7bbb      	ldrb	r3, [r7, #14]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	73bb      	strb	r3, [r7, #14]
 8003ad4:	4b07      	ldr	r3, [pc, #28]	@ (8003af4 <SCH_HandleScheduledTask+0xb0>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	7bba      	ldrb	r2, [r7, #14]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d3df      	bcc.n	8003a9e <SCH_HandleScheduledTask+0x5a>
      }
    }
  }
}
 8003ade:	bf00      	nop
 8003ae0:	bf00      	nop
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20000278 	.word	0x20000278
 8003aec:	20000368 	.word	0x20000368
 8003af0:	2000036c 	.word	0x2000036c
 8003af4:	2000045c 	.word	0x2000045c

08003af8 <memset>:
 8003af8:	4402      	add	r2, r0
 8003afa:	4603      	mov	r3, r0
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d100      	bne.n	8003b02 <memset+0xa>
 8003b00:	4770      	bx	lr
 8003b02:	f803 1b01 	strb.w	r1, [r3], #1
 8003b06:	e7f9      	b.n	8003afc <memset+0x4>

08003b08 <__libc_init_array>:
 8003b08:	b570      	push	{r4, r5, r6, lr}
 8003b0a:	4d0d      	ldr	r5, [pc, #52]	@ (8003b40 <__libc_init_array+0x38>)
 8003b0c:	4c0d      	ldr	r4, [pc, #52]	@ (8003b44 <__libc_init_array+0x3c>)
 8003b0e:	1b64      	subs	r4, r4, r5
 8003b10:	10a4      	asrs	r4, r4, #2
 8003b12:	2600      	movs	r6, #0
 8003b14:	42a6      	cmp	r6, r4
 8003b16:	d109      	bne.n	8003b2c <__libc_init_array+0x24>
 8003b18:	4d0b      	ldr	r5, [pc, #44]	@ (8003b48 <__libc_init_array+0x40>)
 8003b1a:	4c0c      	ldr	r4, [pc, #48]	@ (8003b4c <__libc_init_array+0x44>)
 8003b1c:	f000 f818 	bl	8003b50 <_init>
 8003b20:	1b64      	subs	r4, r4, r5
 8003b22:	10a4      	asrs	r4, r4, #2
 8003b24:	2600      	movs	r6, #0
 8003b26:	42a6      	cmp	r6, r4
 8003b28:	d105      	bne.n	8003b36 <__libc_init_array+0x2e>
 8003b2a:	bd70      	pop	{r4, r5, r6, pc}
 8003b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b30:	4798      	blx	r3
 8003b32:	3601      	adds	r6, #1
 8003b34:	e7ee      	b.n	8003b14 <__libc_init_array+0xc>
 8003b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b3a:	4798      	blx	r3
 8003b3c:	3601      	adds	r6, #1
 8003b3e:	e7f2      	b.n	8003b26 <__libc_init_array+0x1e>
 8003b40:	08003f08 	.word	0x08003f08
 8003b44:	08003f08 	.word	0x08003f08
 8003b48:	08003f08 	.word	0x08003f08
 8003b4c:	08003f0c 	.word	0x08003f0c

08003b50 <_init>:
 8003b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b52:	bf00      	nop
 8003b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b56:	bc08      	pop	{r3}
 8003b58:	469e      	mov	lr, r3
 8003b5a:	4770      	bx	lr

08003b5c <_fini>:
 8003b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5e:	bf00      	nop
 8003b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b62:	bc08      	pop	{r3}
 8003b64:	469e      	mov	lr, r3
 8003b66:	4770      	bx	lr
