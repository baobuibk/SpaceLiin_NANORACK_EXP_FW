
exp_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009218  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a44  080093a8  080093a8  0000a3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dec  08009dec  0000d2e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009dec  08009dec  0000adec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009df4  08009df4  0000d2e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009df4  08009df4  0000adf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009df8  08009df8  0000adf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000022e4  20000000  08009dfc  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d2e4  2**0
                  CONTENTS
 10 .bss          000007bc  200022e4  200022e4  0000d2e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002aa0  20002aa0  0000d2e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d2e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001129b  00000000  00000000  0000d314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cfb  00000000  00000000  0001e5af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e8  00000000  00000000  000222b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000df2  00000000  00000000  00023598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021cc4  00000000  00000000  0002438a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000132d0  00000000  00000000  0004604e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b14ee  00000000  00000000  0005931e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010a80c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005254  00000000  00000000  0010a850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  0010faa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200022e4 	.word	0x200022e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009390 	.word	0x08009390

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200022e8 	.word	0x200022e8
 80001cc:	08009390 	.word	0x08009390

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_ldivmod>:
 80002a0:	b97b      	cbnz	r3, 80002c2 <__aeabi_ldivmod+0x22>
 80002a2:	b972      	cbnz	r2, 80002c2 <__aeabi_ldivmod+0x22>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bfbe      	ittt	lt
 80002a8:	2000      	movlt	r0, #0
 80002aa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002ae:	e006      	blt.n	80002be <__aeabi_ldivmod+0x1e>
 80002b0:	bf08      	it	eq
 80002b2:	2800      	cmpeq	r0, #0
 80002b4:	bf1c      	itt	ne
 80002b6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002ba:	f04f 30ff 	movne.w	r0, #4294967295
 80002be:	f000 b9b5 	b.w	800062c <__aeabi_idiv0>
 80002c2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ca:	2900      	cmp	r1, #0
 80002cc:	db09      	blt.n	80002e2 <__aeabi_ldivmod+0x42>
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	db1a      	blt.n	8000308 <__aeabi_ldivmod+0x68>
 80002d2:	f000 f84d 	bl	8000370 <__udivmoddi4>
 80002d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002de:	b004      	add	sp, #16
 80002e0:	4770      	bx	lr
 80002e2:	4240      	negs	r0, r0
 80002e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	db1b      	blt.n	8000324 <__aeabi_ldivmod+0x84>
 80002ec:	f000 f840 	bl	8000370 <__udivmoddi4>
 80002f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002f8:	b004      	add	sp, #16
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	4252      	negs	r2, r2
 8000302:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000306:	4770      	bx	lr
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	f000 f82f 	bl	8000370 <__udivmoddi4>
 8000312:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031a:	b004      	add	sp, #16
 800031c:	4240      	negs	r0, r0
 800031e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000322:	4770      	bx	lr
 8000324:	4252      	negs	r2, r2
 8000326:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032a:	f000 f821 	bl	8000370 <__udivmoddi4>
 800032e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000332:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000336:	b004      	add	sp, #16
 8000338:	4252      	negs	r2, r2
 800033a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033e:	4770      	bx	lr

08000340 <__aeabi_uldivmod>:
 8000340:	b953      	cbnz	r3, 8000358 <__aeabi_uldivmod+0x18>
 8000342:	b94a      	cbnz	r2, 8000358 <__aeabi_uldivmod+0x18>
 8000344:	2900      	cmp	r1, #0
 8000346:	bf08      	it	eq
 8000348:	2800      	cmpeq	r0, #0
 800034a:	bf1c      	itt	ne
 800034c:	f04f 31ff 	movne.w	r1, #4294967295
 8000350:	f04f 30ff 	movne.w	r0, #4294967295
 8000354:	f000 b96a 	b.w	800062c <__aeabi_idiv0>
 8000358:	f1ad 0c08 	sub.w	ip, sp, #8
 800035c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000360:	f000 f806 	bl	8000370 <__udivmoddi4>
 8000364:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036c:	b004      	add	sp, #16
 800036e:	4770      	bx	lr

08000370 <__udivmoddi4>:
 8000370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000374:	9d08      	ldr	r5, [sp, #32]
 8000376:	460c      	mov	r4, r1
 8000378:	2b00      	cmp	r3, #0
 800037a:	d14e      	bne.n	800041a <__udivmoddi4+0xaa>
 800037c:	4694      	mov	ip, r2
 800037e:	458c      	cmp	ip, r1
 8000380:	4686      	mov	lr, r0
 8000382:	fab2 f282 	clz	r2, r2
 8000386:	d962      	bls.n	800044e <__udivmoddi4+0xde>
 8000388:	b14a      	cbz	r2, 800039e <__udivmoddi4+0x2e>
 800038a:	f1c2 0320 	rsb	r3, r2, #32
 800038e:	4091      	lsls	r1, r2
 8000390:	fa20 f303 	lsr.w	r3, r0, r3
 8000394:	fa0c fc02 	lsl.w	ip, ip, r2
 8000398:	4319      	orrs	r1, r3
 800039a:	fa00 fe02 	lsl.w	lr, r0, r2
 800039e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a2:	fa1f f68c 	uxth.w	r6, ip
 80003a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ae:	fb07 1114 	mls	r1, r7, r4, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb04 f106 	mul.w	r1, r4, r6
 80003ba:	4299      	cmp	r1, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x64>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f104 30ff 	add.w	r0, r4, #4294967295
 80003c6:	f080 8112 	bcs.w	80005ee <__udivmoddi4+0x27e>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 810f 	bls.w	80005ee <__udivmoddi4+0x27e>
 80003d0:	3c02      	subs	r4, #2
 80003d2:	4463      	add	r3, ip
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	fa1f f38e 	uxth.w	r3, lr
 80003da:	fbb1 f0f7 	udiv	r0, r1, r7
 80003de:	fb07 1110 	mls	r1, r7, r0, r1
 80003e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e6:	fb00 f606 	mul.w	r6, r0, r6
 80003ea:	429e      	cmp	r6, r3
 80003ec:	d90a      	bls.n	8000404 <__udivmoddi4+0x94>
 80003ee:	eb1c 0303 	adds.w	r3, ip, r3
 80003f2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003f6:	f080 80fc 	bcs.w	80005f2 <__udivmoddi4+0x282>
 80003fa:	429e      	cmp	r6, r3
 80003fc:	f240 80f9 	bls.w	80005f2 <__udivmoddi4+0x282>
 8000400:	4463      	add	r3, ip
 8000402:	3802      	subs	r0, #2
 8000404:	1b9b      	subs	r3, r3, r6
 8000406:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800040a:	2100      	movs	r1, #0
 800040c:	b11d      	cbz	r5, 8000416 <__udivmoddi4+0xa6>
 800040e:	40d3      	lsrs	r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	e9c5 3200 	strd	r3, r2, [r5]
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	428b      	cmp	r3, r1
 800041c:	d905      	bls.n	800042a <__udivmoddi4+0xba>
 800041e:	b10d      	cbz	r5, 8000424 <__udivmoddi4+0xb4>
 8000420:	e9c5 0100 	strd	r0, r1, [r5]
 8000424:	2100      	movs	r1, #0
 8000426:	4608      	mov	r0, r1
 8000428:	e7f5      	b.n	8000416 <__udivmoddi4+0xa6>
 800042a:	fab3 f183 	clz	r1, r3
 800042e:	2900      	cmp	r1, #0
 8000430:	d146      	bne.n	80004c0 <__udivmoddi4+0x150>
 8000432:	42a3      	cmp	r3, r4
 8000434:	d302      	bcc.n	800043c <__udivmoddi4+0xcc>
 8000436:	4290      	cmp	r0, r2
 8000438:	f0c0 80f0 	bcc.w	800061c <__udivmoddi4+0x2ac>
 800043c:	1a86      	subs	r6, r0, r2
 800043e:	eb64 0303 	sbc.w	r3, r4, r3
 8000442:	2001      	movs	r0, #1
 8000444:	2d00      	cmp	r5, #0
 8000446:	d0e6      	beq.n	8000416 <__udivmoddi4+0xa6>
 8000448:	e9c5 6300 	strd	r6, r3, [r5]
 800044c:	e7e3      	b.n	8000416 <__udivmoddi4+0xa6>
 800044e:	2a00      	cmp	r2, #0
 8000450:	f040 8090 	bne.w	8000574 <__udivmoddi4+0x204>
 8000454:	eba1 040c 	sub.w	r4, r1, ip
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa1f f78c 	uxth.w	r7, ip
 8000460:	2101      	movs	r1, #1
 8000462:	fbb4 f6f8 	udiv	r6, r4, r8
 8000466:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800046a:	fb08 4416 	mls	r4, r8, r6, r4
 800046e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000472:	fb07 f006 	mul.w	r0, r7, r6
 8000476:	4298      	cmp	r0, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x11c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x11a>
 8000484:	4298      	cmp	r0, r3
 8000486:	f200 80cd 	bhi.w	8000624 <__udivmoddi4+0x2b4>
 800048a:	4626      	mov	r6, r4
 800048c:	1a1c      	subs	r4, r3, r0
 800048e:	fa1f f38e 	uxth.w	r3, lr
 8000492:	fbb4 f0f8 	udiv	r0, r4, r8
 8000496:	fb08 4410 	mls	r4, r8, r0, r4
 800049a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800049e:	fb00 f707 	mul.w	r7, r0, r7
 80004a2:	429f      	cmp	r7, r3
 80004a4:	d908      	bls.n	80004b8 <__udivmoddi4+0x148>
 80004a6:	eb1c 0303 	adds.w	r3, ip, r3
 80004aa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ae:	d202      	bcs.n	80004b6 <__udivmoddi4+0x146>
 80004b0:	429f      	cmp	r7, r3
 80004b2:	f200 80b0 	bhi.w	8000616 <__udivmoddi4+0x2a6>
 80004b6:	4620      	mov	r0, r4
 80004b8:	1bdb      	subs	r3, r3, r7
 80004ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004be:	e7a5      	b.n	800040c <__udivmoddi4+0x9c>
 80004c0:	f1c1 0620 	rsb	r6, r1, #32
 80004c4:	408b      	lsls	r3, r1
 80004c6:	fa22 f706 	lsr.w	r7, r2, r6
 80004ca:	431f      	orrs	r7, r3
 80004cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80004d0:	fa04 f301 	lsl.w	r3, r4, r1
 80004d4:	ea43 030c 	orr.w	r3, r3, ip
 80004d8:	40f4      	lsrs	r4, r6
 80004da:	fa00 f801 	lsl.w	r8, r0, r1
 80004de:	0c38      	lsrs	r0, r7, #16
 80004e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004e4:	fbb4 fef0 	udiv	lr, r4, r0
 80004e8:	fa1f fc87 	uxth.w	ip, r7
 80004ec:	fb00 441e 	mls	r4, r0, lr, r4
 80004f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f4:	fb0e f90c 	mul.w	r9, lr, ip
 80004f8:	45a1      	cmp	r9, r4
 80004fa:	fa02 f201 	lsl.w	r2, r2, r1
 80004fe:	d90a      	bls.n	8000516 <__udivmoddi4+0x1a6>
 8000500:	193c      	adds	r4, r7, r4
 8000502:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000506:	f080 8084 	bcs.w	8000612 <__udivmoddi4+0x2a2>
 800050a:	45a1      	cmp	r9, r4
 800050c:	f240 8081 	bls.w	8000612 <__udivmoddi4+0x2a2>
 8000510:	f1ae 0e02 	sub.w	lr, lr, #2
 8000514:	443c      	add	r4, r7
 8000516:	eba4 0409 	sub.w	r4, r4, r9
 800051a:	fa1f f983 	uxth.w	r9, r3
 800051e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000522:	fb00 4413 	mls	r4, r0, r3, r4
 8000526:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800052a:	fb03 fc0c 	mul.w	ip, r3, ip
 800052e:	45a4      	cmp	ip, r4
 8000530:	d907      	bls.n	8000542 <__udivmoddi4+0x1d2>
 8000532:	193c      	adds	r4, r7, r4
 8000534:	f103 30ff 	add.w	r0, r3, #4294967295
 8000538:	d267      	bcs.n	800060a <__udivmoddi4+0x29a>
 800053a:	45a4      	cmp	ip, r4
 800053c:	d965      	bls.n	800060a <__udivmoddi4+0x29a>
 800053e:	3b02      	subs	r3, #2
 8000540:	443c      	add	r4, r7
 8000542:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000546:	fba0 9302 	umull	r9, r3, r0, r2
 800054a:	eba4 040c 	sub.w	r4, r4, ip
 800054e:	429c      	cmp	r4, r3
 8000550:	46ce      	mov	lr, r9
 8000552:	469c      	mov	ip, r3
 8000554:	d351      	bcc.n	80005fa <__udivmoddi4+0x28a>
 8000556:	d04e      	beq.n	80005f6 <__udivmoddi4+0x286>
 8000558:	b155      	cbz	r5, 8000570 <__udivmoddi4+0x200>
 800055a:	ebb8 030e 	subs.w	r3, r8, lr
 800055e:	eb64 040c 	sbc.w	r4, r4, ip
 8000562:	fa04 f606 	lsl.w	r6, r4, r6
 8000566:	40cb      	lsrs	r3, r1
 8000568:	431e      	orrs	r6, r3
 800056a:	40cc      	lsrs	r4, r1
 800056c:	e9c5 6400 	strd	r6, r4, [r5]
 8000570:	2100      	movs	r1, #0
 8000572:	e750      	b.n	8000416 <__udivmoddi4+0xa6>
 8000574:	f1c2 0320 	rsb	r3, r2, #32
 8000578:	fa20 f103 	lsr.w	r1, r0, r3
 800057c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000580:	fa24 f303 	lsr.w	r3, r4, r3
 8000584:	4094      	lsls	r4, r2
 8000586:	430c      	orrs	r4, r1
 8000588:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800058c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000590:	fa1f f78c 	uxth.w	r7, ip
 8000594:	fbb3 f0f8 	udiv	r0, r3, r8
 8000598:	fb08 3110 	mls	r1, r8, r0, r3
 800059c:	0c23      	lsrs	r3, r4, #16
 800059e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005a2:	fb00 f107 	mul.w	r1, r0, r7
 80005a6:	4299      	cmp	r1, r3
 80005a8:	d908      	bls.n	80005bc <__udivmoddi4+0x24c>
 80005aa:	eb1c 0303 	adds.w	r3, ip, r3
 80005ae:	f100 36ff 	add.w	r6, r0, #4294967295
 80005b2:	d22c      	bcs.n	800060e <__udivmoddi4+0x29e>
 80005b4:	4299      	cmp	r1, r3
 80005b6:	d92a      	bls.n	800060e <__udivmoddi4+0x29e>
 80005b8:	3802      	subs	r0, #2
 80005ba:	4463      	add	r3, ip
 80005bc:	1a5b      	subs	r3, r3, r1
 80005be:	b2a4      	uxth	r4, r4
 80005c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005c4:	fb08 3311 	mls	r3, r8, r1, r3
 80005c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005cc:	fb01 f307 	mul.w	r3, r1, r7
 80005d0:	42a3      	cmp	r3, r4
 80005d2:	d908      	bls.n	80005e6 <__udivmoddi4+0x276>
 80005d4:	eb1c 0404 	adds.w	r4, ip, r4
 80005d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005dc:	d213      	bcs.n	8000606 <__udivmoddi4+0x296>
 80005de:	42a3      	cmp	r3, r4
 80005e0:	d911      	bls.n	8000606 <__udivmoddi4+0x296>
 80005e2:	3902      	subs	r1, #2
 80005e4:	4464      	add	r4, ip
 80005e6:	1ae4      	subs	r4, r4, r3
 80005e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005ec:	e739      	b.n	8000462 <__udivmoddi4+0xf2>
 80005ee:	4604      	mov	r4, r0
 80005f0:	e6f0      	b.n	80003d4 <__udivmoddi4+0x64>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e706      	b.n	8000404 <__udivmoddi4+0x94>
 80005f6:	45c8      	cmp	r8, r9
 80005f8:	d2ae      	bcs.n	8000558 <__udivmoddi4+0x1e8>
 80005fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000602:	3801      	subs	r0, #1
 8000604:	e7a8      	b.n	8000558 <__udivmoddi4+0x1e8>
 8000606:	4631      	mov	r1, r6
 8000608:	e7ed      	b.n	80005e6 <__udivmoddi4+0x276>
 800060a:	4603      	mov	r3, r0
 800060c:	e799      	b.n	8000542 <__udivmoddi4+0x1d2>
 800060e:	4630      	mov	r0, r6
 8000610:	e7d4      	b.n	80005bc <__udivmoddi4+0x24c>
 8000612:	46d6      	mov	lr, sl
 8000614:	e77f      	b.n	8000516 <__udivmoddi4+0x1a6>
 8000616:	4463      	add	r3, ip
 8000618:	3802      	subs	r0, #2
 800061a:	e74d      	b.n	80004b8 <__udivmoddi4+0x148>
 800061c:	4606      	mov	r6, r0
 800061e:	4623      	mov	r3, r4
 8000620:	4608      	mov	r0, r1
 8000622:	e70f      	b.n	8000444 <__udivmoddi4+0xd4>
 8000624:	3e02      	subs	r6, #2
 8000626:	4463      	add	r3, ip
 8000628:	e730      	b.n	800048c <__udivmoddi4+0x11c>
 800062a:	bf00      	nop

0800062c <__aeabi_idiv0>:
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop

08000630 <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8000634:	4b07      	ldr	r3, [pc, #28]	@ (8000654 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800063c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000640:	bf0c      	ite	eq
 8000642:	2301      	moveq	r3, #1
 8000644:	2300      	movne	r3, #0
 8000646:	b2db      	uxtb	r3, r3
}
 8000648:	4618      	mov	r0, r3
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	e000e010 	.word	0xe000e010

08000658 <delay_us>:
#include "delay.h"
#include "stm32f4xx_ll_utils.h"
#include "stm32f4xx_ll_cortex.h"

void delay_us(uint8_t micro_seconds)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
    uint32_t ticks = micro_seconds * (SystemCoreClock / 1000000);
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	4a0c      	ldr	r2, [pc, #48]	@ (8000698 <delay_us+0x40>)
 8000666:	6812      	ldr	r2, [r2, #0]
 8000668:	490c      	ldr	r1, [pc, #48]	@ (800069c <delay_us+0x44>)
 800066a:	fba1 1202 	umull	r1, r2, r1, r2
 800066e:	0c92      	lsrs	r2, r2, #18
 8000670:	fb02 f303 	mul.w	r3, r2, r3
 8000674:	60fb      	str	r3, [r7, #12]
    while (ticks > 0)
 8000676:	e007      	b.n	8000688 <delay_us+0x30>
    {
        if (LL_SYSTICK_IsActiveCounterFlag())
 8000678:	f7ff ffda 	bl	8000630 <LL_SYSTICK_IsActiveCounterFlag>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d002      	beq.n	8000688 <delay_us+0x30>
        {
            ticks--;
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	3b01      	subs	r3, #1
 8000686:	60fb      	str	r3, [r7, #12]
    while (ticks > 0)
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d1f4      	bne.n	8000678 <delay_us+0x20>
        }
    }
}
 800068e:	bf00      	nop
 8000690:	bf00      	nop
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20002218 	.word	0x20002218
 800069c:	431bde83 	.word	0x431bde83

080006a0 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f043 0201 	orr.w	r2, r3, #1
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	601a      	str	r2, [r3, #0]
}
 80006b4:	bf00      	nop
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f023 0201 	bic.w	r2, r3, #1
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	601a      	str	r2, [r3, #0]
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	601a      	str	r2, [r3, #0]
}
 80006f4:	bf00      	nop
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	601a      	str	r2, [r3, #0]
}
 8000714:	bf00      	nop
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	f023 0201 	bic.w	r2, r3, #1
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	60da      	str	r2, [r3, #12]
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <LL_I2C_EnableIT_EVT>:
  * @rmtoll CR2          ITEVTEN       LL_I2C_EnableIT_EVT
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_EVT(I2C_TypeDef *I2Cx)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	605a      	str	r2, [r3, #4]
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <LL_I2C_EnableIT_BUF>:
  * @rmtoll CR2          ITBUFEN       LL_I2C_EnableIT_BUF
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_BUF(I2C_TypeDef *I2Cx)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	605a      	str	r2, [r3, #4]
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <LL_I2C_DisableIT_BUF>:
  * @rmtoll CR2          ITBUFEN       LL_I2C_DisableIT_BUF
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_BUF(I2C_TypeDef *I2Cx)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	605a      	str	r2, [r3, #4]
}
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <LL_I2C_EnableIT_ERR>:
  * @rmtoll CR2          ITERREN       LL_I2C_EnableIT_ERR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_ERR(I2C_TypeDef *I2Cx)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITERREN);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	605a      	str	r2, [r3, #4]
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	695b      	ldr	r3, [r3, #20]
 80007cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007d0:	2b80      	cmp	r3, #128	@ 0x80
 80007d2:	bf0c      	ite	eq
 80007d4:	2301      	moveq	r3, #1
 80007d6:	2300      	movne	r3, #0
 80007d8:	b2db      	uxtb	r3, r3
}
 80007da:	4618      	mov	r0, r3
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll SR1          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 80007e6:	b480      	push	{r7}
 80007e8:	b083      	sub	sp, #12
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007f6:	2b40      	cmp	r3, #64	@ 0x40
 80007f8:	bf0c      	ite	eq
 80007fa:	2301      	moveq	r3, #1
 80007fc:	2300      	movne	r3, #0
 80007fe:	b2db      	uxtb	r3, r3
}
 8000800:	4618      	mov	r0, r3
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	695b      	ldr	r3, [r3, #20]
 8000818:	f003 0302 	and.w	r3, r3, #2
 800081c:	2b02      	cmp	r3, #2
 800081e:	bf0c      	ite	eq
 8000820:	2301      	moveq	r3, #1
 8000822:	2300      	movne	r3, #0
 8000824:	b2db      	uxtb	r3, r3
}
 8000826:	4618      	mov	r0, r3
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <LL_I2C_IsActiveFlag_AF>:
  * @rmtoll SR1          AF            LL_I2C_IsActiveFlag_AF
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_AF(I2C_TypeDef *I2Cx)
{
 8000832:	b480      	push	{r7}
 8000834:	b083      	sub	sp, #12
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_AF) == (I2C_SR1_AF));
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000842:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000846:	bf0c      	ite	eq
 8000848:	2301      	moveq	r3, #1
 800084a:	2300      	movne	r3, #0
 800084c:	b2db      	uxtb	r3, r3
}
 800084e:	4618      	mov	r0, r3
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll SR1          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 800085a:	b480      	push	{r7}
 800085c:	b083      	sub	sp, #12
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_STOPF) == (I2C_SR1_STOPF));
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	f003 0310 	and.w	r3, r3, #16
 800086a:	2b10      	cmp	r3, #16
 800086c:	bf0c      	ite	eq
 800086e:	2301      	moveq	r3, #1
 8000870:	2300      	movne	r3, #0
 8000872:	b2db      	uxtb	r3, r3
}
 8000874:	4618      	mov	r0, r3
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <LL_I2C_IsActiveFlag_BERR>:
  * @rmtoll SR1          BERR          LL_I2C_IsActiveFlag_BERR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BERR(I2C_TypeDef *I2Cx)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BERR) == (I2C_SR1_BERR));
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	695b      	ldr	r3, [r3, #20]
 800088c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000890:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000894:	bf0c      	ite	eq
 8000896:	2301      	moveq	r3, #1
 8000898:	2300      	movne	r3, #0
 800089a:	b2db      	uxtb	r3, r3
}
 800089c:	4618      	mov	r0, r3
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <LL_I2C_IsActiveFlag_ARLO>:
  * @rmtoll SR1          ARLO          LL_I2C_IsActiveFlag_ARLO
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ARLO(I2C_TypeDef *I2Cx)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ARLO) == (I2C_SR1_ARLO));
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	695b      	ldr	r3, [r3, #20]
 80008b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80008b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80008bc:	bf0c      	ite	eq
 80008be:	2301      	moveq	r3, #1
 80008c0:	2300      	movne	r3, #0
 80008c2:	b2db      	uxtb	r3, r3
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <LL_I2C_IsActiveFlag_OVR>:
  * @rmtoll SR1          OVR           LL_I2C_IsActiveFlag_OVR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_OVR(I2C_TypeDef *I2Cx)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_OVR) == (I2C_SR1_OVR));
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	695b      	ldr	r3, [r3, #20]
 80008dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80008e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80008e4:	bf0c      	ite	eq
 80008e6:	2301      	moveq	r3, #1
 80008e8:	2300      	movne	r3, #0
 80008ea:	b2db      	uxtb	r3, r3
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	695b      	ldr	r3, [r3, #20]
 8000904:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000906:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800090e:	68fb      	ldr	r3, [r7, #12]
}
 8000910:	bf00      	nop
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <LL_I2C_ClearFlag_AF>:
  * @rmtoll SR1          AF            LL_I2C_ClearFlag_AF
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_AF(I2C_TypeDef *I2Cx)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_AF);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	695b      	ldr	r3, [r3, #20]
 8000928:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	615a      	str	r2, [r3, #20]
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <LL_I2C_ClearFlag_STOP>:
  *         CR1          PE            LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	695b      	ldr	r3, [r3, #20]
 8000948:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800094a:	68fb      	ldr	r3, [r7, #12]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f043 0201 	orr.w	r2, r3, #1
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	601a      	str	r2, [r3, #0]
}
 8000958:	bf00      	nop
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <LL_I2C_ClearFlag_BERR>:
  * @rmtoll SR1          BERR          LL_I2C_ClearFlag_BERR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_BERR(I2C_TypeDef *I2Cx)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_BERR);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	695b      	ldr	r3, [r3, #20]
 8000970:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	615a      	str	r2, [r3, #20]
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <LL_I2C_ClearFlag_ARLO>:
  * @rmtoll SR1          ARLO          LL_I2C_ClearFlag_ARLO
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ARLO(I2C_TypeDef *I2Cx)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_ARLO);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	695b      	ldr	r3, [r3, #20]
 8000990:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	615a      	str	r2, [r3, #20]
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <LL_I2C_ClearFlag_OVR>:
  * @rmtoll SR1          OVR           LL_I2C_ClearFlag_OVR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_OVR(I2C_TypeDef *I2Cx)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_OVR);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	695b      	ldr	r3, [r3, #20]
 80009b0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	615a      	str	r2, [r3, #20]
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <LL_I2C_GetTransferDirection>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_I2C_DIRECTION_WRITE
  *         @arg @ref LL_I2C_DIRECTION_READ
  */
__STATIC_INLINE uint32_t LL_I2C_GetTransferDirection(I2C_TypeDef *I2Cx)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(I2Cx->SR2, I2C_SR2_TRA));
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	f003 0304 	and.w	r3, r3, #4
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	691b      	ldr	r3, [r3, #16]
 80009ec:	b2db      	uxtb	r3, r3
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
 8000a02:	460b      	mov	r3, r1
 8000a04:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	691b      	ldr	r3, [r3, #16]
 8000a0a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8000a0e:	78fb      	ldrb	r3, [r7, #3]
 8000a10:	431a      	orrs	r2, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	611a      	str	r2, [r3, #16]
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
	...

08000a24 <I2C_ReInit>:

    while ((SysTick->VAL - start_tick) < ticks);
}

void I2C_ReInit(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
    LL_I2C_Disable(I2C_slave_obj.I2Cx);
 8000a2a:	4b24      	ldr	r3, [pc, #144]	@ (8000abc <I2C_ReInit+0x98>)
 8000a2c:	689b      	ldr	r3, [r3, #8]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff fe46 	bl	80006c0 <LL_I2C_Disable>
    LL_I2C_DeInit(I2C_slave_obj.I2Cx);
 8000a34:	4b21      	ldr	r3, [pc, #132]	@ (8000abc <I2C_ReInit+0x98>)
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f006 faa5 	bl	8006f88 <LL_I2C_DeInit>

    LL_I2C_EnableClockStretching(I2C_slave_obj.I2Cx);
 8000a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000abc <I2C_ReInit+0x98>)
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fe4c 	bl	80006e0 <LL_I2C_EnableClockStretching>
    LL_I2C_DisableGeneralCall(I2C_slave_obj.I2Cx);
 8000a48:	4b1c      	ldr	r3, [pc, #112]	@ (8000abc <I2C_ReInit+0x98>)
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fe57 	bl	8000700 <LL_I2C_DisableGeneralCall>
    LL_I2C_DisableOwnAddress2(I2C_slave_obj.I2Cx);
 8000a52:	4b1a      	ldr	r3, [pc, #104]	@ (8000abc <I2C_ReInit+0x98>)
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fe62 	bl	8000720 <LL_I2C_DisableOwnAddress2>

    LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	611a      	str	r2, [r3, #16]
 8000a6a:	615a      	str	r2, [r3, #20]
    I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	603b      	str	r3, [r7, #0]
    I2C_InitStruct.ClockSpeed = 100000;
 8000a70:	4b13      	ldr	r3, [pc, #76]	@ (8000ac0 <I2C_ReInit+0x9c>)
 8000a72:	607b      	str	r3, [r7, #4]
    I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60bb      	str	r3, [r7, #8]
    I2C_InitStruct.OwnAddress1 = 36;  // 0x12
 8000a78:	2324      	movs	r3, #36	@ 0x24
 8000a7a:	60fb      	str	r3, [r7, #12]
    I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000a7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a80:	613b      	str	r3, [r7, #16]
    I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000a82:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a86:	617b      	str	r3, [r7, #20]
    LL_I2C_Init(I2C_slave_obj.I2Cx, &I2C_InitStruct);
 8000a88:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <I2C_ReInit+0x98>)
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	463a      	mov	r2, r7
 8000a8e:	4611      	mov	r1, r2
 8000a90:	4618      	mov	r0, r3
 8000a92:	f006 fab3 	bl	8006ffc <LL_I2C_Init>

    LL_I2C_EnableIT_EVT(I2C_slave_obj.I2Cx);
 8000a96:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <I2C_ReInit+0x98>)
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fe50 	bl	8000740 <LL_I2C_EnableIT_EVT>
    LL_I2C_EnableIT_ERR(I2C_slave_obj.I2Cx);
 8000aa0:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <I2C_ReInit+0x98>)
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fe7b 	bl	80007a0 <LL_I2C_EnableIT_ERR>
    LL_I2C_Enable(I2C_slave_obj.I2Cx);
 8000aaa:	4b04      	ldr	r3, [pc, #16]	@ (8000abc <I2C_ReInit+0x98>)
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff fdf6 	bl	80006a0 <LL_I2C_Enable>
}
 8000ab4:	bf00      	nop
 8000ab6:	3718      	adds	r7, #24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20002400 	.word	0x20002400
 8000ac0:	000186a0 	.word	0x000186a0

08000ac4 <i2c_slave_clear>:

        rx_busy_counter = 0;
    }
}

void i2c_slave_clear(void) {
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
    I2C_slave_obj.reg_address = 0;
 8000ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8000af4 <i2c_slave_clear+0x30>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	715a      	strb	r2, [r3, #5]
    I2C_slave_obj.curr_idx = NONE;
 8000ace:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <i2c_slave_clear+0x30>)
 8000ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad4:	601a      	str	r2, [r3, #0]
    I2C_slave_obj.reg_addr_rcvd = 0;
 8000ad6:	4b07      	ldr	r3, [pc, #28]	@ (8000af4 <i2c_slave_clear+0x30>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	711a      	strb	r2, [r3, #4]
    I2C_slave_obj.ready_to_answer = 0;
 8000adc:	4b05      	ldr	r3, [pc, #20]	@ (8000af4 <i2c_slave_clear+0x30>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	719a      	strb	r2, [r3, #6]
    I2C_slave_obj.ready_to_write = 0;
 8000ae2:	4b04      	ldr	r3, [pc, #16]	@ (8000af4 <i2c_slave_clear+0x30>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	71da      	strb	r2, [r3, #7]
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	20002400 	.word	0x20002400

08000af8 <i2c_slave_init>:

int i2c_slave_init(I2C_TypeDef *I2Cx) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
    I2C_slave_obj.I2Cx = I2Cx;
 8000b00:	4a09      	ldr	r2, [pc, #36]	@ (8000b28 <i2c_slave_init+0x30>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6093      	str	r3, [r2, #8]
    I2C_Slave_Status = I2C_Status_OK;
 8000b06:	4b09      	ldr	r3, [pc, #36]	@ (8000b2c <i2c_slave_init+0x34>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
    i2c_slave_clear();
 8000b0c:	f7ff ffda 	bl	8000ac4 <i2c_slave_clear>
    memset(external_memory, 0, sizeof(external_memory));
 8000b10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b14:	2100      	movs	r1, #0
 8000b16:	4806      	ldr	r0, [pc, #24]	@ (8000b30 <i2c_slave_init+0x38>)
 8000b18:	f007 ffba 	bl	8008a90 <memset>

    return 0;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20002400 	.word	0x20002400
 8000b2c:	2000240c 	.word	0x2000240c
 8000b30:	20002300 	.word	0x20002300

08000b34 <I2C_event_IRQ>:

//static uint8_t data_index = 0;

void I2C_event_IRQ(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b088      	sub	sp, #32
 8000b38:	af00      	add	r7, sp, #0
	I2C_Slave_Status = I2C_Status_BUSY;
 8000b3a:	4b82      	ldr	r3, [pc, #520]	@ (8000d44 <I2C_event_IRQ+0x210>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	701a      	strb	r2, [r3, #0]

    if (LL_I2C_IsActiveFlag_ADDR(I2C_slave_obj.I2Cx)) {
 8000b40:	4b81      	ldr	r3, [pc, #516]	@ (8000d48 <I2C_event_IRQ+0x214>)
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff fe61 	bl	800080c <LL_I2C_IsActiveFlag_ADDR>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d01a      	beq.n	8000b86 <I2C_event_IRQ+0x52>
        LL_I2C_ClearFlag_ADDR(I2C_slave_obj.I2Cx);
 8000b50:	4b7d      	ldr	r3, [pc, #500]	@ (8000d48 <I2C_event_IRQ+0x214>)
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fecf 	bl	80008f8 <LL_I2C_ClearFlag_ADDR>
        if (LL_I2C_GetTransferDirection(I2C_slave_obj.I2Cx) == LL_I2C_DIRECTION_WRITE) {
 8000b5a:	4b7b      	ldr	r3, [pc, #492]	@ (8000d48 <I2C_event_IRQ+0x214>)
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff ff30 	bl	80009c4 <LL_I2C_GetTransferDirection>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b04      	cmp	r3, #4
 8000b68:	d108      	bne.n	8000b7c <I2C_event_IRQ+0x48>
            I2C_slave_obj.reg_addr_rcvd = 0;
 8000b6a:	4b77      	ldr	r3, [pc, #476]	@ (8000d48 <I2C_event_IRQ+0x214>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	711a      	strb	r2, [r3, #4]
            LL_I2C_EnableIT_BUF(I2C_slave_obj.I2Cx);
 8000b70:	4b75      	ldr	r3, [pc, #468]	@ (8000d48 <I2C_event_IRQ+0x214>)
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fdf3 	bl	8000760 <LL_I2C_EnableIT_BUF>
 8000b7a:	e004      	b.n	8000b86 <I2C_event_IRQ+0x52>
        } else {
//            I2C_slave_obj.curr_idx = reg_get_index(I2C_slave_obj.reg_address);
//            data_index = 0;

  //          UART_Send_String(&CONSOLE_UART, "FREAL\r\n");
            LL_I2C_EnableIT_BUF(I2C_slave_obj.I2Cx);
 8000b7c:	4b72      	ldr	r3, [pc, #456]	@ (8000d48 <I2C_event_IRQ+0x214>)
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fded 	bl	8000760 <LL_I2C_EnableIT_BUF>
        }
    }

    // Data Register Empty (Trans)
    if (LL_I2C_IsActiveFlag_TXE(I2C_slave_obj.I2Cx)) {
 8000b86:	4b70      	ldr	r3, [pc, #448]	@ (8000d48 <I2C_event_IRQ+0x214>)
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff fe18 	bl	80007c0 <LL_I2C_IsActiveFlag_TXE>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d05a      	beq.n	8000c4c <I2C_event_IRQ+0x118>

        char buffer[30];

        uint8_t data_to_send = 0x00;
 8000b96:	2300      	movs	r3, #0
 8000b98:	77fb      	strb	r3, [r7, #31]
        snprintf(buffer, sizeof(buffer), "\r\nI2C Before Index:[%d]\r\n", I2C_slave_obj.curr_idx);
 8000b9a:	4b6b      	ldr	r3, [pc, #428]	@ (8000d48 <I2C_event_IRQ+0x214>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4638      	mov	r0, r7
 8000ba0:	4a6a      	ldr	r2, [pc, #424]	@ (8000d4c <I2C_event_IRQ+0x218>)
 8000ba2:	211e      	movs	r1, #30
 8000ba4:	f007 ff40 	bl	8008a28 <sniprintf>
        UART_Send_String(&CONSOLE_UART, buffer);
 8000ba8:	463b      	mov	r3, r7
 8000baa:	4619      	mov	r1, r3
 8000bac:	4868      	ldr	r0, [pc, #416]	@ (8000d50 <I2C_event_IRQ+0x21c>)
 8000bae:	f000 fb1c 	bl	80011ea <UART_Send_String>

        if (I2C_slave_obj.curr_idx >= 0) {
 8000bb2:	4b65      	ldr	r3, [pc, #404]	@ (8000d48 <I2C_event_IRQ+0x214>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	db21      	blt.n	8000bfe <I2C_event_IRQ+0xca>
            snprintf(buffer, sizeof(buffer), "\r\nI2C Index:[%d]\r\n", I2C_slave_obj.curr_idx);
 8000bba:	4b63      	ldr	r3, [pc, #396]	@ (8000d48 <I2C_event_IRQ+0x214>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4638      	mov	r0, r7
 8000bc0:	4a64      	ldr	r2, [pc, #400]	@ (8000d54 <I2C_event_IRQ+0x220>)
 8000bc2:	211e      	movs	r1, #30
 8000bc4:	f007 ff30 	bl	8008a28 <sniprintf>
            UART_Send_String(&CONSOLE_UART,buffer);
 8000bc8:	463b      	mov	r3, r7
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4860      	ldr	r0, [pc, #384]	@ (8000d50 <I2C_event_IRQ+0x21c>)
 8000bce:	f000 fb0c 	bl	80011ea <UART_Send_String>

            data_to_send = g_registers[I2C_slave_obj.curr_idx].value;
 8000bd2:	4b5d      	ldr	r3, [pc, #372]	@ (8000d48 <I2C_event_IRQ+0x214>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	4960      	ldr	r1, [pc, #384]	@ (8000d58 <I2C_event_IRQ+0x224>)
 8000bd8:	4613      	mov	r3, r2
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	4413      	add	r3, r2
 8000bde:	440b      	add	r3, r1
 8000be0:	3302      	adds	r3, #2
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	77fb      	strb	r3, [r7, #31]

            snprintf(buffer, sizeof(buffer), "\r\nI2C GetDataIndex:[%d]\r\n", data_to_send);
 8000be6:	7ffb      	ldrb	r3, [r7, #31]
 8000be8:	4638      	mov	r0, r7
 8000bea:	4a5c      	ldr	r2, [pc, #368]	@ (8000d5c <I2C_event_IRQ+0x228>)
 8000bec:	211e      	movs	r1, #30
 8000bee:	f007 ff1b 	bl	8008a28 <sniprintf>
            UART_Send_String(&CONSOLE_UART,buffer);
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4856      	ldr	r0, [pc, #344]	@ (8000d50 <I2C_event_IRQ+0x21c>)
 8000bf8:	f000 faf7 	bl	80011ea <UART_Send_String>
 8000bfc:	e00f      	b.n	8000c1e <I2C_event_IRQ+0xea>

        } else if (I2C_slave_obj.curr_idx == -2) {
 8000bfe:	4b52      	ldr	r3, [pc, #328]	@ (8000d48 <I2C_event_IRQ+0x214>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f113 0f02 	cmn.w	r3, #2
 8000c06:	d10a      	bne.n	8000c1e <I2C_event_IRQ+0xea>
            data_to_send = external_memory[I2C_slave_obj.reg_address - 0x11];
 8000c08:	4b4f      	ldr	r3, [pc, #316]	@ (8000d48 <I2C_event_IRQ+0x214>)
 8000c0a:	795b      	ldrb	r3, [r3, #5]
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	3b11      	subs	r3, #17
 8000c10:	4a53      	ldr	r2, [pc, #332]	@ (8000d60 <I2C_event_IRQ+0x22c>)
 8000c12:	5cd3      	ldrb	r3, [r2, r3]
 8000c14:	77fb      	strb	r3, [r7, #31]
            UART_Send_String(&CONSOLE_UART,"FAIL\r\n");
 8000c16:	4953      	ldr	r1, [pc, #332]	@ (8000d64 <I2C_event_IRQ+0x230>)
 8000c18:	484d      	ldr	r0, [pc, #308]	@ (8000d50 <I2C_event_IRQ+0x21c>)
 8000c1a:	f000 fae6 	bl	80011ea <UART_Send_String>
        }

        snprintf(buffer, sizeof(buffer), "\r\nI2C Response:[%d]\r\n", data_to_send);
 8000c1e:	7ffb      	ldrb	r3, [r7, #31]
 8000c20:	4638      	mov	r0, r7
 8000c22:	4a51      	ldr	r2, [pc, #324]	@ (8000d68 <I2C_event_IRQ+0x234>)
 8000c24:	211e      	movs	r1, #30
 8000c26:	f007 feff 	bl	8008a28 <sniprintf>
        UART_Send_String(&CONSOLE_UART,buffer);
 8000c2a:	463b      	mov	r3, r7
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4848      	ldr	r0, [pc, #288]	@ (8000d50 <I2C_event_IRQ+0x21c>)
 8000c30:	f000 fadb 	bl	80011ea <UART_Send_String>

        LL_I2C_TransmitData8(I2C_slave_obj.I2Cx, data_to_send);
 8000c34:	4b44      	ldr	r3, [pc, #272]	@ (8000d48 <I2C_event_IRQ+0x214>)
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	7ffa      	ldrb	r2, [r7, #31]
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fedc 	bl	80009fa <LL_I2C_TransmitData8>
        LL_I2C_DisableIT_BUF(I2C_slave_obj.I2Cx);
 8000c42:	4b41      	ldr	r3, [pc, #260]	@ (8000d48 <I2C_event_IRQ+0x214>)
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fd9a 	bl	8000780 <LL_I2C_DisableIT_BUF>
    }

    // Data Register Not Empty (Recv)
    if (LL_I2C_IsActiveFlag_RXNE(I2C_slave_obj.I2Cx)) {
 8000c4c:	4b3e      	ldr	r3, [pc, #248]	@ (8000d48 <I2C_event_IRQ+0x214>)
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fdc8 	bl	80007e6 <LL_I2C_IsActiveFlag_RXNE>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d056      	beq.n	8000d0a <I2C_event_IRQ+0x1d6>
        uint8_t received = LL_I2C_ReceiveData8(I2C_slave_obj.I2Cx);
 8000c5c:	4b3a      	ldr	r3, [pc, #232]	@ (8000d48 <I2C_event_IRQ+0x214>)
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff febd 	bl	80009e0 <LL_I2C_ReceiveData8>
 8000c66:	4603      	mov	r3, r0
 8000c68:	77bb      	strb	r3, [r7, #30]
        if (!I2C_slave_obj.reg_addr_rcvd)
 8000c6a:	4b37      	ldr	r3, [pc, #220]	@ (8000d48 <I2C_event_IRQ+0x214>)
 8000c6c:	791b      	ldrb	r3, [r3, #4]
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d11c      	bne.n	8000cae <I2C_event_IRQ+0x17a>
        {
            I2C_slave_obj.reg_address = received;
 8000c74:	4a34      	ldr	r2, [pc, #208]	@ (8000d48 <I2C_event_IRQ+0x214>)
 8000c76:	7fbb      	ldrb	r3, [r7, #30]
 8000c78:	7153      	strb	r3, [r2, #5]
            UART_Printf(&CONSOLE_UART, "Address:[%d]\n", received);
 8000c7a:	7fbb      	ldrb	r3, [r7, #30]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	493b      	ldr	r1, [pc, #236]	@ (8000d6c <I2C_event_IRQ+0x238>)
 8000c80:	4833      	ldr	r0, [pc, #204]	@ (8000d50 <I2C_event_IRQ+0x21c>)
 8000c82:	f000 fb41 	bl	8001308 <UART_Printf>

            I2C_slave_obj.reg_addr_rcvd = 1;
 8000c86:	4b30      	ldr	r3, [pc, #192]	@ (8000d48 <I2C_event_IRQ+0x214>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	711a      	strb	r2, [r3, #4]
            I2C_slave_obj.curr_idx = reg_get_index(I2C_slave_obj.reg_address);
 8000c8c:	4b2e      	ldr	r3, [pc, #184]	@ (8000d48 <I2C_event_IRQ+0x214>)
 8000c8e:	795b      	ldrb	r3, [r3, #5]
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 f8f4 	bl	8000e80 <reg_get_index>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	4a2b      	ldr	r2, [pc, #172]	@ (8000d48 <I2C_event_IRQ+0x214>)
 8000c9c:	6013      	str	r3, [r2, #0]
            UART_Printf(&CONSOLE_UART, "GET INDEX:[%d]\n", I2C_slave_obj.curr_idx);
 8000c9e:	4b2a      	ldr	r3, [pc, #168]	@ (8000d48 <I2C_event_IRQ+0x214>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	4932      	ldr	r1, [pc, #200]	@ (8000d70 <I2C_event_IRQ+0x23c>)
 8000ca6:	482a      	ldr	r0, [pc, #168]	@ (8000d50 <I2C_event_IRQ+0x21c>)
 8000ca8:	f000 fb2e 	bl	8001308 <UART_Printf>
 8000cac:	e02d      	b.n	8000d0a <I2C_event_IRQ+0x1d6>
        }
        else
        {
            if (I2C_slave_obj.curr_idx >= 0)
 8000cae:	4b26      	ldr	r3, [pc, #152]	@ (8000d48 <I2C_event_IRQ+0x214>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	db15      	blt.n	8000ce2 <I2C_event_IRQ+0x1ae>
            {
                if (g_registers[I2C_slave_obj.curr_idx].access == FULL_ACCESS)
 8000cb6:	4b24      	ldr	r3, [pc, #144]	@ (8000d48 <I2C_event_IRQ+0x214>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	4927      	ldr	r1, [pc, #156]	@ (8000d58 <I2C_event_IRQ+0x224>)
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	4413      	add	r3, r2
 8000cc2:	440b      	add	r3, r1
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b03      	cmp	r3, #3
 8000cca:	d116      	bne.n	8000cfa <I2C_event_IRQ+0x1c6>
                {
                    g_registers[I2C_slave_obj.curr_idx].value = received;
 8000ccc:	4b1e      	ldr	r3, [pc, #120]	@ (8000d48 <I2C_event_IRQ+0x214>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4921      	ldr	r1, [pc, #132]	@ (8000d58 <I2C_event_IRQ+0x224>)
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	4413      	add	r3, r2
 8000cd8:	440b      	add	r3, r1
 8000cda:	3302      	adds	r3, #2
 8000cdc:	7fba      	ldrb	r2, [r7, #30]
 8000cde:	701a      	strb	r2, [r3, #0]
 8000ce0:	e00b      	b.n	8000cfa <I2C_event_IRQ+0x1c6>
                }
            }
            else if (I2C_slave_obj.curr_idx == -2)
 8000ce2:	4b19      	ldr	r3, [pc, #100]	@ (8000d48 <I2C_event_IRQ+0x214>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f113 0f02 	cmn.w	r3, #2
 8000cea:	d106      	bne.n	8000cfa <I2C_event_IRQ+0x1c6>
            {
                external_memory[I2C_slave_obj.reg_address - 0x11] = received;
 8000cec:	4b16      	ldr	r3, [pc, #88]	@ (8000d48 <I2C_event_IRQ+0x214>)
 8000cee:	795b      	ldrb	r3, [r3, #5]
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	3b11      	subs	r3, #17
 8000cf4:	491a      	ldr	r1, [pc, #104]	@ (8000d60 <I2C_event_IRQ+0x22c>)
 8000cf6:	7fba      	ldrb	r2, [r7, #30]
 8000cf8:	54ca      	strb	r2, [r1, r3]
            }
            I2C_slave_obj.reg_addr_rcvd = 0;
 8000cfa:	4b13      	ldr	r3, [pc, #76]	@ (8000d48 <I2C_event_IRQ+0x214>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	711a      	strb	r2, [r3, #4]
            LL_I2C_DisableIT_BUF(I2C_slave_obj.I2Cx);
 8000d00:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <I2C_event_IRQ+0x214>)
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fd3b 	bl	8000780 <LL_I2C_DisableIT_BUF>
        }
    }

    // STOP condition detected
    if (LL_I2C_IsActiveFlag_STOP(I2C_slave_obj.I2Cx)) {
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d48 <I2C_event_IRQ+0x214>)
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fda3 	bl	800085a <LL_I2C_IsActiveFlag_STOP>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d00f      	beq.n	8000d3a <I2C_event_IRQ+0x206>
        LL_I2C_ClearFlag_STOP(I2C_slave_obj.I2Cx);
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <I2C_event_IRQ+0x214>)
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fe0c 	bl	800093c <LL_I2C_ClearFlag_STOP>
        I2C_slave_obj.reg_addr_rcvd = 0;
 8000d24:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <I2C_event_IRQ+0x214>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	711a      	strb	r2, [r3, #4]
//        I2C_slave_obj.curr_idx = NONE;
//        data_index = 0;
        LL_I2C_DisableIT_BUF(I2C_slave_obj.I2Cx);
 8000d2a:	4b07      	ldr	r3, [pc, #28]	@ (8000d48 <I2C_event_IRQ+0x214>)
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fd26 	bl	8000780 <LL_I2C_DisableIT_BUF>
        I2C_Slave_Status = I2C_Status_OK;
 8000d34:	4b03      	ldr	r3, [pc, #12]	@ (8000d44 <I2C_event_IRQ+0x210>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]
    }
}
 8000d3a:	bf00      	nop
 8000d3c:	3720      	adds	r7, #32
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	2000240c 	.word	0x2000240c
 8000d48:	20002400 	.word	0x20002400
 8000d4c:	080093a8 	.word	0x080093a8
 8000d50:	20002468 	.word	0x20002468
 8000d54:	080093c4 	.word	0x080093c4
 8000d58:	20002410 	.word	0x20002410
 8000d5c:	080093d8 	.word	0x080093d8
 8000d60:	20002300 	.word	0x20002300
 8000d64:	080093f4 	.word	0x080093f4
 8000d68:	080093fc 	.word	0x080093fc
 8000d6c:	08009414 	.word	0x08009414
 8000d70:	08009424 	.word	0x08009424

08000d74 <I2C_error_IRQ>:

void I2C_error_IRQ(void) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
    // Handle errors
	UART_Send_String(&CONSOLE_UART,"I2C ERROR!!!\r\n");
 8000d78:	4921      	ldr	r1, [pc, #132]	@ (8000e00 <I2C_error_IRQ+0x8c>)
 8000d7a:	4822      	ldr	r0, [pc, #136]	@ (8000e04 <I2C_error_IRQ+0x90>)
 8000d7c:	f000 fa35 	bl	80011ea <UART_Send_String>
	I2C_Slave_Status = I2C_Status_OK;
 8000d80:	4b21      	ldr	r3, [pc, #132]	@ (8000e08 <I2C_error_IRQ+0x94>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
    if (LL_I2C_IsActiveFlag_BERR(I2C_slave_obj.I2Cx)) {
 8000d86:	4b21      	ldr	r3, [pc, #132]	@ (8000e0c <I2C_error_IRQ+0x98>)
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fd78 	bl	8000880 <LL_I2C_IsActiveFlag_BERR>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d004      	beq.n	8000da0 <I2C_error_IRQ+0x2c>

        LL_I2C_ClearFlag_BERR(I2C_slave_obj.I2Cx);
 8000d96:	4b1d      	ldr	r3, [pc, #116]	@ (8000e0c <I2C_error_IRQ+0x98>)
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fde2 	bl	8000964 <LL_I2C_ClearFlag_BERR>
    }

    if (LL_I2C_IsActiveFlag_ARLO(I2C_slave_obj.I2Cx)) {
 8000da0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e0c <I2C_error_IRQ+0x98>)
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fd7f 	bl	80008a8 <LL_I2C_IsActiveFlag_ARLO>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d004      	beq.n	8000dba <I2C_error_IRQ+0x46>
        LL_I2C_ClearFlag_ARLO(I2C_slave_obj.I2Cx);
 8000db0:	4b16      	ldr	r3, [pc, #88]	@ (8000e0c <I2C_error_IRQ+0x98>)
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fde5 	bl	8000984 <LL_I2C_ClearFlag_ARLO>
    }

    if (LL_I2C_IsActiveFlag_AF(I2C_slave_obj.I2Cx)) {
 8000dba:	4b14      	ldr	r3, [pc, #80]	@ (8000e0c <I2C_error_IRQ+0x98>)
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff fd37 	bl	8000832 <LL_I2C_IsActiveFlag_AF>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d004      	beq.n	8000dd4 <I2C_error_IRQ+0x60>
        LL_I2C_ClearFlag_AF(I2C_slave_obj.I2Cx);
 8000dca:	4b10      	ldr	r3, [pc, #64]	@ (8000e0c <I2C_error_IRQ+0x98>)
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fda4 	bl	800091c <LL_I2C_ClearFlag_AF>
    }

    if (LL_I2C_IsActiveFlag_OVR(I2C_slave_obj.I2Cx)) {
 8000dd4:	4b0d      	ldr	r3, [pc, #52]	@ (8000e0c <I2C_error_IRQ+0x98>)
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fd79 	bl	80008d0 <LL_I2C_IsActiveFlag_OVR>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d004      	beq.n	8000dee <I2C_error_IRQ+0x7a>
        LL_I2C_ClearFlag_OVR(I2C_slave_obj.I2Cx);
 8000de4:	4b09      	ldr	r3, [pc, #36]	@ (8000e0c <I2C_error_IRQ+0x98>)
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fddb 	bl	80009a4 <LL_I2C_ClearFlag_OVR>
    }
    I2C_ReInit();
 8000dee:	f7ff fe19 	bl	8000a24 <I2C_ReInit>
    i2c_slave_init(I2C_slave_obj.I2Cx);
 8000df2:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <I2C_error_IRQ+0x98>)
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fe7e 	bl	8000af8 <i2c_slave_init>
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	08009434 	.word	0x08009434
 8000e04:	20002468 	.word	0x20002468
 8000e08:	2000240c 	.word	0x2000240c
 8000e0c:	20002400 	.word	0x20002400

08000e10 <register_init>:
volatile I2C_Slave_StatusTypeDef I2C_Slave_Status = I2C_Status_OK;

reg_t g_registers[PASSIVE_REGISTERS + 1];

void register_init(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
    g_registers[0].reg_addr = REG_VERSION_ADDR;
 8000e16:	4b19      	ldr	r3, [pc, #100]	@ (8000e7c <register_init+0x6c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]
    g_registers[0].access = READ_ONLY;
 8000e1c:	4b17      	ldr	r3, [pc, #92]	@ (8000e7c <register_init+0x6c>)
 8000e1e:	2202      	movs	r2, #2
 8000e20:	705a      	strb	r2, [r3, #1]
    g_registers[0].value = 0x12;
 8000e22:	4b16      	ldr	r3, [pc, #88]	@ (8000e7c <register_init+0x6c>)
 8000e24:	2212      	movs	r2, #18
 8000e26:	709a      	strb	r2, [r3, #2]

    for (uint8_t i = 1; i <= PASSIVE_REGISTERS; i++)
 8000e28:	2301      	movs	r3, #1
 8000e2a:	71fb      	strb	r3, [r7, #7]
 8000e2c:	e01c      	b.n	8000e68 <register_init+0x58>
    {
        g_registers[i].reg_addr = i;
 8000e2e:	79fa      	ldrb	r2, [r7, #7]
 8000e30:	4912      	ldr	r1, [pc, #72]	@ (8000e7c <register_init+0x6c>)
 8000e32:	4613      	mov	r3, r2
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	4413      	add	r3, r2
 8000e38:	440b      	add	r3, r1
 8000e3a:	79fa      	ldrb	r2, [r7, #7]
 8000e3c:	701a      	strb	r2, [r3, #0]
        g_registers[i].access = FULL_ACCESS;
 8000e3e:	79fa      	ldrb	r2, [r7, #7]
 8000e40:	490e      	ldr	r1, [pc, #56]	@ (8000e7c <register_init+0x6c>)
 8000e42:	4613      	mov	r3, r2
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	4413      	add	r3, r2
 8000e48:	440b      	add	r3, r1
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	701a      	strb	r2, [r3, #0]
        g_registers[i].value = i;
 8000e50:	79fa      	ldrb	r2, [r7, #7]
 8000e52:	490a      	ldr	r1, [pc, #40]	@ (8000e7c <register_init+0x6c>)
 8000e54:	4613      	mov	r3, r2
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	4413      	add	r3, r2
 8000e5a:	440b      	add	r3, r1
 8000e5c:	3302      	adds	r3, #2
 8000e5e:	79fa      	ldrb	r2, [r7, #7]
 8000e60:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 1; i <= PASSIVE_REGISTERS; i++)
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	3301      	adds	r3, #1
 8000e66:	71fb      	strb	r3, [r7, #7]
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	2b10      	cmp	r3, #16
 8000e6c:	d9df      	bls.n	8000e2e <register_init+0x1e>
    }
}
 8000e6e:	bf00      	nop
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	20002410 	.word	0x20002410

08000e80 <reg_get_index>:

int reg_get_index(uint8_t address)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
    if (address == REG_VERSION_ADDR)
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d101      	bne.n	8000e94 <reg_get_index+0x14>
    {
        return 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	e00f      	b.n	8000eb4 <reg_get_index+0x34>
    }
    if (address >= 0x01 && address <= PASSIVE_REGISTERS)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d004      	beq.n	8000ea4 <reg_get_index+0x24>
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	2b10      	cmp	r3, #16
 8000e9e:	d801      	bhi.n	8000ea4 <reg_get_index+0x24>
    {
        return address;
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	e007      	b.n	8000eb4 <reg_get_index+0x34>
    }
    if (address >= 0x11 && address <= 0xFF)
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	2b10      	cmp	r3, #16
 8000ea8:	d902      	bls.n	8000eb0 <reg_get_index+0x30>
    {
        return -2;
 8000eaa:	f06f 0301 	mvn.w	r3, #1
 8000eae:	e001      	b.n	8000eb4 <reg_get_index+0x34>
    }
    return -1;
 8000eb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	db0a      	blt.n	8000eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	490c      	ldr	r1, [pc, #48]	@ (8000f0c <__NVIC_SetPriority+0x4c>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	0112      	lsls	r2, r2, #4
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee8:	e00a      	b.n	8000f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4908      	ldr	r1, [pc, #32]	@ (8000f10 <__NVIC_SetPriority+0x50>)
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	f003 030f 	and.w	r3, r3, #15
 8000ef6:	3b04      	subs	r3, #4
 8000ef8:	0112      	lsls	r2, r2, #4
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	440b      	add	r3, r1
 8000efe:	761a      	strb	r2, [r3, #24]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000e100 	.word	0xe000e100
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f24:	d301      	bcc.n	8000f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00f      	b.n	8000f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f54 <SysTick_Config+0x40>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f32:	210f      	movs	r1, #15
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	f7ff ffc2 	bl	8000ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f3c:	4b05      	ldr	r3, [pc, #20]	@ (8000f54 <SysTick_Config+0x40>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f42:	4b04      	ldr	r3, [pc, #16]	@ (8000f54 <SysTick_Config+0x40>)
 8000f44:	2207      	movs	r2, #7
 8000f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	e000e010 	.word	0xe000e010

08000f58 <systick_timer_start>:

#include "systick.h"
#include "stm32f4xx.h"

void systick_timer_start(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
    // Reset SysTick counter value
   // SysTick->VAL = 0;

    // Enable SysTick counter
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8000f5c:	4b05      	ldr	r3, [pc, #20]	@ (8000f74 <systick_timer_start+0x1c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a04      	ldr	r2, [pc, #16]	@ (8000f74 <systick_timer_start+0x1c>)
 8000f62:	f043 0301 	orr.w	r3, r3, #1
 8000f66:	6013      	str	r3, [r2, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000e010 	.word	0xe000e010

08000f78 <systick_timer_init>:
    // Disable SysTick counter
   // SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
}

void systick_timer_init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
    // Set SysTick to trigger interrupt every 1ms
    SysTick_Config(SystemCoreClock/1000);
 8000f7c:	4b05      	ldr	r3, [pc, #20]	@ (8000f94 <systick_timer_init+0x1c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a05      	ldr	r2, [pc, #20]	@ (8000f98 <systick_timer_init+0x20>)
 8000f82:	fba2 2303 	umull	r2, r3, r2, r3
 8000f86:	099b      	lsrs	r3, r3, #6
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ffc3 	bl	8000f14 <SysTick_Config>
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20002218 	.word	0x20002218
 8000f98:	10624dd3 	.word	0x10624dd3

08000f9c <__NVIC_EnableIRQ>:
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	db0b      	blt.n	8000fc6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	f003 021f 	and.w	r2, r3, #31
 8000fb4:	4907      	ldr	r1, [pc, #28]	@ (8000fd4 <__NVIC_EnableIRQ+0x38>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	095b      	lsrs	r3, r3, #5
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000e100 	.word	0xe000e100

08000fd8 <__NVIC_DisableIRQ>:
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	db12      	blt.n	8001010 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	f003 021f 	and.w	r2, r3, #31
 8000ff0:	490a      	ldr	r1, [pc, #40]	@ (800101c <__NVIC_DisableIRQ+0x44>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	095b      	lsrs	r3, r3, #5
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffe:	3320      	adds	r3, #32
 8001000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001004:	f3bf 8f4f 	dsb	sy
}
 8001008:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800100a:	f3bf 8f6f 	isb	sy
}
 800100e:	bf00      	nop
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000e100 	.word	0xe000e100

08001020 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8001020:	b480      	push	{r7}
 8001022:	b089      	sub	sp, #36	@ 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	330c      	adds	r3, #12
 800102c:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	e853 3f00 	ldrex	r3, [r3]
 8001034:	60bb      	str	r3, [r7, #8]
   return(result);
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	f043 0320 	orr.w	r3, r3, #32
 800103c:	61fb      	str	r3, [r7, #28]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	330c      	adds	r3, #12
 8001042:	69fa      	ldr	r2, [r7, #28]
 8001044:	61ba      	str	r2, [r7, #24]
 8001046:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001048:	6979      	ldr	r1, [r7, #20]
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	e841 2300 	strex	r3, r2, [r1]
 8001050:	613b      	str	r3, [r7, #16]
   return(result);
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1e7      	bne.n	8001028 <LL_USART_EnableIT_RXNE+0x8>
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	3724      	adds	r7, #36	@ 0x24
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8001066:	b480      	push	{r7}
 8001068:	b089      	sub	sp, #36	@ 0x24
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	330c      	adds	r3, #12
 8001072:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	e853 3f00 	ldrex	r3, [r3]
 800107a:	60bb      	str	r3, [r7, #8]
   return(result);
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001082:	61fb      	str	r3, [r7, #28]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	330c      	adds	r3, #12
 8001088:	69fa      	ldr	r2, [r7, #28]
 800108a:	61ba      	str	r2, [r7, #24]
 800108c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800108e:	6979      	ldr	r1, [r7, #20]
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	e841 2300 	strex	r3, r2, [r1]
 8001096:	613b      	str	r3, [r7, #16]
   return(result);
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1e7      	bne.n	800106e <LL_USART_EnableIT_TXE+0x8>
}
 800109e:	bf00      	nop
 80010a0:	bf00      	nop
 80010a2:	3724      	adds	r7, #36	@ 0x24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	@ 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	330c      	adds	r3, #12
 80010b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	e853 3f00 	ldrex	r3, [r3]
 80010c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80010c8:	61fb      	str	r3, [r7, #28]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	330c      	adds	r3, #12
 80010ce:	69fa      	ldr	r2, [r7, #28]
 80010d0:	61ba      	str	r2, [r7, #24]
 80010d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80010d4:	6979      	ldr	r1, [r7, #20]
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	e841 2300 	strex	r3, r2, [r1]
 80010dc:	613b      	str	r3, [r7, #16]
   return(result);
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1e7      	bne.n	80010b4 <LL_USART_DisableIT_TXE+0x8>
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3724      	adds	r7, #36	@ 0x24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001102:	2b80      	cmp	r3, #128	@ 0x80
 8001104:	bf0c      	ite	eq
 8001106:	2301      	moveq	r3, #1
 8001108:	2300      	movne	r3, #0
 800110a:	b2db      	uxtb	r3, r3
}
 800110c:	4618      	mov	r0, r3
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001124:	78fa      	ldrb	r2, [r7, #3]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	605a      	str	r2, [r3, #4]
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <UART_Init>:
 */

void UART_Init(uart_stdio_typedef* p_uart, USART_TypeDef* _handle,
                IRQn_Type _irqn, char* _p_TX_buffer, char* _p_RX_buffer,
                uint16_t _TX_size, uint16_t _RX_size)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	603b      	str	r3, [r7, #0]
 8001142:	4613      	mov	r3, r2
 8001144:	71fb      	strb	r3, [r7, #7]
    p_uart->handle  = _handle;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	68ba      	ldr	r2, [r7, #8]
 800114a:	601a      	str	r2, [r3, #0]
    p_uart->irqn    = _irqn;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	79fa      	ldrb	r2, [r7, #7]
 8001150:	711a      	strb	r2, [r3, #4]
    p_uart->TX_size = _TX_size;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	8bba      	ldrh	r2, [r7, #28]
 8001156:	80da      	strh	r2, [r3, #6]
    p_uart->RX_size = _RX_size;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	8c3a      	ldrh	r2, [r7, #32]
 800115c:	811a      	strh	r2, [r3, #8]

    p_uart->p_TX_buffer = _p_TX_buffer;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	60da      	str	r2, [r3, #12]
    p_uart->p_RX_buffer = _p_RX_buffer;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	615a      	str	r2, [r3, #20]

    p_uart->TX_write_index  = 0;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2200      	movs	r2, #0
 800116e:	821a      	strh	r2, [r3, #16]
    p_uart->TX_read_index   = 0;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2200      	movs	r2, #0
 8001174:	825a      	strh	r2, [r3, #18]
    p_uart->RX_write_index  = 0;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2200      	movs	r2, #0
 800117a:	831a      	strh	r2, [r3, #24]
    p_uart->RX_read_index   = 0;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2200      	movs	r2, #0
 8001180:	835a      	strh	r2, [r3, #26]

    if(TX_BUFFER_SIZE(p_uart) != 0)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	88db      	ldrh	r3, [r3, #6]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d006      	beq.n	8001198 <UART_Init+0x62>
    {
        //p_uart->p_TX_buffer = (uint8_t *)malloc(TX_BUFFER_SIZE(p_uart) * sizeof(uint8_t));
        memset((void *)p_uart->p_TX_buffer, 0, sizeof(p_uart->p_TX_buffer));
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	2204      	movs	r2, #4
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f007 fc7c 	bl	8008a90 <memset>
    }

    if(RX_BUFFER_SIZE(p_uart) != 0)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	891b      	ldrh	r3, [r3, #8]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d006      	beq.n	80011ae <UART_Init+0x78>
    {
        //p_uart->p_RX_buffer = (uint8_t *)malloc(RX_BUFFER_SIZE(p_uart) * sizeof(uint8_t));
        memset((void *)p_uart->p_RX_buffer, 0, sizeof(p_uart->p_RX_buffer));
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	2204      	movs	r2, #4
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f007 fc71 	bl	8008a90 <memset>
    }

    // Disable the TX IT
    LL_USART_DisableIT_TXE(p_uart->handle);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ff7a 	bl	80010ac <LL_USART_DisableIT_TXE>

    // Start the RX IT, it will only run when there is a data send to the MCU.
    LL_USART_EnableIT_RXNE(p_uart->handle);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff2f 	bl	8001020 <LL_USART_EnableIT_RXNE>
}
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <UART_Send_Char>:
//!
//! \param pcBuf points to a buffer containing the string to transmit.
//
//*****************************************************************************
void UART_Send_Char(uart_stdio_typedef* p_uart, const char Char)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	460b      	mov	r3, r1
 80011d4:	70fb      	strb	r3, [r7, #3]
	UART_Write(p_uart, &Char, 1);
 80011d6:	1cfb      	adds	r3, r7, #3
 80011d8:	2201      	movs	r2, #1
 80011da:	4619      	mov	r1, r3
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f000 f817 	bl	8001210 <UART_Write>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <UART_Send_String>:
//!
//! \param pcBuf points to a buffer containing the string to transmit.
//
//*****************************************************************************
void UART_Send_String(uart_stdio_typedef* p_uart, const char *pcBuf)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	6039      	str	r1, [r7, #0]
	UART_Write(p_uart, pcBuf, strlen(pcBuf));
 80011f4:	6838      	ldr	r0, [r7, #0]
 80011f6:	f7fe fff5 	bl	80001e4 <strlen>
 80011fa:	4603      	mov	r3, r0
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	461a      	mov	r2, r3
 8001200:	6839      	ldr	r1, [r7, #0]
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 f804 	bl	8001210 <UART_Write>
}
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <UART_Write>:
//!
//! \return Returns the count of characters written.
//
//*****************************************************************************
uint16_t UART_Write(uart_stdio_typedef* p_uart, const char *pcBuf, uint16_t ui16Len)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	4613      	mov	r3, r2
 800121c:	80fb      	strh	r3, [r7, #6]
    // Check for valid arguments.
    //
    //
    // Send the characters
    //
    for(uIdx = 0; uIdx < ui16Len; uIdx++)
 800121e:	2300      	movs	r3, #0
 8001220:	75fb      	strb	r3, [r7, #23]
 8001222:	e053      	b.n	80012cc <UART_Write+0xbc>
    {
        //
        // If the character to the UART is \n, then add a \r before it so that
        // \n is translated to \n\r in the output. This is for the enter key.
        //
        if(pcBuf[uIdx] == '\n')
 8001224:	7dfb      	ldrb	r3, [r7, #23]
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	4413      	add	r3, r2
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b0a      	cmp	r3, #10
 800122e:	d11e      	bne.n	800126e <UART_Write+0x5e>
        {
            if(!TX_BUFFER_FULL(p_uart))
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f103 0012 	add.w	r0, r3, #18
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f103 0110 	add.w	r1, r3, #16
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	88db      	ldrh	r3, [r3, #6]
 8001240:	461a      	mov	r2, r3
 8001242:	f000 fa8b 	bl	800175c <UART_is_buffer_full>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d145      	bne.n	80012d8 <UART_Write+0xc8>
            {
                p_uart->p_TX_buffer[p_uart->TX_write_index] = '\r';
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	68fa      	ldr	r2, [r7, #12]
 8001252:	8a12      	ldrh	r2, [r2, #16]
 8001254:	b292      	uxth	r2, r2
 8001256:	4413      	add	r3, r2
 8001258:	220d      	movs	r2, #13
 800125a:	701a      	strb	r2, [r3, #0]
                ADVANCE_TX_WRITE_INDEX(p_uart);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f103 0210 	add.w	r2, r3, #16
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	88db      	ldrh	r3, [r3, #6]
 8001266:	4619      	mov	r1, r3
 8001268:	4610      	mov	r0, r2
 800126a:	f000 fab0 	bl	80017ce <UART_advance_buffer_index>
                //
                break;
            }
        }

        if(!TX_BUFFER_FULL(p_uart))
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f103 0012 	add.w	r0, r3, #18
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f103 0110 	add.w	r1, r3, #16
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	88db      	ldrh	r3, [r3, #6]
 800127e:	461a      	mov	r2, r3
 8001280:	f000 fa6c 	bl	800175c <UART_is_buffer_full>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d114      	bne.n	80012b4 <UART_Write+0xa4>
        {
        	p_uart->p_TX_buffer[p_uart->TX_write_index] = pcBuf[uIdx];
 800128a:	7dfb      	ldrb	r3, [r7, #23]
 800128c:	68ba      	ldr	r2, [r7, #8]
 800128e:	441a      	add	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	68f9      	ldr	r1, [r7, #12]
 8001296:	8a09      	ldrh	r1, [r1, #16]
 8001298:	b289      	uxth	r1, r1
 800129a:	440b      	add	r3, r1
 800129c:	7812      	ldrb	r2, [r2, #0]
 800129e:	701a      	strb	r2, [r3, #0]
            ADVANCE_TX_WRITE_INDEX(p_uart);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f103 0210 	add.w	r2, r3, #16
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	88db      	ldrh	r3, [r3, #6]
 80012aa:	4619      	mov	r1, r3
 80012ac:	4610      	mov	r0, r2
 80012ae:	f000 fa8e 	bl	80017ce <UART_advance_buffer_index>
 80012b2:	e008      	b.n	80012c6 <UART_Write+0xb6>
        else
        {
            //
            // Buffer is full - discard remaining characters and return.
            //
            p_uart->p_TX_buffer[p_uart->TX_write_index] = '\r';
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	68fa      	ldr	r2, [r7, #12]
 80012ba:	8a12      	ldrh	r2, [r2, #16]
 80012bc:	b292      	uxth	r2, r2
 80012be:	4413      	add	r3, r2
 80012c0:	220d      	movs	r2, #13
 80012c2:	701a      	strb	r2, [r3, #0]
            break;
 80012c4:	e009      	b.n	80012da <UART_Write+0xca>
    for(uIdx = 0; uIdx < ui16Len; uIdx++)
 80012c6:	7dfb      	ldrb	r3, [r7, #23]
 80012c8:	3301      	adds	r3, #1
 80012ca:	75fb      	strb	r3, [r7, #23]
 80012cc:	7dfb      	ldrb	r3, [r7, #23]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	88fa      	ldrh	r2, [r7, #6]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d8a6      	bhi.n	8001224 <UART_Write+0x14>
 80012d6:	e000      	b.n	80012da <UART_Write+0xca>
                break;
 80012d8:	bf00      	nop

    //
    // If the usart txe irq is disable, this mean an usart phase is finished
    // we need to enable the txe irq and kick start the transmit process.
    //
    if (LL_USART_IsEnabledIT_TXE(p_uart->handle) == false)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff ff07 	bl	80010f2 <LL_USART_IsEnabledIT_TXE>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d107      	bne.n	80012fa <UART_Write+0xea>
        // if turn on TXE b4 prime transmit create a
        // bug where the index = 2 char don't get
        // send.

        //LL_USART_EnableIT_TXE(p_uart->handle);
        UART_Prime_Transmit(p_uart);
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f000 fa8b 	bl	8001806 <UART_Prime_Transmit>
        LL_USART_EnableIT_TXE(p_uart->handle);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff feb6 	bl	8001066 <LL_USART_EnableIT_TXE>
    }

    //
    // Return the number of characters written.
    //
    return(uIdx);
 80012fa:	7dfb      	ldrb	r3, [r7, #23]
 80012fc:	b29b      	uxth	r3, r3
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <UART_Printf>:
//!
//! \return None.
//
//*****************************************************************************
void UART_Printf(uart_stdio_typedef* p_uart, const char *pc_string, ...)
{
 8001308:	b40e      	push	{r1, r2, r3}
 800130a:	b580      	push	{r7, lr}
 800130c:	b08d      	sub	sp, #52	@ 0x34
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
    // Check the arguments.
    //

    va_list vaArgP;

    va_start(vaArgP, pc_string);
 8001312:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001316:	60bb      	str	r3, [r7, #8]

    //
    // Loop while there are more characters in the string.
    //
    while(*pc_string)
 8001318:	e1e5      	b.n	80016e6 <UART_Printf+0x3de>
    {
        //
        // Find the first non-% character, or the end of the string.
        //
        for(ui16Idx = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800131e:	e002      	b.n	8001326 <UART_Printf+0x1e>
            (pc_string[ui16Idx] != '%') && (pc_string[ui16Idx] != '\0');
            ui16Idx++)
 8001320:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001322:	3301      	adds	r3, #1
 8001324:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            (pc_string[ui16Idx] != '%') && (pc_string[ui16Idx] != '\0');
 8001326:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001328:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800132a:	4413      	add	r3, r2
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b25      	cmp	r3, #37	@ 0x25
 8001330:	d005      	beq.n	800133e <UART_Printf+0x36>
 8001332:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001334:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001336:	4413      	add	r3, r2
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f0      	bne.n	8001320 <UART_Printf+0x18>
        }

        //
        // Write this portion of the string.
        //
        UART_Write(p_uart, pc_string, ui16Idx);
 800133e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001340:	461a      	mov	r2, r3
 8001342:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff ff63 	bl	8001210 <UART_Write>

        //
        // Skip the portion of the string that was written.
        //
        pc_string += ui16Idx;
 800134a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800134c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800134e:	4413      	add	r3, r2
 8001350:	63fb      	str	r3, [r7, #60]	@ 0x3c

        //
        // See if the next character is a %.
        //
        if(*pc_string == '%')
 8001352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b25      	cmp	r3, #37	@ 0x25
 8001358:	f040 81c5 	bne.w	80016e6 <UART_Printf+0x3de>
        {
            //
            // Skip the %.
            //
            pc_string++;
 800135c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800135e:	3301      	adds	r3, #1
 8001360:	63fb      	str	r3, [r7, #60]	@ 0x3c

            //
            // Set the digit count to zero, and the fill character to space
            // (in other words, to the defaults).
            //
            ui16Count = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	857b      	strh	r3, [r7, #42]	@ 0x2a
            cFill = ' ';
 8001366:	2320      	movs	r3, #32
 8001368:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
again:

            //
            // Determine how to handle the next character.
            //
            switch(*pc_string++)
 800136c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	3b25      	subs	r3, #37	@ 0x25
 8001376:	2b53      	cmp	r3, #83	@ 0x53
 8001378:	f200 81ae 	bhi.w	80016d8 <UART_Printf+0x3d0>
 800137c:	a201      	add	r2, pc, #4	@ (adr r2, 8001384 <UART_Printf+0x7c>)
 800137e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001382:	bf00      	nop
 8001384:	080016c9 	.word	0x080016c9
 8001388:	080016d9 	.word	0x080016d9
 800138c:	080016d9 	.word	0x080016d9
 8001390:	080016d9 	.word	0x080016d9
 8001394:	080016d9 	.word	0x080016d9
 8001398:	080016d9 	.word	0x080016d9
 800139c:	080016d9 	.word	0x080016d9
 80013a0:	080016d9 	.word	0x080016d9
 80013a4:	080016d9 	.word	0x080016d9
 80013a8:	080016d9 	.word	0x080016d9
 80013ac:	080016d9 	.word	0x080016d9
 80013b0:	080014d5 	.word	0x080014d5
 80013b4:	080014d5 	.word	0x080014d5
 80013b8:	080014d5 	.word	0x080014d5
 80013bc:	080014d5 	.word	0x080014d5
 80013c0:	080014d5 	.word	0x080014d5
 80013c4:	080014d5 	.word	0x080014d5
 80013c8:	080014d5 	.word	0x080014d5
 80013cc:	080014d5 	.word	0x080014d5
 80013d0:	080014d5 	.word	0x080014d5
 80013d4:	080014d5 	.word	0x080014d5
 80013d8:	080016d9 	.word	0x080016d9
 80013dc:	080016d9 	.word	0x080016d9
 80013e0:	080016d9 	.word	0x080016d9
 80013e4:	080016d9 	.word	0x080016d9
 80013e8:	080016d9 	.word	0x080016d9
 80013ec:	080016d9 	.word	0x080016d9
 80013f0:	080016d9 	.word	0x080016d9
 80013f4:	080016d9 	.word	0x080016d9
 80013f8:	080016d9 	.word	0x080016d9
 80013fc:	080016d9 	.word	0x080016d9
 8001400:	080016d9 	.word	0x080016d9
 8001404:	080016d9 	.word	0x080016d9
 8001408:	080016d9 	.word	0x080016d9
 800140c:	080016d9 	.word	0x080016d9
 8001410:	080016d9 	.word	0x080016d9
 8001414:	080016d9 	.word	0x080016d9
 8001418:	080016d9 	.word	0x080016d9
 800141c:	080016d9 	.word	0x080016d9
 8001420:	080016d9 	.word	0x080016d9
 8001424:	080016d9 	.word	0x080016d9
 8001428:	080016d9 	.word	0x080016d9
 800142c:	080016d9 	.word	0x080016d9
 8001430:	080016d9 	.word	0x080016d9
 8001434:	080016d9 	.word	0x080016d9
 8001438:	080016d9 	.word	0x080016d9
 800143c:	080016d9 	.word	0x080016d9
 8001440:	080016d9 	.word	0x080016d9
 8001444:	080016d9 	.word	0x080016d9
 8001448:	080016d9 	.word	0x080016d9
 800144c:	080016d9 	.word	0x080016d9
 8001450:	080015c9 	.word	0x080015c9
 8001454:	080016d9 	.word	0x080016d9
 8001458:	080016d9 	.word	0x080016d9
 800145c:	080016d9 	.word	0x080016d9
 8001460:	080016d9 	.word	0x080016d9
 8001464:	080016d9 	.word	0x080016d9
 8001468:	080016d9 	.word	0x080016d9
 800146c:	080016d9 	.word	0x080016d9
 8001470:	080016d9 	.word	0x080016d9
 8001474:	080016d9 	.word	0x080016d9
 8001478:	080016d9 	.word	0x080016d9
 800147c:	0800150b 	.word	0x0800150b
 8001480:	08001527 	.word	0x08001527
 8001484:	080016d9 	.word	0x080016d9
 8001488:	080016d9 	.word	0x080016d9
 800148c:	080016d9 	.word	0x080016d9
 8001490:	080016d9 	.word	0x080016d9
 8001494:	08001527 	.word	0x08001527
 8001498:	080016d9 	.word	0x080016d9
 800149c:	080016d9 	.word	0x080016d9
 80014a0:	080016d9 	.word	0x080016d9
 80014a4:	080016d9 	.word	0x080016d9
 80014a8:	080016d9 	.word	0x080016d9
 80014ac:	080016d9 	.word	0x080016d9
 80014b0:	080015c9 	.word	0x080015c9
 80014b4:	080016d9 	.word	0x080016d9
 80014b8:	080016d9 	.word	0x080016d9
 80014bc:	08001557 	.word	0x08001557
 80014c0:	080016d9 	.word	0x080016d9
 80014c4:	080015af 	.word	0x080015af
 80014c8:	080016d9 	.word	0x080016d9
 80014cc:	080016d9 	.word	0x080016d9
 80014d0:	080015c9 	.word	0x080015c9
                {
                    //
                    // If this is a zero, and it is the first digit, then the
                    // fill character is a zero instead of a space.
                    //
                    if((pc_string[-1] == '0') && (ui16Count == 0))
 80014d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014d6:	3b01      	subs	r3, #1
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b30      	cmp	r3, #48	@ 0x30
 80014dc:	d105      	bne.n	80014ea <UART_Printf+0x1e2>
 80014de:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d102      	bne.n	80014ea <UART_Printf+0x1e2>
                    {
                        cFill = '0';
 80014e4:	2330      	movs	r3, #48	@ 0x30
 80014e6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                    }

                    //
                    // Update the digit count.
                    //
                    ui16Count *= 10;
 80014ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80014ec:	461a      	mov	r2, r3
 80014ee:	0092      	lsls	r2, r2, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	857b      	strh	r3, [r7, #42]	@ 0x2a
                    ui16Count += pc_string[-1] - '0';
 80014f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014f8:	3b01      	subs	r3, #1
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001500:	4413      	add	r3, r2
 8001502:	b29b      	uxth	r3, r3
 8001504:	3b30      	subs	r3, #48	@ 0x30
 8001506:	857b      	strh	r3, [r7, #42]	@ 0x2a

                    //
                    // Get the next character.
                    //
                    goto again;
 8001508:	e730      	b.n	800136c <UART_Printf+0x64>
                case 'c':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui16Value = va_arg(vaArgP, int);
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	1d1a      	adds	r2, r3, #4
 800150e:	60ba      	str	r2, [r7, #8]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	b29b      	uxth	r3, r3
 8001514:	83fb      	strh	r3, [r7, #30]

                    //
                    // Print out the character.
                    //
                    UART_Write(p_uart, (char *)&ui16Value, 1);
 8001516:	f107 031e 	add.w	r3, r7, #30
 800151a:	2201      	movs	r2, #1
 800151c:	4619      	mov	r1, r3
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff fe76 	bl	8001210 <UART_Write>

                    //
                    // This command has been handled.
                    //
                    break;
 8001524:	e0df      	b.n	80016e6 <UART_Printf+0x3de>
                case 'i':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui16Value = va_arg(vaArgP, int);
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	1d1a      	adds	r2, r3, #4
 800152a:	60ba      	str	r2, [r7, #8]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	b29b      	uxth	r3, r3
 8001530:	83fb      	strh	r3, [r7, #30]

                    //
                    // Reset the buffer position.
                    //
                    ui16Pos = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	85bb      	strh	r3, [r7, #44]	@ 0x2c

                    //
                    // If the value is negative, make it positive and indicate
                    // that a minus sign is needed.
                    //
                    if((int16_t)ui16Value < 0)
 8001536:	8bfb      	ldrh	r3, [r7, #30]
 8001538:	b21b      	sxth	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	da06      	bge.n	800154c <UART_Printf+0x244>
                    {
                        //
                        // Make the value positive.
                        //
                        ui16Value = -(int16_t)ui16Value;
 800153e:	8bfb      	ldrh	r3, [r7, #30]
 8001540:	425b      	negs	r3, r3
 8001542:	b29b      	uxth	r3, r3
 8001544:	83fb      	strh	r3, [r7, #30]

                        //
                        // Indicate that the value is negative.
                        //
                        ui16Neg = 1;
 8001546:	2301      	movs	r3, #1
 8001548:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800154a:	e001      	b.n	8001550 <UART_Printf+0x248>
                    {
                        //
                        // Indicate that the value is positive so that a minus
                        // sign isn't inserted.
                        //
                        ui16Neg = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	84fb      	strh	r3, [r7, #38]	@ 0x26
                    }

                    //
                    // Set the base to 10.
                    //
                    ui16Base = 10;
 8001550:	230a      	movs	r3, #10
 8001552:	853b      	strh	r3, [r7, #40]	@ 0x28

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
 8001554:	e044      	b.n	80015e0 <UART_Printf+0x2d8>
                case 's':
                {
                    //
                    // Get the string pointer from the varargs.
                    //
                    pcStr = va_arg(vaArgP, char *);
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	1d1a      	adds	r2, r3, #4
 800155a:	60ba      	str	r2, [r7, #8]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	623b      	str	r3, [r7, #32]

                    //
                    // Determine the length of the string.
                    //
                    for(ui16Idx = 0; pcStr[ui16Idx] != '\0'; ui16Idx++)
 8001560:	2300      	movs	r3, #0
 8001562:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001564:	e002      	b.n	800156c <UART_Printf+0x264>
 8001566:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001568:	3301      	adds	r3, #1
 800156a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800156c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800156e:	6a3a      	ldr	r2, [r7, #32]
 8001570:	4413      	add	r3, r2
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1f6      	bne.n	8001566 <UART_Printf+0x25e>
                    }

                    //
                    // Write the string.
                    //
                    UART_Write(p_uart, pcStr, ui16Idx);
 8001578:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800157a:	461a      	mov	r2, r3
 800157c:	6a39      	ldr	r1, [r7, #32]
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff fe46 	bl	8001210 <UART_Write>

                    //
                    // Write any required padding spaces
                    //
                    if(ui16Count > ui16Idx)
 8001584:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001586:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001588:	429a      	cmp	r2, r3
 800158a:	f240 80ab 	bls.w	80016e4 <UART_Printf+0x3dc>
                    {
                        ui16Count -= ui16Idx;
 800158e:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001590:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	857b      	strh	r3, [r7, #42]	@ 0x2a
                        while(ui16Count--)
 8001596:	e004      	b.n	80015a2 <UART_Printf+0x29a>
                        {
                            UART_Write(p_uart, " ", 1);
 8001598:	2201      	movs	r2, #1
 800159a:	4959      	ldr	r1, [pc, #356]	@ (8001700 <UART_Printf+0x3f8>)
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff fe37 	bl	8001210 <UART_Write>
                        while(ui16Count--)
 80015a2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80015a4:	1e5a      	subs	r2, r3, #1
 80015a6:	857a      	strh	r2, [r7, #42]	@ 0x2a
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1f5      	bne.n	8001598 <UART_Printf+0x290>
                    }

                    //
                    // This command has been handled.
                    //
                    break;
 80015ac:	e09a      	b.n	80016e4 <UART_Printf+0x3dc>
                case 'u':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui16Value = va_arg(vaArgP, int);
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	1d1a      	adds	r2, r3, #4
 80015b2:	60ba      	str	r2, [r7, #8]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	83fb      	strh	r3, [r7, #30]

                    //
                    // Reset the buffer position.
                    //
                    ui16Pos = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	85bb      	strh	r3, [r7, #44]	@ 0x2c

                    //
                    // Set the base to 10.
                    //
                    ui16Base = 10;
 80015be:	230a      	movs	r3, #10
 80015c0:	853b      	strh	r3, [r7, #40]	@ 0x28

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui16Neg = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	84fb      	strh	r3, [r7, #38]	@ 0x26

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
 80015c6:	e00b      	b.n	80015e0 <UART_Printf+0x2d8>
                case 'p':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui16Value = va_arg(vaArgP, int);
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	1d1a      	adds	r2, r3, #4
 80015cc:	60ba      	str	r2, [r7, #8]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	83fb      	strh	r3, [r7, #30]

                    //
                    // Reset the buffer position.
                    //
                    ui16Pos = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	85bb      	strh	r3, [r7, #44]	@ 0x2c

                    //
                    // Set the base to 16.
                    //
                    ui16Base = 16;
 80015d8:	2310      	movs	r3, #16
 80015da:	853b      	strh	r3, [r7, #40]	@ 0x28

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui16Neg = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	84fb      	strh	r3, [r7, #38]	@ 0x26
                    //
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ui16Idx = 1;
 80015e0:	2301      	movs	r3, #1
 80015e2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80015e4:	e007      	b.n	80015f6 <UART_Printf+0x2ee>
                        (((ui16Idx * ui16Base) <= ui16Value) &&
                         (((ui16Idx * ui16Base) / ui16Base) == ui16Idx));
                        ui16Idx *= ui16Base, ui16Count--)
 80015e6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80015e8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80015ea:	fb12 f303 	smulbb	r3, r2, r3
 80015ee:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80015f0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80015f2:	3b01      	subs	r3, #1
 80015f4:	857b      	strh	r3, [r7, #42]	@ 0x2a
                        (((ui16Idx * ui16Base) <= ui16Value) &&
 80015f6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80015f8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80015fa:	fb02 f303 	mul.w	r3, r2, r3
 80015fe:	8bfa      	ldrh	r2, [r7, #30]
 8001600:	4293      	cmp	r3, r2
 8001602:	ddf0      	ble.n	80015e6 <UART_Printf+0x2de>

                    //
                    // If the value is negative, reduce the count of padding
                    // characters needed.
                    //
                    if(ui16Neg)
 8001604:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001606:	2b00      	cmp	r3, #0
 8001608:	d002      	beq.n	8001610 <UART_Printf+0x308>
                    {
                        ui16Count--;
 800160a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800160c:	3b01      	subs	r3, #1
 800160e:	857b      	strh	r3, [r7, #42]	@ 0x2a

                    //
                    // If the value is negative and the value is padded with
                    // zeros, then place the minus sign before the padding.
                    //
                    if(ui16Neg && (cFill == '0'))
 8001610:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00d      	beq.n	8001632 <UART_Printf+0x32a>
 8001616:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800161a:	2b30      	cmp	r3, #48	@ 0x30
 800161c:	d109      	bne.n	8001632 <UART_Printf+0x32a>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui16Pos++] = '-';
 800161e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001620:	1c5a      	adds	r2, r3, #1
 8001622:	85ba      	strh	r2, [r7, #44]	@ 0x2c
 8001624:	3330      	adds	r3, #48	@ 0x30
 8001626:	443b      	add	r3, r7
 8001628:	222d      	movs	r2, #45	@ 0x2d
 800162a:	f803 2c24 	strb.w	r2, [r3, #-36]

                        //
                        // The minus sign has been placed, so turn off the
                        // negative flag.
                        //
                        ui16Neg = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	84fb      	strh	r3, [r7, #38]	@ 0x26

                    //
                    // Provide additional padding at the beginning of the
                    // string conversion if needed.
                    //
                    if((ui16Count > 1) && (ui16Count < 16))
 8001632:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001634:	2b01      	cmp	r3, #1
 8001636:	d915      	bls.n	8001664 <UART_Printf+0x35c>
 8001638:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800163a:	2b0f      	cmp	r3, #15
 800163c:	d812      	bhi.n	8001664 <UART_Printf+0x35c>
                    {
                        for(ui16Count--; ui16Count; ui16Count--)
 800163e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001640:	3b01      	subs	r3, #1
 8001642:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8001644:	e00b      	b.n	800165e <UART_Printf+0x356>
                        {
                            pcBuf[ui16Pos++] = cFill;
 8001646:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001648:	1c5a      	adds	r2, r3, #1
 800164a:	85ba      	strh	r2, [r7, #44]	@ 0x2c
 800164c:	3330      	adds	r3, #48	@ 0x30
 800164e:	443b      	add	r3, r7
 8001650:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8001654:	f803 2c24 	strb.w	r2, [r3, #-36]
                        for(ui16Count--; ui16Count; ui16Count--)
 8001658:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800165a:	3b01      	subs	r3, #1
 800165c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800165e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1f0      	bne.n	8001646 <UART_Printf+0x33e>

                    //
                    // If the value is negative, then place the minus sign
                    // before the number.
                    //
                    if(ui16Neg)
 8001664:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001666:	2b00      	cmp	r3, #0
 8001668:	d023      	beq.n	80016b2 <UART_Printf+0x3aa>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui16Pos++] = '-';
 800166a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800166c:	1c5a      	adds	r2, r3, #1
 800166e:	85ba      	strh	r2, [r7, #44]	@ 0x2c
 8001670:	3330      	adds	r3, #48	@ 0x30
 8001672:	443b      	add	r3, r7
 8001674:	222d      	movs	r2, #45	@ 0x2d
 8001676:	f803 2c24 	strb.w	r2, [r3, #-36]
                    }

                    //
                    // Convert the value into a string.
                    //
                    for(; ui16Idx; ui16Idx /= ui16Base)
 800167a:	e01a      	b.n	80016b2 <UART_Printf+0x3aa>
                    {
                        pcBuf[ui16Pos++] =
                            HEX_reference[(ui16Value / ui16Idx) % ui16Base];
 800167c:	4821      	ldr	r0, [pc, #132]	@ (8001704 <UART_Printf+0x3fc>)
 800167e:	8bfa      	ldrh	r2, [r7, #30]
 8001680:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001682:	fbb2 f3f3 	udiv	r3, r2, r3
 8001686:	b29b      	uxth	r3, r3
 8001688:	461a      	mov	r2, r3
 800168a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800168c:	fb92 f1f3 	sdiv	r1, r2, r3
 8001690:	fb01 f303 	mul.w	r3, r1, r3
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	18c2      	adds	r2, r0, r3
                        pcBuf[ui16Pos++] =
 8001698:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800169a:	1c59      	adds	r1, r3, #1
 800169c:	85b9      	strh	r1, [r7, #44]	@ 0x2c
                            HEX_reference[(ui16Value / ui16Idx) % ui16Base];
 800169e:	7812      	ldrb	r2, [r2, #0]
                        pcBuf[ui16Pos++] =
 80016a0:	3330      	adds	r3, #48	@ 0x30
 80016a2:	443b      	add	r3, r7
 80016a4:	f803 2c24 	strb.w	r2, [r3, #-36]
                    for(; ui16Idx; ui16Idx /= ui16Base)
 80016a8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80016aa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80016ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80016b2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1e1      	bne.n	800167c <UART_Printf+0x374>
                    }

                    //
                    // Write the string.
                    //
                    UART_Write(p_uart, pcBuf, ui16Pos);
 80016b8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80016ba:	f107 030c 	add.w	r3, r7, #12
 80016be:	4619      	mov	r1, r3
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff fda5 	bl	8001210 <UART_Write>

                    //
                    // This command has been handled.
                    //
                    break;
 80016c6:	e00e      	b.n	80016e6 <UART_Printf+0x3de>
                case '%':
                {
                    //
                    // Simply write a single %.
                    //
                    UART_Write(p_uart, pc_string - 1, 1);
 80016c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016ca:	3b01      	subs	r3, #1
 80016cc:	2201      	movs	r2, #1
 80016ce:	4619      	mov	r1, r3
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff fd9d 	bl	8001210 <UART_Write>

                    //
                    // This command has been handled.
                    //
                    break;
 80016d6:	e006      	b.n	80016e6 <UART_Printf+0x3de>
                default:
                {
                    //
                    // Indicate an error.
                    //
                    UART_Write(p_uart, "ERROR", 5);
 80016d8:	2205      	movs	r2, #5
 80016da:	490b      	ldr	r1, [pc, #44]	@ (8001708 <UART_Printf+0x400>)
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff fd97 	bl	8001210 <UART_Write>

                    //
                    // This command has been handled.
                    //
                    break;
 80016e2:	e000      	b.n	80016e6 <UART_Printf+0x3de>
                    break;
 80016e4:	bf00      	nop
    while(*pc_string)
 80016e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f47f ae15 	bne.w	800131a <UART_Printf+0x12>
                }
            }
        }
    }
    va_end(vaArgP);
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	3734      	adds	r7, #52	@ 0x34
 80016f6:	46bd      	mov	sp, r7
 80016f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016fc:	b003      	add	sp, #12
 80016fe:	4770      	bx	lr
 8001700:	08009458 	.word	0x08009458
 8001704:	08009444 	.word	0x08009444
 8001708:	0800945c 	.word	0x0800945c

0800170c <UART_Get_Char>:
//!
//! \return Returns the character read.
//
//*****************************************************************************
char UART_Get_Char(uart_stdio_typedef* p_uart)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

    char return_char;

    if (RX_BUFFER_EMPTY(p_uart))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f103 021a 	add.w	r2, r3, #26
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3318      	adds	r3, #24
 800171e:	4619      	mov	r1, r3
 8001720:	4610      	mov	r0, r2
 8001722:	f000 f83c 	bl	800179e <UART_is_buffer_empty>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <UART_Get_Char+0x24>
    {
        return 0;
 800172c:	2300      	movs	r3, #0
 800172e:	e011      	b.n	8001754 <UART_Get_Char+0x48>
    }

    //
    // Read a character from the buffer.
    //
    return_char = p_uart->p_RX_buffer[p_uart->RX_read_index];
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	8b52      	ldrh	r2, [r2, #26]
 8001738:	b292      	uxth	r2, r2
 800173a:	4413      	add	r3, r2
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	73fb      	strb	r3, [r7, #15]
    ADVANCE_RX_READ_INDEX(p_uart);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f103 021a 	add.w	r2, r3, #26
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	891b      	ldrh	r3, [r3, #8]
 800174a:	4619      	mov	r1, r3
 800174c:	4610      	mov	r0, r2
 800174e:	f000 f83e 	bl	80017ce <UART_advance_buffer_index>

    //
    // Return the character to the caller.
    //
    return(return_char);
 8001752:	7bfb      	ldrb	r3, [r7, #15]

}
 8001754:	4618      	mov	r0, r3
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <UART_is_buffer_full>:
//
//*****************************************************************************

uint8_t UART_is_buffer_full(volatile uint16_t *pui16Read,
             volatile uint16_t *pui16Write, uint16_t ui16Size)
{
 800175c:	b480      	push	{r7}
 800175e:	b087      	sub	sp, #28
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	4613      	mov	r3, r2
 8001768:	80fb      	strh	r3, [r7, #6]
    uint16_t ui16Write;
    uint16_t ui16Read;

    ui16Write = *pui16Write;
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	82fb      	strh	r3, [r7, #22]
    ui16Read = *pui16Read;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	881b      	ldrh	r3, [r3, #0]
 8001774:	82bb      	strh	r3, [r7, #20]

    return((((ui16Write + 1) % ui16Size) == ui16Read) ? 1 : 0);
 8001776:	8afb      	ldrh	r3, [r7, #22]
 8001778:	3301      	adds	r3, #1
 800177a:	88fa      	ldrh	r2, [r7, #6]
 800177c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001780:	fb01 f202 	mul.w	r2, r1, r2
 8001784:	1a9a      	subs	r2, r3, r2
 8001786:	8abb      	ldrh	r3, [r7, #20]
 8001788:	429a      	cmp	r2, r3
 800178a:	bf0c      	ite	eq
 800178c:	2301      	moveq	r3, #1
 800178e:	2300      	movne	r3, #0
 8001790:	b2db      	uxtb	r3, r3
}
 8001792:	4618      	mov	r0, r3
 8001794:	371c      	adds	r7, #28
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <UART_is_buffer_empty>:
//
//*****************************************************************************

uint8_t UART_is_buffer_empty(volatile uint16_t *pui16Read,
              volatile uint16_t *pui16Write)
{
 800179e:	b480      	push	{r7}
 80017a0:	b085      	sub	sp, #20
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	6039      	str	r1, [r7, #0]
    uint16_t ui16Write;
    uint16_t ui16Read;

    ui16Write = *pui16Write;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	81fb      	strh	r3, [r7, #14]
    ui16Read = *pui16Read;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	81bb      	strh	r3, [r7, #12]

    return((ui16Read == ui16Write) ? 1 : 0);
 80017b4:	89ba      	ldrh	r2, [r7, #12]
 80017b6:	89fb      	ldrh	r3, [r7, #14]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	bf0c      	ite	eq
 80017bc:	2301      	moveq	r3, #1
 80017be:	2300      	movne	r3, #0
 80017c0:	b2db      	uxtb	r3, r3
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <UART_advance_buffer_index>:
//! \return Returns the number of bytes of data currently in the buffer.
//
//*****************************************************************************

uint16_t UART_advance_buffer_index(volatile uint16_t* pui16Index, uint16_t ui16Size)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	460b      	mov	r3, r1
 80017d8:	807b      	strh	r3, [r7, #2]
    *pui16Index = (*pui16Index + 1) % ui16Size;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	881b      	ldrh	r3, [r3, #0]
 80017de:	b29b      	uxth	r3, r3
 80017e0:	3301      	adds	r3, #1
 80017e2:	887a      	ldrh	r2, [r7, #2]
 80017e4:	fb93 f1f2 	sdiv	r1, r3, r2
 80017e8:	fb01 f202 	mul.w	r2, r1, r2
 80017ec:	1a9b      	subs	r3, r3, r2
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	801a      	strh	r2, [r3, #0]

    return(*pui16Index);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	b29b      	uxth	r3, r3
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <UART_Prime_Transmit>:
// Take as many bytes from the transmit buffer as we have space for and move
// them into the UART transmit FIFO.
//
//*****************************************************************************
void UART_Prime_Transmit(uart_stdio_typedef* p_uart)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
    //
    // Do we have any data to transmit?
    //
    if(!TX_BUFFER_EMPTY(p_uart))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f103 0212 	add.w	r2, r3, #18
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3310      	adds	r3, #16
 8001818:	4619      	mov	r1, r3
 800181a:	4610      	mov	r0, r2
 800181c:	f7ff ffbf 	bl	800179e <UART_is_buffer_empty>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d120      	bne.n	8001868 <UART_Prime_Transmit+0x62>
    {
        NVIC_DisableIRQ(p_uart->irqn);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fbd3 	bl	8000fd8 <__NVIC_DisableIRQ>

        LL_USART_TransmitData8(p_uart->handle, p_uart->p_TX_buffer[p_uart->TX_read_index]);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6818      	ldr	r0, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	8a52      	ldrh	r2, [r2, #18]
 800183e:	b292      	uxth	r2, r2
 8001840:	4413      	add	r3, r2
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	4619      	mov	r1, r3
 8001846:	f7ff fc67 	bl	8001118 <LL_USART_TransmitData8>
        ADVANCE_TX_READ_INDEX(p_uart);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f103 0212 	add.w	r2, r3, #18
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	88db      	ldrh	r3, [r3, #6]
 8001854:	4619      	mov	r1, r3
 8001856:	4610      	mov	r0, r2
 8001858:	f7ff ffb9 	bl	80017ce <UART_advance_buffer_index>

        NVIC_EnableIRQ(p_uart->irqn);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fb9a 	bl	8000f9c <__NVIC_EnableIRQ>
    }
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <CmdLineProcess>:
//! \b CMDLINE_TOO_MANY_ARGS if there are more arguments than can be parsed.
//! Otherwise it returns the code that was returned by the command function.
//
//*****************************************************************************
uint8_t CmdLineProcess(char *pcCmdLine, USART_TypeDef* USARTx)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
    char *pcChar;
    uint_fast8_t ui8Argc;
    bool bFindArg = true;
 800187a:	2301      	movs	r3, #1
 800187c:	73fb      	strb	r3, [r7, #15]

    //
    // Initialize the argument counter, and point to the beginning of the
    // command line string.
    //
    ui8Argc = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
    pcChar = pcCmdLine;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	617b      	str	r3, [r7, #20]

    //
    // Advance through the command line until a zero character is found.
    //
    while(*pcChar)
 8001886:	e01f      	b.n	80018c8 <CmdLineProcess+0x58>
    {
        //
        // If there is a space, then replace it with a zero, and set the flag
        // to search for the next argument.
        //
        if(*pcChar == ' ')
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b20      	cmp	r3, #32
 800188e:	d105      	bne.n	800189c <CmdLineProcess+0x2c>
        {
            *pcChar = 0;
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]
            bFindArg = true;
 8001896:	2301      	movs	r3, #1
 8001898:	73fb      	strb	r3, [r7, #15]
 800189a:	e012      	b.n	80018c2 <CmdLineProcess+0x52>
        {
            //
            // If bFindArg is set, then that means we are looking for the start
            // of the next argument.
            //
            if(bFindArg)
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00f      	beq.n	80018c2 <CmdLineProcess+0x52>
                //
                // As long as the maximum number of arguments has not been
                // reached, then save the pointer to the start of this new arg
                // in the argv array, and increment the count of args, argc.
                //
                if(ui8Argc < CMDLINE_MAX_ARGS)
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	2b07      	cmp	r3, #7
 80018a6:	d80a      	bhi.n	80018be <CmdLineProcess+0x4e>
                {
                    g_ppcArgv[ui8Argc] = pcChar;
 80018a8:	4920      	ldr	r1, [pc, #128]	@ (800192c <CmdLineProcess+0xbc>)
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	697a      	ldr	r2, [r7, #20]
 80018ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    ui8Argc++;
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	3301      	adds	r3, #1
 80018b6:	613b      	str	r3, [r7, #16]
                    bFindArg = false;
 80018b8:	2300      	movs	r3, #0
 80018ba:	73fb      	strb	r3, [r7, #15]
 80018bc:	e001      	b.n	80018c2 <CmdLineProcess+0x52>
                // The maximum number of arguments has been reached so return
                // the error.
                //
                else
                {
                    return(CMDLINE_TOO_MANY_ARGS);
 80018be:	2302      	movs	r3, #2
 80018c0:	e030      	b.n	8001924 <CmdLineProcess+0xb4>
        }

        //
        // Advance to the next character in the command line.
        //
        pcChar++;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	3301      	adds	r3, #1
 80018c6:	617b      	str	r3, [r7, #20]
    while(*pcChar)
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1db      	bne.n	8001888 <CmdLineProcess+0x18>
    }

    //
    // If one or more arguments was found, then process the command.
    //
    if(ui8Argc)
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d025      	beq.n	8001922 <CmdLineProcess+0xb2>
    {
        g_ppcArgv[ui8Argc] = (char*)USARTx;
 80018d6:	4915      	ldr	r1, [pc, #84]	@ (800192c <CmdLineProcess+0xbc>)
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        ui8Argc++;
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	3301      	adds	r3, #1
 80018e4:	613b      	str	r3, [r7, #16]
        //
        // Start at the beginning of the command table, to look for a matching
        // command.
        //
        psCmdEntry = &g_psCmdTable[0];
 80018e6:	4b12      	ldr	r3, [pc, #72]	@ (8001930 <CmdLineProcess+0xc0>)
 80018e8:	60bb      	str	r3, [r7, #8]

        //
        // Search through the command table until a null command string is
        // found, which marks the end of the table.
        //
        while(psCmdEntry->pcCmd)
 80018ea:	e016      	b.n	800191a <CmdLineProcess+0xaa>
            //
            // If this command entry command string matches argv[0], then call
            // the function for this command, passing the command line
            // arguments.
            //
            if(!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
 80018ec:	4b0f      	ldr	r3, [pc, #60]	@ (800192c <CmdLineProcess+0xbc>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4619      	mov	r1, r3
 80018f6:	4610      	mov	r0, r2
 80018f8:	f7fe fc6a 	bl	80001d0 <strcmp>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d108      	bne.n	8001914 <CmdLineProcess+0xa4>
            {
                return(psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4908      	ldr	r1, [pc, #32]	@ (800192c <CmdLineProcess+0xbc>)
 800190a:	4610      	mov	r0, r2
 800190c:	4798      	blx	r3
 800190e:	4603      	mov	r3, r0
 8001910:	b2db      	uxtb	r3, r3
 8001912:	e007      	b.n	8001924 <CmdLineProcess+0xb4>
            }

            //
            // Not found, so advance to the next entry.
            //
            psCmdEntry++;
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	330c      	adds	r3, #12
 8001918:	60bb      	str	r3, [r7, #8]
        while(psCmdEntry->pcCmd)
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1e4      	bne.n	80018ec <CmdLineProcess+0x7c>

    //
    // Fall through to here means that no matching command was found, so return
    // an error.
    //
    return(CMDLINE_BAD_CMD);
 8001922:	2301      	movs	r3, #1
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20002444 	.word	0x20002444
 8001930:	20000018 	.word	0x20000018

08001934 <LL_USART_IsActiveFlag_RXNE>:
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0320 	and.w	r3, r3, #32
 8001944:	2b20      	cmp	r3, #32
 8001946:	bf0c      	ite	eq
 8001948:	2301      	moveq	r3, #1
 800194a:	2300      	movne	r3, #0
 800194c:	b2db      	uxtb	r3, r3
}
 800194e:	4618      	mov	r0, r3
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <LL_USART_IsActiveFlag_TXE>:
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800196a:	2b80      	cmp	r3, #128	@ 0x80
 800196c:	bf0c      	ite	eq
 800196e:	2301      	moveq	r3, #1
 8001970:	2300      	movne	r3, #0
 8001972:	b2db      	uxtb	r3, r3
}
 8001974:	4618      	mov	r0, r3
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <LL_USART_DisableIT_TXE>:
{
 8001980:	b480      	push	{r7}
 8001982:	b089      	sub	sp, #36	@ 0x24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	330c      	adds	r3, #12
 800198c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	e853 3f00 	ldrex	r3, [r3]
 8001994:	60bb      	str	r3, [r7, #8]
   return(result);
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800199c:	61fb      	str	r3, [r7, #28]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	330c      	adds	r3, #12
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	61ba      	str	r2, [r7, #24]
 80019a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019a8:	6979      	ldr	r1, [r7, #20]
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	e841 2300 	strex	r3, r2, [r1]
 80019b0:	613b      	str	r3, [r7, #16]
   return(result);
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1e7      	bne.n	8001988 <LL_USART_DisableIT_TXE+0x8>
}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	3724      	adds	r7, #36	@ 0x24
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <LL_USART_ReceiveData8>:
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	b2db      	uxtb	r3, r3
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	619a      	str	r2, [r3, #24]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	041a      	lsls	r2, r3, #16
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	619a      	str	r2, [r3, #24]
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <command_init>:
		9
	}
};

void	command_init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af04      	add	r7, sp, #16
    UART_Init( &CONSOLE_UART, EXP_UART_HANDLE, EXP_UART_IRQ,
 8001a22:	2340      	movs	r3, #64	@ 0x40
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2340      	movs	r3, #64	@ 0x40
 8001a28:	9301      	str	r3, [sp, #4]
 8001a2a:	4b13      	ldr	r3, [pc, #76]	@ (8001a78 <command_init+0x5c>)
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	4b13      	ldr	r3, [pc, #76]	@ (8001a7c <command_init+0x60>)
 8001a30:	2227      	movs	r2, #39	@ 0x27
 8001a32:	4913      	ldr	r1, [pc, #76]	@ (8001a80 <command_init+0x64>)
 8001a34:	4813      	ldr	r0, [pc, #76]	@ (8001a84 <command_init+0x68>)
 8001a36:	f7ff fb7e 	bl	8001136 <UART_Init>
				g_EXP_UART_TX_buffer, g_EXP_UART_RX_buffer,
				sizeof(g_EXP_UART_TX_buffer), sizeof(g_EXP_UART_RX_buffer));
    CMD_line.p_buffer       = g_CMD_line_buffer;
 8001a3a:	4b13      	ldr	r3, [pc, #76]	@ (8001a88 <command_init+0x6c>)
 8001a3c:	4a13      	ldr	r2, [pc, #76]	@ (8001a8c <command_init+0x70>)
 8001a3e:	605a      	str	r2, [r3, #4]
	CMD_line.buffer_size    = 64;
 8001a40:	4b11      	ldr	r3, [pc, #68]	@ (8001a88 <command_init+0x6c>)
 8001a42:	2240      	movs	r2, #64	@ 0x40
 8001a44:	801a      	strh	r2, [r3, #0]
	CMD_line.write_index 	= 0;
 8001a46:	4b10      	ldr	r3, [pc, #64]	@ (8001a88 <command_init+0x6c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	811a      	strh	r2, [r3, #8]
	if(CMD_line.buffer_size!= 0)
 8001a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a88 <command_init+0x6c>)
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d006      	beq.n	8001a62 <command_init+0x46>
	{
		memset((void *)CMD_line.p_buffer, 0, sizeof(CMD_line.p_buffer));
 8001a54:	4b0c      	ldr	r3, [pc, #48]	@ (8001a88 <command_init+0x6c>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2204      	movs	r2, #4
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f007 f817 	bl	8008a90 <memset>
	}
//	command_send_splash();
	UART_Send_String(&CONSOLE_UART, "EXP FIRMWARE V1.0.0\n");
 8001a62:	490b      	ldr	r1, [pc, #44]	@ (8001a90 <command_init+0x74>)
 8001a64:	4807      	ldr	r0, [pc, #28]	@ (8001a84 <command_init+0x68>)
 8001a66:	f7ff fbc0 	bl	80011ea <UART_Send_String>
	UART_Send_String(&CONSOLE_UART, "> ");
 8001a6a:	490a      	ldr	r1, [pc, #40]	@ (8001a94 <command_init+0x78>)
 8001a6c:	4805      	ldr	r0, [pc, #20]	@ (8001a84 <command_init+0x68>)
 8001a6e:	f7ff fbbc 	bl	80011ea <UART_Send_String>
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	200024c8 	.word	0x200024c8
 8001a7c:	20002488 	.word	0x20002488
 8001a80:	40004800 	.word	0x40004800
 8001a84:	20002468 	.word	0x20002468
 8001a88:	20002508 	.word	0x20002508
 8001a8c:	20002514 	.word	0x20002514
 8001a90:	08009924 	.word	0x08009924
 8001a94:	0800993c 	.word	0x0800993c

08001a98 <command_task_update>:

#define MAX_HISTORY 5
#define MAX_CMD_LENGTH COMMAND_MAX_LENGTH

static void command_task_update(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
	uint8_t cmd_return, time_out;
	for(time_out = 50; (!RX_BUFFER_EMPTY(&CONSOLE_UART)) && (time_out != 0); time_out--)
 8001a9e:	2332      	movs	r3, #50	@ 0x32
 8001aa0:	71fb      	strb	r3, [r7, #7]
 8001aa2:	e08d      	b.n	8001bc0 <command_task_update+0x128>
	{
		CMD_line.RX_char = UART_Get_Char(&CONSOLE_UART);
 8001aa4:	484f      	ldr	r0, [pc, #316]	@ (8001be4 <command_task_update+0x14c>)
 8001aa6:	f7ff fe31 	bl	800170c <UART_Get_Char>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	461a      	mov	r2, r3
 8001aae:	4b4e      	ldr	r3, [pc, #312]	@ (8001be8 <command_task_update+0x150>)
 8001ab0:	729a      	strb	r2, [r3, #10]

		if(((CMD_line.RX_char == 8) || (CMD_line.RX_char == 127)))
 8001ab2:	4b4d      	ldr	r3, [pc, #308]	@ (8001be8 <command_task_update+0x150>)
 8001ab4:	7a9b      	ldrb	r3, [r3, #10]
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	d004      	beq.n	8001ac6 <command_task_update+0x2e>
 8001abc:	4b4a      	ldr	r3, [pc, #296]	@ (8001be8 <command_task_update+0x150>)
 8001abe:	7a9b      	ldrb	r3, [r3, #10]
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ac4:	d114      	bne.n	8001af0 <command_task_update+0x58>
		{
			if (CMD_line.write_index == 0)
 8001ac6:	4b48      	ldr	r3, [pc, #288]	@ (8001be8 <command_task_update+0x150>)
 8001ac8:	891b      	ldrh	r3, [r3, #8]
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 8083 	beq.w	8001bd8 <command_task_update+0x140>
				break;
			CMD_line.write_index--;
 8001ad2:	4b45      	ldr	r3, [pc, #276]	@ (8001be8 <command_task_update+0x150>)
 8001ad4:	891b      	ldrh	r3, [r3, #8]
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	4b42      	ldr	r3, [pc, #264]	@ (8001be8 <command_task_update+0x150>)
 8001ade:	811a      	strh	r2, [r3, #8]
			UART_Send_Char(&CONSOLE_UART, CMD_line.RX_char);
 8001ae0:	4b41      	ldr	r3, [pc, #260]	@ (8001be8 <command_task_update+0x150>)
 8001ae2:	7a9b      	ldrb	r3, [r3, #10]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	483e      	ldr	r0, [pc, #248]	@ (8001be4 <command_task_update+0x14c>)
 8001aea:	f7ff fb6e 	bl	80011ca <UART_Send_Char>
			break;
 8001aee:	e074      	b.n	8001bda <command_task_update+0x142>
		}

		UART_Send_Char(&CONSOLE_UART, CMD_line.RX_char);
 8001af0:	4b3d      	ldr	r3, [pc, #244]	@ (8001be8 <command_task_update+0x150>)
 8001af2:	7a9b      	ldrb	r3, [r3, #10]
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	4619      	mov	r1, r3
 8001af8:	483a      	ldr	r0, [pc, #232]	@ (8001be4 <command_task_update+0x14c>)
 8001afa:	f7ff fb66 	bl	80011ca <UART_Send_Char>

		if((CMD_line.RX_char == '\r') || (CMD_line.RX_char == '\n'))
 8001afe:	4b3a      	ldr	r3, [pc, #232]	@ (8001be8 <command_task_update+0x150>)
 8001b00:	7a9b      	ldrb	r3, [r3, #10]
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b0d      	cmp	r3, #13
 8001b06:	d004      	beq.n	8001b12 <command_task_update+0x7a>
 8001b08:	4b37      	ldr	r3, [pc, #220]	@ (8001be8 <command_task_update+0x150>)
 8001b0a:	7a9b      	ldrb	r3, [r3, #10]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b0a      	cmp	r3, #10
 8001b10:	d134      	bne.n	8001b7c <command_task_update+0xe4>
		{
			if(CMD_line.write_index > 0)
 8001b12:	4b35      	ldr	r3, [pc, #212]	@ (8001be8 <command_task_update+0x150>)
 8001b14:	891b      	ldrh	r3, [r3, #8]
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d02a      	beq.n	8001b72 <command_task_update+0xda>
			{
				// Add a NUL char at the end of the CMD
				CMD_line.p_buffer[CMD_line.write_index] = 0;
 8001b1c:	4b32      	ldr	r3, [pc, #200]	@ (8001be8 <command_task_update+0x150>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	4a31      	ldr	r2, [pc, #196]	@ (8001be8 <command_task_update+0x150>)
 8001b22:	8912      	ldrh	r2, [r2, #8]
 8001b24:	b292      	uxth	r2, r2
 8001b26:	4413      	add	r3, r2
 8001b28:	2200      	movs	r2, #0
 8001b2a:	701a      	strb	r2, [r3, #0]
				CMD_line.write_index++;
 8001b2c:	4b2e      	ldr	r3, [pc, #184]	@ (8001be8 <command_task_update+0x150>)
 8001b2e:	891b      	ldrh	r3, [r3, #8]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	3301      	adds	r3, #1
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	4b2c      	ldr	r3, [pc, #176]	@ (8001be8 <command_task_update+0x150>)
 8001b38:	811a      	strh	r2, [r3, #8]

				cmd_return = CmdLineProcess(CMD_line.p_buffer, EXP_UART_HANDLE);
 8001b3a:	4b2b      	ldr	r3, [pc, #172]	@ (8001be8 <command_task_update+0x150>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	492b      	ldr	r1, [pc, #172]	@ (8001bec <command_task_update+0x154>)
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fe95 	bl	8001870 <CmdLineProcess>
 8001b46:	4603      	mov	r3, r0
 8001b48:	71bb      	strb	r3, [r7, #6]
				CMD_line.write_index    = 0;
 8001b4a:	4b27      	ldr	r3, [pc, #156]	@ (8001be8 <command_task_update+0x150>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	811a      	strh	r2, [r3, #8]

				UART_Send_String(&CONSOLE_UART, "> ");
 8001b50:	4927      	ldr	r1, [pc, #156]	@ (8001bf0 <command_task_update+0x158>)
 8001b52:	4824      	ldr	r0, [pc, #144]	@ (8001be4 <command_task_update+0x14c>)
 8001b54:	f7ff fb49 	bl	80011ea <UART_Send_String>
				UART_Printf(&CONSOLE_UART, ErrorCode[cmd_return]);
 8001b58:	79bb      	ldrb	r3, [r7, #6]
 8001b5a:	4a26      	ldr	r2, [pc, #152]	@ (8001bf4 <command_task_update+0x15c>)
 8001b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b60:	4619      	mov	r1, r3
 8001b62:	4820      	ldr	r0, [pc, #128]	@ (8001be4 <command_task_update+0x14c>)
 8001b64:	f7ff fbd0 	bl	8001308 <UART_Printf>
				UART_Send_String(&CONSOLE_UART, "> ");
 8001b68:	4921      	ldr	r1, [pc, #132]	@ (8001bf0 <command_task_update+0x158>)
 8001b6a:	481e      	ldr	r0, [pc, #120]	@ (8001be4 <command_task_update+0x14c>)
 8001b6c:	f7ff fb3d 	bl	80011ea <UART_Send_String>
			if(CMD_line.write_index > 0)
 8001b70:	e023      	b.n	8001bba <command_task_update+0x122>
			}
			else
			{
				UART_Send_String(&CONSOLE_UART, "> ");
 8001b72:	491f      	ldr	r1, [pc, #124]	@ (8001bf0 <command_task_update+0x158>)
 8001b74:	481b      	ldr	r0, [pc, #108]	@ (8001be4 <command_task_update+0x14c>)
 8001b76:	f7ff fb38 	bl	80011ea <UART_Send_String>
			if(CMD_line.write_index > 0)
 8001b7a:	e01e      	b.n	8001bba <command_task_update+0x122>
			}
		}
		else
		{
			CMD_line.p_buffer[CMD_line.write_index] = CMD_line.RX_char;
 8001b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001be8 <command_task_update+0x150>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	4a19      	ldr	r2, [pc, #100]	@ (8001be8 <command_task_update+0x150>)
 8001b82:	8912      	ldrh	r2, [r2, #8]
 8001b84:	b292      	uxth	r2, r2
 8001b86:	4413      	add	r3, r2
 8001b88:	4a17      	ldr	r2, [pc, #92]	@ (8001be8 <command_task_update+0x150>)
 8001b8a:	7a92      	ldrb	r2, [r2, #10]
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	701a      	strb	r2, [r3, #0]
			CMD_line.write_index++;
 8001b90:	4b15      	ldr	r3, [pc, #84]	@ (8001be8 <command_task_update+0x150>)
 8001b92:	891b      	ldrh	r3, [r3, #8]
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	3301      	adds	r3, #1
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	4b13      	ldr	r3, [pc, #76]	@ (8001be8 <command_task_update+0x150>)
 8001b9c:	811a      	strh	r2, [r3, #8]

			if (CMD_line.write_index > CMD_line.buffer_size)
 8001b9e:	4b12      	ldr	r3, [pc, #72]	@ (8001be8 <command_task_update+0x150>)
 8001ba0:	891b      	ldrh	r3, [r3, #8]
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	4b10      	ldr	r3, [pc, #64]	@ (8001be8 <command_task_update+0x150>)
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d906      	bls.n	8001bba <command_task_update+0x122>
			{
				UART_Send_String(&CONSOLE_UART, "\n> CMD too long!\n> ");
 8001bac:	4912      	ldr	r1, [pc, #72]	@ (8001bf8 <command_task_update+0x160>)
 8001bae:	480d      	ldr	r0, [pc, #52]	@ (8001be4 <command_task_update+0x14c>)
 8001bb0:	f7ff fb1b 	bl	80011ea <UART_Send_String>
				CMD_line.write_index    = 0;
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001be8 <command_task_update+0x150>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	811a      	strh	r2, [r3, #8]
	for(time_out = 50; (!RX_BUFFER_EMPTY(&CONSOLE_UART)) && (time_out != 0); time_out--)
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	71fb      	strb	r3, [r7, #7]
 8001bc0:	490e      	ldr	r1, [pc, #56]	@ (8001bfc <command_task_update+0x164>)
 8001bc2:	480f      	ldr	r0, [pc, #60]	@ (8001c00 <command_task_update+0x168>)
 8001bc4:	f7ff fdeb 	bl	800179e <UART_is_buffer_empty>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d105      	bne.n	8001bda <command_task_update+0x142>
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f47f af67 	bne.w	8001aa4 <command_task_update+0xc>
			}
		}
	}
}
 8001bd6:	e000      	b.n	8001bda <command_task_update+0x142>
				break;
 8001bd8:	bf00      	nop
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20002468 	.word	0x20002468
 8001be8:	20002508 	.word	0x20002508
 8001bec:	40004800 	.word	0x40004800
 8001bf0:	0800993c 	.word	0x0800993c
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	08009940 	.word	0x08009940
 8001bfc:	20002480 	.word	0x20002480
 8001c00:	20002482 	.word	0x20002482

08001c04 <Cmd_help>:


/* Command support */
int Cmd_help(int argc, char *argv[])
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
	tCmdLineEntry * pEntry;
	// USART_TypeDef * USARTx = (USART_TypeDef*)argv[argc-1];

	pEntry = &g_psCmdTable[0];
 8001c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c4c <Cmd_help+0x48>)
 8001c10:	60fb      	str	r3, [r7, #12]
	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd)
 8001c12:	e012      	b.n	8001c3a <Cmd_help+0x36>
	{
		// Print the command name and the brief description.
		UART_Send_String(&CONSOLE_UART, pEntry->pcCmd);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	480d      	ldr	r0, [pc, #52]	@ (8001c50 <Cmd_help+0x4c>)
 8001c1c:	f7ff fae5 	bl	80011ea <UART_Send_String>
		UART_Send_String(&CONSOLE_UART, pEntry->pcHelp);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	4619      	mov	r1, r3
 8001c26:	480a      	ldr	r0, [pc, #40]	@ (8001c50 <Cmd_help+0x4c>)
 8001c28:	f7ff fadf 	bl	80011ea <UART_Send_String>
		UART_Send_String(&CONSOLE_UART, "\n");
 8001c2c:	4909      	ldr	r1, [pc, #36]	@ (8001c54 <Cmd_help+0x50>)
 8001c2e:	4808      	ldr	r0, [pc, #32]	@ (8001c50 <Cmd_help+0x4c>)
 8001c30:	f7ff fadb 	bl	80011ea <UART_Send_String>
		// Advance to the next entry in the table.
		pEntry++;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	330c      	adds	r3, #12
 8001c38:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1e8      	bne.n	8001c14 <Cmd_help+0x10>
	}
	return (CMDLINE_OK);
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000018 	.word	0x20000018
 8001c50:	20002468 	.word	0x20002468
 8001c54:	08009954 	.word	0x08009954

08001c58 <Cmd_tec_pw_on>:

/* Command for power supply */
int Cmd_tec_pw_on(int argc, char *argv[])
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
	if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	dc01      	bgt.n	8001c6c <Cmd_tec_pw_on+0x14>
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e019      	b.n	8001ca0 <Cmd_tec_pw_on+0x48>
	if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	dd01      	ble.n	8001c76 <Cmd_tec_pw_on+0x1e>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e014      	b.n	8001ca0 <Cmd_tec_pw_on+0x48>
	if (atoi(argv[1]))
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f006 fe4b 	bl	8008918 <atoi>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <Cmd_tec_pw_on+0x3c>
		LL_GPIO_SetOutputPin(EF_TEC_EN_GPIO_Port, EF_TEC_EN_Pin);
 8001c88:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c8c:	4806      	ldr	r0, [pc, #24]	@ (8001ca8 <Cmd_tec_pw_on+0x50>)
 8001c8e:	f7ff fea7 	bl	80019e0 <LL_GPIO_SetOutputPin>
 8001c92:	e004      	b.n	8001c9e <Cmd_tec_pw_on+0x46>
	else
		LL_GPIO_ResetOutputPin(EF_TEC_EN_GPIO_Port, EF_TEC_EN_Pin);
 8001c94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c98:	4803      	ldr	r0, [pc, #12]	@ (8001ca8 <Cmd_tec_pw_on+0x50>)
 8001c9a:	f7ff feaf 	bl	80019fc <LL_GPIO_ResetOutputPin>
	return (CMDLINE_OK);
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40020800 	.word	0x40020800

08001cac <Cmd_led_pw_on>:
int Cmd_led_pw_on(int argc, char *argv[])
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
	if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	dc01      	bgt.n	8001cc0 <Cmd_led_pw_on+0x14>
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e019      	b.n	8001cf4 <Cmd_led_pw_on+0x48>
	if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	dd01      	ble.n	8001cca <Cmd_led_pw_on+0x1e>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	e014      	b.n	8001cf4 <Cmd_led_pw_on+0x48>
	if (atoi(argv[1]))
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	3304      	adds	r3, #4
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f006 fe21 	bl	8008918 <atoi>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <Cmd_led_pw_on+0x3c>
		LL_GPIO_SetOutputPin(EF_LED_EN_GPIO_Port, EF_LED_EN_Pin);
 8001cdc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ce0:	4806      	ldr	r0, [pc, #24]	@ (8001cfc <Cmd_led_pw_on+0x50>)
 8001ce2:	f7ff fe7d 	bl	80019e0 <LL_GPIO_SetOutputPin>
 8001ce6:	e004      	b.n	8001cf2 <Cmd_led_pw_on+0x46>
	else
		LL_GPIO_ResetOutputPin(EF_LED_EN_GPIO_Port, EF_LED_EN_Pin);
 8001ce8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cec:	4803      	ldr	r0, [pc, #12]	@ (8001cfc <Cmd_led_pw_on+0x50>)
 8001cee:	f7ff fe85 	bl	80019fc <LL_GPIO_ResetOutputPin>
	return (CMDLINE_OK);
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40020400 	.word	0x40020400

08001d00 <Cmd_heater_pw_on>:
int Cmd_heater_pw_on(int argc, char *argv[])
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
	if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	dc01      	bgt.n	8001d14 <Cmd_heater_pw_on+0x14>
 8001d10:	2303      	movs	r3, #3
 8001d12:	e019      	b.n	8001d48 <Cmd_heater_pw_on+0x48>
	if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	dd01      	ble.n	8001d1e <Cmd_heater_pw_on+0x1e>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e014      	b.n	8001d48 <Cmd_heater_pw_on+0x48>
	if (atoi(argv[1]))
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	3304      	adds	r3, #4
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f006 fdf7 	bl	8008918 <atoi>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d005      	beq.n	8001d3c <Cmd_heater_pw_on+0x3c>
		LL_GPIO_SetOutputPin(EF_HEATER_EN_GPIO_Port, EF_HEATER_EN_Pin);
 8001d30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d34:	4806      	ldr	r0, [pc, #24]	@ (8001d50 <Cmd_heater_pw_on+0x50>)
 8001d36:	f7ff fe53 	bl	80019e0 <LL_GPIO_SetOutputPin>
 8001d3a:	e004      	b.n	8001d46 <Cmd_heater_pw_on+0x46>
	else
		LL_GPIO_ResetOutputPin(EF_HEATER_EN_GPIO_Port, EF_HEATER_EN_Pin);
 8001d3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d40:	4803      	ldr	r0, [pc, #12]	@ (8001d50 <Cmd_heater_pw_on+0x50>)
 8001d42:	f7ff fe5b 	bl	80019fc <LL_GPIO_ResetOutputPin>
	return (CMDLINE_OK);
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40021000 	.word	0x40021000

08001d54 <Cmd_set_temp>:
/* Command for temperature */
int Cmd_set_temp(int argc, char *argv[])
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
	if (argc < 5) return CMDLINE_TOO_FEW_ARGS;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	dc01      	bgt.n	8001d68 <Cmd_set_temp+0x14>
 8001d64:	2303      	movs	r3, #3
 8001d66:	e059      	b.n	8001e1c <Cmd_set_temp+0xc8>
	if (argc > 5) return CMDLINE_TOO_MANY_ARGS;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b05      	cmp	r3, #5
 8001d6c:	dd01      	ble.n	8001d72 <Cmd_set_temp+0x1e>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e054      	b.n	8001e1c <Cmd_set_temp+0xc8>
	int16_t setpoint_0 = atoi(argv[1]);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	3304      	adds	r3, #4
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f006 fdcd 	bl	8008918 <atoi>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	81fb      	strh	r3, [r7, #14]
	int16_t setpoint_1 = atoi(argv[2]);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	3308      	adds	r3, #8
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f006 fdc5 	bl	8008918 <atoi>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	81bb      	strh	r3, [r7, #12]
	int16_t setpoint_2 = atoi(argv[3]);
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	330c      	adds	r3, #12
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f006 fdbd 	bl	8008918 <atoi>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	817b      	strh	r3, [r7, #10]
	int16_t setpoint_3 = atoi(argv[4]);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	3310      	adds	r3, #16
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f006 fdb5 	bl	8008918 <atoi>
 8001dae:	4603      	mov	r3, r0
 8001db0:	813b      	strh	r3, [r7, #8]
	temperature_set_setpoint(0, setpoint_0);
 8001db2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001db6:	4619      	mov	r1, r3
 8001db8:	2000      	movs	r0, #0
 8001dba:	f004 fac1 	bl	8006340 <temperature_set_setpoint>
	temperature_set_setpoint(1, setpoint_1);
 8001dbe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	f004 fabb 	bl	8006340 <temperature_set_setpoint>
	temperature_set_setpoint(2, setpoint_2);
 8001dca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001dce:	4619      	mov	r1, r3
 8001dd0:	2002      	movs	r0, #2
 8001dd2:	f004 fab5 	bl	8006340 <temperature_set_setpoint>
	temperature_set_setpoint(3, setpoint_3);
 8001dd6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001dda:	4619      	mov	r1, r3
 8001ddc:	2003      	movs	r0, #3
 8001dde:	f004 faaf 	bl	8006340 <temperature_set_setpoint>
	UART_Printf(&CONSOLE_UART, "Setpoint[%d]:%i \n", 0, setpoint_0);
 8001de2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001de6:	2200      	movs	r2, #0
 8001de8:	490e      	ldr	r1, [pc, #56]	@ (8001e24 <Cmd_set_temp+0xd0>)
 8001dea:	480f      	ldr	r0, [pc, #60]	@ (8001e28 <Cmd_set_temp+0xd4>)
 8001dec:	f7ff fa8c 	bl	8001308 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "Setpoint[%d]:%i \n", 1, setpoint_1);
 8001df0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001df4:	2201      	movs	r2, #1
 8001df6:	490b      	ldr	r1, [pc, #44]	@ (8001e24 <Cmd_set_temp+0xd0>)
 8001df8:	480b      	ldr	r0, [pc, #44]	@ (8001e28 <Cmd_set_temp+0xd4>)
 8001dfa:	f7ff fa85 	bl	8001308 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "Setpoint[%d]:%i \n", 2, setpoint_2);
 8001dfe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e02:	2202      	movs	r2, #2
 8001e04:	4907      	ldr	r1, [pc, #28]	@ (8001e24 <Cmd_set_temp+0xd0>)
 8001e06:	4808      	ldr	r0, [pc, #32]	@ (8001e28 <Cmd_set_temp+0xd4>)
 8001e08:	f7ff fa7e 	bl	8001308 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "Setpoint[%d]:%i \n", 3, setpoint_3);
 8001e0c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001e10:	2203      	movs	r2, #3
 8001e12:	4904      	ldr	r1, [pc, #16]	@ (8001e24 <Cmd_set_temp+0xd0>)
 8001e14:	4804      	ldr	r0, [pc, #16]	@ (8001e28 <Cmd_set_temp+0xd4>)
 8001e16:	f7ff fa77 	bl	8001308 <UART_Printf>
	return (CMDLINE_OK);
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	08009958 	.word	0x08009958
 8001e28:	20002468 	.word	0x20002468

08001e2c <Cmd_get_temp>:
int Cmd_get_temp(int argc, char *argv[])
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
	if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	dd01      	ble.n	8001e40 <Cmd_get_temp+0x14>
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	e038      	b.n	8001eb2 <Cmd_get_temp+0x86>
	int16_t temp;

	/* Temperature from BMP390 */
	temp = bmp390_get_temperature();
 8001e40:	f001 fbc6 	bl	80035d0 <bmp390_get_temperature>
 8001e44:	4603      	mov	r3, r0
 8001e46:	81bb      	strh	r3, [r7, #12]
	if (temp == 0x7FFF) UART_Send_String(&CONSOLE_UART, "BMP390 is fail \n");
 8001e48:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001e4c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d104      	bne.n	8001e5e <Cmd_get_temp+0x32>
 8001e54:	4919      	ldr	r1, [pc, #100]	@ (8001ebc <Cmd_get_temp+0x90>)
 8001e56:	481a      	ldr	r0, [pc, #104]	@ (8001ec0 <Cmd_get_temp+0x94>)
 8001e58:	f7ff f9c7 	bl	80011ea <UART_Send_String>
 8001e5c:	e006      	b.n	8001e6c <Cmd_get_temp+0x40>
	else UART_Printf(&CONSOLE_UART, "BMP390 temp: %i \n", temp);
 8001e5e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001e62:	461a      	mov	r2, r3
 8001e64:	4917      	ldr	r1, [pc, #92]	@ (8001ec4 <Cmd_get_temp+0x98>)
 8001e66:	4816      	ldr	r0, [pc, #88]	@ (8001ec0 <Cmd_get_temp+0x94>)
 8001e68:	f7ff fa4e 	bl	8001308 <UART_Printf>

	/* Temperature from NTC */
	for (uint8_t channel = 0; channel < 4; channel++)
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	73fb      	strb	r3, [r7, #15]
 8001e70:	e01b      	b.n	8001eaa <Cmd_get_temp+0x7e>
	{
		temp = NTC_Temperature[channel];
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	4a14      	ldr	r2, [pc, #80]	@ (8001ec8 <Cmd_get_temp+0x9c>)
 8001e76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e7a:	81bb      	strh	r3, [r7, #12]
		if (temp == 0x7FFF) UART_Printf(&CONSOLE_UART, "NTC[%d] is fail \n", channel);
 8001e7c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001e80:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d106      	bne.n	8001e96 <Cmd_get_temp+0x6a>
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	490f      	ldr	r1, [pc, #60]	@ (8001ecc <Cmd_get_temp+0xa0>)
 8001e8e:	480c      	ldr	r0, [pc, #48]	@ (8001ec0 <Cmd_get_temp+0x94>)
 8001e90:	f7ff fa3a 	bl	8001308 <UART_Printf>
 8001e94:	e006      	b.n	8001ea4 <Cmd_get_temp+0x78>
		else UART_Printf(&CONSOLE_UART, "NTC[%d]: %i \n", channel, temp);
 8001e96:	7bfa      	ldrb	r2, [r7, #15]
 8001e98:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001e9c:	490c      	ldr	r1, [pc, #48]	@ (8001ed0 <Cmd_get_temp+0xa4>)
 8001e9e:	4808      	ldr	r0, [pc, #32]	@ (8001ec0 <Cmd_get_temp+0x94>)
 8001ea0:	f7ff fa32 	bl	8001308 <UART_Printf>
	for (uint8_t channel = 0; channel < 4; channel++)
 8001ea4:	7bfb      	ldrb	r3, [r7, #15]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	73fb      	strb	r3, [r7, #15]
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	2b03      	cmp	r3, #3
 8001eae:	d9e0      	bls.n	8001e72 <Cmd_get_temp+0x46>
	}
	return (CMDLINE_OK);
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	0800996c 	.word	0x0800996c
 8001ec0:	20002468 	.word	0x20002468
 8001ec4:	08009980 	.word	0x08009980
 8001ec8:	20002728 	.word	0x20002728
 8001ecc:	08009994 	.word	0x08009994
 8001ed0:	080099a8 	.word	0x080099a8

08001ed4 <Cmd_get_temp_setpoint>:

int Cmd_get_temp_setpoint(int argc, char *argv[])
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
	if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	dd01      	ble.n	8001ee8 <Cmd_get_temp_setpoint+0x14>
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	e018      	b.n	8001f1a <Cmd_get_temp_setpoint+0x46>
	int16_t setpoint = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	81bb      	strh	r3, [r7, #12]
	for (uint8_t channel = 0; channel < 4; channel++)
 8001eec:	2300      	movs	r3, #0
 8001eee:	73fb      	strb	r3, [r7, #15]
 8001ef0:	e00f      	b.n	8001f12 <Cmd_get_temp_setpoint+0x3e>
	{
		setpoint = temperature_get_setpoint(channel);
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f004 fa39 	bl	800636c <temperature_get_setpoint>
 8001efa:	4603      	mov	r3, r0
 8001efc:	81bb      	strh	r3, [r7, #12]
		UART_Printf(&CONSOLE_UART, "Setpoint[%d]:%i \r\n", channel, setpoint);
 8001efe:	7bfa      	ldrb	r2, [r7, #15]
 8001f00:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001f04:	4907      	ldr	r1, [pc, #28]	@ (8001f24 <Cmd_get_temp_setpoint+0x50>)
 8001f06:	4808      	ldr	r0, [pc, #32]	@ (8001f28 <Cmd_get_temp_setpoint+0x54>)
 8001f08:	f7ff f9fe 	bl	8001308 <UART_Printf>
	for (uint8_t channel = 0; channel < 4; channel++)
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	73fb      	strb	r3, [r7, #15]
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
 8001f14:	2b03      	cmp	r3, #3
 8001f16:	d9ec      	bls.n	8001ef2 <Cmd_get_temp_setpoint+0x1e>
	}
	return (CMDLINE_OK);
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	080099b8 	.word	0x080099b8
 8001f28:	20002468 	.word	0x20002468

08001f2c <Cmd_set_tec_vol>:
int Cmd_set_tec_vol(int argc, char *argv[])
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
//	if (argc < 5) return CMDLINE_TOO_FEW_ARGS;
//	if (argc > 5) return CMDLINE_TOO_MANY_ARGS;
	uint16_t vol[4];
	for (uint8_t i = 0; i < 4; i++)
 8001f36:	2300      	movs	r3, #0
 8001f38:	75fb      	strb	r3, [r7, #23]
 8001f3a:	e025      	b.n	8001f88 <Cmd_set_tec_vol+0x5c>
	{
		vol[i] = atoi(argv[i+1]);
 8001f3c:	7dfb      	ldrb	r3, [r7, #23]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	4413      	add	r3, r2
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f006 fce5 	bl	8008918 <atoi>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	7dfb      	ldrb	r3, [r7, #23]
 8001f52:	b292      	uxth	r2, r2
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	3318      	adds	r3, #24
 8001f58:	443b      	add	r3, r7
 8001f5a:	f823 2c0c 	strh.w	r2, [r3, #-12]
		if (vol[i] > 3000) vol[i] = 3000;
 8001f5e:	7dfb      	ldrb	r3, [r7, #23]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	3318      	adds	r3, #24
 8001f64:	443b      	add	r3, r7
 8001f66:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8001f6a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d907      	bls.n	8001f82 <Cmd_set_tec_vol+0x56>
 8001f72:	7dfb      	ldrb	r3, [r7, #23]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	3318      	adds	r3, #24
 8001f78:	443b      	add	r3, r7
 8001f7a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001f7e:	f823 2c0c 	strh.w	r2, [r3, #-12]
	for (uint8_t i = 0; i < 4; i++)
 8001f82:	7dfb      	ldrb	r3, [r7, #23]
 8001f84:	3301      	adds	r3, #1
 8001f86:	75fb      	strb	r3, [r7, #23]
 8001f88:	7dfb      	ldrb	r3, [r7, #23]
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	d9d6      	bls.n	8001f3c <Cmd_set_tec_vol+0x10>
	}
	temperature_set_tec_vol(0, vol[0]);
 8001f8e:	89bb      	ldrh	r3, [r7, #12]
 8001f90:	4619      	mov	r1, r3
 8001f92:	2000      	movs	r0, #0
 8001f94:	f004 fa0e 	bl	80063b4 <temperature_set_tec_vol>
	temperature_set_tec_vol(1, vol[1]);
 8001f98:	89fb      	ldrh	r3, [r7, #14]
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	f004 fa09 	bl	80063b4 <temperature_set_tec_vol>
	temperature_set_tec_vol(2, vol[2]);
 8001fa2:	8a3b      	ldrh	r3, [r7, #16]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	2002      	movs	r0, #2
 8001fa8:	f004 fa04 	bl	80063b4 <temperature_set_tec_vol>
	temperature_set_tec_vol(3, vol[3]);
 8001fac:	8a7b      	ldrh	r3, [r7, #18]
 8001fae:	4619      	mov	r1, r3
 8001fb0:	2003      	movs	r0, #3
 8001fb2:	f004 f9ff 	bl	80063b4 <temperature_set_tec_vol>
	UART_Printf(&CONSOLE_UART, "Tec voltage[%d]:%i mV\n", 0, vol[0]);
 8001fb6:	89bb      	ldrh	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	490d      	ldr	r1, [pc, #52]	@ (8001ff0 <Cmd_set_tec_vol+0xc4>)
 8001fbc:	480d      	ldr	r0, [pc, #52]	@ (8001ff4 <Cmd_set_tec_vol+0xc8>)
 8001fbe:	f7ff f9a3 	bl	8001308 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "Tec voltage[%d]:%i mV\n", 1, vol[1]);
 8001fc2:	89fb      	ldrh	r3, [r7, #14]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	490a      	ldr	r1, [pc, #40]	@ (8001ff0 <Cmd_set_tec_vol+0xc4>)
 8001fc8:	480a      	ldr	r0, [pc, #40]	@ (8001ff4 <Cmd_set_tec_vol+0xc8>)
 8001fca:	f7ff f99d 	bl	8001308 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "Tec voltage[%d]:%i mV\n", 2, vol[2]);
 8001fce:	8a3b      	ldrh	r3, [r7, #16]
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	4907      	ldr	r1, [pc, #28]	@ (8001ff0 <Cmd_set_tec_vol+0xc4>)
 8001fd4:	4807      	ldr	r0, [pc, #28]	@ (8001ff4 <Cmd_set_tec_vol+0xc8>)
 8001fd6:	f7ff f997 	bl	8001308 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "Tec voltage[%d]:%i mV\n", 3, vol[3]);
 8001fda:	8a7b      	ldrh	r3, [r7, #18]
 8001fdc:	2203      	movs	r2, #3
 8001fde:	4904      	ldr	r1, [pc, #16]	@ (8001ff0 <Cmd_set_tec_vol+0xc4>)
 8001fe0:	4804      	ldr	r0, [pc, #16]	@ (8001ff4 <Cmd_set_tec_vol+0xc8>)
 8001fe2:	f7ff f991 	bl	8001308 <UART_Printf>
	return (CMDLINE_OK);
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	080099cc 	.word	0x080099cc
 8001ff4:	20002468 	.word	0x20002468

08001ff8 <Cmd_get_tec_vol>:
int Cmd_get_tec_vol(int argc, char *argv[])
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
	if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b01      	cmp	r3, #1
 8002006:	dd01      	ble.n	800200c <Cmd_get_tec_vol+0x14>
 8002008:	2302      	movs	r3, #2
 800200a:	e02c      	b.n	8002066 <Cmd_get_tec_vol+0x6e>
	uint16_t vol_0 = temperature_get_tec_vol(0);
 800200c:	2000      	movs	r0, #0
 800200e:	f004 f9f1 	bl	80063f4 <temperature_get_tec_vol>
 8002012:	4603      	mov	r3, r0
 8002014:	81fb      	strh	r3, [r7, #14]
	uint16_t vol_1 = temperature_get_tec_vol(1);
 8002016:	2001      	movs	r0, #1
 8002018:	f004 f9ec 	bl	80063f4 <temperature_get_tec_vol>
 800201c:	4603      	mov	r3, r0
 800201e:	81bb      	strh	r3, [r7, #12]
	uint16_t vol_2 = temperature_get_tec_vol(2);
 8002020:	2002      	movs	r0, #2
 8002022:	f004 f9e7 	bl	80063f4 <temperature_get_tec_vol>
 8002026:	4603      	mov	r3, r0
 8002028:	817b      	strh	r3, [r7, #10]
	uint16_t vol_3 = temperature_get_tec_vol(3);
 800202a:	2003      	movs	r0, #3
 800202c:	f004 f9e2 	bl	80063f4 <temperature_get_tec_vol>
 8002030:	4603      	mov	r3, r0
 8002032:	813b      	strh	r3, [r7, #8]
	UART_Printf(&CONSOLE_UART, "Tec voltage[%d]:%i mV\n", 0, vol_0);
 8002034:	89fb      	ldrh	r3, [r7, #14]
 8002036:	2200      	movs	r2, #0
 8002038:	490d      	ldr	r1, [pc, #52]	@ (8002070 <Cmd_get_tec_vol+0x78>)
 800203a:	480e      	ldr	r0, [pc, #56]	@ (8002074 <Cmd_get_tec_vol+0x7c>)
 800203c:	f7ff f964 	bl	8001308 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "Tec voltage[%d]:%i mV\n", 1, vol_1);
 8002040:	89bb      	ldrh	r3, [r7, #12]
 8002042:	2201      	movs	r2, #1
 8002044:	490a      	ldr	r1, [pc, #40]	@ (8002070 <Cmd_get_tec_vol+0x78>)
 8002046:	480b      	ldr	r0, [pc, #44]	@ (8002074 <Cmd_get_tec_vol+0x7c>)
 8002048:	f7ff f95e 	bl	8001308 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "Tec voltage[%d]:%i mV\n", 2, vol_2);
 800204c:	897b      	ldrh	r3, [r7, #10]
 800204e:	2202      	movs	r2, #2
 8002050:	4907      	ldr	r1, [pc, #28]	@ (8002070 <Cmd_get_tec_vol+0x78>)
 8002052:	4808      	ldr	r0, [pc, #32]	@ (8002074 <Cmd_get_tec_vol+0x7c>)
 8002054:	f7ff f958 	bl	8001308 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "Tec voltage[%d]:%i mV\n", 3, vol_3);
 8002058:	893b      	ldrh	r3, [r7, #8]
 800205a:	2203      	movs	r2, #3
 800205c:	4904      	ldr	r1, [pc, #16]	@ (8002070 <Cmd_get_tec_vol+0x78>)
 800205e:	4805      	ldr	r0, [pc, #20]	@ (8002074 <Cmd_get_tec_vol+0x7c>)
 8002060:	f7ff f952 	bl	8001308 <UART_Printf>
	return (CMDLINE_OK);
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	080099cc 	.word	0x080099cc
 8002074:	20002468 	.word	0x20002468

08002078 <Cmd_set_heater_duty>:
int Cmd_set_heater_duty(int argc, char *argv[])
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
	if (argc < 5) return CMDLINE_TOO_FEW_ARGS;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b04      	cmp	r3, #4
 8002086:	dc01      	bgt.n	800208c <Cmd_set_heater_duty+0x14>
 8002088:	2303      	movs	r3, #3
 800208a:	e057      	b.n	800213c <Cmd_set_heater_duty+0xc4>
	if (argc > 5) return CMDLINE_TOO_MANY_ARGS;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b05      	cmp	r3, #5
 8002090:	dd01      	ble.n	8002096 <Cmd_set_heater_duty+0x1e>
 8002092:	2302      	movs	r3, #2
 8002094:	e052      	b.n	800213c <Cmd_set_heater_duty+0xc4>
	uint8_t duty[4];
	for (uint8_t i = 0; i < 4; i++)
 8002096:	2300      	movs	r3, #0
 8002098:	73fb      	strb	r3, [r7, #15]
 800209a:	e01f      	b.n	80020dc <Cmd_set_heater_duty+0x64>
	{
		duty[i] = atoi(argv[i+1]);
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	3301      	adds	r3, #1
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	4413      	add	r3, r2
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f006 fc35 	bl	8008918 <atoi>
 80020ae:	4602      	mov	r2, r0
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	3310      	adds	r3, #16
 80020b6:	443b      	add	r3, r7
 80020b8:	f803 2c08 	strb.w	r2, [r3, #-8]
		if (duty[i] > 100) duty[i] = 100;
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	3310      	adds	r3, #16
 80020c0:	443b      	add	r3, r7
 80020c2:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80020c6:	2b64      	cmp	r3, #100	@ 0x64
 80020c8:	d905      	bls.n	80020d6 <Cmd_set_heater_duty+0x5e>
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	3310      	adds	r3, #16
 80020ce:	443b      	add	r3, r7
 80020d0:	2264      	movs	r2, #100	@ 0x64
 80020d2:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (uint8_t i = 0; i < 4; i++)
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	3301      	adds	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	2b03      	cmp	r3, #3
 80020e0:	d9dc      	bls.n	800209c <Cmd_set_heater_duty+0x24>
	}
	temperature_set_heater_duty(0, duty[0]);
 80020e2:	7a3b      	ldrb	r3, [r7, #8]
 80020e4:	4619      	mov	r1, r3
 80020e6:	2000      	movs	r0, #0
 80020e8:	f004 f9a0 	bl	800642c <temperature_set_heater_duty>
	temperature_set_heater_duty(1, duty[1]);
 80020ec:	7a7b      	ldrb	r3, [r7, #9]
 80020ee:	4619      	mov	r1, r3
 80020f0:	2001      	movs	r0, #1
 80020f2:	f004 f99b 	bl	800642c <temperature_set_heater_duty>
	temperature_set_heater_duty(2, duty[2]);
 80020f6:	7abb      	ldrb	r3, [r7, #10]
 80020f8:	4619      	mov	r1, r3
 80020fa:	2002      	movs	r0, #2
 80020fc:	f004 f996 	bl	800642c <temperature_set_heater_duty>
	temperature_set_heater_duty(3, duty[3]);
 8002100:	7afb      	ldrb	r3, [r7, #11]
 8002102:	4619      	mov	r1, r3
 8002104:	2003      	movs	r0, #3
 8002106:	f004 f991 	bl	800642c <temperature_set_heater_duty>
	UART_Printf(&CONSOLE_UART, "Heater duty[%d]:%i %\n", 0, duty[0]);
 800210a:	7a3b      	ldrb	r3, [r7, #8]
 800210c:	2200      	movs	r2, #0
 800210e:	490d      	ldr	r1, [pc, #52]	@ (8002144 <Cmd_set_heater_duty+0xcc>)
 8002110:	480d      	ldr	r0, [pc, #52]	@ (8002148 <Cmd_set_heater_duty+0xd0>)
 8002112:	f7ff f8f9 	bl	8001308 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "Heater duty[%d]:%i %\n", 1, duty[1]);
 8002116:	7a7b      	ldrb	r3, [r7, #9]
 8002118:	2201      	movs	r2, #1
 800211a:	490a      	ldr	r1, [pc, #40]	@ (8002144 <Cmd_set_heater_duty+0xcc>)
 800211c:	480a      	ldr	r0, [pc, #40]	@ (8002148 <Cmd_set_heater_duty+0xd0>)
 800211e:	f7ff f8f3 	bl	8001308 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "Heater duty[%d]:%i %\n", 2, duty[2]);
 8002122:	7abb      	ldrb	r3, [r7, #10]
 8002124:	2202      	movs	r2, #2
 8002126:	4907      	ldr	r1, [pc, #28]	@ (8002144 <Cmd_set_heater_duty+0xcc>)
 8002128:	4807      	ldr	r0, [pc, #28]	@ (8002148 <Cmd_set_heater_duty+0xd0>)
 800212a:	f7ff f8ed 	bl	8001308 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "Heater duty[%d]:%i %\n", 3, duty[3]);
 800212e:	7afb      	ldrb	r3, [r7, #11]
 8002130:	2203      	movs	r2, #3
 8002132:	4904      	ldr	r1, [pc, #16]	@ (8002144 <Cmd_set_heater_duty+0xcc>)
 8002134:	4804      	ldr	r0, [pc, #16]	@ (8002148 <Cmd_set_heater_duty+0xd0>)
 8002136:	f7ff f8e7 	bl	8001308 <UART_Printf>
	return (CMDLINE_OK);
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	080099e4 	.word	0x080099e4
 8002148:	20002468 	.word	0x20002468

0800214c <Cmd_get_heater_duty>:
int Cmd_get_heater_duty(int argc, char *argv[])
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
	if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b01      	cmp	r3, #1
 800215a:	dd01      	ble.n	8002160 <Cmd_get_heater_duty+0x14>
 800215c:	2302      	movs	r3, #2
 800215e:	e02c      	b.n	80021ba <Cmd_get_heater_duty+0x6e>
	uint16_t duty_0 = temperature_get_heater_duty(0);
 8002160:	2000      	movs	r0, #0
 8002162:	f004 f987 	bl	8006474 <temperature_get_heater_duty>
 8002166:	4603      	mov	r3, r0
 8002168:	81fb      	strh	r3, [r7, #14]
	uint16_t duty_1 = temperature_get_heater_duty(1);
 800216a:	2001      	movs	r0, #1
 800216c:	f004 f982 	bl	8006474 <temperature_get_heater_duty>
 8002170:	4603      	mov	r3, r0
 8002172:	81bb      	strh	r3, [r7, #12]
	uint16_t duty_2 = temperature_get_heater_duty(2);
 8002174:	2002      	movs	r0, #2
 8002176:	f004 f97d 	bl	8006474 <temperature_get_heater_duty>
 800217a:	4603      	mov	r3, r0
 800217c:	817b      	strh	r3, [r7, #10]
	uint16_t duty_3 = temperature_get_heater_duty(3);
 800217e:	2003      	movs	r0, #3
 8002180:	f004 f978 	bl	8006474 <temperature_get_heater_duty>
 8002184:	4603      	mov	r3, r0
 8002186:	813b      	strh	r3, [r7, #8]
	UART_Printf(&CONSOLE_UART, "Heater duty[%d]:%i %\n", 0, duty_0);
 8002188:	89fb      	ldrh	r3, [r7, #14]
 800218a:	2200      	movs	r2, #0
 800218c:	490d      	ldr	r1, [pc, #52]	@ (80021c4 <Cmd_get_heater_duty+0x78>)
 800218e:	480e      	ldr	r0, [pc, #56]	@ (80021c8 <Cmd_get_heater_duty+0x7c>)
 8002190:	f7ff f8ba 	bl	8001308 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "Heater duty[%d]:%i %\n", 1, duty_1);
 8002194:	89bb      	ldrh	r3, [r7, #12]
 8002196:	2201      	movs	r2, #1
 8002198:	490a      	ldr	r1, [pc, #40]	@ (80021c4 <Cmd_get_heater_duty+0x78>)
 800219a:	480b      	ldr	r0, [pc, #44]	@ (80021c8 <Cmd_get_heater_duty+0x7c>)
 800219c:	f7ff f8b4 	bl	8001308 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "Heater duty[%d]:%i %\n", 2, duty_2);
 80021a0:	897b      	ldrh	r3, [r7, #10]
 80021a2:	2202      	movs	r2, #2
 80021a4:	4907      	ldr	r1, [pc, #28]	@ (80021c4 <Cmd_get_heater_duty+0x78>)
 80021a6:	4808      	ldr	r0, [pc, #32]	@ (80021c8 <Cmd_get_heater_duty+0x7c>)
 80021a8:	f7ff f8ae 	bl	8001308 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "Heater duty[%d]:%i %\n", 3, duty_3);
 80021ac:	893b      	ldrh	r3, [r7, #8]
 80021ae:	2203      	movs	r2, #3
 80021b0:	4904      	ldr	r1, [pc, #16]	@ (80021c4 <Cmd_get_heater_duty+0x78>)
 80021b2:	4805      	ldr	r0, [pc, #20]	@ (80021c8 <Cmd_get_heater_duty+0x7c>)
 80021b4:	f7ff f8a8 	bl	8001308 <UART_Printf>
	return (CMDLINE_OK);
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	080099e4 	.word	0x080099e4
 80021c8:	20002468 	.word	0x20002468

080021cc <Cmd_temp_ctrl>:
int Cmd_temp_ctrl(int argc, char *argv[])
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
//	if (argc < 5) return CMDLINE_TOO_FEW_ARGS;
//	if (argc > 5) return CMDLINE_TOO_MANY_ARGS;
	mode_ctrl_temp_t mode_0 = OFF;
 80021d6:	2300      	movs	r3, #0
 80021d8:	73fb      	strb	r3, [r7, #15]
	mode_ctrl_temp_t mode_1 = OFF;
 80021da:	2300      	movs	r3, #0
 80021dc:	73bb      	strb	r3, [r7, #14]
	mode_ctrl_temp_t mode_2 = OFF;
 80021de:	2300      	movs	r3, #0
 80021e0:	737b      	strb	r3, [r7, #13]
	mode_ctrl_temp_t mode_3 = OFF;
 80021e2:	2300      	movs	r3, #0
 80021e4:	733b      	strb	r3, [r7, #12]

	if (!strcmp(argv[1], "C")) mode_0 = COOL;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	3304      	adds	r3, #4
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	493b      	ldr	r1, [pc, #236]	@ (80022dc <Cmd_temp_ctrl+0x110>)
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fd ffee 	bl	80001d0 <strcmp>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d102      	bne.n	8002200 <Cmd_temp_ctrl+0x34>
 80021fa:	2301      	movs	r3, #1
 80021fc:	73fb      	strb	r3, [r7, #15]
 80021fe:	e00e      	b.n	800221e <Cmd_temp_ctrl+0x52>
	else if (!strcmp(argv[1], "H")) mode_0 = HEAT;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	3304      	adds	r3, #4
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4936      	ldr	r1, [pc, #216]	@ (80022e0 <Cmd_temp_ctrl+0x114>)
 8002208:	4618      	mov	r0, r3
 800220a:	f7fd ffe1 	bl	80001d0 <strcmp>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d102      	bne.n	800221a <Cmd_temp_ctrl+0x4e>
 8002214:	2302      	movs	r3, #2
 8002216:	73fb      	strb	r3, [r7, #15]
 8002218:	e001      	b.n	800221e <Cmd_temp_ctrl+0x52>
	else mode_0 = OFF;
 800221a:	2300      	movs	r3, #0
 800221c:	73fb      	strb	r3, [r7, #15]
	if (!strcmp(argv[2], "C")) mode_1 = COOL;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	3308      	adds	r3, #8
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	492d      	ldr	r1, [pc, #180]	@ (80022dc <Cmd_temp_ctrl+0x110>)
 8002226:	4618      	mov	r0, r3
 8002228:	f7fd ffd2 	bl	80001d0 <strcmp>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d102      	bne.n	8002238 <Cmd_temp_ctrl+0x6c>
 8002232:	2301      	movs	r3, #1
 8002234:	73bb      	strb	r3, [r7, #14]
 8002236:	e00e      	b.n	8002256 <Cmd_temp_ctrl+0x8a>
	else if (!strcmp(argv[2], "H")) mode_1 = HEAT;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	3308      	adds	r3, #8
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4928      	ldr	r1, [pc, #160]	@ (80022e0 <Cmd_temp_ctrl+0x114>)
 8002240:	4618      	mov	r0, r3
 8002242:	f7fd ffc5 	bl	80001d0 <strcmp>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d102      	bne.n	8002252 <Cmd_temp_ctrl+0x86>
 800224c:	2302      	movs	r3, #2
 800224e:	73bb      	strb	r3, [r7, #14]
 8002250:	e001      	b.n	8002256 <Cmd_temp_ctrl+0x8a>
	else mode_1 = OFF;
 8002252:	2300      	movs	r3, #0
 8002254:	73bb      	strb	r3, [r7, #14]
	if (!strcmp(argv[3], "C")) mode_1 = COOL;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	330c      	adds	r3, #12
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	491f      	ldr	r1, [pc, #124]	@ (80022dc <Cmd_temp_ctrl+0x110>)
 800225e:	4618      	mov	r0, r3
 8002260:	f7fd ffb6 	bl	80001d0 <strcmp>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d102      	bne.n	8002270 <Cmd_temp_ctrl+0xa4>
 800226a:	2301      	movs	r3, #1
 800226c:	73bb      	strb	r3, [r7, #14]
 800226e:	e00e      	b.n	800228e <Cmd_temp_ctrl+0xc2>
	else if (!strcmp(argv[3], "H")) mode_2 = HEAT;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	330c      	adds	r3, #12
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	491a      	ldr	r1, [pc, #104]	@ (80022e0 <Cmd_temp_ctrl+0x114>)
 8002278:	4618      	mov	r0, r3
 800227a:	f7fd ffa9 	bl	80001d0 <strcmp>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d102      	bne.n	800228a <Cmd_temp_ctrl+0xbe>
 8002284:	2302      	movs	r3, #2
 8002286:	737b      	strb	r3, [r7, #13]
 8002288:	e001      	b.n	800228e <Cmd_temp_ctrl+0xc2>
	else mode_2 = OFF;
 800228a:	2300      	movs	r3, #0
 800228c:	737b      	strb	r3, [r7, #13]
	if (!strcmp(argv[4], "C")) mode_3 = COOL;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	3310      	adds	r3, #16
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4911      	ldr	r1, [pc, #68]	@ (80022dc <Cmd_temp_ctrl+0x110>)
 8002296:	4618      	mov	r0, r3
 8002298:	f7fd ff9a 	bl	80001d0 <strcmp>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d102      	bne.n	80022a8 <Cmd_temp_ctrl+0xdc>
 80022a2:	2301      	movs	r3, #1
 80022a4:	733b      	strb	r3, [r7, #12]
 80022a6:	e00e      	b.n	80022c6 <Cmd_temp_ctrl+0xfa>
	else if (!strcmp(argv[4], "H")) mode_3 = HEAT;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	3310      	adds	r3, #16
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	490c      	ldr	r1, [pc, #48]	@ (80022e0 <Cmd_temp_ctrl+0x114>)
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fd ff8d 	bl	80001d0 <strcmp>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d102      	bne.n	80022c2 <Cmd_temp_ctrl+0xf6>
 80022bc:	2302      	movs	r3, #2
 80022be:	733b      	strb	r3, [r7, #12]
 80022c0:	e001      	b.n	80022c6 <Cmd_temp_ctrl+0xfa>
	else mode_3 = OFF;
 80022c2:	2300      	movs	r3, #0
 80022c4:	733b      	strb	r3, [r7, #12]

	temperature_set_ctrl(mode_0, mode_1, mode_2, mode_3);
 80022c6:	7b3b      	ldrb	r3, [r7, #12]
 80022c8:	7b7a      	ldrb	r2, [r7, #13]
 80022ca:	7bb9      	ldrb	r1, [r7, #14]
 80022cc:	7bf8      	ldrb	r0, [r7, #15]
 80022ce:	f004 f923 	bl	8006518 <temperature_set_ctrl>
	return (CMDLINE_OK);
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	080099fc 	.word	0x080099fc
 80022e0:	08009a00 	.word	0x08009a00

080022e4 <Cmd_temp_auto_ctrl>:
int Cmd_temp_auto_ctrl(int argc, char *argv[])
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
	if (argc < 5) return CMDLINE_TOO_FEW_ARGS;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b04      	cmp	r3, #4
 80022f2:	dc01      	bgt.n	80022f8 <Cmd_temp_auto_ctrl+0x14>
 80022f4:	2303      	movs	r3, #3
 80022f6:	e03f      	b.n	8002378 <Cmd_temp_auto_ctrl+0x94>
	if (argc > 5) return CMDLINE_TOO_MANY_ARGS;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b05      	cmp	r3, #5
 80022fc:	dd01      	ble.n	8002302 <Cmd_temp_auto_ctrl+0x1e>
 80022fe:	2302      	movs	r3, #2
 8002300:	e03a      	b.n	8002378 <Cmd_temp_auto_ctrl+0x94>
	uint8_t auto_0 = atoi(argv[1]) ? 1 : 0;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	3304      	adds	r3, #4
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f006 fb05 	bl	8008918 <atoi>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	bf14      	ite	ne
 8002314:	2301      	movne	r3, #1
 8002316:	2300      	moveq	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	73fb      	strb	r3, [r7, #15]
	uint8_t auto_1 = atoi(argv[2]) ? 1 : 0;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	3308      	adds	r3, #8
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f006 faf8 	bl	8008918 <atoi>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	bf14      	ite	ne
 800232e:	2301      	movne	r3, #1
 8002330:	2300      	moveq	r3, #0
 8002332:	b2db      	uxtb	r3, r3
 8002334:	73bb      	strb	r3, [r7, #14]
	uint8_t auto_2 = atoi(argv[3]) ? 1 : 0;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	330c      	adds	r3, #12
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f006 faeb 	bl	8008918 <atoi>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	bf14      	ite	ne
 8002348:	2301      	movne	r3, #1
 800234a:	2300      	moveq	r3, #0
 800234c:	b2db      	uxtb	r3, r3
 800234e:	737b      	strb	r3, [r7, #13]
	uint8_t auto_3 = atoi(argv[4]) ? 1 : 0;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	3310      	adds	r3, #16
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f006 fade 	bl	8008918 <atoi>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	bf14      	ite	ne
 8002362:	2301      	movne	r3, #1
 8002364:	2300      	moveq	r3, #0
 8002366:	b2db      	uxtb	r3, r3
 8002368:	733b      	strb	r3, [r7, #12]
	temperature_set_auto_ctrl(auto_0, auto_1, auto_2, auto_3);
 800236a:	7b3b      	ldrb	r3, [r7, #12]
 800236c:	7b7a      	ldrb	r2, [r7, #13]
 800236e:	7bb9      	ldrb	r1, [r7, #14]
 8002370:	7bf8      	ldrb	r0, [r7, #15]
 8002372:	f004 f89f 	bl	80064b4 <temperature_set_auto_ctrl>
	return (CMDLINE_OK);
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <Cmd_set_ir_duty>:
/* Command for ir led */
int Cmd_set_ir_duty(int argc, char *argv[])
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
	if (argc < 5) return CMDLINE_TOO_FEW_ARGS;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b04      	cmp	r3, #4
 800238e:	dc01      	bgt.n	8002394 <Cmd_set_ir_duty+0x14>
 8002390:	2303      	movs	r3, #3
 8002392:	e087      	b.n	80024a4 <Cmd_set_ir_duty+0x124>
	if (argc > 5) return CMDLINE_TOO_MANY_ARGS;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b05      	cmp	r3, #5
 8002398:	dd01      	ble.n	800239e <Cmd_set_ir_duty+0x1e>
 800239a:	2302      	movs	r3, #2
 800239c:	e082      	b.n	80024a4 <Cmd_set_ir_duty+0x124>
	uint8_t duty[4];
	for (uint8_t i = 0; i < 4; i++)
 800239e:	2300      	movs	r3, #0
 80023a0:	73fb      	strb	r3, [r7, #15]
 80023a2:	e01f      	b.n	80023e4 <Cmd_set_ir_duty+0x64>
	{
		duty[i] = atoi(argv[i+1]);
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	3301      	adds	r3, #1
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	4413      	add	r3, r2
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f006 fab1 	bl	8008918 <atoi>
 80023b6:	4602      	mov	r2, r0
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	3310      	adds	r3, #16
 80023be:	443b      	add	r3, r7
 80023c0:	f803 2c08 	strb.w	r2, [r3, #-8]
		if (duty[i] > 100) duty[i] = 100;
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	3310      	adds	r3, #16
 80023c8:	443b      	add	r3, r7
 80023ca:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80023ce:	2b64      	cmp	r3, #100	@ 0x64
 80023d0:	d905      	bls.n	80023de <Cmd_set_ir_duty+0x5e>
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	3310      	adds	r3, #16
 80023d6:	443b      	add	r3, r7
 80023d8:	2264      	movs	r2, #100	@ 0x64
 80023da:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (uint8_t i = 0; i < 4; i++)
 80023de:	7bfb      	ldrb	r3, [r7, #15]
 80023e0:	3301      	adds	r3, #1
 80023e2:	73fb      	strb	r3, [r7, #15]
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	d9dc      	bls.n	80023a4 <Cmd_set_ir_duty+0x24>
	}
	ir_led_set_duty(0, duty[0] *9999/100);
 80023ea:	7a3b      	ldrb	r3, [r7, #8]
 80023ec:	461a      	mov	r2, r3
 80023ee:	f242 730f 	movw	r3, #9999	@ 0x270f
 80023f2:	fb02 f303 	mul.w	r3, r2, r3
 80023f6:	4a2d      	ldr	r2, [pc, #180]	@ (80024ac <Cmd_set_ir_duty+0x12c>)
 80023f8:	fb82 1203 	smull	r1, r2, r2, r3
 80023fc:	1152      	asrs	r2, r2, #5
 80023fe:	17db      	asrs	r3, r3, #31
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	b29b      	uxth	r3, r3
 8002404:	4619      	mov	r1, r3
 8002406:	2000      	movs	r0, #0
 8002408:	f001 f9ae 	bl	8003768 <ir_led_set_duty>
	ir_led_set_duty(1, duty[1] *9999/100);
 800240c:	7a7b      	ldrb	r3, [r7, #9]
 800240e:	461a      	mov	r2, r3
 8002410:	f242 730f 	movw	r3, #9999	@ 0x270f
 8002414:	fb02 f303 	mul.w	r3, r2, r3
 8002418:	4a24      	ldr	r2, [pc, #144]	@ (80024ac <Cmd_set_ir_duty+0x12c>)
 800241a:	fb82 1203 	smull	r1, r2, r2, r3
 800241e:	1152      	asrs	r2, r2, #5
 8002420:	17db      	asrs	r3, r3, #31
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	b29b      	uxth	r3, r3
 8002426:	4619      	mov	r1, r3
 8002428:	2001      	movs	r0, #1
 800242a:	f001 f99d 	bl	8003768 <ir_led_set_duty>
	ir_led_set_duty(2, duty[2] *9999/100);
 800242e:	7abb      	ldrb	r3, [r7, #10]
 8002430:	461a      	mov	r2, r3
 8002432:	f242 730f 	movw	r3, #9999	@ 0x270f
 8002436:	fb02 f303 	mul.w	r3, r2, r3
 800243a:	4a1c      	ldr	r2, [pc, #112]	@ (80024ac <Cmd_set_ir_duty+0x12c>)
 800243c:	fb82 1203 	smull	r1, r2, r2, r3
 8002440:	1152      	asrs	r2, r2, #5
 8002442:	17db      	asrs	r3, r3, #31
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	b29b      	uxth	r3, r3
 8002448:	4619      	mov	r1, r3
 800244a:	2002      	movs	r0, #2
 800244c:	f001 f98c 	bl	8003768 <ir_led_set_duty>
	ir_led_set_duty(3, duty[3] *9999/100);
 8002450:	7afb      	ldrb	r3, [r7, #11]
 8002452:	461a      	mov	r2, r3
 8002454:	f242 730f 	movw	r3, #9999	@ 0x270f
 8002458:	fb02 f303 	mul.w	r3, r2, r3
 800245c:	4a13      	ldr	r2, [pc, #76]	@ (80024ac <Cmd_set_ir_duty+0x12c>)
 800245e:	fb82 1203 	smull	r1, r2, r2, r3
 8002462:	1152      	asrs	r2, r2, #5
 8002464:	17db      	asrs	r3, r3, #31
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	b29b      	uxth	r3, r3
 800246a:	4619      	mov	r1, r3
 800246c:	2003      	movs	r0, #3
 800246e:	f001 f97b 	bl	8003768 <ir_led_set_duty>
	UART_Printf(&CONSOLE_UART, "IR LED [%d] duty:%i %\n", 0, duty[0]);
 8002472:	7a3b      	ldrb	r3, [r7, #8]
 8002474:	2200      	movs	r2, #0
 8002476:	490e      	ldr	r1, [pc, #56]	@ (80024b0 <Cmd_set_ir_duty+0x130>)
 8002478:	480e      	ldr	r0, [pc, #56]	@ (80024b4 <Cmd_set_ir_duty+0x134>)
 800247a:	f7fe ff45 	bl	8001308 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "IR LED [%d] duty:%i %\n", 1, duty[1]);
 800247e:	7a7b      	ldrb	r3, [r7, #9]
 8002480:	2201      	movs	r2, #1
 8002482:	490b      	ldr	r1, [pc, #44]	@ (80024b0 <Cmd_set_ir_duty+0x130>)
 8002484:	480b      	ldr	r0, [pc, #44]	@ (80024b4 <Cmd_set_ir_duty+0x134>)
 8002486:	f7fe ff3f 	bl	8001308 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "IR LED [%d] duty:%i %\n", 2, duty[2]);
 800248a:	7abb      	ldrb	r3, [r7, #10]
 800248c:	2202      	movs	r2, #2
 800248e:	4908      	ldr	r1, [pc, #32]	@ (80024b0 <Cmd_set_ir_duty+0x130>)
 8002490:	4808      	ldr	r0, [pc, #32]	@ (80024b4 <Cmd_set_ir_duty+0x134>)
 8002492:	f7fe ff39 	bl	8001308 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "IR LED [%d] duty:%i %\n", 3, duty[3]);
 8002496:	7afb      	ldrb	r3, [r7, #11]
 8002498:	2203      	movs	r2, #3
 800249a:	4905      	ldr	r1, [pc, #20]	@ (80024b0 <Cmd_set_ir_duty+0x130>)
 800249c:	4805      	ldr	r0, [pc, #20]	@ (80024b4 <Cmd_set_ir_duty+0x134>)
 800249e:	f7fe ff33 	bl	8001308 <UART_Printf>
	return (CMDLINE_OK);
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	51eb851f 	.word	0x51eb851f
 80024b0:	08009a04 	.word	0x08009a04
 80024b4:	20002468 	.word	0x20002468

080024b8 <Cmd_get_ir_duty>:
int Cmd_get_ir_duty(int argc, char *argv[])
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
	if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	dd01      	ble.n	80024cc <Cmd_get_ir_duty+0x14>
 80024c8:	2302      	movs	r3, #2
 80024ca:	e050      	b.n	800256e <Cmd_get_ir_duty+0xb6>
	uint16_t duty_0 = ir_led_get_duty(0);
 80024cc:	2000      	movs	r0, #0
 80024ce:	f001 f997 	bl	8003800 <ir_led_get_duty>
 80024d2:	4603      	mov	r3, r0
 80024d4:	81fb      	strh	r3, [r7, #14]
	uint16_t duty_1 = ir_led_get_duty(1);
 80024d6:	2001      	movs	r0, #1
 80024d8:	f001 f992 	bl	8003800 <ir_led_get_duty>
 80024dc:	4603      	mov	r3, r0
 80024de:	81bb      	strh	r3, [r7, #12]
	uint16_t duty_2 = ir_led_get_duty(2);
 80024e0:	2002      	movs	r0, #2
 80024e2:	f001 f98d 	bl	8003800 <ir_led_get_duty>
 80024e6:	4603      	mov	r3, r0
 80024e8:	817b      	strh	r3, [r7, #10]
	uint16_t duty_3 = ir_led_get_duty(3);
 80024ea:	2003      	movs	r0, #3
 80024ec:	f001 f988 	bl	8003800 <ir_led_get_duty>
 80024f0:	4603      	mov	r3, r0
 80024f2:	813b      	strh	r3, [r7, #8]
	UART_Printf(&CONSOLE_UART, "Heater duty[%d]:%i %\n", 0, duty_0 *100/9999);
 80024f4:	89fb      	ldrh	r3, [r7, #14]
 80024f6:	2264      	movs	r2, #100	@ 0x64
 80024f8:	fb02 f303 	mul.w	r3, r2, r3
 80024fc:	4a1e      	ldr	r2, [pc, #120]	@ (8002578 <Cmd_get_ir_duty+0xc0>)
 80024fe:	fb82 1203 	smull	r1, r2, r2, r3
 8002502:	1212      	asrs	r2, r2, #8
 8002504:	17db      	asrs	r3, r3, #31
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2200      	movs	r2, #0
 800250a:	491c      	ldr	r1, [pc, #112]	@ (800257c <Cmd_get_ir_duty+0xc4>)
 800250c:	481c      	ldr	r0, [pc, #112]	@ (8002580 <Cmd_get_ir_duty+0xc8>)
 800250e:	f7fe fefb 	bl	8001308 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "Heater duty[%d]:%i %\n", 1, duty_1 *100/9999);
 8002512:	89bb      	ldrh	r3, [r7, #12]
 8002514:	2264      	movs	r2, #100	@ 0x64
 8002516:	fb02 f303 	mul.w	r3, r2, r3
 800251a:	4a17      	ldr	r2, [pc, #92]	@ (8002578 <Cmd_get_ir_duty+0xc0>)
 800251c:	fb82 1203 	smull	r1, r2, r2, r3
 8002520:	1212      	asrs	r2, r2, #8
 8002522:	17db      	asrs	r3, r3, #31
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2201      	movs	r2, #1
 8002528:	4914      	ldr	r1, [pc, #80]	@ (800257c <Cmd_get_ir_duty+0xc4>)
 800252a:	4815      	ldr	r0, [pc, #84]	@ (8002580 <Cmd_get_ir_duty+0xc8>)
 800252c:	f7fe feec 	bl	8001308 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "Heater duty[%d]:%i %\n", 2, duty_2 *100/9999);
 8002530:	897b      	ldrh	r3, [r7, #10]
 8002532:	2264      	movs	r2, #100	@ 0x64
 8002534:	fb02 f303 	mul.w	r3, r2, r3
 8002538:	4a0f      	ldr	r2, [pc, #60]	@ (8002578 <Cmd_get_ir_duty+0xc0>)
 800253a:	fb82 1203 	smull	r1, r2, r2, r3
 800253e:	1212      	asrs	r2, r2, #8
 8002540:	17db      	asrs	r3, r3, #31
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2202      	movs	r2, #2
 8002546:	490d      	ldr	r1, [pc, #52]	@ (800257c <Cmd_get_ir_duty+0xc4>)
 8002548:	480d      	ldr	r0, [pc, #52]	@ (8002580 <Cmd_get_ir_duty+0xc8>)
 800254a:	f7fe fedd 	bl	8001308 <UART_Printf>
	UART_Printf(&CONSOLE_UART, "Heater duty[%d]:%i %\n", 3, duty_3 *100/9999);
 800254e:	893b      	ldrh	r3, [r7, #8]
 8002550:	2264      	movs	r2, #100	@ 0x64
 8002552:	fb02 f303 	mul.w	r3, r2, r3
 8002556:	4a08      	ldr	r2, [pc, #32]	@ (8002578 <Cmd_get_ir_duty+0xc0>)
 8002558:	fb82 1203 	smull	r1, r2, r2, r3
 800255c:	1212      	asrs	r2, r2, #8
 800255e:	17db      	asrs	r3, r3, #31
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2203      	movs	r2, #3
 8002564:	4905      	ldr	r1, [pc, #20]	@ (800257c <Cmd_get_ir_duty+0xc4>)
 8002566:	4806      	ldr	r0, [pc, #24]	@ (8002580 <Cmd_get_ir_duty+0xc8>)
 8002568:	f7fe fece 	bl	8001308 <UART_Printf>
	return (CMDLINE_OK);
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	068de3af 	.word	0x068de3af
 800257c:	080099e4 	.word	0x080099e4
 8002580:	20002468 	.word	0x20002468

08002584 <Cmd_get_acceleration_gyroscope>:
/* Command for i2c sensor */
int Cmd_get_acceleration_gyroscope(int argc, char *argv[])
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
	return (CMDLINE_OK);
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <Cmd_get_pressure>:
int Cmd_get_pressure(int argc, char *argv[])
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
	return (CMDLINE_OK);
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <Cmd_get_all>:
/* Command for system */
int Cmd_get_all(int argc, char *argv[])
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
	UART_Send_String(&CONSOLE_UART, "get all \n");
 80025be:	4904      	ldr	r1, [pc, #16]	@ (80025d0 <Cmd_get_all+0x1c>)
 80025c0:	4804      	ldr	r0, [pc, #16]	@ (80025d4 <Cmd_get_all+0x20>)
 80025c2:	f7fe fe12 	bl	80011ea <UART_Send_String>
	return (CMDLINE_OK);
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	08009a1c 	.word	0x08009a1c
 80025d4:	20002468 	.word	0x20002468

080025d8 <Cmd_reset>:


///////////////////////////////////////////////////////////////////////////////////////////////////////////////

int Cmd_reset(int argc, char *argv[])
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
	lt8722_reset();
 80025e2:	f001 fb59 	bl	8003c98 <lt8722_reset>
	return (CMDLINE_OK);
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <Cmd_set_en_req>:

int Cmd_set_en_req(int argc, char *argv[])
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
	LL_GPIO_SetOutputPin(TEC_1_EN_GPIO_Port, TEC_1_EN_Pin);
 80025fa:	2120      	movs	r1, #32
 80025fc:	4805      	ldr	r0, [pc, #20]	@ (8002614 <Cmd_set_en_req+0x24>)
 80025fe:	f7ff f9ef 	bl	80019e0 <LL_GPIO_SetOutputPin>
//	lt8722_reg_write(LT8722_SPIS_COMMAND, 0x00004000);
	lt8722_set_enable_req(LT8722_ENABLE_REQ_ENABLED);
 8002602:	2001      	movs	r0, #1
 8002604:	f001 fb28 	bl	8003c58 <lt8722_set_enable_req>
	return (CMDLINE_OK);
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40021000 	.word	0x40021000

08002618 <Cmd_reset_en_req>:

int Cmd_reset_en_req(int argc, char *argv[])
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
	lt8722_set_enable_req(LT8722_ENABLE_REQ_DISABLED);
 8002622:	2000      	movs	r0, #0
 8002624:	f001 fb18 	bl	8003c58 <lt8722_set_enable_req>
	return (CMDLINE_OK);
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <Cmd_clear_status_reg>:

int Cmd_clear_status_reg(int argc, char *argv[])
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	6039      	str	r1, [r7, #0]
	lt8722_reg_write(LT8722_SPIS_STATUS, 0);
 800263c:	2100      	movs	r1, #0
 800263e:	2001      	movs	r0, #1
 8002640:	f001 fabc 	bl	8003bbc <lt8722_reg_write>
	return (CMDLINE_OK);
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <Cmd_read>:

int Cmd_read(int argc, char *argv[])
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
	uint32_t data;
	lt8722_reg_read(LT8722_SPIS_COMMAND, &data);
 800265a:	f107 030c 	add.w	r3, r7, #12
 800265e:	4619      	mov	r1, r3
 8002660:	2000      	movs	r0, #0
 8002662:	f001 fa75 	bl	8003b50 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_COMMAND: 0x%X-%X \n", data>>16, data);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	0c1a      	lsrs	r2, r3, #16
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	4930      	ldr	r1, [pc, #192]	@ (8002730 <Cmd_read+0xe0>)
 800266e:	4831      	ldr	r0, [pc, #196]	@ (8002734 <Cmd_read+0xe4>)
 8002670:	f7fe fe4a 	bl	8001308 <UART_Printf>

	lt8722_reg_read(LT8722_SPIS_STATUS, &data);
 8002674:	f107 030c 	add.w	r3, r7, #12
 8002678:	4619      	mov	r1, r3
 800267a:	2001      	movs	r0, #1
 800267c:	f001 fa68 	bl	8003b50 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_STATUS: 0x%X-%X \n", data>>16, data);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	0c1a      	lsrs	r2, r3, #16
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	492c      	ldr	r1, [pc, #176]	@ (8002738 <Cmd_read+0xe8>)
 8002688:	482a      	ldr	r0, [pc, #168]	@ (8002734 <Cmd_read+0xe4>)
 800268a:	f7fe fe3d 	bl	8001308 <UART_Printf>

	lt8722_reg_read(LT8722_SPIS_DAC_ILIMN, &data);
 800268e:	f107 030c 	add.w	r3, r7, #12
 8002692:	4619      	mov	r1, r3
 8002694:	2002      	movs	r0, #2
 8002696:	f001 fa5b 	bl	8003b50 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_DAC_ILIMN: 0x%X-%X \n", data>>16, data);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	0c1a      	lsrs	r2, r3, #16
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	4926      	ldr	r1, [pc, #152]	@ (800273c <Cmd_read+0xec>)
 80026a2:	4824      	ldr	r0, [pc, #144]	@ (8002734 <Cmd_read+0xe4>)
 80026a4:	f7fe fe30 	bl	8001308 <UART_Printf>

	lt8722_reg_read(LT8722_SPIS_DAC_ILIMP, &data);
 80026a8:	f107 030c 	add.w	r3, r7, #12
 80026ac:	4619      	mov	r1, r3
 80026ae:	2003      	movs	r0, #3
 80026b0:	f001 fa4e 	bl	8003b50 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_DAC_ILIMP: 0x%X-%X \n", data>>16, data);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	0c1a      	lsrs	r2, r3, #16
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4921      	ldr	r1, [pc, #132]	@ (8002740 <Cmd_read+0xf0>)
 80026bc:	481d      	ldr	r0, [pc, #116]	@ (8002734 <Cmd_read+0xe4>)
 80026be:	f7fe fe23 	bl	8001308 <UART_Printf>

	lt8722_reg_read(LT8722_SPIS_DAC, &data);
 80026c2:	f107 030c 	add.w	r3, r7, #12
 80026c6:	4619      	mov	r1, r3
 80026c8:	2004      	movs	r0, #4
 80026ca:	f001 fa41 	bl	8003b50 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_DAC: 0x%X-%X \n", data>>16, data);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	0c1a      	lsrs	r2, r3, #16
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	491b      	ldr	r1, [pc, #108]	@ (8002744 <Cmd_read+0xf4>)
 80026d6:	4817      	ldr	r0, [pc, #92]	@ (8002734 <Cmd_read+0xe4>)
 80026d8:	f7fe fe16 	bl	8001308 <UART_Printf>

	lt8722_reg_read(LT8722_SPIS_OV_CLAMP, &data);
 80026dc:	f107 030c 	add.w	r3, r7, #12
 80026e0:	4619      	mov	r1, r3
 80026e2:	2005      	movs	r0, #5
 80026e4:	f001 fa34 	bl	8003b50 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_OV_CLAMP: 0x%X \n", data);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	461a      	mov	r2, r3
 80026ec:	4916      	ldr	r1, [pc, #88]	@ (8002748 <Cmd_read+0xf8>)
 80026ee:	4811      	ldr	r0, [pc, #68]	@ (8002734 <Cmd_read+0xe4>)
 80026f0:	f7fe fe0a 	bl	8001308 <UART_Printf>

	lt8722_reg_read(LT8722_SPIS_UV_CLAMP, &data);
 80026f4:	f107 030c 	add.w	r3, r7, #12
 80026f8:	4619      	mov	r1, r3
 80026fa:	2006      	movs	r0, #6
 80026fc:	f001 fa28 	bl	8003b50 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_UV_CLAMP: 0x%X \n", data);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	461a      	mov	r2, r3
 8002704:	4911      	ldr	r1, [pc, #68]	@ (800274c <Cmd_read+0xfc>)
 8002706:	480b      	ldr	r0, [pc, #44]	@ (8002734 <Cmd_read+0xe4>)
 8002708:	f7fe fdfe 	bl	8001308 <UART_Printf>

	lt8722_reg_read(LT8722_SPIS_AMUX, &data);
 800270c:	f107 030c 	add.w	r3, r7, #12
 8002710:	4619      	mov	r1, r3
 8002712:	2007      	movs	r0, #7
 8002714:	f001 fa1c 	bl	8003b50 <lt8722_reg_read>
	UART_Printf(&CONSOLE_UART, "SPIS_AMUX: 0x%X \n", data);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	461a      	mov	r2, r3
 800271c:	490c      	ldr	r1, [pc, #48]	@ (8002750 <Cmd_read+0x100>)
 800271e:	4805      	ldr	r0, [pc, #20]	@ (8002734 <Cmd_read+0xe4>)
 8002720:	f7fe fdf2 	bl	8001308 <UART_Printf>

	return (CMDLINE_OK);
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	08009a28 	.word	0x08009a28
 8002734:	20002468 	.word	0x20002468
 8002738:	08009a40 	.word	0x08009a40
 800273c:	08009a58 	.word	0x08009a58
 8002740:	08009a74 	.word	0x08009a74
 8002744:	08009a90 	.word	0x08009a90
 8002748:	08009aa4 	.word	0x08009aa4
 800274c:	08009abc 	.word	0x08009abc
 8002750:	08009ad4 	.word	0x08009ad4

08002754 <Cmd_on_tec>:


int Cmd_on_tec(int argc, char *argv[])
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
	lt8722_init();
 800275e:	f001 fb2d 	bl	8003dbc <lt8722_init>
	return (CMDLINE_OK);
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <Cmd_tec_set_vol>:

int Cmd_tec_set_vol(int argc, char *argv[])
{
 800276c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002770:	b088      	sub	sp, #32
 8002772:	af00      	add	r7, sp, #0
 8002774:	6178      	str	r0, [r7, #20]
 8002776:	6139      	str	r1, [r7, #16]
//	if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
//	if (argc > 2) return CMDLINE_TOO_MANY_ARGS;

	int64_t vol = atoi(argv[1]);
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	3304      	adds	r3, #4
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f006 f8ca 	bl	8008918 <atoi>
 8002784:	4603      	mov	r3, r0
 8002786:	17da      	asrs	r2, r3, #31
 8002788:	469a      	mov	sl, r3
 800278a:	4693      	mov	fp, r2
 800278c:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	UART_Printf(&CONSOLE_UART, "Tec set: %d mV \n", vol);
 8002790:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002794:	4925      	ldr	r1, [pc, #148]	@ (800282c <Cmd_tec_set_vol+0xc0>)
 8002796:	4826      	ldr	r0, [pc, #152]	@ (8002830 <Cmd_tec_set_vol+0xc4>)
 8002798:	f7fe fdb6 	bl	8001308 <UART_Printf>
	vol *= 1000000;
 800279c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	f04f 0a00 	mov.w	sl, #0
 80027a8:	f04f 0b00 	mov.w	fp, #0
 80027ac:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80027b0:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80027b4:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80027b8:	4652      	mov	r2, sl
 80027ba:	465b      	mov	r3, fp
 80027bc:	1a14      	subs	r4, r2, r0
 80027be:	eb63 0501 	sbc.w	r5, r3, r1
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	f04f 0300 	mov.w	r3, #0
 80027ca:	026b      	lsls	r3, r5, #9
 80027cc:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80027d0:	0262      	lsls	r2, r4, #9
 80027d2:	4614      	mov	r4, r2
 80027d4:	461d      	mov	r5, r3
 80027d6:	eb14 0800 	adds.w	r8, r4, r0
 80027da:	eb45 0901 	adc.w	r9, r5, r1
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80027ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80027ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80027f2:	ebb2 0408 	subs.w	r4, r2, r8
 80027f6:	60bc      	str	r4, [r7, #8]
 80027f8:	eb63 0309 	sbc.w	r3, r3, r9
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002802:	4623      	mov	r3, r4
 8002804:	181b      	adds	r3, r3, r0
 8002806:	603b      	str	r3, [r7, #0]
 8002808:	462b      	mov	r3, r5
 800280a:	eb41 0303 	adc.w	r3, r1, r3
 800280e:	607b      	str	r3, [r7, #4]
 8002810:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002814:	e9c7 3406 	strd	r3, r4, [r7, #24]
	lt8722_set_output_voltage(vol);
 8002818:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800281c:	f001 fb7e 	bl	8003f1c <lt8722_set_output_voltage>
	return (CMDLINE_OK);
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3720      	adds	r7, #32
 8002826:	46bd      	mov	sp, r7
 8002828:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800282c:	08009ae8 	.word	0x08009ae8
 8002830:	20002468 	.word	0x20002468

08002834 <Cmd_get_status>:

int Cmd_get_status(int argc, char *argv[])
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
	uint16_t status;
	lt8722_get_status(&status);
 800283e:	f107 030e 	add.w	r3, r7, #14
 8002842:	4618      	mov	r0, r3
 8002844:	f001 fa4a 	bl	8003cdc <lt8722_get_status>
	UART_Printf(&CONSOLE_UART, "status: 0x%X \n", status);
 8002848:	89fb      	ldrh	r3, [r7, #14]
 800284a:	461a      	mov	r2, r3
 800284c:	4904      	ldr	r1, [pc, #16]	@ (8002860 <Cmd_get_status+0x2c>)
 800284e:	4805      	ldr	r0, [pc, #20]	@ (8002864 <Cmd_get_status+0x30>)
 8002850:	f7fe fd5a 	bl	8001308 <UART_Printf>
	return (CMDLINE_OK);
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	08009afc 	.word	0x08009afc
 8002864:	20002468 	.word	0x20002468

08002868 <Cmd_set_ov_clamp>:

int Cmd_set_ov_clamp(int argc, char *argv[])
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
	uint8_t over_vol = atoi(argv[1]);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	3304      	adds	r3, #4
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f006 f84d 	bl	8008918 <atoi>
 800287e:	4603      	mov	r3, r0
 8002880:	73fb      	strb	r3, [r7, #15]
	UART_Printf(&CONSOLE_UART, "OV_CLAMP: %X \n", over_vol);
 8002882:	7bfb      	ldrb	r3, [r7, #15]
 8002884:	461a      	mov	r2, r3
 8002886:	4906      	ldr	r1, [pc, #24]	@ (80028a0 <Cmd_set_ov_clamp+0x38>)
 8002888:	4806      	ldr	r0, [pc, #24]	@ (80028a4 <Cmd_set_ov_clamp+0x3c>)
 800288a:	f7fe fd3d 	bl	8001308 <UART_Printf>
	lt8722_set_spis_ov_clamp(over_vol);
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	4618      	mov	r0, r3
 8002892:	f001 fa61 	bl	8003d58 <lt8722_set_spis_ov_clamp>
	return CMDLINE_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	08009b0c 	.word	0x08009b0c
 80028a4:	20002468 	.word	0x20002468

080028a8 <Cmd_set_uv_clamp>:
int Cmd_set_uv_clamp(int argc, char *argv[])
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
	uint8_t uper_vol = atoi(argv[1]);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	3304      	adds	r3, #4
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f006 f82d 	bl	8008918 <atoi>
 80028be:	4603      	mov	r3, r0
 80028c0:	73fb      	strb	r3, [r7, #15]
	UART_Printf(&CONSOLE_UART, "UV_CLAMP: %X \n", uper_vol);
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
 80028c4:	461a      	mov	r2, r3
 80028c6:	4906      	ldr	r1, [pc, #24]	@ (80028e0 <Cmd_set_uv_clamp+0x38>)
 80028c8:	4806      	ldr	r0, [pc, #24]	@ (80028e4 <Cmd_set_uv_clamp+0x3c>)
 80028ca:	f7fe fd1d 	bl	8001308 <UART_Printf>
	lt8722_set_spis_uv_clamp(uper_vol);
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f001 fa5a 	bl	8003d8a <lt8722_set_spis_uv_clamp>
	return CMDLINE_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	08009b1c 	.word	0x08009b1c
 80028e4:	20002468 	.word	0x20002468

080028e8 <command_create_task>:




void command_create_task(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_CommandTaskContext.taskHandle, &s_CommandTaskContext.taskProperty);
 80028ec:	4902      	ldr	r1, [pc, #8]	@ (80028f8 <command_create_task+0x10>)
 80028ee:	4803      	ldr	r0, [pc, #12]	@ (80028fc <command_create_task+0x14>)
 80028f0:	f005 fc36 	bl	8008160 <SCH_TASK_CreateTask>
}
 80028f4:	bf00      	nop
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20000178 	.word	0x20000178
 80028fc:	20000174 	.word	0x20000174

08002900 <CONSOLE_UART_IRQHandler>:
}


/* :::::::::: CONSOLE_UART_IRQHandler ::::::::::::: */
void CONSOLE_UART_IRQHandler(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
    if(LL_USART_IsActiveFlag_TXE(CONSOLE_UART.handle) == true)
 8002904:	4b2e      	ldr	r3, [pc, #184]	@ (80029c0 <CONSOLE_UART_IRQHandler+0xc0>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff f826 	bl	800195a <LL_USART_IsActiveFlag_TXE>
 800290e:	4603      	mov	r3, r0
 8002910:	2b01      	cmp	r3, #1
 8002912:	d10f      	bne.n	8002934 <CONSOLE_UART_IRQHandler+0x34>
    {
        if(TX_BUFFER_EMPTY(&CONSOLE_UART))
 8002914:	492b      	ldr	r1, [pc, #172]	@ (80029c4 <CONSOLE_UART_IRQHandler+0xc4>)
 8002916:	482c      	ldr	r0, [pc, #176]	@ (80029c8 <CONSOLE_UART_IRQHandler+0xc8>)
 8002918:	f7fe ff41 	bl	800179e <UART_is_buffer_empty>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d005      	beq.n	800292e <CONSOLE_UART_IRQHandler+0x2e>
        {
            // Buffer empty, so disable interrupts
            LL_USART_DisableIT_TXE(CONSOLE_UART.handle);
 8002922:	4b27      	ldr	r3, [pc, #156]	@ (80029c0 <CONSOLE_UART_IRQHandler+0xc0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff f82a 	bl	8001980 <LL_USART_DisableIT_TXE>
 800292c:	e002      	b.n	8002934 <CONSOLE_UART_IRQHandler+0x34>
        }
        else
        {
            // There is more data in the output buffer. Send the next byte
            UART_Prime_Transmit(&CONSOLE_UART);
 800292e:	4824      	ldr	r0, [pc, #144]	@ (80029c0 <CONSOLE_UART_IRQHandler+0xc0>)
 8002930:	f7fe ff69 	bl	8001806 <UART_Prime_Transmit>
        }
    }

    if(LL_USART_IsActiveFlag_RXNE(CONSOLE_UART.handle) == true)
 8002934:	4b22      	ldr	r3, [pc, #136]	@ (80029c0 <CONSOLE_UART_IRQHandler+0xc0>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f7fe fffb 	bl	8001934 <LL_USART_IsActiveFlag_RXNE>
 800293e:	4603      	mov	r3, r0
 8002940:	2b01      	cmp	r3, #1
 8002942:	d13b      	bne.n	80029bc <CONSOLE_UART_IRQHandler+0xbc>
    {
    	CONSOLE_UART.RX_irq_char = LL_USART_ReceiveData8(CONSOLE_UART.handle);
 8002944:	4b1e      	ldr	r3, [pc, #120]	@ (80029c0 <CONSOLE_UART_IRQHandler+0xc0>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff f83c 	bl	80019c6 <LL_USART_ReceiveData8>
 800294e:	4603      	mov	r3, r0
 8002950:	461a      	mov	r2, r3
 8002952:	4b1b      	ldr	r3, [pc, #108]	@ (80029c0 <CONSOLE_UART_IRQHandler+0xc0>)
 8002954:	771a      	strb	r2, [r3, #28]

        // NOTE: On win 10, default PUTTY when hit enter only send back '\r',
        // while on default HERCULES when hit enter send '\r\n' in that order.
        // The code bellow is modified so that it can work on PUTTY and HERCULES.
        if((!RX_BUFFER_FULL(&CONSOLE_UART)) && (CONSOLE_UART.RX_irq_char != '\n'))
 8002956:	4b1a      	ldr	r3, [pc, #104]	@ (80029c0 <CONSOLE_UART_IRQHandler+0xc0>)
 8002958:	891b      	ldrh	r3, [r3, #8]
 800295a:	461a      	mov	r2, r3
 800295c:	491b      	ldr	r1, [pc, #108]	@ (80029cc <CONSOLE_UART_IRQHandler+0xcc>)
 800295e:	481c      	ldr	r0, [pc, #112]	@ (80029d0 <CONSOLE_UART_IRQHandler+0xd0>)
 8002960:	f7fe fefc 	bl	800175c <UART_is_buffer_full>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d128      	bne.n	80029bc <CONSOLE_UART_IRQHandler+0xbc>
 800296a:	4b15      	ldr	r3, [pc, #84]	@ (80029c0 <CONSOLE_UART_IRQHandler+0xc0>)
 800296c:	7f1b      	ldrb	r3, [r3, #28]
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b0a      	cmp	r3, #10
 8002972:	d023      	beq.n	80029bc <CONSOLE_UART_IRQHandler+0xbc>
        {
            if (CONSOLE_UART.RX_irq_char == '\r')
 8002974:	4b12      	ldr	r3, [pc, #72]	@ (80029c0 <CONSOLE_UART_IRQHandler+0xc0>)
 8002976:	7f1b      	ldrb	r3, [r3, #28]
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b0d      	cmp	r3, #13
 800297c:	d10e      	bne.n	800299c <CONSOLE_UART_IRQHandler+0x9c>
            {
            	CONSOLE_UART.p_RX_buffer[CONSOLE_UART.RX_write_index] = '\n';
 800297e:	4b10      	ldr	r3, [pc, #64]	@ (80029c0 <CONSOLE_UART_IRQHandler+0xc0>)
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	4a0f      	ldr	r2, [pc, #60]	@ (80029c0 <CONSOLE_UART_IRQHandler+0xc0>)
 8002984:	8b12      	ldrh	r2, [r2, #24]
 8002986:	b292      	uxth	r2, r2
 8002988:	4413      	add	r3, r2
 800298a:	220a      	movs	r2, #10
 800298c:	701a      	strb	r2, [r3, #0]
                ADVANCE_RX_WRITE_INDEX(&CONSOLE_UART);
 800298e:	4b0c      	ldr	r3, [pc, #48]	@ (80029c0 <CONSOLE_UART_IRQHandler+0xc0>)
 8002990:	891b      	ldrh	r3, [r3, #8]
 8002992:	4619      	mov	r1, r3
 8002994:	480d      	ldr	r0, [pc, #52]	@ (80029cc <CONSOLE_UART_IRQHandler+0xcc>)
 8002996:	f7fe ff1a 	bl	80017ce <UART_advance_buffer_index>
            	CONSOLE_UART.p_RX_buffer[CONSOLE_UART.RX_write_index] = CONSOLE_UART.RX_irq_char;
                ADVANCE_RX_WRITE_INDEX(&CONSOLE_UART);
            }
        }
    }
}
 800299a:	e00f      	b.n	80029bc <CONSOLE_UART_IRQHandler+0xbc>
            	CONSOLE_UART.p_RX_buffer[CONSOLE_UART.RX_write_index] = CONSOLE_UART.RX_irq_char;
 800299c:	4b08      	ldr	r3, [pc, #32]	@ (80029c0 <CONSOLE_UART_IRQHandler+0xc0>)
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	4a07      	ldr	r2, [pc, #28]	@ (80029c0 <CONSOLE_UART_IRQHandler+0xc0>)
 80029a2:	8b12      	ldrh	r2, [r2, #24]
 80029a4:	b292      	uxth	r2, r2
 80029a6:	4413      	add	r3, r2
 80029a8:	4a05      	ldr	r2, [pc, #20]	@ (80029c0 <CONSOLE_UART_IRQHandler+0xc0>)
 80029aa:	7f12      	ldrb	r2, [r2, #28]
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	701a      	strb	r2, [r3, #0]
                ADVANCE_RX_WRITE_INDEX(&CONSOLE_UART);
 80029b0:	4b03      	ldr	r3, [pc, #12]	@ (80029c0 <CONSOLE_UART_IRQHandler+0xc0>)
 80029b2:	891b      	ldrh	r3, [r3, #8]
 80029b4:	4619      	mov	r1, r3
 80029b6:	4805      	ldr	r0, [pc, #20]	@ (80029cc <CONSOLE_UART_IRQHandler+0xcc>)
 80029b8:	f7fe ff09 	bl	80017ce <UART_advance_buffer_index>
}
 80029bc:	bf00      	nop
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	20002468 	.word	0x20002468
 80029c4:	20002478 	.word	0x20002478
 80029c8:	2000247a 	.word	0x2000247a
 80029cc:	20002480 	.word	0x20002480
 80029d0:	20002482 	.word	0x20002482

080029d4 <LL_USART_IsActiveFlag_RXNE>:
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0320 	and.w	r3, r3, #32
 80029e4:	2b20      	cmp	r3, #32
 80029e6:	bf0c      	ite	eq
 80029e8:	2301      	moveq	r3, #1
 80029ea:	2300      	movne	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <LL_USART_IsActiveFlag_TXE>:
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a0a:	2b80      	cmp	r3, #128	@ 0x80
 8002a0c:	bf0c      	ite	eq
 8002a0e:	2301      	moveq	r3, #1
 8002a10:	2300      	movne	r3, #0
 8002a12:	b2db      	uxtb	r3, r3
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <LL_USART_DisableIT_TXE>:
{
 8002a20:	b480      	push	{r7}
 8002a22:	b089      	sub	sp, #36	@ 0x24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	330c      	adds	r3, #12
 8002a2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	e853 3f00 	ldrex	r3, [r3]
 8002a34:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a3c:	61fb      	str	r3, [r7, #28]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	330c      	adds	r3, #12
 8002a42:	69fa      	ldr	r2, [r7, #28]
 8002a44:	61ba      	str	r2, [r7, #24]
 8002a46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a48:	6979      	ldr	r1, [r7, #20]
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	e841 2300 	strex	r3, r2, [r1]
 8002a50:	613b      	str	r3, [r7, #16]
   return(result);
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1e7      	bne.n	8002a28 <LL_USART_DisableIT_TXE+0x8>
}
 8002a58:	bf00      	nop
 8002a5a:	bf00      	nop
 8002a5c:	3724      	adds	r7, #36	@ 0x24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <LL_USART_ReceiveData8>:
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	b2db      	uxtb	r3, r3
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <LL_GPIO_SetOutputPin>:
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	619a      	str	r2, [r3, #24]
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <LL_GPIO_ResetOutputPin>:
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	041a      	lsls	r2, r3, #16
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	619a      	str	r2, [r3, #24]
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
	...

08002abc <copc_init>:
		9									// taskTick
	},
};

void copc_init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af04      	add	r7, sp, #16
    UART_Init(&COPC_UART, COPC_UART_HANDLE, COPC_UART_IRQ,
 8002ac2:	2340      	movs	r3, #64	@ 0x40
 8002ac4:	9302      	str	r3, [sp, #8]
 8002ac6:	2340      	movs	r3, #64	@ 0x40
 8002ac8:	9301      	str	r3, [sp, #4]
 8002aca:	4b07      	ldr	r3, [pc, #28]	@ (8002ae8 <copc_init+0x2c>)
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	4b07      	ldr	r3, [pc, #28]	@ (8002aec <copc_init+0x30>)
 8002ad0:	2226      	movs	r2, #38	@ 0x26
 8002ad2:	4907      	ldr	r1, [pc, #28]	@ (8002af0 <copc_init+0x34>)
 8002ad4:	4807      	ldr	r0, [pc, #28]	@ (8002af4 <copc_init+0x38>)
 8002ad6:	f7fe fb2e 	bl	8001136 <UART_Init>
				g_COPC_UART_TX_buffer, g_COPC_UART_RX_buffer,
				sizeof(g_COPC_UART_TX_buffer), sizeof(g_COPC_UART_RX_buffer));
	fsp_init(FSP_ADR_EXP);
 8002ada:	2002      	movs	r0, #2
 8002adc:	f005 fcb0 	bl	8008440 <fsp_init>
}
 8002ae0:	bf00      	nop
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	200025b4 	.word	0x200025b4
 8002aec:	20002574 	.word	0x20002574
 8002af0:	40004400 	.word	0x40004400
 8002af4:	20002554 	.word	0x20002554

08002af8 <copc_create_task>:

void copc_create_task(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_task_context.taskHandle, &s_task_context.taskProperty);
 8002afc:	4902      	ldr	r1, [pc, #8]	@ (8002b08 <copc_create_task+0x10>)
 8002afe:	4803      	ldr	r0, [pc, #12]	@ (8002b0c <copc_create_task+0x14>)
 8002b00:	f005 fb2e 	bl	8008160 <SCH_TASK_CreateTask>
	return;
 8002b04:	bf00      	nop
}
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	2000018c 	.word	0x2000018c
 8002b0c:	20000188 	.word	0x20000188

08002b10 <copc_task_update>:

static void copc_task_update(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
	char rxData;
	while (!RX_BUFFER_EMPTY(&COPC_UART))
 8002b16:	e092      	b.n	8002c3e <copc_task_update+0x12e>
	{
		rxData = UART_Get_Char(&COPC_UART);
 8002b18:	484f      	ldr	r0, [pc, #316]	@ (8002c58 <copc_task_update+0x148>)
 8002b1a:	f7fe fdf7 	bl	800170c <UART_Get_Char>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	71fb      	strb	r3, [r7, #7]

//		rxData = rbuffer_remove(p_COPCBuffer);

		if (!receiving)
 8002b22:	4b4e      	ldr	r3, [pc, #312]	@ (8002c5c <copc_task_update+0x14c>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10a      	bne.n	8002b42 <copc_task_update+0x32>
		{
			if(rxData  == (char)(FSP_PKT_SOD))
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	2bca      	cmp	r3, #202	@ 0xca
 8002b30:	f040 8085 	bne.w	8002c3e <copc_task_update+0x12e>
			{
				receiving  =  1;
 8002b34:	4b49      	ldr	r3, [pc, #292]	@ (8002c5c <copc_task_update+0x14c>)
 8002b36:	2201      	movs	r2, #1
 8002b38:	701a      	strb	r2, [r3, #0]
				COPC_RX_Index =  0;
 8002b3a:	4b49      	ldr	r3, [pc, #292]	@ (8002c60 <copc_task_update+0x150>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	701a      	strb	r2, [r3, #0]
 8002b40:	e07d      	b.n	8002c3e <copc_task_update+0x12e>
			}
		}
		else
		{
			if(rxData  == (char)(FSP_PKT_EOF))
 8002b42:	79fb      	ldrb	r3, [r7, #7]
 8002b44:	2bef      	cmp	r3, #239	@ 0xef
 8002b46:	d147      	bne.n	8002bd8 <copc_task_update+0xc8>
			{
				receiving  =  0;
 8002b48:	4b44      	ldr	r3, [pc, #272]	@ (8002c5c <copc_task_update+0x14c>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	701a      	strb	r2, [r3, #0]
				switch (frame_decode((uint8_t  *)COPC_RX_Buff, COPC_RX_Index,  &s_COPC_FspPacket))
 8002b4e:	4b44      	ldr	r3, [pc, #272]	@ (8002c60 <copc_task_update+0x150>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	4a43      	ldr	r2, [pc, #268]	@ (8002c64 <copc_task_update+0x154>)
 8002b56:	4619      	mov	r1, r3
 8002b58:	4843      	ldr	r0, [pc, #268]	@ (8002c68 <copc_task_update+0x158>)
 8002b5a:	f005 fe47 	bl	80087ec <frame_decode>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d863      	bhi.n	8002c2c <copc_task_update+0x11c>
 8002b64:	a201      	add	r2, pc, #4	@ (adr r2, 8002b6c <copc_task_update+0x5c>)
 8002b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b6a:	bf00      	nop
 8002b6c:	08002b81 	.word	0x08002b81
 8002b70:	08002b8b 	.word	0x08002b8b
 8002b74:	08002b9b 	.word	0x08002b9b
 8002b78:	08002ba5 	.word	0x08002ba5
 8002b7c:	08002bbf 	.word	0x08002bbf
				{
					//process command
					case FSP_PKT_NOT_READY:
						UART_Send_String(&CONSOLE_UART, "Packet not ready...\r\n");
 8002b80:	493a      	ldr	r1, [pc, #232]	@ (8002c6c <copc_task_update+0x15c>)
 8002b82:	483b      	ldr	r0, [pc, #236]	@ (8002c70 <copc_task_update+0x160>)
 8002b84:	f7fe fb31 	bl	80011ea <UART_Send_String>
						break;
 8002b88:	e051      	b.n	8002c2e <copc_task_update+0x11e>
					case FSP_PKT_READY:
						UART_Send_String(&CONSOLE_UART, "Received COPC CMD\n");
 8002b8a:	493a      	ldr	r1, [pc, #232]	@ (8002c74 <copc_task_update+0x164>)
 8002b8c:	4838      	ldr	r0, [pc, #224]	@ (8002c70 <copc_task_update+0x160>)
 8002b8e:	f7fe fb2c 	bl	80011ea <UART_Send_String>
						copc_process_command(&s_COPC_FspPacket);
 8002b92:	4834      	ldr	r0, [pc, #208]	@ (8002c64 <copc_task_update+0x154>)
 8002b94:	f000 f87c 	bl	8002c90 <copc_process_command>
						break;
 8002b98:	e049      	b.n	8002c2e <copc_task_update+0x11e>
					case FSP_PKT_INVALID:
						UART_Send_String(&CONSOLE_UART, "Packet invalid...\n");
 8002b9a:	4937      	ldr	r1, [pc, #220]	@ (8002c78 <copc_task_update+0x168>)
 8002b9c:	4834      	ldr	r0, [pc, #208]	@ (8002c70 <copc_task_update+0x160>)
 8002b9e:	f7fe fb24 	bl	80011ea <UART_Send_String>
						break;
 8002ba2:	e044      	b.n	8002c2e <copc_task_update+0x11e>
					case FSP_PKT_WRONG_ADR:
						UART_Send_String(&CONSOLE_UART, "Wrong module adr...\n");
 8002ba4:	4935      	ldr	r1, [pc, #212]	@ (8002c7c <copc_task_update+0x16c>)
 8002ba6:	4832      	ldr	r0, [pc, #200]	@ (8002c70 <copc_task_update+0x160>)
 8002ba8:	f7fe fb1f 	bl	80011ea <UART_Send_String>
						UART_Write(&CONSOLE_UART, (const char *)COPC_RX_Buff, COPC_RX_Index);
 8002bac:	4b2c      	ldr	r3, [pc, #176]	@ (8002c60 <copc_task_update+0x150>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	492c      	ldr	r1, [pc, #176]	@ (8002c68 <copc_task_update+0x158>)
 8002bb6:	482e      	ldr	r0, [pc, #184]	@ (8002c70 <copc_task_update+0x160>)
 8002bb8:	f7fe fb2a 	bl	8001210 <UART_Write>
						break;
 8002bbc:	e037      	b.n	8002c2e <copc_task_update+0x11e>
					case FSP_PKT_ERROR:
						UART_Send_String(&CONSOLE_UART, "Packet error...\n");
 8002bbe:	4930      	ldr	r1, [pc, #192]	@ (8002c80 <copc_task_update+0x170>)
 8002bc0:	482b      	ldr	r0, [pc, #172]	@ (8002c70 <copc_task_update+0x160>)
 8002bc2:	f7fe fb12 	bl	80011ea <UART_Send_String>
						UART_Write(&CONSOLE_UART, (const char *)COPC_RX_Buff, COPC_RX_Index);
 8002bc6:	4b26      	ldr	r3, [pc, #152]	@ (8002c60 <copc_task_update+0x150>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4926      	ldr	r1, [pc, #152]	@ (8002c68 <copc_task_update+0x158>)
 8002bd0:	4827      	ldr	r0, [pc, #156]	@ (8002c70 <copc_task_update+0x160>)
 8002bd2:	f7fe fb1d 	bl	8001210 <UART_Write>
						break;
 8002bd6:	e02a      	b.n	8002c2e <copc_task_update+0x11e>
						break;
				}
			}
			else
			{
				if(rxData == (char)(FSP_PKT_ESC)){
 8002bd8:	79fb      	ldrb	r3, [r7, #7]
 8002bda:	2bbd      	cmp	r3, #189	@ 0xbd
 8002bdc:	d103      	bne.n	8002be6 <copc_task_update+0xd6>
					swap_byte = 1;
 8002bde:	4b29      	ldr	r3, [pc, #164]	@ (8002c84 <copc_task_update+0x174>)
 8002be0:	2201      	movs	r2, #1
 8002be2:	701a      	strb	r2, [r3, #0]
					break;
 8002be4:	e034      	b.n	8002c50 <copc_task_update+0x140>
				}
				if(swap_byte) {
 8002be6:	4b27      	ldr	r3, [pc, #156]	@ (8002c84 <copc_task_update+0x174>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d011      	beq.n	8002c14 <copc_task_update+0x104>
					swap_byte = 0;
 8002bf0:	4b24      	ldr	r3, [pc, #144]	@ (8002c84 <copc_task_update+0x174>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	701a      	strb	r2, [r3, #0]
					if(rxData == (char)(FSP_PKT_TSOD))	rxData = FSP_PKT_SOD;
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	2bdc      	cmp	r3, #220	@ 0xdc
 8002bfa:	d101      	bne.n	8002c00 <copc_task_update+0xf0>
 8002bfc:	23ca      	movs	r3, #202	@ 0xca
 8002bfe:	71fb      	strb	r3, [r7, #7]
					if(rxData == (char)(FSP_PKT_TESC))	rxData = FSP_PKT_ESC;
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	2bdb      	cmp	r3, #219	@ 0xdb
 8002c04:	d101      	bne.n	8002c0a <copc_task_update+0xfa>
 8002c06:	23bd      	movs	r3, #189	@ 0xbd
 8002c08:	71fb      	strb	r3, [r7, #7]
					if(rxData == (char)(FSP_PKT_TEOF))	rxData = FSP_PKT_EOF;
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	2bde      	cmp	r3, #222	@ 0xde
 8002c0e:	d101      	bne.n	8002c14 <copc_task_update+0x104>
 8002c10:	23ef      	movs	r3, #239	@ 0xef
 8002c12:	71fb      	strb	r3, [r7, #7]
				}
				COPC_RX_Buff[COPC_RX_Index++]  =  rxData;
 8002c14:	4b12      	ldr	r3, [pc, #72]	@ (8002c60 <copc_task_update+0x150>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	b2d1      	uxtb	r1, r2
 8002c1e:	4a10      	ldr	r2, [pc, #64]	@ (8002c60 <copc_task_update+0x150>)
 8002c20:	7011      	strb	r1, [r2, #0]
 8002c22:	4619      	mov	r1, r3
 8002c24:	4a10      	ldr	r2, [pc, #64]	@ (8002c68 <copc_task_update+0x158>)
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	5453      	strb	r3, [r2, r1]
 8002c2a:	e000      	b.n	8002c2e <copc_task_update+0x11e>
						break;
 8002c2c:	bf00      	nop
			}
			if  (COPC_RX_Index >= FSP_PKT_MAX_LENGTH)
 8002c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c60 <copc_task_update+0x150>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b42      	cmp	r3, #66	@ 0x42
 8002c36:	d902      	bls.n	8002c3e <copc_task_update+0x12e>
			{
				receiving  =  0;
 8002c38:	4b08      	ldr	r3, [pc, #32]	@ (8002c5c <copc_task_update+0x14c>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	701a      	strb	r2, [r3, #0]
	while (!RX_BUFFER_EMPTY(&COPC_UART))
 8002c3e:	4912      	ldr	r1, [pc, #72]	@ (8002c88 <copc_task_update+0x178>)
 8002c40:	4812      	ldr	r0, [pc, #72]	@ (8002c8c <copc_task_update+0x17c>)
 8002c42:	f7fe fdac 	bl	800179e <UART_is_buffer_empty>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f43f af65 	beq.w	8002b18 <copc_task_update+0x8>
			}
		}
	}
}
 8002c4e:	bf00      	nop
 8002c50:	bf00      	nop
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	20002554 	.word	0x20002554
 8002c5c:	200026b0 	.word	0x200026b0
 8002c60:	200026b1 	.word	0x200026b1
 8002c64:	200025f4 	.word	0x200025f4
 8002c68:	20002690 	.word	0x20002690
 8002c6c:	08009c08 	.word	0x08009c08
 8002c70:	20002468 	.word	0x20002468
 8002c74:	08009c20 	.word	0x08009c20
 8002c78:	08009c34 	.word	0x08009c34
 8002c7c:	08009c48 	.word	0x08009c48
 8002c80:	08009c60 	.word	0x08009c60
 8002c84:	2000268c 	.word	0x2000268c
 8002c88:	2000256c 	.word	0x2000256c
 8002c8c:	2000256e 	.word	0x2000256e

08002c90 <copc_process_command>:

void copc_process_command(fsp_packet_t	*s_COPC_FspPacket)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
	s_pEXP_Sfp_Payload->commonFrame.Cmd = s_pCOPC_Sfp_Payload->commonFrame.Cmd;
 8002c98:	4b32      	ldr	r3, [pc, #200]	@ (8002d64 <copc_process_command+0xd4>)
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	4b32      	ldr	r3, [pc, #200]	@ (8002d68 <copc_process_command+0xd8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	7812      	ldrb	r2, [r2, #0]
 8002ca2:	701a      	strb	r2, [r3, #0]
	switch (s_pCOPC_Sfp_Payload->commonFrame.Cmd)
 8002ca4:	4b2f      	ldr	r3, [pc, #188]	@ (8002d64 <copc_process_command+0xd4>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b0e      	cmp	r3, #14
 8002cac:	dc24      	bgt.n	8002cf8 <copc_process_command+0x68>
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	dd52      	ble.n	8002d58 <copc_process_command+0xc8>
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	2b0d      	cmp	r3, #13
 8002cb6:	d84f      	bhi.n	8002d58 <copc_process_command+0xc8>
 8002cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8002cc0 <copc_process_command+0x30>)
 8002cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbe:	bf00      	nop
 8002cc0:	08002cff 	.word	0x08002cff
 8002cc4:	08002d05 	.word	0x08002d05
 8002cc8:	08002d0b 	.word	0x08002d0b
 8002ccc:	08002d11 	.word	0x08002d11
 8002cd0:	08002d17 	.word	0x08002d17
 8002cd4:	08002d1d 	.word	0x08002d1d
 8002cd8:	08002d23 	.word	0x08002d23
 8002cdc:	08002d29 	.word	0x08002d29
 8002ce0:	08002d2f 	.word	0x08002d2f
 8002ce4:	08002d35 	.word	0x08002d35
 8002ce8:	08002d3b 	.word	0x08002d3b
 8002cec:	08002d41 	.word	0x08002d41
 8002cf0:	08002d47 	.word	0x08002d47
 8002cf4:	08002d4d 	.word	0x08002d4d
 8002cf8:	2bff      	cmp	r3, #255	@ 0xff
 8002cfa:	d02a      	beq.n	8002d52 <copc_process_command+0xc2>
/*---------------------------------------------------------------------------*/
		case FSP_CMD_CODE_EXP_GET_ALL:
			copc_exp_get_all();
			break;
		default:
			break;
 8002cfc:	e02c      	b.n	8002d58 <copc_process_command+0xc8>
			copc_exp_tec_pw_on();
 8002cfe:	f000 f865 	bl	8002dcc <copc_exp_tec_pw_on>
			break;
 8002d02:	e02a      	b.n	8002d5a <copc_process_command+0xca>
			copc_exp_led_pw_on();
 8002d04:	f000 f886 	bl	8002e14 <copc_exp_led_pw_on>
			break;
 8002d08:	e027      	b.n	8002d5a <copc_process_command+0xca>
			copc_exp_heater_pw_on();
 8002d0a:	f000 f8a7 	bl	8002e5c <copc_exp_heater_pw_on>
			break;
 8002d0e:	e024      	b.n	8002d5a <copc_process_command+0xca>
			copc_exp_set_temp();
 8002d10:	f000 f8c8 	bl	8002ea4 <copc_exp_set_temp>
			break;
 8002d14:	e021      	b.n	8002d5a <copc_process_command+0xca>
			copc_exp_get_temp_setpoint();
 8002d16:	f000 f915 	bl	8002f44 <copc_exp_get_temp_setpoint>
			break;
 8002d1a:	e01e      	b.n	8002d5a <copc_process_command+0xca>
			copc_exp_get_temp();
 8002d1c:	f000 f990 	bl	8003040 <copc_exp_get_temp>
			break;
 8002d20:	e01b      	b.n	8002d5a <copc_process_command+0xca>
			copc_exp_set_tec_vol();
 8002d22:	f000 fa0b 	bl	800313c <copc_exp_set_tec_vol>
			break;
 8002d26:	e018      	b.n	8002d5a <copc_process_command+0xca>
			copc_exp_get_tec_vol();
 8002d28:	f000 fa58 	bl	80031dc <copc_exp_get_tec_vol>
			break;
 8002d2c:	e015      	b.n	8002d5a <copc_process_command+0xca>
			copc_exp_set_heater_duty();
 8002d2e:	f000 fad3 	bl	80032d8 <copc_exp_set_heater_duty>
			break;
 8002d32:	e012      	b.n	8002d5a <copc_process_command+0xca>
			copc_exp_get_heater_duty();
 8002d34:	f000 fb14 	bl	8003360 <copc_exp_get_heater_duty>
			break;
 8002d38:	e00f      	b.n	8002d5a <copc_process_command+0xca>
			copc_exp_temp_ctrl();
 8002d3a:	f000 fb6d 	bl	8003418 <copc_exp_temp_ctrl>
			break;
 8002d3e:	e00c      	b.n	8002d5a <copc_process_command+0xca>
			copc_exp_temp_auto_ctrl();
 8002d40:	f000 fbac 	bl	800349c <copc_exp_temp_auto_ctrl>
			break;
 8002d44:	e009      	b.n	8002d5a <copc_process_command+0xca>
			copc_exp_set_ir_duty();
 8002d46:	f000 fbdf 	bl	8003508 <copc_exp_set_ir_duty>
			break;
 8002d4a:	e006      	b.n	8002d5a <copc_process_command+0xca>
			copc_exp_get_ir_duty();
 8002d4c:	f000 fbe3 	bl	8003516 <copc_exp_get_ir_duty>
			break;
 8002d50:	e003      	b.n	8002d5a <copc_process_command+0xca>
			copc_exp_get_all();
 8002d52:	f000 fbe7 	bl	8003524 <copc_exp_get_all>
			break;
 8002d56:	e000      	b.n	8002d5a <copc_process_command+0xca>
			break;
 8002d58:	bf00      	nop
	}
}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	20002684 	.word	0x20002684
 8002d68:	20002688 	.word	0x20002688

08002d6c <OK_Send>:

void OK_Send()
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af02      	add	r7, sp, #8
	uint8_t frame_len;
	uint8_t payload[15];
	memset((void*)payload, 0, sizeof(payload));
 8002d72:	463b      	mov	r3, r7
 8002d74:	220f      	movs	r2, #15
 8002d76:	2100      	movs	r1, #0
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f005 fe89 	bl	8008a90 <memset>
	payload[0] = s_pCOPC_Sfp_Payload->commonFrame.Cmd;
 8002d7e:	4b10      	ldr	r3, [pc, #64]	@ (8002dc0 <OK_Send+0x54>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	703b      	strb	r3, [r7, #0]
	fsp_gen_cmd_w_data_pkt(FSP_CMD_RESPONSE_DONE, payload, 1, FSP_ADR_COPC, FSP_PKT_WITHOUT_ACK,  &s_EXP_FspPacket);
 8002d86:	4639      	mov	r1, r7
 8002d88:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc4 <OK_Send+0x58>)
 8002d8a:	9301      	str	r3, [sp, #4]
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	2301      	movs	r3, #1
 8002d92:	2201      	movs	r2, #1
 8002d94:	2000      	movs	r0, #0
 8002d96:	f005 fb69 	bl	800846c <fsp_gen_cmd_w_data_pkt>
	fsp_encode(&s_EXP_FspPacket,  payload,  &frame_len);
 8002d9a:	f107 020f 	add.w	r2, r7, #15
 8002d9e:	463b      	mov	r3, r7
 8002da0:	4619      	mov	r1, r3
 8002da2:	4808      	ldr	r0, [pc, #32]	@ (8002dc4 <OK_Send+0x58>)
 8002da4:	f005 fbec 	bl	8008580 <fsp_encode>
	UART_Write(&COPC_UART, (char*)payload, frame_len);
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
 8002daa:	461a      	mov	r2, r3
 8002dac:	463b      	mov	r3, r7
 8002dae:	4619      	mov	r1, r3
 8002db0:	4805      	ldr	r0, [pc, #20]	@ (8002dc8 <OK_Send+0x5c>)
 8002db2:	f7fe fa2d 	bl	8001210 <UART_Write>
	return;
 8002db6:	bf00      	nop
}
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20002684 	.word	0x20002684
 8002dc4:	2000263c 	.word	0x2000263c
 8002dc8:	20002554 	.word	0x20002554

08002dcc <copc_exp_tec_pw_on>:
void copc_exp_tec_pw_on(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
	uint8_t Status_PW = s_pCOPC_Sfp_Payload->setPowerCommandFrame.Status_PW ? 1 : 0;
 8002dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8002e0c <copc_exp_tec_pw_on+0x40>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	785b      	ldrb	r3, [r3, #1]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	bf14      	ite	ne
 8002ddc:	2301      	movne	r3, #1
 8002dde:	2300      	moveq	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	71fb      	strb	r3, [r7, #7]
	if (Status_PW)
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d005      	beq.n	8002df6 <copc_exp_tec_pw_on+0x2a>
		LL_GPIO_SetOutputPin(EF_TEC_EN_GPIO_Port, EF_TEC_EN_Pin);
 8002dea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002dee:	4808      	ldr	r0, [pc, #32]	@ (8002e10 <copc_exp_tec_pw_on+0x44>)
 8002df0:	f7ff fe46 	bl	8002a80 <LL_GPIO_SetOutputPin>
 8002df4:	e004      	b.n	8002e00 <copc_exp_tec_pw_on+0x34>
	else
		LL_GPIO_ResetOutputPin(EF_TEC_EN_GPIO_Port, EF_TEC_EN_Pin);
 8002df6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002dfa:	4805      	ldr	r0, [pc, #20]	@ (8002e10 <copc_exp_tec_pw_on+0x44>)
 8002dfc:	f7ff fe4e 	bl	8002a9c <LL_GPIO_ResetOutputPin>
	OK_Send();
 8002e00:	f7ff ffb4 	bl	8002d6c <OK_Send>
	return;
 8002e04:	bf00      	nop
}
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	20002684 	.word	0x20002684
 8002e10:	40020800 	.word	0x40020800

08002e14 <copc_exp_led_pw_on>:
void copc_exp_led_pw_on(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
	uint8_t Status_PW = s_pCOPC_Sfp_Payload->setPowerCommandFrame.Status_PW  ? 1 : 0;
 8002e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002e54 <copc_exp_led_pw_on+0x40>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	785b      	ldrb	r3, [r3, #1]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	bf14      	ite	ne
 8002e24:	2301      	movne	r3, #1
 8002e26:	2300      	moveq	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	71fb      	strb	r3, [r7, #7]
	if (Status_PW)
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d005      	beq.n	8002e3e <copc_exp_led_pw_on+0x2a>
		LL_GPIO_SetOutputPin(EF_LED_EN_GPIO_Port, EF_LED_EN_Pin);
 8002e32:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e36:	4808      	ldr	r0, [pc, #32]	@ (8002e58 <copc_exp_led_pw_on+0x44>)
 8002e38:	f7ff fe22 	bl	8002a80 <LL_GPIO_SetOutputPin>
 8002e3c:	e004      	b.n	8002e48 <copc_exp_led_pw_on+0x34>
	else
		LL_GPIO_ResetOutputPin(EF_LED_EN_GPIO_Port, EF_LED_EN_Pin);
 8002e3e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e42:	4805      	ldr	r0, [pc, #20]	@ (8002e58 <copc_exp_led_pw_on+0x44>)
 8002e44:	f7ff fe2a 	bl	8002a9c <LL_GPIO_ResetOutputPin>
	OK_Send();
 8002e48:	f7ff ff90 	bl	8002d6c <OK_Send>
	return;
 8002e4c:	bf00      	nop
}
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20002684 	.word	0x20002684
 8002e58:	40020400 	.word	0x40020400

08002e5c <copc_exp_heater_pw_on>:
void copc_exp_heater_pw_on(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
	uint8_t Status_PW = s_pCOPC_Sfp_Payload->setPowerCommandFrame.Status_PW  ? 1 : 0;
 8002e62:	4b0e      	ldr	r3, [pc, #56]	@ (8002e9c <copc_exp_heater_pw_on+0x40>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	785b      	ldrb	r3, [r3, #1]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	bf14      	ite	ne
 8002e6c:	2301      	movne	r3, #1
 8002e6e:	2300      	moveq	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	71fb      	strb	r3, [r7, #7]
	if (Status_PW)
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d005      	beq.n	8002e86 <copc_exp_heater_pw_on+0x2a>
		LL_GPIO_SetOutputPin(EF_HEATER_EN_GPIO_Port, EF_HEATER_EN_Pin);
 8002e7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e7e:	4808      	ldr	r0, [pc, #32]	@ (8002ea0 <copc_exp_heater_pw_on+0x44>)
 8002e80:	f7ff fdfe 	bl	8002a80 <LL_GPIO_SetOutputPin>
 8002e84:	e004      	b.n	8002e90 <copc_exp_heater_pw_on+0x34>
	else
		LL_GPIO_ResetOutputPin(EF_HEATER_EN_GPIO_Port, EF_HEATER_EN_Pin);
 8002e86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e8a:	4805      	ldr	r0, [pc, #20]	@ (8002ea0 <copc_exp_heater_pw_on+0x44>)
 8002e8c:	f7ff fe06 	bl	8002a9c <LL_GPIO_ResetOutputPin>
	OK_Send();
 8002e90:	f7ff ff6c 	bl	8002d6c <OK_Send>
	return;
 8002e94:	bf00      	nop
}
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	20002684 	.word	0x20002684
 8002ea0:	40021000 	.word	0x40021000

08002ea4 <copc_exp_set_temp>:
void copc_exp_set_temp(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
	int16_t setpoint_0 = ((s_pCOPC_Sfp_Payload->setTempCommandFrame.Setpoint_0_High) << 8) | (s_pCOPC_Sfp_Payload->setTempCommandFrame.Setpoint_0_Low);
 8002eaa:	4b25      	ldr	r3, [pc, #148]	@ (8002f40 <copc_exp_set_temp+0x9c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	785b      	ldrb	r3, [r3, #1]
 8002eb0:	021b      	lsls	r3, r3, #8
 8002eb2:	b21a      	sxth	r2, r3
 8002eb4:	4b22      	ldr	r3, [pc, #136]	@ (8002f40 <copc_exp_set_temp+0x9c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	789b      	ldrb	r3, [r3, #2]
 8002eba:	b21b      	sxth	r3, r3
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	80fb      	strh	r3, [r7, #6]
	int16_t setpoint_1 = ((s_pCOPC_Sfp_Payload->setTempCommandFrame.Setpoint_1_High) << 8) | (s_pCOPC_Sfp_Payload->setTempCommandFrame.Setpoint_1_Low);
 8002ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8002f40 <copc_exp_set_temp+0x9c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	78db      	ldrb	r3, [r3, #3]
 8002ec6:	021b      	lsls	r3, r3, #8
 8002ec8:	b21a      	sxth	r2, r3
 8002eca:	4b1d      	ldr	r3, [pc, #116]	@ (8002f40 <copc_exp_set_temp+0x9c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	791b      	ldrb	r3, [r3, #4]
 8002ed0:	b21b      	sxth	r3, r3
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	80bb      	strh	r3, [r7, #4]
	int16_t setpoint_2 = ((s_pCOPC_Sfp_Payload->setTempCommandFrame.Setpoint_2_High) << 8) | (s_pCOPC_Sfp_Payload->setTempCommandFrame.Setpoint_2_Low);
 8002ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8002f40 <copc_exp_set_temp+0x9c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	795b      	ldrb	r3, [r3, #5]
 8002edc:	021b      	lsls	r3, r3, #8
 8002ede:	b21a      	sxth	r2, r3
 8002ee0:	4b17      	ldr	r3, [pc, #92]	@ (8002f40 <copc_exp_set_temp+0x9c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	799b      	ldrb	r3, [r3, #6]
 8002ee6:	b21b      	sxth	r3, r3
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	807b      	strh	r3, [r7, #2]
	int16_t setpoint_3 = ((s_pCOPC_Sfp_Payload->setTempCommandFrame.Setpoint_3_High) << 8) | (s_pCOPC_Sfp_Payload->setTempCommandFrame.Setpoint_3_Low);
 8002eec:	4b14      	ldr	r3, [pc, #80]	@ (8002f40 <copc_exp_set_temp+0x9c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	79db      	ldrb	r3, [r3, #7]
 8002ef2:	021b      	lsls	r3, r3, #8
 8002ef4:	b21a      	sxth	r2, r3
 8002ef6:	4b12      	ldr	r3, [pc, #72]	@ (8002f40 <copc_exp_set_temp+0x9c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	7a1b      	ldrb	r3, [r3, #8]
 8002efc:	b21b      	sxth	r3, r3
 8002efe:	4313      	orrs	r3, r2
 8002f00:	803b      	strh	r3, [r7, #0]
	temperature_set_setpoint(setpoint_0, 0);
 8002f02:	88fb      	ldrh	r3, [r7, #6]
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2100      	movs	r1, #0
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f003 fa19 	bl	8006340 <temperature_set_setpoint>
	temperature_set_setpoint(setpoint_1, 1);
 8002f0e:	88bb      	ldrh	r3, [r7, #4]
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2101      	movs	r1, #1
 8002f14:	4618      	mov	r0, r3
 8002f16:	f003 fa13 	bl	8006340 <temperature_set_setpoint>
	temperature_set_setpoint(setpoint_2, 2);
 8002f1a:	887b      	ldrh	r3, [r7, #2]
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2102      	movs	r1, #2
 8002f20:	4618      	mov	r0, r3
 8002f22:	f003 fa0d 	bl	8006340 <temperature_set_setpoint>
	temperature_set_setpoint(setpoint_3, 3);
 8002f26:	883b      	ldrh	r3, [r7, #0]
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2103      	movs	r1, #3
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f003 fa07 	bl	8006340 <temperature_set_setpoint>
	OK_Send();
 8002f32:	f7ff ff1b 	bl	8002d6c <OK_Send>
	return;
 8002f36:	bf00      	nop
}
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	20002684 	.word	0x20002684

08002f44 <copc_exp_get_temp_setpoint>:
void copc_exp_get_temp_setpoint(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b096      	sub	sp, #88	@ 0x58
 8002f48:	af02      	add	r7, sp, #8
	uint8_t encode_frame[FSP_PKT_MAX_LENGTH];
	uint8_t frame_len;
	int16_t setpoint_0 = (int16_t)temperature_get_setpoint(0);
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	f003 fa0e 	bl	800636c <temperature_get_setpoint>
 8002f50:	4603      	mov	r3, r0
 8002f52:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	int16_t setpoint_1 = (int16_t)temperature_get_setpoint(1);
 8002f56:	2001      	movs	r0, #1
 8002f58:	f003 fa08 	bl	800636c <temperature_get_setpoint>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	int16_t setpoint_2 = (int16_t)temperature_get_setpoint(2);
 8002f62:	2002      	movs	r0, #2
 8002f64:	f003 fa02 	bl	800636c <temperature_get_setpoint>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
	int16_t setpoint_3 = (int16_t)temperature_get_setpoint(3);
 8002f6e:	2003      	movs	r0, #3
 8002f70:	f003 f9fc 	bl	800636c <temperature_get_setpoint>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

	s_pEXP_Sfp_Payload->getTempSetpointResponseFrame.Cmd = s_pCOPC_Sfp_Payload->getTempSetpointCommandFrame.Cmd;
 8002f7a:	4b2d      	ldr	r3, [pc, #180]	@ (8003030 <copc_exp_get_temp_setpoint+0xec>)
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	4b2d      	ldr	r3, [pc, #180]	@ (8003034 <copc_exp_get_temp_setpoint+0xf0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	7812      	ldrb	r2, [r2, #0]
 8002f84:	701a      	strb	r2, [r3, #0]
	s_pEXP_Sfp_Payload->getTempSetpointResponseFrame.Setpoint_0_High = (uint8_t)(setpoint_0 >> 8);
 8002f86:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8002f8a:	121b      	asrs	r3, r3, #8
 8002f8c:	b21a      	sxth	r2, r3
 8002f8e:	4b29      	ldr	r3, [pc, #164]	@ (8003034 <copc_exp_get_temp_setpoint+0xf0>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	705a      	strb	r2, [r3, #1]
	s_pEXP_Sfp_Payload->getTempSetpointResponseFrame.Setpoint_0_Low = (uint8_t)setpoint_0;
 8002f96:	4b27      	ldr	r3, [pc, #156]	@ (8003034 <copc_exp_get_temp_setpoint+0xf0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	709a      	strb	r2, [r3, #2]
	s_pEXP_Sfp_Payload->getTempSetpointResponseFrame.Setpoint_1_High = (uint8_t)(setpoint_1 >> 8);
 8002fa2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002fa6:	121b      	asrs	r3, r3, #8
 8002fa8:	b21a      	sxth	r2, r3
 8002faa:	4b22      	ldr	r3, [pc, #136]	@ (8003034 <copc_exp_get_temp_setpoint+0xf0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	70da      	strb	r2, [r3, #3]
	s_pEXP_Sfp_Payload->getTempSetpointResponseFrame.Setpoint_1_Low = (uint8_t)setpoint_1;
 8002fb2:	4b20      	ldr	r3, [pc, #128]	@ (8003034 <copc_exp_get_temp_setpoint+0xf0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	711a      	strb	r2, [r3, #4]
	s_pEXP_Sfp_Payload->getTempSetpointResponseFrame.Setpoint_2_High = (uint8_t)(setpoint_2 >> 8);
 8002fbe:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002fc2:	121b      	asrs	r3, r3, #8
 8002fc4:	b21a      	sxth	r2, r3
 8002fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8003034 <copc_exp_get_temp_setpoint+0xf0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	715a      	strb	r2, [r3, #5]
	s_pEXP_Sfp_Payload->getTempSetpointResponseFrame.Setpoint_2_Low = (uint8_t)setpoint_2;
 8002fce:	4b19      	ldr	r3, [pc, #100]	@ (8003034 <copc_exp_get_temp_setpoint+0xf0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8002fd6:	b2d2      	uxtb	r2, r2
 8002fd8:	719a      	strb	r2, [r3, #6]
	s_pEXP_Sfp_Payload->getTempSetpointResponseFrame.Setpoint_3_High = (uint8_t)(setpoint_3 >> 8);
 8002fda:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 8002fde:	121b      	asrs	r3, r3, #8
 8002fe0:	b21a      	sxth	r2, r3
 8002fe2:	4b14      	ldr	r3, [pc, #80]	@ (8003034 <copc_exp_get_temp_setpoint+0xf0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	71da      	strb	r2, [r3, #7]
	s_pEXP_Sfp_Payload->getTempSetpointResponseFrame.Setpoint_3_Low = (uint8_t)setpoint_3;
 8002fea:	4b12      	ldr	r3, [pc, #72]	@ (8003034 <copc_exp_get_temp_setpoint+0xf0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	721a      	strb	r2, [r3, #8]

	fsp_gen_pkt((void*)0, (uint8_t *)&s_pEXP_Sfp_Payload->getTempSetpointResponseFrame, 9, FSP_ADR_COPC, FSP_PKT_TYPE_CMD_W_DATA, &s_EXP_FspPacket);
 8002ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8003034 <copc_exp_get_temp_setpoint+0xf0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8003038 <copc_exp_get_temp_setpoint+0xf4>)
 8002ffe:	9301      	str	r3, [sp, #4]
 8003000:	2307      	movs	r3, #7
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	2301      	movs	r3, #1
 8003006:	2209      	movs	r2, #9
 8003008:	2000      	movs	r0, #0
 800300a:	f005 fa59 	bl	80084c0 <fsp_gen_pkt>
	fsp_encode(&s_EXP_FspPacket, encode_frame, &frame_len);
 800300e:	1cfa      	adds	r2, r7, #3
 8003010:	1d3b      	adds	r3, r7, #4
 8003012:	4619      	mov	r1, r3
 8003014:	4808      	ldr	r0, [pc, #32]	@ (8003038 <copc_exp_get_temp_setpoint+0xf4>)
 8003016:	f005 fab3 	bl	8008580 <fsp_encode>
	UART_Write(&COPC_UART, (const char *)&encode_frame, frame_len);
 800301a:	78fb      	ldrb	r3, [r7, #3]
 800301c:	461a      	mov	r2, r3
 800301e:	1d3b      	adds	r3, r7, #4
 8003020:	4619      	mov	r1, r3
 8003022:	4806      	ldr	r0, [pc, #24]	@ (800303c <copc_exp_get_temp_setpoint+0xf8>)
 8003024:	f7fe f8f4 	bl	8001210 <UART_Write>
	return;
 8003028:	bf00      	nop
}
 800302a:	3750      	adds	r7, #80	@ 0x50
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	20002684 	.word	0x20002684
 8003034:	20002688 	.word	0x20002688
 8003038:	2000263c 	.word	0x2000263c
 800303c:	20002554 	.word	0x20002554

08003040 <copc_exp_get_temp>:
void copc_exp_get_temp(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b096      	sub	sp, #88	@ 0x58
 8003044:	af02      	add	r7, sp, #8
	uint8_t encode_frame[FSP_PKT_MAX_LENGTH];
	uint8_t frame_len;
	int16_t temp_NTC_0 = (int16_t)temperature_get_temp_NTC(0);
 8003046:	2000      	movs	r0, #0
 8003048:	f003 f9a2 	bl	8006390 <temperature_get_temp_NTC>
 800304c:	4603      	mov	r3, r0
 800304e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	int16_t temp_NTC_1 = (int16_t)temperature_get_temp_NTC(1);
 8003052:	2001      	movs	r0, #1
 8003054:	f003 f99c 	bl	8006390 <temperature_get_temp_NTC>
 8003058:	4603      	mov	r3, r0
 800305a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	int16_t temp_NTC_2 = (int16_t)temperature_get_temp_NTC(2);
 800305e:	2002      	movs	r0, #2
 8003060:	f003 f996 	bl	8006390 <temperature_get_temp_NTC>
 8003064:	4603      	mov	r3, r0
 8003066:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
	int16_t temp_NTC_3 = (int16_t)temperature_get_temp_NTC(3);
 800306a:	2003      	movs	r0, #3
 800306c:	f003 f990 	bl	8006390 <temperature_get_temp_NTC>
 8003070:	4603      	mov	r3, r0
 8003072:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

	s_pEXP_Sfp_Payload->getTempResponseFrame.Cmd = s_pCOPC_Sfp_Payload->getTempCommandFrame.Cmd;
 8003076:	4b2d      	ldr	r3, [pc, #180]	@ (800312c <copc_exp_get_temp+0xec>)
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	4b2d      	ldr	r3, [pc, #180]	@ (8003130 <copc_exp_get_temp+0xf0>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	7812      	ldrb	r2, [r2, #0]
 8003080:	701a      	strb	r2, [r3, #0]
	s_pEXP_Sfp_Payload->getTempResponseFrame.NTC_0_High = (uint8_t)(temp_NTC_0 >> 8);
 8003082:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8003086:	121b      	asrs	r3, r3, #8
 8003088:	b21a      	sxth	r2, r3
 800308a:	4b29      	ldr	r3, [pc, #164]	@ (8003130 <copc_exp_get_temp+0xf0>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	705a      	strb	r2, [r3, #1]
	s_pEXP_Sfp_Payload->getTempResponseFrame.NTC_0_Low = (uint8_t)(temp_NTC_0);
 8003092:	4b27      	ldr	r3, [pc, #156]	@ (8003130 <copc_exp_get_temp+0xf0>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	709a      	strb	r2, [r3, #2]
	s_pEXP_Sfp_Payload->getTempResponseFrame.NTC_1_High = (uint8_t)(temp_NTC_1 >> 8);
 800309e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80030a2:	121b      	asrs	r3, r3, #8
 80030a4:	b21a      	sxth	r2, r3
 80030a6:	4b22      	ldr	r3, [pc, #136]	@ (8003130 <copc_exp_get_temp+0xf0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	70da      	strb	r2, [r3, #3]
	s_pEXP_Sfp_Payload->getTempResponseFrame.NTC_1_Low = (uint8_t)(temp_NTC_1);
 80030ae:	4b20      	ldr	r3, [pc, #128]	@ (8003130 <copc_exp_get_temp+0xf0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	711a      	strb	r2, [r3, #4]
	s_pEXP_Sfp_Payload->getTempResponseFrame.NTC_2_High = (uint8_t)(temp_NTC_2 >> 8);
 80030ba:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80030be:	121b      	asrs	r3, r3, #8
 80030c0:	b21a      	sxth	r2, r3
 80030c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003130 <copc_exp_get_temp+0xf0>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	715a      	strb	r2, [r3, #5]
	s_pEXP_Sfp_Payload->getTempResponseFrame.NTC_2_Low = (uint8_t)(temp_NTC_2);
 80030ca:	4b19      	ldr	r3, [pc, #100]	@ (8003130 <copc_exp_get_temp+0xf0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	719a      	strb	r2, [r3, #6]
	s_pEXP_Sfp_Payload->getTempResponseFrame.NTC_3_High = (uint8_t)(temp_NTC_3 >> 8);
 80030d6:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 80030da:	121b      	asrs	r3, r3, #8
 80030dc:	b21a      	sxth	r2, r3
 80030de:	4b14      	ldr	r3, [pc, #80]	@ (8003130 <copc_exp_get_temp+0xf0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	71da      	strb	r2, [r3, #7]
	s_pEXP_Sfp_Payload->getTempResponseFrame.NTC_3_Low = (uint8_t)(temp_NTC_3);
 80030e6:	4b12      	ldr	r3, [pc, #72]	@ (8003130 <copc_exp_get_temp+0xf0>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	721a      	strb	r2, [r3, #8]

	fsp_gen_pkt((void*)0, (uint8_t *)&s_pEXP_Sfp_Payload->getTempResponseFrame, 9, FSP_ADR_COPC, FSP_PKT_TYPE_CMD_W_DATA, &s_EXP_FspPacket);
 80030f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003130 <copc_exp_get_temp+0xf0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4619      	mov	r1, r3
 80030f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003134 <copc_exp_get_temp+0xf4>)
 80030fa:	9301      	str	r3, [sp, #4]
 80030fc:	2307      	movs	r3, #7
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	2301      	movs	r3, #1
 8003102:	2209      	movs	r2, #9
 8003104:	2000      	movs	r0, #0
 8003106:	f005 f9db 	bl	80084c0 <fsp_gen_pkt>
	fsp_encode(&s_EXP_FspPacket, encode_frame, &frame_len);
 800310a:	1cfa      	adds	r2, r7, #3
 800310c:	1d3b      	adds	r3, r7, #4
 800310e:	4619      	mov	r1, r3
 8003110:	4808      	ldr	r0, [pc, #32]	@ (8003134 <copc_exp_get_temp+0xf4>)
 8003112:	f005 fa35 	bl	8008580 <fsp_encode>
	UART_Write(&COPC_UART, (const char *)&encode_frame, frame_len);
 8003116:	78fb      	ldrb	r3, [r7, #3]
 8003118:	461a      	mov	r2, r3
 800311a:	1d3b      	adds	r3, r7, #4
 800311c:	4619      	mov	r1, r3
 800311e:	4806      	ldr	r0, [pc, #24]	@ (8003138 <copc_exp_get_temp+0xf8>)
 8003120:	f7fe f876 	bl	8001210 <UART_Write>
	return;
 8003124:	bf00      	nop
}
 8003126:	3750      	adds	r7, #80	@ 0x50
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	20002684 	.word	0x20002684
 8003130:	20002688 	.word	0x20002688
 8003134:	2000263c 	.word	0x2000263c
 8003138:	20002554 	.word	0x20002554

0800313c <copc_exp_set_tec_vol>:
void copc_exp_set_tec_vol(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
	uint16_t vol_0 = ((s_pCOPC_Sfp_Payload->setTecVoltageCommandFrame.Voltage_0_High) << 8) | (s_pCOPC_Sfp_Payload->setTecVoltageCommandFrame.Voltage_0_Low);
 8003142:	4b25      	ldr	r3, [pc, #148]	@ (80031d8 <copc_exp_set_tec_vol+0x9c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	785b      	ldrb	r3, [r3, #1]
 8003148:	021b      	lsls	r3, r3, #8
 800314a:	b21a      	sxth	r2, r3
 800314c:	4b22      	ldr	r3, [pc, #136]	@ (80031d8 <copc_exp_set_tec_vol+0x9c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	789b      	ldrb	r3, [r3, #2]
 8003152:	b21b      	sxth	r3, r3
 8003154:	4313      	orrs	r3, r2
 8003156:	b21b      	sxth	r3, r3
 8003158:	80fb      	strh	r3, [r7, #6]
	uint16_t vol_1 = ((s_pCOPC_Sfp_Payload->setTecVoltageCommandFrame.Voltage_1_High) << 8) | (s_pCOPC_Sfp_Payload->setTecVoltageCommandFrame.Voltage_1_Low);
 800315a:	4b1f      	ldr	r3, [pc, #124]	@ (80031d8 <copc_exp_set_tec_vol+0x9c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	78db      	ldrb	r3, [r3, #3]
 8003160:	021b      	lsls	r3, r3, #8
 8003162:	b21a      	sxth	r2, r3
 8003164:	4b1c      	ldr	r3, [pc, #112]	@ (80031d8 <copc_exp_set_tec_vol+0x9c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	791b      	ldrb	r3, [r3, #4]
 800316a:	b21b      	sxth	r3, r3
 800316c:	4313      	orrs	r3, r2
 800316e:	b21b      	sxth	r3, r3
 8003170:	80bb      	strh	r3, [r7, #4]
	uint16_t vol_2 = ((s_pCOPC_Sfp_Payload->setTecVoltageCommandFrame.Voltage_2_High) << 8) | (s_pCOPC_Sfp_Payload->setTecVoltageCommandFrame.Voltage_2_Low);
 8003172:	4b19      	ldr	r3, [pc, #100]	@ (80031d8 <copc_exp_set_tec_vol+0x9c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	795b      	ldrb	r3, [r3, #5]
 8003178:	021b      	lsls	r3, r3, #8
 800317a:	b21a      	sxth	r2, r3
 800317c:	4b16      	ldr	r3, [pc, #88]	@ (80031d8 <copc_exp_set_tec_vol+0x9c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	799b      	ldrb	r3, [r3, #6]
 8003182:	b21b      	sxth	r3, r3
 8003184:	4313      	orrs	r3, r2
 8003186:	b21b      	sxth	r3, r3
 8003188:	807b      	strh	r3, [r7, #2]
	uint16_t vol_3 = ((s_pCOPC_Sfp_Payload->setTecVoltageCommandFrame.Voltage_3_High) << 8) | (s_pCOPC_Sfp_Payload->setTecVoltageCommandFrame.Voltage_3_Low);
 800318a:	4b13      	ldr	r3, [pc, #76]	@ (80031d8 <copc_exp_set_tec_vol+0x9c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	79db      	ldrb	r3, [r3, #7]
 8003190:	021b      	lsls	r3, r3, #8
 8003192:	b21a      	sxth	r2, r3
 8003194:	4b10      	ldr	r3, [pc, #64]	@ (80031d8 <copc_exp_set_tec_vol+0x9c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	7a1b      	ldrb	r3, [r3, #8]
 800319a:	b21b      	sxth	r3, r3
 800319c:	4313      	orrs	r3, r2
 800319e:	b21b      	sxth	r3, r3
 80031a0:	803b      	strh	r3, [r7, #0]
	temperature_set_tec_vol(0, vol_0);
 80031a2:	88fb      	ldrh	r3, [r7, #6]
 80031a4:	4619      	mov	r1, r3
 80031a6:	2000      	movs	r0, #0
 80031a8:	f003 f904 	bl	80063b4 <temperature_set_tec_vol>
	temperature_set_tec_vol(1, vol_1);
 80031ac:	88bb      	ldrh	r3, [r7, #4]
 80031ae:	4619      	mov	r1, r3
 80031b0:	2001      	movs	r0, #1
 80031b2:	f003 f8ff 	bl	80063b4 <temperature_set_tec_vol>
	temperature_set_tec_vol(2, vol_2);
 80031b6:	887b      	ldrh	r3, [r7, #2]
 80031b8:	4619      	mov	r1, r3
 80031ba:	2002      	movs	r0, #2
 80031bc:	f003 f8fa 	bl	80063b4 <temperature_set_tec_vol>
	temperature_set_tec_vol(3, vol_3);
 80031c0:	883b      	ldrh	r3, [r7, #0]
 80031c2:	4619      	mov	r1, r3
 80031c4:	2003      	movs	r0, #3
 80031c6:	f003 f8f5 	bl	80063b4 <temperature_set_tec_vol>
	OK_Send();
 80031ca:	f7ff fdcf 	bl	8002d6c <OK_Send>
	return;
 80031ce:	bf00      	nop
}
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	20002684 	.word	0x20002684

080031dc <copc_exp_get_tec_vol>:
void copc_exp_get_tec_vol(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b096      	sub	sp, #88	@ 0x58
 80031e0:	af02      	add	r7, sp, #8
	uint8_t encode_frame[FSP_PKT_MAX_LENGTH];
	uint8_t frame_len;
	uint16_t vol_0 = temperature_get_tec_vol(0);
 80031e2:	2000      	movs	r0, #0
 80031e4:	f003 f906 	bl	80063f4 <temperature_get_tec_vol>
 80031e8:	4603      	mov	r3, r0
 80031ea:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	uint16_t vol_1 = temperature_get_tec_vol(1);
 80031ee:	2001      	movs	r0, #1
 80031f0:	f003 f900 	bl	80063f4 <temperature_get_tec_vol>
 80031f4:	4603      	mov	r3, r0
 80031f6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	uint16_t vol_2 = temperature_get_tec_vol(2);
 80031fa:	2002      	movs	r0, #2
 80031fc:	f003 f8fa 	bl	80063f4 <temperature_get_tec_vol>
 8003200:	4603      	mov	r3, r0
 8003202:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
	uint16_t vol_3 = temperature_get_tec_vol(3);
 8003206:	2003      	movs	r0, #3
 8003208:	f003 f8f4 	bl	80063f4 <temperature_get_tec_vol>
 800320c:	4603      	mov	r3, r0
 800320e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
	s_pEXP_Sfp_Payload->getTecVoltageResponeFrame.Cmd = s_pCOPC_Sfp_Payload->getTecVoltageCommandFrame.Cmd;
 8003212:	4b2d      	ldr	r3, [pc, #180]	@ (80032c8 <copc_exp_get_tec_vol+0xec>)
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	4b2d      	ldr	r3, [pc, #180]	@ (80032cc <copc_exp_get_tec_vol+0xf0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	7812      	ldrb	r2, [r2, #0]
 800321c:	701a      	strb	r2, [r3, #0]
	s_pEXP_Sfp_Payload->getTecVoltageResponeFrame.Voltage_0_High = (uint8_t)(vol_0 >> 8);
 800321e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003222:	0a1b      	lsrs	r3, r3, #8
 8003224:	b29a      	uxth	r2, r3
 8003226:	4b29      	ldr	r3, [pc, #164]	@ (80032cc <copc_exp_get_tec_vol+0xf0>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	705a      	strb	r2, [r3, #1]
	s_pEXP_Sfp_Payload->getTecVoltageResponeFrame.Voltage_0_Low = (uint8_t)(vol_0);
 800322e:	4b27      	ldr	r3, [pc, #156]	@ (80032cc <copc_exp_get_tec_vol+0xf0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	709a      	strb	r2, [r3, #2]
	s_pEXP_Sfp_Payload->getTecVoltageResponeFrame.Voltage_1_High = (uint8_t)(vol_1 >> 8);
 800323a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800323e:	0a1b      	lsrs	r3, r3, #8
 8003240:	b29a      	uxth	r2, r3
 8003242:	4b22      	ldr	r3, [pc, #136]	@ (80032cc <copc_exp_get_tec_vol+0xf0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	70da      	strb	r2, [r3, #3]
	s_pEXP_Sfp_Payload->getTecVoltageResponeFrame.Voltage_1_Low = (uint8_t)(vol_1);
 800324a:	4b20      	ldr	r3, [pc, #128]	@ (80032cc <copc_exp_get_tec_vol+0xf0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	711a      	strb	r2, [r3, #4]
	s_pEXP_Sfp_Payload->getTecVoltageResponeFrame.Voltage_2_High = (uint8_t)(vol_2 >> 8);
 8003256:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800325a:	0a1b      	lsrs	r3, r3, #8
 800325c:	b29a      	uxth	r2, r3
 800325e:	4b1b      	ldr	r3, [pc, #108]	@ (80032cc <copc_exp_get_tec_vol+0xf0>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	715a      	strb	r2, [r3, #5]
	s_pEXP_Sfp_Payload->getTecVoltageResponeFrame.Voltage_2_Low = (uint8_t)(vol_2);
 8003266:	4b19      	ldr	r3, [pc, #100]	@ (80032cc <copc_exp_get_tec_vol+0xf0>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 800326e:	b2d2      	uxtb	r2, r2
 8003270:	719a      	strb	r2, [r3, #6]
	s_pEXP_Sfp_Payload->getTecVoltageResponeFrame.Voltage_3_High = (uint8_t)(vol_3 >> 8);
 8003272:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003276:	0a1b      	lsrs	r3, r3, #8
 8003278:	b29a      	uxth	r2, r3
 800327a:	4b14      	ldr	r3, [pc, #80]	@ (80032cc <copc_exp_get_tec_vol+0xf0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	71da      	strb	r2, [r3, #7]
	s_pEXP_Sfp_Payload->getTecVoltageResponeFrame.Voltage_3_Low = (uint8_t)(vol_3);
 8003282:	4b12      	ldr	r3, [pc, #72]	@ (80032cc <copc_exp_get_tec_vol+0xf0>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	721a      	strb	r2, [r3, #8]
	fsp_gen_pkt((void*)0, (uint8_t *)&s_pEXP_Sfp_Payload->getTecVoltageResponeFrame, 9, FSP_ADR_COPC, FSP_PKT_TYPE_CMD_W_DATA, &s_EXP_FspPacket);
 800328e:	4b0f      	ldr	r3, [pc, #60]	@ (80032cc <copc_exp_get_tec_vol+0xf0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4619      	mov	r1, r3
 8003294:	4b0e      	ldr	r3, [pc, #56]	@ (80032d0 <copc_exp_get_tec_vol+0xf4>)
 8003296:	9301      	str	r3, [sp, #4]
 8003298:	2307      	movs	r3, #7
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	2301      	movs	r3, #1
 800329e:	2209      	movs	r2, #9
 80032a0:	2000      	movs	r0, #0
 80032a2:	f005 f90d 	bl	80084c0 <fsp_gen_pkt>
	fsp_encode(&s_EXP_FspPacket, encode_frame, &frame_len);
 80032a6:	1cfa      	adds	r2, r7, #3
 80032a8:	1d3b      	adds	r3, r7, #4
 80032aa:	4619      	mov	r1, r3
 80032ac:	4808      	ldr	r0, [pc, #32]	@ (80032d0 <copc_exp_get_tec_vol+0xf4>)
 80032ae:	f005 f967 	bl	8008580 <fsp_encode>
	UART_Write(&COPC_UART, (const char *)&encode_frame, frame_len);
 80032b2:	78fb      	ldrb	r3, [r7, #3]
 80032b4:	461a      	mov	r2, r3
 80032b6:	1d3b      	adds	r3, r7, #4
 80032b8:	4619      	mov	r1, r3
 80032ba:	4806      	ldr	r0, [pc, #24]	@ (80032d4 <copc_exp_get_tec_vol+0xf8>)
 80032bc:	f7fd ffa8 	bl	8001210 <UART_Write>
	return;
 80032c0:	bf00      	nop
}
 80032c2:	3750      	adds	r7, #80	@ 0x50
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	20002684 	.word	0x20002684
 80032cc:	20002688 	.word	0x20002688
 80032d0:	2000263c 	.word	0x2000263c
 80032d4:	20002554 	.word	0x20002554

080032d8 <copc_exp_set_heater_duty>:
void copc_exp_set_heater_duty(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
	uint8_t duty_0 = s_pCOPC_Sfp_Payload->setHeaterDutyCommandFrame.Duty_0;
 80032de:	4b1f      	ldr	r3, [pc, #124]	@ (800335c <copc_exp_set_heater_duty+0x84>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	785b      	ldrb	r3, [r3, #1]
 80032e4:	71fb      	strb	r3, [r7, #7]
	if (duty_0 > 100) duty_0 = 100;
 80032e6:	79fb      	ldrb	r3, [r7, #7]
 80032e8:	2b64      	cmp	r3, #100	@ 0x64
 80032ea:	d901      	bls.n	80032f0 <copc_exp_set_heater_duty+0x18>
 80032ec:	2364      	movs	r3, #100	@ 0x64
 80032ee:	71fb      	strb	r3, [r7, #7]
	uint8_t duty_1 = s_pCOPC_Sfp_Payload->setHeaterDutyCommandFrame.Duty_1;
 80032f0:	4b1a      	ldr	r3, [pc, #104]	@ (800335c <copc_exp_set_heater_duty+0x84>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	789b      	ldrb	r3, [r3, #2]
 80032f6:	71bb      	strb	r3, [r7, #6]
	if (duty_1 > 100) duty_1 = 100;
 80032f8:	79bb      	ldrb	r3, [r7, #6]
 80032fa:	2b64      	cmp	r3, #100	@ 0x64
 80032fc:	d901      	bls.n	8003302 <copc_exp_set_heater_duty+0x2a>
 80032fe:	2364      	movs	r3, #100	@ 0x64
 8003300:	71bb      	strb	r3, [r7, #6]
	uint8_t duty_2 = s_pCOPC_Sfp_Payload->setHeaterDutyCommandFrame.Duty_2;
 8003302:	4b16      	ldr	r3, [pc, #88]	@ (800335c <copc_exp_set_heater_duty+0x84>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	78db      	ldrb	r3, [r3, #3]
 8003308:	717b      	strb	r3, [r7, #5]
	if (duty_2 > 100) duty_2 = 100;
 800330a:	797b      	ldrb	r3, [r7, #5]
 800330c:	2b64      	cmp	r3, #100	@ 0x64
 800330e:	d901      	bls.n	8003314 <copc_exp_set_heater_duty+0x3c>
 8003310:	2364      	movs	r3, #100	@ 0x64
 8003312:	717b      	strb	r3, [r7, #5]
	uint8_t duty_3 = s_pCOPC_Sfp_Payload->setHeaterDutyCommandFrame.Duty_3;
 8003314:	4b11      	ldr	r3, [pc, #68]	@ (800335c <copc_exp_set_heater_duty+0x84>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	791b      	ldrb	r3, [r3, #4]
 800331a:	713b      	strb	r3, [r7, #4]
	if (duty_3 > 100) duty_3 = 100;
 800331c:	793b      	ldrb	r3, [r7, #4]
 800331e:	2b64      	cmp	r3, #100	@ 0x64
 8003320:	d901      	bls.n	8003326 <copc_exp_set_heater_duty+0x4e>
 8003322:	2364      	movs	r3, #100	@ 0x64
 8003324:	713b      	strb	r3, [r7, #4]
	temperature_set_heater_duty(0, duty_0);
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	4619      	mov	r1, r3
 800332a:	2000      	movs	r0, #0
 800332c:	f003 f87e 	bl	800642c <temperature_set_heater_duty>
	temperature_set_heater_duty(1, duty_1);
 8003330:	79bb      	ldrb	r3, [r7, #6]
 8003332:	4619      	mov	r1, r3
 8003334:	2001      	movs	r0, #1
 8003336:	f003 f879 	bl	800642c <temperature_set_heater_duty>
	temperature_set_heater_duty(2, duty_2);
 800333a:	797b      	ldrb	r3, [r7, #5]
 800333c:	4619      	mov	r1, r3
 800333e:	2002      	movs	r0, #2
 8003340:	f003 f874 	bl	800642c <temperature_set_heater_duty>
	temperature_set_heater_duty(3, duty_3);
 8003344:	793b      	ldrb	r3, [r7, #4]
 8003346:	4619      	mov	r1, r3
 8003348:	2003      	movs	r0, #3
 800334a:	f003 f86f 	bl	800642c <temperature_set_heater_duty>
	OK_Send();
 800334e:	f7ff fd0d 	bl	8002d6c <OK_Send>
	return;
 8003352:	bf00      	nop
}
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	20002684 	.word	0x20002684

08003360 <copc_exp_get_heater_duty>:
void copc_exp_get_heater_duty(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b096      	sub	sp, #88	@ 0x58
 8003364:	af02      	add	r7, sp, #8
	uint8_t encode_frame[FSP_PKT_MAX_LENGTH];
	uint8_t frame_len;
	uint8_t duty_0 = temperature_get_heater_duty(0);
 8003366:	2000      	movs	r0, #0
 8003368:	f003 f884 	bl	8006474 <temperature_get_heater_duty>
 800336c:	4603      	mov	r3, r0
 800336e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	uint8_t duty_1 = temperature_get_heater_duty(1);
 8003372:	2001      	movs	r0, #1
 8003374:	f003 f87e 	bl	8006474 <temperature_get_heater_duty>
 8003378:	4603      	mov	r3, r0
 800337a:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	uint8_t duty_2 = temperature_get_heater_duty(2);
 800337e:	2002      	movs	r0, #2
 8003380:	f003 f878 	bl	8006474 <temperature_get_heater_duty>
 8003384:	4603      	mov	r3, r0
 8003386:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	uint8_t duty_3 = temperature_get_heater_duty(3);
 800338a:	2003      	movs	r0, #3
 800338c:	f003 f872 	bl	8006474 <temperature_get_heater_duty>
 8003390:	4603      	mov	r3, r0
 8003392:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
	s_pEXP_Sfp_Payload->getHeaterDutyResponeFrame.Cmd = s_pCOPC_Sfp_Payload->getHeaterDutyCommandFrame.Cmd;
 8003396:	4b1c      	ldr	r3, [pc, #112]	@ (8003408 <copc_exp_get_heater_duty+0xa8>)
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	4b1c      	ldr	r3, [pc, #112]	@ (800340c <copc_exp_get_heater_duty+0xac>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	7812      	ldrb	r2, [r2, #0]
 80033a0:	701a      	strb	r2, [r3, #0]
	s_pEXP_Sfp_Payload->getHeaterDutyResponeFrame.Duty_0 = duty_0;
 80033a2:	4b1a      	ldr	r3, [pc, #104]	@ (800340c <copc_exp_get_heater_duty+0xac>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80033aa:	705a      	strb	r2, [r3, #1]
	s_pEXP_Sfp_Payload->getHeaterDutyResponeFrame.Duty_1 = duty_1;
 80033ac:	4b17      	ldr	r3, [pc, #92]	@ (800340c <copc_exp_get_heater_duty+0xac>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 80033b4:	709a      	strb	r2, [r3, #2]
	s_pEXP_Sfp_Payload->getHeaterDutyResponeFrame.Duty_2 = duty_2;
 80033b6:	4b15      	ldr	r3, [pc, #84]	@ (800340c <copc_exp_get_heater_duty+0xac>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80033be:	70da      	strb	r2, [r3, #3]
	s_pEXP_Sfp_Payload->getHeaterDutyResponeFrame.Duty_3 = duty_3;
 80033c0:	4b12      	ldr	r3, [pc, #72]	@ (800340c <copc_exp_get_heater_duty+0xac>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 80033c8:	711a      	strb	r2, [r3, #4]
	fsp_gen_pkt((void*)0, (uint8_t *)&s_pEXP_Sfp_Payload->getHeaterDutyResponeFrame, 5, FSP_ADR_COPC, FSP_PKT_TYPE_CMD_W_DATA, &s_EXP_FspPacket);
 80033ca:	4b10      	ldr	r3, [pc, #64]	@ (800340c <copc_exp_get_heater_duty+0xac>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4619      	mov	r1, r3
 80033d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003410 <copc_exp_get_heater_duty+0xb0>)
 80033d2:	9301      	str	r3, [sp, #4]
 80033d4:	2307      	movs	r3, #7
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	2301      	movs	r3, #1
 80033da:	2205      	movs	r2, #5
 80033dc:	2000      	movs	r0, #0
 80033de:	f005 f86f 	bl	80084c0 <fsp_gen_pkt>
	fsp_encode(&s_EXP_FspPacket, encode_frame, &frame_len);
 80033e2:	1dfa      	adds	r2, r7, #7
 80033e4:	f107 0308 	add.w	r3, r7, #8
 80033e8:	4619      	mov	r1, r3
 80033ea:	4809      	ldr	r0, [pc, #36]	@ (8003410 <copc_exp_get_heater_duty+0xb0>)
 80033ec:	f005 f8c8 	bl	8008580 <fsp_encode>
	UART_Write(&COPC_UART, (const char *)&encode_frame, frame_len);
 80033f0:	79fb      	ldrb	r3, [r7, #7]
 80033f2:	461a      	mov	r2, r3
 80033f4:	f107 0308 	add.w	r3, r7, #8
 80033f8:	4619      	mov	r1, r3
 80033fa:	4806      	ldr	r0, [pc, #24]	@ (8003414 <copc_exp_get_heater_duty+0xb4>)
 80033fc:	f7fd ff08 	bl	8001210 <UART_Write>
	return;
 8003400:	bf00      	nop
}
 8003402:	3750      	adds	r7, #80	@ 0x50
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	20002684 	.word	0x20002684
 800340c:	20002688 	.word	0x20002688
 8003410:	2000263c 	.word	0x2000263c
 8003414:	20002554 	.word	0x20002554

08003418 <copc_exp_temp_ctrl>:
void copc_exp_temp_ctrl(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
	mode_ctrl_temp_t mode_0 = s_pCOPC_Sfp_Payload->tempCtrlCommandFrame.Mode_0;
 800341e:	4b1e      	ldr	r3, [pc, #120]	@ (8003498 <copc_exp_temp_ctrl+0x80>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	785b      	ldrb	r3, [r3, #1]
 8003424:	71fb      	strb	r3, [r7, #7]
	if (mode_0 != COOL && mode_0 != HEAT) mode_0 = OFF;
 8003426:	79fb      	ldrb	r3, [r7, #7]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d004      	beq.n	8003436 <copc_exp_temp_ctrl+0x1e>
 800342c:	79fb      	ldrb	r3, [r7, #7]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d001      	beq.n	8003436 <copc_exp_temp_ctrl+0x1e>
 8003432:	2300      	movs	r3, #0
 8003434:	71fb      	strb	r3, [r7, #7]
	mode_ctrl_temp_t mode_1 = s_pCOPC_Sfp_Payload->tempCtrlCommandFrame.Mode_1;
 8003436:	4b18      	ldr	r3, [pc, #96]	@ (8003498 <copc_exp_temp_ctrl+0x80>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	789b      	ldrb	r3, [r3, #2]
 800343c:	71bb      	strb	r3, [r7, #6]
	if (mode_1 != COOL && mode_1 != HEAT) mode_1 = OFF;
 800343e:	79bb      	ldrb	r3, [r7, #6]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d004      	beq.n	800344e <copc_exp_temp_ctrl+0x36>
 8003444:	79bb      	ldrb	r3, [r7, #6]
 8003446:	2b02      	cmp	r3, #2
 8003448:	d001      	beq.n	800344e <copc_exp_temp_ctrl+0x36>
 800344a:	2300      	movs	r3, #0
 800344c:	71bb      	strb	r3, [r7, #6]
	mode_ctrl_temp_t mode_2 = s_pCOPC_Sfp_Payload->tempCtrlCommandFrame.Mode_2;
 800344e:	4b12      	ldr	r3, [pc, #72]	@ (8003498 <copc_exp_temp_ctrl+0x80>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	78db      	ldrb	r3, [r3, #3]
 8003454:	717b      	strb	r3, [r7, #5]
	if (mode_2 != COOL && mode_2 != HEAT) mode_2 = OFF;
 8003456:	797b      	ldrb	r3, [r7, #5]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d004      	beq.n	8003466 <copc_exp_temp_ctrl+0x4e>
 800345c:	797b      	ldrb	r3, [r7, #5]
 800345e:	2b02      	cmp	r3, #2
 8003460:	d001      	beq.n	8003466 <copc_exp_temp_ctrl+0x4e>
 8003462:	2300      	movs	r3, #0
 8003464:	717b      	strb	r3, [r7, #5]
	mode_ctrl_temp_t mode_3 = s_pCOPC_Sfp_Payload->tempCtrlCommandFrame.Mode_3;
 8003466:	4b0c      	ldr	r3, [pc, #48]	@ (8003498 <copc_exp_temp_ctrl+0x80>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	791b      	ldrb	r3, [r3, #4]
 800346c:	713b      	strb	r3, [r7, #4]
	if (mode_3 != COOL && mode_3 != HEAT) mode_3 = OFF;
 800346e:	793b      	ldrb	r3, [r7, #4]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d004      	beq.n	800347e <copc_exp_temp_ctrl+0x66>
 8003474:	793b      	ldrb	r3, [r7, #4]
 8003476:	2b02      	cmp	r3, #2
 8003478:	d001      	beq.n	800347e <copc_exp_temp_ctrl+0x66>
 800347a:	2300      	movs	r3, #0
 800347c:	713b      	strb	r3, [r7, #4]

	temperature_set_ctrl(mode_0, mode_1, mode_2, mode_3);
 800347e:	793b      	ldrb	r3, [r7, #4]
 8003480:	797a      	ldrb	r2, [r7, #5]
 8003482:	79b9      	ldrb	r1, [r7, #6]
 8003484:	79f8      	ldrb	r0, [r7, #7]
 8003486:	f003 f847 	bl	8006518 <temperature_set_ctrl>
	OK_Send();
 800348a:	f7ff fc6f 	bl	8002d6c <OK_Send>
	return;
 800348e:	bf00      	nop
}
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20002684 	.word	0x20002684

0800349c <copc_exp_temp_auto_ctrl>:
void copc_exp_temp_auto_ctrl(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
	uint8_t auto_0 = s_pCOPC_Sfp_Payload->tempAutoCtrlCommandFrame.Auto_0 ? 1 : 0;
 80034a2:	4b18      	ldr	r3, [pc, #96]	@ (8003504 <copc_exp_temp_auto_ctrl+0x68>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	785b      	ldrb	r3, [r3, #1]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	bf14      	ite	ne
 80034ac:	2301      	movne	r3, #1
 80034ae:	2300      	moveq	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	71fb      	strb	r3, [r7, #7]
	uint8_t auto_1 = s_pCOPC_Sfp_Payload->tempAutoCtrlCommandFrame.Auto_1 ? 1 : 0;
 80034b4:	4b13      	ldr	r3, [pc, #76]	@ (8003504 <copc_exp_temp_auto_ctrl+0x68>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	789b      	ldrb	r3, [r3, #2]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	bf14      	ite	ne
 80034be:	2301      	movne	r3, #1
 80034c0:	2300      	moveq	r3, #0
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	71bb      	strb	r3, [r7, #6]
	uint8_t auto_2 = s_pCOPC_Sfp_Payload->tempAutoCtrlCommandFrame.Auto_2 ? 1 : 0;
 80034c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003504 <copc_exp_temp_auto_ctrl+0x68>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	78db      	ldrb	r3, [r3, #3]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	bf14      	ite	ne
 80034d0:	2301      	movne	r3, #1
 80034d2:	2300      	moveq	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	717b      	strb	r3, [r7, #5]
	uint8_t auto_3 = s_pCOPC_Sfp_Payload->tempAutoCtrlCommandFrame.Auto_3 ? 1 : 0;
 80034d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003504 <copc_exp_temp_auto_ctrl+0x68>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	791b      	ldrb	r3, [r3, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	bf14      	ite	ne
 80034e2:	2301      	movne	r3, #1
 80034e4:	2300      	moveq	r3, #0
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	713b      	strb	r3, [r7, #4]
	temperature_set_auto_ctrl(auto_0, auto_1, auto_2, auto_3);
 80034ea:	793b      	ldrb	r3, [r7, #4]
 80034ec:	797a      	ldrb	r2, [r7, #5]
 80034ee:	79b9      	ldrb	r1, [r7, #6]
 80034f0:	79f8      	ldrb	r0, [r7, #7]
 80034f2:	f002 ffdf 	bl	80064b4 <temperature_set_auto_ctrl>
	OK_Send();
 80034f6:	f7ff fc39 	bl	8002d6c <OK_Send>
	return;
 80034fa:	bf00      	nop
}
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20002684 	.word	0x20002684

08003508 <copc_exp_set_ir_duty>:
void copc_exp_set_ir_duty(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
//	set_ir_duty(0, duty_0);
//	set_ir_duty(1, duty_1);
//	set_ir_duty(2, duty_2);
//	set_ir_duty(3, duty_3);
//	OK_Send();
	return;
 800350c:	bf00      	nop
}
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <copc_exp_get_ir_duty>:
void copc_exp_get_ir_duty(void)
{
 8003516:	b480      	push	{r7}
 8003518:	af00      	add	r7, sp, #0
//	s_pEXP_Sfp_Payload->getIrDutyResponeFrame.Duty_2 = duty_2;
//	s_pEXP_Sfp_Payload->getIrDutyResponeFrame.Duty_3 = duty_3;
//	fsp_gen_pkt((void*)0, (uint8_t *)&s_pEXP_Sfp_Payload->getIrDutyResponeFrame, 5, FSP_ADR_COPC, FSP_PKT_TYPE_CMD_W_DATA, &s_EXP_FspPacket);
//	fsp_encode(&s_EXP_FspPacket, encode_frame, &frame_len);
//	UART_Write(&COPC_UART, (const char *)&encode_frame, frame_len);
	return;
 800351a:	bf00      	nop
}
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <copc_exp_get_all>:
//	fsp_encode(&s_exp_FspPacket, encode_frame, &frame_len);
//	usart1_send_array((const char *)&encode_frame, frame_len);
//}

void copc_exp_get_all(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
//	s_pexp_Sfp_Payload->expGetParamResponseFrame.press = (temp << 8) | (temp >> 8);
//	// DECODE FRAME
//	fsp_gen_pkt((void*)0, (uint8_t *)&s_pexp_Sfp_Payload->expGetParamResponseFrame, 50, FSP_ADR_COPC, FSP_PKT_TYPE_CMD_W_DATA, &s_exp_FspPacket);
//	fsp_encode(&s_exp_FspPacket, encode_frame, &frame_len);
//	usart1_send_array((const char *)&encode_frame, frame_len);
	return;
 8003528:	bf00      	nop
}
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
	...

08003534 <COPC_UART_IRQHandler>:

/* :::::::::: COPC_UART_IRQHandler ::::::::::::: */
void COPC_UART_IRQHandler(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
	// Transmit
    if(LL_USART_IsActiveFlag_TXE(COPC_UART.handle) == true)
 8003538:	4b1f      	ldr	r3, [pc, #124]	@ (80035b8 <COPC_UART_IRQHandler+0x84>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff fa5c 	bl	80029fa <LL_USART_IsActiveFlag_TXE>
 8003542:	4603      	mov	r3, r0
 8003544:	2b01      	cmp	r3, #1
 8003546:	d10f      	bne.n	8003568 <COPC_UART_IRQHandler+0x34>
    {
        if(TX_BUFFER_EMPTY(&COPC_UART))
 8003548:	491c      	ldr	r1, [pc, #112]	@ (80035bc <COPC_UART_IRQHandler+0x88>)
 800354a:	481d      	ldr	r0, [pc, #116]	@ (80035c0 <COPC_UART_IRQHandler+0x8c>)
 800354c:	f7fe f927 	bl	800179e <UART_is_buffer_empty>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d005      	beq.n	8003562 <COPC_UART_IRQHandler+0x2e>
        {
            // Buffer empty, so disable interrupts
            LL_USART_DisableIT_TXE(CONSOLE_UART.handle);
 8003556:	4b1b      	ldr	r3, [pc, #108]	@ (80035c4 <COPC_UART_IRQHandler+0x90>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff fa60 	bl	8002a20 <LL_USART_DisableIT_TXE>
 8003560:	e002      	b.n	8003568 <COPC_UART_IRQHandler+0x34>
        }
        else
        {
            // There is more data in the output buffer. Send the next byte
            UART_Prime_Transmit(&COPC_UART);
 8003562:	4815      	ldr	r0, [pc, #84]	@ (80035b8 <COPC_UART_IRQHandler+0x84>)
 8003564:	f7fe f94f 	bl	8001806 <UART_Prime_Transmit>
        }
    }
    // Receive
    if(LL_USART_IsActiveFlag_RXNE(COPC_UART.handle) == true)
 8003568:	4b13      	ldr	r3, [pc, #76]	@ (80035b8 <COPC_UART_IRQHandler+0x84>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff fa31 	bl	80029d4 <LL_USART_IsActiveFlag_RXNE>
 8003572:	4603      	mov	r3, r0
 8003574:	2b01      	cmp	r3, #1
 8003576:	d11d      	bne.n	80035b4 <COPC_UART_IRQHandler+0x80>
    {
    	COPC_UART.RX_irq_char = LL_USART_ReceiveData8(COPC_UART.handle);
 8003578:	4b0f      	ldr	r3, [pc, #60]	@ (80035b8 <COPC_UART_IRQHandler+0x84>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff fa72 	bl	8002a66 <LL_USART_ReceiveData8>
 8003582:	4603      	mov	r3, r0
 8003584:	461a      	mov	r2, r3
 8003586:	4b0c      	ldr	r3, [pc, #48]	@ (80035b8 <COPC_UART_IRQHandler+0x84>)
 8003588:	771a      	strb	r2, [r3, #28]
    	if (!RX_BUFFER_FULL(&COPC_UART))
 800358a:	4b0b      	ldr	r3, [pc, #44]	@ (80035b8 <COPC_UART_IRQHandler+0x84>)
 800358c:	891b      	ldrh	r3, [r3, #8]
 800358e:	461a      	mov	r2, r3
 8003590:	490d      	ldr	r1, [pc, #52]	@ (80035c8 <COPC_UART_IRQHandler+0x94>)
 8003592:	480e      	ldr	r0, [pc, #56]	@ (80035cc <COPC_UART_IRQHandler+0x98>)
 8003594:	f7fe f8e2 	bl	800175c <UART_is_buffer_full>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10a      	bne.n	80035b4 <COPC_UART_IRQHandler+0x80>
    	{
    		COPC_UART.p_RX_buffer[COPC_UART.RX_write_index] = COPC_UART.RX_irq_char;
 800359e:	4b06      	ldr	r3, [pc, #24]	@ (80035b8 <COPC_UART_IRQHandler+0x84>)
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	4a05      	ldr	r2, [pc, #20]	@ (80035b8 <COPC_UART_IRQHandler+0x84>)
 80035a4:	8b12      	ldrh	r2, [r2, #24]
 80035a6:	b292      	uxth	r2, r2
 80035a8:	4413      	add	r3, r2
 80035aa:	4a03      	ldr	r2, [pc, #12]	@ (80035b8 <COPC_UART_IRQHandler+0x84>)
 80035ac:	7f12      	ldrb	r2, [r2, #28]
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	701a      	strb	r2, [r3, #0]
    	}
    }
    return;
 80035b2:	bf00      	nop
 80035b4:	bf00      	nop
}
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	20002554 	.word	0x20002554
 80035bc:	20002564 	.word	0x20002564
 80035c0:	20002566 	.word	0x20002566
 80035c4:	20002468 	.word	0x20002468
 80035c8:	2000256c 	.word	0x2000256c
 80035cc:	2000256e 	.word	0x2000256e

080035d0 <bmp390_get_temperature>:
	BMP390_read_raw_temp_press(&TempPress_data);
	BMP390_compensate_temperature(&TempPress_data);
	BMP390_compensate_pressure(&TempPress_data);
}
int16_t bmp390_get_temperature(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
	if (TempPress_data.BMP390_ERR) return 0x7FFF;
 80035d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003608 <bmp390_get_temperature+0x38>)
 80035d6:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d002      	beq.n	80035e4 <bmp390_get_temperature+0x14>
 80035de:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80035e2:	e00b      	b.n	80035fc <bmp390_get_temperature+0x2c>
	return (int16_t)(TempPress_data.temperature*10);
 80035e4:	4b08      	ldr	r3, [pc, #32]	@ (8003608 <bmp390_get_temperature+0x38>)
 80035e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80035ea:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80035ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035f6:	ee17 3a90 	vmov	r3, s15
 80035fa:	b21b      	sxth	r3, r3
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	200026b4 	.word	0x200026b4

0800360c <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <heater_set_duty_pwm_channel>:

#include "heater.h"
#include "main.h"

void heater_set_duty_pwm_channel(uint8_t channel, uint16_t duty_pwm)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	4603      	mov	r3, r0
 8003684:	460a      	mov	r2, r1
 8003686:	71fb      	strb	r3, [r7, #7]
 8003688:	4613      	mov	r3, r2
 800368a:	80bb      	strh	r3, [r7, #4]
    if (duty_pwm > 9999) duty_pwm = 9999;
 800368c:	88bb      	ldrh	r3, [r7, #4]
 800368e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003692:	4293      	cmp	r3, r2
 8003694:	d902      	bls.n	800369c <heater_set_duty_pwm_channel+0x20>
 8003696:	f242 730f 	movw	r3, #9999	@ 0x270f
 800369a:	80bb      	strh	r3, [r7, #4]
    switch (channel)
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d822      	bhi.n	80036e8 <heater_set_duty_pwm_channel+0x6c>
 80036a2:	a201      	add	r2, pc, #4	@ (adr r2, 80036a8 <heater_set_duty_pwm_channel+0x2c>)
 80036a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a8:	080036b9 	.word	0x080036b9
 80036ac:	080036c5 	.word	0x080036c5
 80036b0:	080036d1 	.word	0x080036d1
 80036b4:	080036dd 	.word	0x080036dd
    {
        case 0:
            LL_TIM_OC_SetCompareCH1(TIM1, duty_pwm);
 80036b8:	88bb      	ldrh	r3, [r7, #4]
 80036ba:	4619      	mov	r1, r3
 80036bc:	480d      	ldr	r0, [pc, #52]	@ (80036f4 <heater_set_duty_pwm_channel+0x78>)
 80036be:	f7ff ffa5 	bl	800360c <LL_TIM_OC_SetCompareCH1>
            break;
 80036c2:	e012      	b.n	80036ea <heater_set_duty_pwm_channel+0x6e>
        case 1:
            LL_TIM_OC_SetCompareCH2(TIM1, duty_pwm);
 80036c4:	88bb      	ldrh	r3, [r7, #4]
 80036c6:	4619      	mov	r1, r3
 80036c8:	480a      	ldr	r0, [pc, #40]	@ (80036f4 <heater_set_duty_pwm_channel+0x78>)
 80036ca:	f7ff ffad 	bl	8003628 <LL_TIM_OC_SetCompareCH2>
            break;
 80036ce:	e00c      	b.n	80036ea <heater_set_duty_pwm_channel+0x6e>
        case 2:
            LL_TIM_OC_SetCompareCH3(TIM1, duty_pwm);
 80036d0:	88bb      	ldrh	r3, [r7, #4]
 80036d2:	4619      	mov	r1, r3
 80036d4:	4807      	ldr	r0, [pc, #28]	@ (80036f4 <heater_set_duty_pwm_channel+0x78>)
 80036d6:	f7ff ffb5 	bl	8003644 <LL_TIM_OC_SetCompareCH3>
            break;
 80036da:	e006      	b.n	80036ea <heater_set_duty_pwm_channel+0x6e>
        case 3:
            LL_TIM_OC_SetCompareCH4(TIM1, duty_pwm);
 80036dc:	88bb      	ldrh	r3, [r7, #4]
 80036de:	4619      	mov	r1, r3
 80036e0:	4804      	ldr	r0, [pc, #16]	@ (80036f4 <heater_set_duty_pwm_channel+0x78>)
 80036e2:	f7ff ffbd 	bl	8003660 <LL_TIM_OC_SetCompareCH4>
            break;
 80036e6:	e000      	b.n	80036ea <heater_set_duty_pwm_channel+0x6e>
        default:
            break;
 80036e8:	bf00      	nop
    }
}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40010000 	.word	0x40010000

080036f8 <LL_TIM_OC_SetCompareCH1>:
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <LL_TIM_OC_SetCompareCH2>:
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <LL_TIM_OC_SetCompareCH3>:
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <LL_TIM_OC_SetCompareCH4>:
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <ir_led_set_duty>:


static uint16_t ir_led_duty_current[4] = {0, 0, 0, 0};

void ir_led_set_duty(uint8_t channel, uint16_t duty_pwm)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	4603      	mov	r3, r0
 8003770:	460a      	mov	r2, r1
 8003772:	71fb      	strb	r3, [r7, #7]
 8003774:	4613      	mov	r3, r2
 8003776:	80bb      	strh	r3, [r7, #4]
    if (duty_pwm > 9999) duty_pwm = 9999;
 8003778:	88bb      	ldrh	r3, [r7, #4]
 800377a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800377e:	4293      	cmp	r3, r2
 8003780:	d902      	bls.n	8003788 <ir_led_set_duty+0x20>
 8003782:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003786:	80bb      	strh	r3, [r7, #4]
    switch (channel)
 8003788:	79fb      	ldrb	r3, [r7, #7]
 800378a:	2b03      	cmp	r3, #3
 800378c:	d82e      	bhi.n	80037ec <ir_led_set_duty+0x84>
 800378e:	a201      	add	r2, pc, #4	@ (adr r2, 8003794 <ir_led_set_duty+0x2c>)
 8003790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003794:	080037a5 	.word	0x080037a5
 8003798:	080037b7 	.word	0x080037b7
 800379c:	080037c9 	.word	0x080037c9
 80037a0:	080037db 	.word	0x080037db
    {
        case 0:
        	ir_led_duty_current[0] = duty_pwm;
 80037a4:	4a14      	ldr	r2, [pc, #80]	@ (80037f8 <ir_led_set_duty+0x90>)
 80037a6:	88bb      	ldrh	r3, [r7, #4]
 80037a8:	8013      	strh	r3, [r2, #0]
            LL_TIM_OC_SetCompareCH1(TIM3, duty_pwm);
 80037aa:	88bb      	ldrh	r3, [r7, #4]
 80037ac:	4619      	mov	r1, r3
 80037ae:	4813      	ldr	r0, [pc, #76]	@ (80037fc <ir_led_set_duty+0x94>)
 80037b0:	f7ff ffa2 	bl	80036f8 <LL_TIM_OC_SetCompareCH1>
            break;
 80037b4:	e01b      	b.n	80037ee <ir_led_set_duty+0x86>
        case 1:
        	ir_led_duty_current[1] = duty_pwm;
 80037b6:	4a10      	ldr	r2, [pc, #64]	@ (80037f8 <ir_led_set_duty+0x90>)
 80037b8:	88bb      	ldrh	r3, [r7, #4]
 80037ba:	8053      	strh	r3, [r2, #2]
        	LL_TIM_OC_SetCompareCH2(TIM3, duty_pwm);
 80037bc:	88bb      	ldrh	r3, [r7, #4]
 80037be:	4619      	mov	r1, r3
 80037c0:	480e      	ldr	r0, [pc, #56]	@ (80037fc <ir_led_set_duty+0x94>)
 80037c2:	f7ff ffa7 	bl	8003714 <LL_TIM_OC_SetCompareCH2>
            break;
 80037c6:	e012      	b.n	80037ee <ir_led_set_duty+0x86>
        case 2:
        	ir_led_duty_current[2] = duty_pwm;
 80037c8:	4a0b      	ldr	r2, [pc, #44]	@ (80037f8 <ir_led_set_duty+0x90>)
 80037ca:	88bb      	ldrh	r3, [r7, #4]
 80037cc:	8093      	strh	r3, [r2, #4]
            LL_TIM_OC_SetCompareCH3(TIM3, duty_pwm);
 80037ce:	88bb      	ldrh	r3, [r7, #4]
 80037d0:	4619      	mov	r1, r3
 80037d2:	480a      	ldr	r0, [pc, #40]	@ (80037fc <ir_led_set_duty+0x94>)
 80037d4:	f7ff ffac 	bl	8003730 <LL_TIM_OC_SetCompareCH3>
            break;
 80037d8:	e009      	b.n	80037ee <ir_led_set_duty+0x86>
        case 3:
        	ir_led_duty_current[3] = duty_pwm;
 80037da:	4a07      	ldr	r2, [pc, #28]	@ (80037f8 <ir_led_set_duty+0x90>)
 80037dc:	88bb      	ldrh	r3, [r7, #4]
 80037de:	80d3      	strh	r3, [r2, #6]
            LL_TIM_OC_SetCompareCH4(TIM3, duty_pwm);
 80037e0:	88bb      	ldrh	r3, [r7, #4]
 80037e2:	4619      	mov	r1, r3
 80037e4:	4805      	ldr	r0, [pc, #20]	@ (80037fc <ir_led_set_duty+0x94>)
 80037e6:	f7ff ffb1 	bl	800374c <LL_TIM_OC_SetCompareCH4>
            break;
 80037ea:	e000      	b.n	80037ee <ir_led_set_duty+0x86>
        default:
            break;
 80037ec:	bf00      	nop
    }
}
 80037ee:	bf00      	nop
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	20002718 	.word	0x20002718
 80037fc:	40000400 	.word	0x40000400

08003800 <ir_led_get_duty>:

uint16_t ir_led_get_duty(uint8_t channel)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	71fb      	strb	r3, [r7, #7]
	return ir_led_duty_current[channel];
 800380a:	79fb      	ldrb	r3, [r7, #7]
 800380c:	4a04      	ldr	r2, [pc, #16]	@ (8003820 <ir_led_get_duty+0x20>)
 800380e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8003812:	4618      	mov	r0, r3
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	20002718 	.word	0x20002718

08003824 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <LL_SPI_IsActiveFlag_RXNE+0x18>
 8003838:	2301      	movs	r3, #1
 800383a:	e000      	b.n	800383e <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	330c      	adds	r3, #12
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	b2db      	uxtb	r3, r3
}
 800385a:	4618      	mov	r0, r3
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8003866:	b480      	push	{r7}
 8003868:	b085      	sub	sp, #20
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
 800386e:	460b      	mov	r3, r1
 8003870:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	330c      	adds	r3, #12
 8003876:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	78fa      	ldrb	r2, [r7, #3]
 800387c:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800387e:	bf00      	nop
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <LL_GPIO_SetOutputPin>:
{
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	619a      	str	r2, [r3, #24]
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <LL_GPIO_ResetOutputPin>:
{
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	041a      	lsls	r2, r3, #16
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	619a      	str	r2, [r3, #24]
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <csLOW>:
		LT8722_SPIS_AMUX_SIZE
	},
};

/* SPI support function --------------------------------------------------*/
static inline void csLOW(void) {
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(TEC_4_CS_GPIO_Port, TEC_4_CS_Pin);
 80038c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80038cc:	4802      	ldr	r0, [pc, #8]	@ (80038d8 <csLOW+0x14>)
 80038ce:	f7ff ffea 	bl	80038a6 <LL_GPIO_ResetOutputPin>
}
 80038d2:	bf00      	nop
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40020400 	.word	0x40020400

080038dc <csHIGH>:

static inline void csHIGH(void) {
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(TEC_4_CS_GPIO_Port, TEC_4_CS_Pin);
 80038e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80038e4:	4802      	ldr	r0, [pc, #8]	@ (80038f0 <csHIGH+0x14>)
 80038e6:	f7ff ffd0 	bl	800388a <LL_GPIO_SetOutputPin>
}
 80038ea:	bf00      	nop
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40020400 	.word	0x40020400

080038f4 <SPI_LL_Transmit>:

static uint8_t SPI_LL_Transmit(uint8_t data)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	4603      	mov	r3, r0
 80038fc:	71fb      	strb	r3, [r7, #7]
	LL_SPI_TransmitData8(SPI1, data);
 80038fe:	79fb      	ldrb	r3, [r7, #7]
 8003900:	4619      	mov	r1, r3
 8003902:	4809      	ldr	r0, [pc, #36]	@ (8003928 <SPI_LL_Transmit+0x34>)
 8003904:	f7ff ffaf 	bl	8003866 <LL_SPI_TransmitData8>
	while(!LL_SPI_IsActiveFlag_RXNE(SPI1));
 8003908:	bf00      	nop
 800390a:	4807      	ldr	r0, [pc, #28]	@ (8003928 <SPI_LL_Transmit+0x34>)
 800390c:	f7ff ff8a 	bl	8003824 <LL_SPI_IsActiveFlag_RXNE>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0f9      	beq.n	800390a <SPI_LL_Transmit+0x16>
	return LL_SPI_ReceiveData8(SPI1);
 8003916:	4804      	ldr	r0, [pc, #16]	@ (8003928 <SPI_LL_Transmit+0x34>)
 8003918:	f7ff ff97 	bl	800384a <LL_SPI_ReceiveData8>
 800391c:	4603      	mov	r3, r0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40013000 	.word	0x40013000

0800392c <SPI_write_and_read_buffer>:

uint8_t SPI_write_and_read_buffer(uint8_t *buffer, uint8_t byte_number)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	460b      	mov	r3, r1
 8003936:	70fb      	strb	r3, [r7, #3]
    uint8_t received_data = 0;
 8003938:	2300      	movs	r3, #0
 800393a:	73fb      	strb	r3, [r7, #15]
    csLOW();
 800393c:	f7ff ffc2 	bl	80038c4 <csLOW>
    for (uint8_t i = 0; i < byte_number; i++)
 8003940:	2300      	movs	r3, #0
 8003942:	73bb      	strb	r3, [r7, #14]
 8003944:	e010      	b.n	8003968 <SPI_write_and_read_buffer+0x3c>
    {
        received_data = SPI_LL_Transmit(buffer[i]);
 8003946:	7bbb      	ldrb	r3, [r7, #14]
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	4413      	add	r3, r2
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff ffd0 	bl	80038f4 <SPI_LL_Transmit>
 8003954:	4603      	mov	r3, r0
 8003956:	73fb      	strb	r3, [r7, #15]
        buffer[i] = received_data;
 8003958:	7bbb      	ldrb	r3, [r7, #14]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	4413      	add	r3, r2
 800395e:	7bfa      	ldrb	r2, [r7, #15]
 8003960:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < byte_number; i++)
 8003962:	7bbb      	ldrb	r3, [r7, #14]
 8003964:	3301      	adds	r3, #1
 8003966:	73bb      	strb	r3, [r7, #14]
 8003968:	7bba      	ldrb	r2, [r7, #14]
 800396a:	78fb      	ldrb	r3, [r7, #3]
 800396c:	429a      	cmp	r2, r3
 800396e:	d3ea      	bcc.n	8003946 <SPI_write_and_read_buffer+0x1a>
    }
    csHIGH();
 8003970:	f7ff ffb4 	bl	80038dc <csHIGH>
    return received_data;
 8003974:	7bfb      	ldrb	r3, [r7, #15]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <lt8722_voltage_to_dac>:
 * @brief Convert voltage to DAC code.
 * @param voltage - Voltage value in nanovolts.
 * @return DAC code.
 */
int32_t lt8722_voltage_to_dac(int64_t voltage)
{
 8003980:	b5b0      	push	{r4, r5, r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	e9c7 0100 	strd	r0, r1, [r7]
	return (LT8722_DAC_OFFSET - voltage) * (1 << LT8722_DAC_RESOLUTION) / LT8722_DAC_VREF;
 800398a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800398e:	4d0e      	ldr	r5, [pc, #56]	@ (80039c8 <lt8722_voltage_to_dac+0x48>)
 8003990:	2400      	movs	r4, #0
 8003992:	1a2a      	subs	r2, r5, r0
 8003994:	eb64 0301 	sbc.w	r3, r4, r1
 8003998:	f04f 0000 	mov.w	r0, #0
 800399c:	f04f 0100 	mov.w	r1, #0
 80039a0:	0659      	lsls	r1, r3, #25
 80039a2:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 80039a6:	0650      	lsls	r0, r2, #25
 80039a8:	a305      	add	r3, pc, #20	@ (adr r3, 80039c0 <lt8722_voltage_to_dac+0x40>)
 80039aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ae:	f7fc fc77 	bl	80002a0 <__aeabi_ldivmod>
 80039b2:	4602      	mov	r2, r0
 80039b4:	460b      	mov	r3, r1
 80039b6:	4613      	mov	r3, r2
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bdb0      	pop	{r4, r5, r7, pc}
 80039c0:	9502f900 	.word	0x9502f900
 80039c4:	00000000 	.word	0x00000000
 80039c8:	4a817c80 	.word	0x4a817c80

080039cc <lt8722_dac_to_voltage>:
 * @brief Convert DAC code to nanovolts.
 * @param dac - DAC code.
 * @return Voltage value in nanovolts.
 */
int64_t lt8722_dac_to_voltage(int32_t dac)
{
 80039cc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80039d0:	b085      	sub	sp, #20
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	60f8      	str	r0, [r7, #12]
	return LT8722_DAC_OFFSET - dac * LT8722_DAC_VREF /(1 << LT8722_DAC_RESOLUTION);
 80039d6:	68f9      	ldr	r1, [r7, #12]
 80039d8:	17c8      	asrs	r0, r1, #31
 80039da:	460c      	mov	r4, r1
 80039dc:	4605      	mov	r5, r0
 80039de:	491b      	ldr	r1, [pc, #108]	@ (8003a4c <lt8722_dac_to_voltage+0x80>)
 80039e0:	fb01 f005 	mul.w	r0, r1, r5
 80039e4:	2100      	movs	r1, #0
 80039e6:	fb04 f101 	mul.w	r1, r4, r1
 80039ea:	4401      	add	r1, r0
 80039ec:	4817      	ldr	r0, [pc, #92]	@ (8003a4c <lt8722_dac_to_voltage+0x80>)
 80039ee:	fba4 2300 	umull	r2, r3, r4, r0
 80039f2:	4419      	add	r1, r3
 80039f4:	460b      	mov	r3, r1
 80039f6:	4610      	mov	r0, r2
 80039f8:	4619      	mov	r1, r3
 80039fa:	2900      	cmp	r1, #0
 80039fc:	da08      	bge.n	8003a10 <lt8722_dac_to_voltage+0x44>
 80039fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a02:	18c3      	adds	r3, r0, r3
 8003a04:	603b      	str	r3, [r7, #0]
 8003a06:	f141 0300 	adc.w	r3, r1, #0
 8003a0a:	607b      	str	r3, [r7, #4]
 8003a0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	0e42      	lsrs	r2, r0, #25
 8003a1a:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8003a1e:	164b      	asrs	r3, r1, #25
 8003a20:	2100      	movs	r1, #0
 8003a22:	f1d2 0a00 	rsbs	sl, r2, #0
 8003a26:	eb61 0b03 	sbc.w	fp, r1, r3
 8003a2a:	4652      	mov	r2, sl
 8003a2c:	465b      	mov	r3, fp
 8003a2e:	4908      	ldr	r1, [pc, #32]	@ (8003a50 <lt8722_dac_to_voltage+0x84>)
 8003a30:	eb12 0801 	adds.w	r8, r2, r1
 8003a34:	f143 0900 	adc.w	r9, r3, #0
 8003a38:	4642      	mov	r2, r8
 8003a3a:	464b      	mov	r3, r9
}
 8003a3c:	4610      	mov	r0, r2
 8003a3e:	4619      	mov	r1, r3
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	9502f900 	.word	0x9502f900
 8003a50:	4a817c80 	.word	0x4a817c80

08003a54 <lt8722_transaction>:
 * @param dev - LT8722 device descriptor
 * @param packet - LT8722 packet.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_transaction(struct lt8722_packet *packet)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
	uint8_t buffer[8] = {0};
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	2300      	movs	r3, #0
 8003a62:	613b      	str	r3, [r7, #16]
	buffer[0] = packet->command.byte;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	733b      	strb	r3, [r7, #12]
	buffer[1] = packet->reg.address << 1;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	791b      	ldrb	r3, [r3, #4]
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	737b      	strb	r3, [r7, #13]
	if (packet->command.byte == LT8722_DATA_WRITE_COMMAND)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2bf2      	cmp	r3, #242	@ 0xf2
 8003a7a:	d111      	bne.n	8003aa0 <lt8722_transaction+0x4c>
	{
		put_unaligned_be32(packet->data, &buffer[2]);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	691a      	ldr	r2, [r3, #16]
 8003a80:	f107 030c 	add.w	r3, r7, #12
 8003a84:	3302      	adds	r3, #2
 8003a86:	4619      	mov	r1, r3
 8003a88:	4610      	mov	r0, r2
 8003a8a:	f000 fad8 	bl	800403e <put_unaligned_be32>
		buffer[6] = Calculate_CRC8(buffer, 6);
 8003a8e:	f107 030c 	add.w	r3, r7, #12
 8003a92:	2106      	movs	r1, #6
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 fa97 	bl	8003fc8 <Calculate_CRC8>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	74bb      	strb	r3, [r7, #18]
 8003a9e:	e007      	b.n	8003ab0 <lt8722_transaction+0x5c>
	} else
		buffer[2] = Calculate_CRC8(buffer, 2);
 8003aa0:	f107 030c 	add.w	r3, r7, #12
 8003aa4:	2102      	movs	r1, #2
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 fa8e 	bl	8003fc8 <Calculate_CRC8>
 8003aac:	4603      	mov	r3, r0
 8003aae:	73bb      	strb	r3, [r7, #14]
	SPI_write_and_read_buffer(buffer, packet->command.size);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	785a      	ldrb	r2, [r3, #1]
 8003ab4:	f107 030c 	add.w	r3, r7, #12
 8003ab8:	4611      	mov	r1, r2
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff ff36 	bl	800392c <SPI_write_and_read_buffer>
	packet->status = (get_unaligned_be16(&buffer[0]) & GENMASK(10, 0));
 8003ac0:	f107 030c 	add.w	r3, r7, #12
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 faf8 	bl	80040ba <get_unaligned_be16>
 8003aca:	4603      	mov	r3, r0
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad2:	617b      	str	r3, [r7, #20]
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	055b      	lsls	r3, r3, #21
 8003ad8:	617b      	str	r3, [r7, #20]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	0d5b      	lsrs	r3, r3, #21
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	82da      	strh	r2, [r3, #22]
	if (packet->command.byte == LT8722_DATA_WRITE_COMMAND)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2bf2      	cmp	r3, #242	@ 0xf2
 8003af2:	d106      	bne.n	8003b02 <lt8722_transaction+0xae>
	{
		packet->crc = buffer[2];
 8003af4:	7bba      	ldrb	r2, [r7, #14]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	751a      	strb	r2, [r3, #20]
		packet->ack = buffer[7];
 8003afa:	7cfa      	ldrb	r2, [r7, #19]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	755a      	strb	r2, [r3, #21]
 8003b00:	e019      	b.n	8003b36 <lt8722_transaction+0xe2>
	} else if (packet->command.byte == LT8722_DATA_READ_COMMAND) {
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2bf4      	cmp	r3, #244	@ 0xf4
 8003b08:	d10f      	bne.n	8003b2a <lt8722_transaction+0xd6>
		packet->data = get_unaligned_be32(&buffer[2]);
 8003b0a:	f107 030c 	add.w	r3, r7, #12
 8003b0e:	3302      	adds	r3, #2
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 fab5 	bl	8004080 <get_unaligned_be32>
 8003b16:	4602      	mov	r2, r0
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	611a      	str	r2, [r3, #16]
		packet->crc = buffer[6];
 8003b1c:	7cba      	ldrb	r2, [r7, #18]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	751a      	strb	r2, [r3, #20]
		packet->ack = buffer[7];
 8003b22:	7cfa      	ldrb	r2, [r7, #19]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	755a      	strb	r2, [r3, #21]
 8003b28:	e005      	b.n	8003b36 <lt8722_transaction+0xe2>
	} else {
		packet->crc = buffer[2];
 8003b2a:	7bba      	ldrb	r2, [r7, #14]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	751a      	strb	r2, [r3, #20]
		packet->ack = buffer[3];
 8003b30:	7bfa      	ldrb	r2, [r7, #15]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	755a      	strb	r2, [r3, #21]
	}
	if (packet->ack != LT8722_ACK_ACKNOWLEDGE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	7d5b      	ldrb	r3, [r3, #21]
 8003b3a:	2ba5      	cmp	r3, #165	@ 0xa5
 8003b3c:	d002      	beq.n	8003b44 <lt8722_transaction+0xf0>
		return -1;
 8003b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b42:	e000      	b.n	8003b46 <lt8722_transaction+0xf2>
	return 0;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
	...

08003b50 <lt8722_reg_read>:
 * @param address - Register address.
 * @param data - Received data.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reg_read(uint8_t address, uint32_t *data)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08a      	sub	sp, #40	@ 0x28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	4603      	mov	r3, r0
 8003b58:	6039      	str	r1, [r7, #0]
 8003b5a:	71fb      	strb	r3, [r7, #7]
	int8_t ret = 0;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	struct lt8722_packet packet;
	struct lt8722_command command = {
 8003b62:	4b14      	ldr	r3, [pc, #80]	@ (8003bb4 <lt8722_reg_read+0x64>)
 8003b64:	881b      	ldrh	r3, [r3, #0]
 8003b66:	813b      	strh	r3, [r7, #8]
		LT8722_DATA_READ_COMMAND,
		LT8722_DATA_READ_COMMAND_SIZE
	};
	packet.command = command;
 8003b68:	893b      	ldrh	r3, [r7, #8]
 8003b6a:	81bb      	strh	r3, [r7, #12]
	packet.reg = lt8722_regs[address];
 8003b6c:	79fa      	ldrb	r2, [r7, #7]
 8003b6e:	4912      	ldr	r1, [pc, #72]	@ (8003bb8 <lt8722_reg_read+0x68>)
 8003b70:	4613      	mov	r3, r2
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	4413      	add	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	18ca      	adds	r2, r1, r3
 8003b7a:	f107 0310 	add.w	r3, r7, #16
 8003b7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b80:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	ret = lt8722_transaction(&packet);
 8003b84:	f107 030c 	add.w	r3, r7, #12
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff ff63 	bl	8003a54 <lt8722_transaction>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (ret)
 8003b94:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d002      	beq.n	8003ba2 <lt8722_reg_read+0x52>
		return ret;
 8003b9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003ba0:	e003      	b.n	8003baa <lt8722_reg_read+0x5a>
	*data = packet.data;
 8003ba2:	69fa      	ldr	r2, [r7, #28]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	601a      	str	r2, [r3, #0]
	return 0;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3728      	adds	r7, #40	@ 0x28
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	08009c74 	.word	0x08009c74
 8003bb8:	200001a0 	.word	0x200001a0

08003bbc <lt8722_reg_write>:
 * @param address - Register address.
 * @param data - Data to be written.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reg_write(uint8_t address, uint32_t data)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b08a      	sub	sp, #40	@ 0x28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	6039      	str	r1, [r7, #0]
 8003bc6:	71fb      	strb	r3, [r7, #7]
	struct lt8722_packet packet;
	struct lt8722_command command = {
 8003bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8003c04 <lt8722_reg_write+0x48>)
 8003bca:	881b      	ldrh	r3, [r3, #0]
 8003bcc:	81bb      	strh	r3, [r7, #12]
		LT8722_DATA_WRITE_COMMAND,
		LT8722_DATA_WRITE_COMMAND_SIZE
	};
	packet.command = command;
 8003bce:	89bb      	ldrh	r3, [r7, #12]
 8003bd0:	823b      	strh	r3, [r7, #16]
	packet.reg = lt8722_regs[address];
 8003bd2:	79fa      	ldrb	r2, [r7, #7]
 8003bd4:	490c      	ldr	r1, [pc, #48]	@ (8003c08 <lt8722_reg_write+0x4c>)
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	4413      	add	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	18ca      	adds	r2, r1, r3
 8003be0:	f107 0314 	add.w	r3, r7, #20
 8003be4:	ca07      	ldmia	r2, {r0, r1, r2}
 8003be6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	packet.data = data;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	623b      	str	r3, [r7, #32]
	return lt8722_transaction(&packet);
 8003bee:	f107 0310 	add.w	r3, r7, #16
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff ff2e 	bl	8003a54 <lt8722_transaction>
 8003bf8:	4603      	mov	r3, r0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3728      	adds	r7, #40	@ 0x28
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	08009c78 	.word	0x08009c78
 8003c08:	200001a0 	.word	0x200001a0

08003c0c <lt8722_reg_write_mask>:
 * @param mask - Mask to be applied.
 * @param data - Data to be written.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reg_write_mask(uint8_t address, uint32_t mask, uint32_t data)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	4603      	mov	r3, r0
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
 8003c18:	73fb      	strb	r3, [r7, #15]
	uint32_t reg_data;
	lt8722_reg_read(address, &reg_data);
 8003c1a:	f107 0214 	add.w	r2, r7, #20
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
 8003c20:	4611      	mov	r1, r2
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7ff ff94 	bl	8003b50 <lt8722_reg_read>
	reg_data &= ~mask;
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	43da      	mvns	r2, r3
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	617b      	str	r3, [r7, #20]
	reg_data |= field_prep(mask, data);
 8003c32:	6879      	ldr	r1, [r7, #4]
 8003c34:	68b8      	ldr	r0, [r7, #8]
 8003c36:	f000 fa70 	bl	800411a <field_prep>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	617b      	str	r3, [r7, #20]
	return lt8722_reg_write(address, reg_data);
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
 8003c46:	4611      	mov	r1, r2
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7ff ffb7 	bl	8003bbc <lt8722_reg_write>
 8003c4e:	4603      	mov	r3, r0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <lt8722_set_enable_req>:
 * @brief Set ENABLE_REQ field in LT8722 device.
 * @param value - Enable if true, disabled otherwise
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_enable_req(bool value)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	4603      	mov	r3, r0
 8003c60:	71fb      	strb	r3, [r7, #7]
	return lt8722_reg_write_mask(LT8722_SPIS_COMMAND, LT8722_ENABLE_REQ_MASK, value);
 8003c62:	79fb      	ldrb	r3, [r7, #7]
 8003c64:	461a      	mov	r2, r3
 8003c66:	2101      	movs	r1, #1
 8003c68:	2000      	movs	r0, #0
 8003c6a:	f7ff ffcf 	bl	8003c0c <lt8722_reg_write_mask>
 8003c6e:	4603      	mov	r3, r0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <lt8722_set_swen_req>:
 * @brief Set switching enable of LT8722 device.
 * @param value - Enable if true, disabled otherwise
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_swen_req(bool value)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	4603      	mov	r3, r0
 8003c80:	71fb      	strb	r3, [r7, #7]
	return lt8722_reg_write_mask(LT8722_SPIS_COMMAND, LT8722_SWEN_REQ_MASK, value);
 8003c82:	79fb      	ldrb	r3, [r7, #7]
 8003c84:	461a      	mov	r2, r3
 8003c86:	2102      	movs	r1, #2
 8003c88:	2000      	movs	r0, #0
 8003c8a:	f7ff ffbf 	bl	8003c0c <lt8722_reg_write_mask>
 8003c8e:	4603      	mov	r3, r0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <lt8722_reset>:
/**
 * @brief Shutdown the LT8722 device.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reset(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
	return lt8722_reg_write_mask(LT8722_SPIS_COMMAND, LT8722_SPI_RST_MASK, LT8722_SPI_RST_RESET);
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003ca2:	2000      	movs	r0, #0
 8003ca4:	f7ff ffb2 	bl	8003c0c <lt8722_reg_write_mask>
 8003ca8:	4603      	mov	r3, r0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	bd80      	pop	{r7, pc}

08003cae <lt8722_clear_faults>:
/**
 * @brief Clear LT8722 device faults.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_clear_faults(void)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b082      	sub	sp, #8
 8003cb2:	af00      	add	r7, sp, #0
	return lt8722_reg_write_mask(LT8722_SPIS_STATUS, LT8722_FAULTS_MASK, 0);
 8003cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb8:	607b      	str	r3, [r7, #4]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	069b      	lsls	r3, r3, #26
 8003cbe:	607b      	str	r3, [r7, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	0d5b      	lsrs	r3, r3, #21
 8003cc4:	607b      	str	r3, [r7, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	4619      	mov	r1, r3
 8003ccc:	2001      	movs	r0, #1
 8003cce:	f7ff ff9d 	bl	8003c0c <lt8722_reg_write_mask>
 8003cd2:	4603      	mov	r3, r0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3708      	adds	r7, #8
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <lt8722_get_status>:
 * @brief Get LT8722 device status.
 * @param status - Status value to be returned.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_get_status(uint16_t *status)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b08a      	sub	sp, #40	@ 0x28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
	int8_t ret;
	struct lt8722_packet packet;
	struct lt8722_command command = {
 8003ce4:	4b11      	ldr	r3, [pc, #68]	@ (8003d2c <lt8722_get_status+0x50>)
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	813b      	strh	r3, [r7, #8]
		LT8722_STATUS_ACQUISITION_COMMAND,
		LT8722_STATUS_ACQUISITION_COMMAND_SIZE
	};
	packet.command = command;
 8003cea:	893b      	ldrh	r3, [r7, #8]
 8003cec:	81bb      	strh	r3, [r7, #12]
	packet.reg = lt8722_regs[LT8722_SPIS_STATUS];
 8003cee:	4a10      	ldr	r2, [pc, #64]	@ (8003d30 <lt8722_get_status+0x54>)
 8003cf0:	f107 0310 	add.w	r3, r7, #16
 8003cf4:	320c      	adds	r2, #12
 8003cf6:	ca07      	ldmia	r2, {r0, r1, r2}
 8003cf8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	ret = lt8722_transaction(&packet);
 8003cfc:	f107 030c 	add.w	r3, r7, #12
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff fea7 	bl	8003a54 <lt8722_transaction>
 8003d06:	4603      	mov	r3, r0
 8003d08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (ret)
 8003d0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d002      	beq.n	8003d1a <lt8722_get_status+0x3e>
		return ret;
 8003d14:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003d18:	e003      	b.n	8003d22 <lt8722_get_status+0x46>
	*status = packet.status;
 8003d1a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	801a      	strh	r2, [r3, #0]
	return 0;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3728      	adds	r7, #40	@ 0x28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	08009c7c 	.word	0x08009c7c
 8003d30:	200001a0 	.word	0x200001a0

08003d34 <lt8722_set_dac>:
 * @brief Set DAC code of LT8722 device.
 * @param value - DAC value
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_dac(uint32_t value)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
	return lt8722_reg_write_mask(LT8722_SPIS_DAC, LT8722_SPIS_DAC_MASK, value);
 8003d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d40:	60fb      	str	r3, [r7, #12]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	4619      	mov	r1, r3
 8003d48:	2004      	movs	r0, #4
 8003d4a:	f7ff ff5f 	bl	8003c0c <lt8722_reg_write_mask>
 8003d4e:	4603      	mov	r3, r0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <lt8722_set_spis_ov_clamp>:
 * @brief Set positive output voltage limit of LT8722 device.
 * @param value - Positive output voltage limit value
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_spis_ov_clamp(uint8_t value)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	71fb      	strb	r3, [r7, #7]
	return lt8722_reg_write_mask(LT8722_SPIS_OV_CLAMP, LT8722_SPIS_OV_CLAMP_MASK, value);
 8003d62:	f04f 33ff 	mov.w	r3, #4294967295
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	071b      	lsls	r3, r3, #28
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	0f1b      	lsrs	r3, r3, #28
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	79fa      	ldrb	r2, [r7, #7]
 8003d78:	4619      	mov	r1, r3
 8003d7a:	2005      	movs	r0, #5
 8003d7c:	f7ff ff46 	bl	8003c0c <lt8722_reg_write_mask>
 8003d80:	4603      	mov	r3, r0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <lt8722_set_spis_uv_clamp>:
 * @brief Set negative output voltage limit of LT8722 device.
 * @param value - Negative output voltage limit value
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_spis_uv_clamp(uint8_t value)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b084      	sub	sp, #16
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	4603      	mov	r3, r0
 8003d92:	71fb      	strb	r3, [r7, #7]
	return lt8722_reg_write_mask(LT8722_SPIS_UV_CLAMP, LT8722_SPIS_UV_CLAMP_MASK, value);
 8003d94:	f04f 33ff 	mov.w	r3, #4294967295
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	071b      	lsls	r3, r3, #28
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	0f1b      	lsrs	r3, r3, #28
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	79fa      	ldrb	r2, [r7, #7]
 8003daa:	4619      	mov	r1, r3
 8003dac:	2006      	movs	r0, #6
 8003dae:	f7ff ff2d 	bl	8003c0c <lt8722_reg_write_mask>
 8003db2:	4603      	mov	r3, r0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <lt8722_init>:
 * @param init_param - Initialization parameter containing information about the
 * 		LT8722 device to be initialized.
 * @return 0 in case of succes, negative error code otherwise
*/
int8_t lt8722_init(void)
{
 8003dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dc0:	b08f      	sub	sp, #60	@ 0x3c
 8003dc2:	af00      	add	r7, sp, #0
	int8_t ret = 0;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	int32_t dac;
	int64_t voltage;
	int64_t start_voltage;
	int64_t end_voltage;

	LL_GPIO_ResetOutputPin(TEC_4_EN_GPIO_Port, TEC_4_EN_Pin);
 8003dca:	2108      	movs	r1, #8
 8003dcc:	4852      	ldr	r0, [pc, #328]	@ (8003f18 <lt8722_init+0x15c>)
 8003dce:	f7ff fd6a 	bl	80038a6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(TEC_4_SWEN_GPIO_Port, TEC_4_SWEN_Pin);
 8003dd2:	2120      	movs	r1, #32
 8003dd4:	4850      	ldr	r0, [pc, #320]	@ (8003f18 <lt8722_init+0x15c>)
 8003dd6:	f7ff fd66 	bl	80038a6 <LL_GPIO_ResetOutputPin>
	/*
	 * Reset LT8722
	 */
	lt8722_reset();
 8003dda:	f7ff ff5d 	bl	8003c98 <lt8722_reset>
	 * Start-up sequence
	 * 1. Apply proper VIN and VDDIO voltages
	 *
	 * 2. Enable VCC LDO and other LT8722 circuitry
	 */
	ret = lt8722_clear_faults();
 8003dde:	f7ff ff66 	bl	8003cae <lt8722_clear_faults>
 8003de2:	4603      	mov	r3, r0
 8003de4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	LL_GPIO_SetOutputPin(TEC_4_EN_GPIO_Port, TEC_4_EN_Pin);
 8003de8:	2108      	movs	r1, #8
 8003dea:	484b      	ldr	r0, [pc, #300]	@ (8003f18 <lt8722_init+0x15c>)
 8003dec:	f7ff fd4d 	bl	800388a <LL_GPIO_SetOutputPin>
	ret = lt8722_set_enable_req(LT8722_ENABLE_REQ_ENABLED);
 8003df0:	2001      	movs	r0, #1
 8003df2:	f7ff ff31 	bl	8003c58 <lt8722_set_enable_req>
 8003df6:	4603      	mov	r3, r0
 8003df8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	ret = lt8722_reg_write(LT8722_SPIS_COMMAND, 0x00003A01);
 8003dfc:	f643 2101 	movw	r1, #14849	@ 0x3a01
 8003e00:	2000      	movs	r0, #0
 8003e02:	f7ff fedb 	bl	8003bbc <lt8722_reg_write>
 8003e06:	4603      	mov	r3, r0
 8003e08:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
//	ret = lt8722_reg_write(LT8722_SPIS_COMMAND, 0x0002BA01);
	/*
	 * 3. Configure output voltage control DAC to 0xFF000000
	 */
	ret = lt8722_set_dac(0xFF000000);
 8003e0c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8003e10:	f7ff ff90 	bl	8003d34 <lt8722_set_dac>
 8003e14:	4603      	mov	r3, r0
 8003e16:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	/*
	 * 4. Write all SPIS_STATUS registers to 0
	 */
	ret = lt8722_reg_write(LT8722_SPIS_STATUS, 0);
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	2001      	movs	r0, #1
 8003e1e:	f7ff fecd 	bl	8003bbc <lt8722_reg_write>
 8003e22:	4603      	mov	r3, r0
 8003e24:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	LL_mDelay(1);
 8003e28:	2001      	movs	r0, #1
 8003e2a:	f004 f90d 	bl	8008048 <LL_mDelay>
	ret = lt8722_reg_write(LT8722_SPIS_COMMAND, 0x00003A01);
 8003e2e:	f643 2101 	movw	r1, #14849	@ 0x3a01
 8003e32:	2000      	movs	r0, #0
 8003e34:	f7ff fec2 	bl	8003bbc <lt8722_reg_write>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
//	ret = lt8722_reg_write(LT8722_SPIS_COMMAND, 0x0002BA01);
	/*
	 * 5. Ramp the output voltage control DAC from 0xFF000000 to 0x00000000
	 */
	start_voltage = lt8722_dac_to_voltage(0xFF000000);
 8003e3e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8003e42:	f7ff fdc3 	bl	80039cc <lt8722_dac_to_voltage>
 8003e46:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
	end_voltage = lt8722_dac_to_voltage(0x00000000);
 8003e4a:	2000      	movs	r0, #0
 8003e4c:	f7ff fdbe 	bl	80039cc <lt8722_dac_to_voltage>
 8003e50:	e9c7 0108 	strd	r0, r1, [r7, #32]
	for (uint8_t i = 0;  i < 5; i++)
 8003e54:	2300      	movs	r3, #0
 8003e56:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8003e5a:	e045      	b.n	8003ee8 <lt8722_init+0x12c>
	{
		voltage = (start_voltage + (end_voltage - start_voltage) * i / 4);
 8003e5c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003e60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e64:	1a84      	subs	r4, r0, r2
 8003e66:	eb61 0503 	sbc.w	r5, r1, r3
 8003e6a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003e6e:	2200      	movs	r2, #0
 8003e70:	4698      	mov	r8, r3
 8003e72:	4691      	mov	r9, r2
 8003e74:	fb08 f205 	mul.w	r2, r8, r5
 8003e78:	fb04 f309 	mul.w	r3, r4, r9
 8003e7c:	4413      	add	r3, r2
 8003e7e:	fba4 ab08 	umull	sl, fp, r4, r8
 8003e82:	445b      	add	r3, fp
 8003e84:	469b      	mov	fp, r3
 8003e86:	4652      	mov	r2, sl
 8003e88:	465b      	mov	r3, fp
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	da06      	bge.n	8003e9c <lt8722_init+0xe0>
 8003e8e:	1cd1      	adds	r1, r2, #3
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	f143 0300 	adc.w	r3, r3, #0
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e9c:	f04f 0000 	mov.w	r0, #0
 8003ea0:	f04f 0100 	mov.w	r1, #0
 8003ea4:	0890      	lsrs	r0, r2, #2
 8003ea6:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8003eaa:	1099      	asrs	r1, r3, #2
 8003eac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003eb0:	1816      	adds	r6, r2, r0
 8003eb2:	603e      	str	r6, [r7, #0]
 8003eb4:	414b      	adcs	r3, r1
 8003eb6:	607b      	str	r3, [r7, #4]
 8003eb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ebc:	e9c7 2306 	strd	r2, r3, [r7, #24]
		dac = lt8722_voltage_to_dac(voltage);
 8003ec0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003ec4:	f7ff fd5c 	bl	8003980 <lt8722_voltage_to_dac>
 8003ec8:	6178      	str	r0, [r7, #20]
		ret = lt8722_set_dac(dac);
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7ff ff31 	bl	8003d34 <lt8722_set_dac>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
		LL_mDelay(1);
 8003ed8:	2001      	movs	r0, #1
 8003eda:	f004 f8b5 	bl	8008048 <LL_mDelay>
	for (uint8_t i = 0;  i < 5; i++)
 8003ede:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8003ee8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003eec:	2b04      	cmp	r3, #4
 8003eee:	d9b5      	bls.n	8003e5c <lt8722_init+0xa0>
	}
	/*
	 * 6. Enable the PWM switching behavior
	 */
	LL_GPIO_SetOutputPin(TEC_4_SWEN_GPIO_Port, TEC_4_SWEN_Pin);
 8003ef0:	2120      	movs	r1, #32
 8003ef2:	4809      	ldr	r0, [pc, #36]	@ (8003f18 <lt8722_init+0x15c>)
 8003ef4:	f7ff fcc9 	bl	800388a <LL_GPIO_SetOutputPin>
	ret = lt8722_set_swen_req(LT8722_SWEN_REQ_ENABLED);
 8003ef8:	2001      	movs	r0, #1
 8003efa:	f7ff febd 	bl	8003c78 <lt8722_set_swen_req>
 8003efe:	4603      	mov	r3, r0
 8003f00:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	delay_us(180);
 8003f04:	20b4      	movs	r0, #180	@ 0xb4
 8003f06:	f7fc fba7 	bl	8000658 <delay_us>
	/*
	 * 7. Set the desired output voltage
	 */
	return ret;
 8003f0a:	f997 3036 	ldrsb.w	r3, [r7, #54]	@ 0x36
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	373c      	adds	r7, #60	@ 0x3c
 8003f12:	46bd      	mov	sp, r7
 8003f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f18:	40020c00 	.word	0x40020c00

08003f1c <lt8722_set_output_voltage>:
 * @brief Set output volatge of LT8722 device.
 * @param value - Output voltage value in nanovolts.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_output_voltage(int64_t value)
{
 8003f1c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003f20:	b088      	sub	sp, #32
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t ret = 0;
 8003f28:	2100      	movs	r1, #0
 8003f2a:	77f9      	strb	r1, [r7, #31]
	int64_t vdac = 0;
 8003f2c:	f04f 0000 	mov.w	r0, #0
 8003f30:	f04f 0100 	mov.w	r1, #0
 8003f34:	e9c7 0104 	strd	r0, r1, [r7, #16]
	int32_t dac = 0x0;
 8003f38:	2100      	movs	r1, #0
 8003f3a:	60f9      	str	r1, [r7, #12]

	vdac = LT8722_DAC_OFFSET - value / 16;
 8003f3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f40:	2900      	cmp	r1, #0
 8003f42:	da05      	bge.n	8003f50 <lt8722_set_output_voltage+0x34>
 8003f44:	f110 020f 	adds.w	r2, r0, #15
 8003f48:	f141 0300 	adc.w	r3, r1, #0
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	4619      	mov	r1, r3
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	0902      	lsrs	r2, r0, #4
 8003f5a:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8003f5e:	110b      	asrs	r3, r1, #4
 8003f60:	2100      	movs	r1, #0
 8003f62:	f1d2 0800 	rsbs	r8, r2, #0
 8003f66:	eb61 0903 	sbc.w	r9, r1, r3
 8003f6a:	4642      	mov	r2, r8
 8003f6c:	464b      	mov	r3, r9
 8003f6e:	490c      	ldr	r1, [pc, #48]	@ (8003fa0 <lt8722_set_output_voltage+0x84>)
 8003f70:	1854      	adds	r4, r2, r1
 8003f72:	f143 0500 	adc.w	r5, r3, #0
 8003f76:	e9c7 4504 	strd	r4, r5, [r7, #16]
	dac = lt8722_voltage_to_dac(vdac);
 8003f7a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003f7e:	f7ff fcff 	bl	8003980 <lt8722_voltage_to_dac>
 8003f82:	60f8      	str	r0, [r7, #12]
	ret = lt8722_set_dac(dac);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff fed4 	bl	8003d34 <lt8722_set_dac>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	77fb      	strb	r3, [r7, #31]
	return ret;
 8003f90:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3720      	adds	r7, #32
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003f9e:	bf00      	nop
 8003fa0:	4a817c80 	.word	0x4a817c80

08003fa4 <lt8722_set_output_voltage_channel>:
 * @param channel - Channel of lt8722.
 * @param value - Output voltage value in nanovolts.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_output_voltage_channel(uint8_t channel, int64_t value)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	4601      	mov	r1, r0
 8003fac:	e9c7 2300 	strd	r2, r3, [r7]
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	73fb      	strb	r3, [r7, #15]
	uint8_t ret = 0;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	75fb      	strb	r3, [r7, #23]
	return ret;
 8003fb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	371c      	adds	r7, #28
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <Calculate_CRC8>:

/* Private support function definition ------------------------------------*/
uint8_t Calculate_CRC8(uint8_t *data, uint8_t length)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0x00;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	73fb      	strb	r3, [r7, #15]
    uint8_t poly = 0x07;
 8003fd8:	2307      	movs	r3, #7
 8003fda:	733b      	strb	r3, [r7, #12]
    for (uint8_t i = 0; i < length; i++)
 8003fdc:	2300      	movs	r3, #0
 8003fde:	73bb      	strb	r3, [r7, #14]
 8003fe0:	e022      	b.n	8004028 <Calculate_CRC8+0x60>
    {
        crc ^= data[i];
 8003fe2:	7bbb      	ldrb	r3, [r7, #14]
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	781a      	ldrb	r2, [r3, #0]
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
 8003fec:	4053      	eors	r3, r2
 8003fee:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 0; bit < 8; bit++)
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	737b      	strb	r3, [r7, #13]
 8003ff4:	e012      	b.n	800401c <Calculate_CRC8+0x54>
        {
            if (crc & 0x80)
 8003ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	da08      	bge.n	8004010 <Calculate_CRC8+0x48>
                crc = (crc << 1) ^ poly;
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	b25a      	sxtb	r2, r3
 8004004:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8004008:	4053      	eors	r3, r2
 800400a:	b25b      	sxtb	r3, r3
 800400c:	73fb      	strb	r3, [r7, #15]
 800400e:	e002      	b.n	8004016 <Calculate_CRC8+0x4e>
            else
                crc <<= 1;
 8004010:	7bfb      	ldrb	r3, [r7, #15]
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 0; bit < 8; bit++)
 8004016:	7b7b      	ldrb	r3, [r7, #13]
 8004018:	3301      	adds	r3, #1
 800401a:	737b      	strb	r3, [r7, #13]
 800401c:	7b7b      	ldrb	r3, [r7, #13]
 800401e:	2b07      	cmp	r3, #7
 8004020:	d9e9      	bls.n	8003ff6 <Calculate_CRC8+0x2e>
    for (uint8_t i = 0; i < length; i++)
 8004022:	7bbb      	ldrb	r3, [r7, #14]
 8004024:	3301      	adds	r3, #1
 8004026:	73bb      	strb	r3, [r7, #14]
 8004028:	7bba      	ldrb	r2, [r7, #14]
 800402a:	78fb      	ldrb	r3, [r7, #3]
 800402c:	429a      	cmp	r2, r3
 800402e:	d3d8      	bcc.n	8003fe2 <Calculate_CRC8+0x1a>
        }
    }
    return crc;
 8004030:	7bfb      	ldrb	r3, [r7, #15]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <put_unaligned_be32>:

void put_unaligned_be32(uint32_t val, uint8_t *buf)
{
 800403e:	b480      	push	{r7}
 8004040:	b083      	sub	sp, #12
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	6039      	str	r1, [r7, #0]
	buf[3] = val & 0xFF;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	3303      	adds	r3, #3
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	701a      	strb	r2, [r3, #0]
	buf[2] = (val >> 8) & 0xFF;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	0a1a      	lsrs	r2, r3, #8
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	3302      	adds	r3, #2
 800405a:	b2d2      	uxtb	r2, r2
 800405c:	701a      	strb	r2, [r3, #0]
	buf[1] = (val >> 16) & 0xFF;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	0c1a      	lsrs	r2, r3, #16
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	3301      	adds	r3, #1
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	701a      	strb	r2, [r3, #0]
	buf[0] = val >> 24;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	0e1b      	lsrs	r3, r3, #24
 800406e:	b2da      	uxtb	r2, r3
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	701a      	strb	r2, [r3, #0]
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <get_unaligned_be32>:
{
	buf[1] = val & 0xFF;
	buf[0] = val >> 8;
}
uint32_t get_unaligned_be32(uint8_t *buf)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
	return buf[3] | ((uint16_t)buf[2] << 8) | ((uint32_t)buf[1] << 16) | ((uint32_t)buf[0] << 24);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3303      	adds	r3, #3
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	461a      	mov	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3302      	adds	r3, #2
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	021b      	lsls	r3, r3, #8
 8004098:	4313      	orrs	r3, r2
 800409a:	461a      	mov	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3301      	adds	r3, #1
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	041b      	lsls	r3, r3, #16
 80040a4:	431a      	orrs	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	061b      	lsls	r3, r3, #24
 80040ac:	4313      	orrs	r3, r2
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <get_unaligned_be16>:
uint32_t get_unaligned_be16(uint8_t *buf)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b083      	sub	sp, #12
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
	return buf[1] | ((uint16_t)buf[0] << 8);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	3301      	adds	r3, #1
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	461a      	mov	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	021b      	lsls	r3, r3, #8
 80040d0:	4313      	orrs	r3, r2
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <find_first_set_bit>:
uint32_t find_first_set_bit(uint32_t word)
{
 80040de:	b480      	push	{r7}
 80040e0:	b085      	sub	sp, #20
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
	uint32_t first_set_bit = 0;
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
	while (word) {
 80040ea:	e00c      	b.n	8004106 <find_first_set_bit+0x28>
		if (word & 0x1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <find_first_set_bit+0x1c>
			return first_set_bit;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	e009      	b.n	800410e <find_first_set_bit+0x30>
		word >>= 1;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	085b      	lsrs	r3, r3, #1
 80040fe:	607b      	str	r3, [r7, #4]
		first_set_bit ++;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	3301      	adds	r3, #1
 8004104:	60fb      	str	r3, [r7, #12]
	while (word) {
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1ef      	bne.n	80040ec <find_first_set_bit+0xe>
	}
	return 32;
 800410c:	2320      	movs	r3, #32
}
 800410e:	4618      	mov	r0, r3
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <field_prep>:
uint32_t field_prep(uint32_t mask, uint32_t val)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b082      	sub	sp, #8
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	6039      	str	r1, [r7, #0]
	return (val << find_first_set_bit(mask)) & mask;
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7ff ffda 	bl	80040de <find_first_set_bit>
 800412a:	4602      	mov	r2, r0
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	fa03 f202 	lsl.w	r2, r3, r2
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4013      	ands	r3, r2
}
 8004136:	4618      	mov	r0, r3
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800413e:	b480      	push	{r7}
 8004140:	b083      	sub	sp, #12
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f043 0201 	orr.w	r2, r3, #1
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	609a      	str	r2, [r3, #8]
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b01      	cmp	r3, #1
 8004170:	bf0c      	ite	eq
 8004172:	2301      	moveq	r3, #1
 8004174:	2300      	movne	r3, #0
 8004176:	b2db      	uxtb	r3, r3
}
 8004178:	4618      	mov	r0, r3
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	609a      	str	r2, [r3, #8]
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80041ae:	4a0c      	ldr	r2, [pc, #48]	@ (80041e0 <LL_DMA_EnableStream+0x3c>)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	4413      	add	r3, r2
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	461a      	mov	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4413      	add	r3, r2
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4908      	ldr	r1, [pc, #32]	@ (80041e0 <LL_DMA_EnableStream+0x3c>)
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	440a      	add	r2, r1
 80041c4:	7812      	ldrb	r2, [r2, #0]
 80041c6:	4611      	mov	r1, r2
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	440a      	add	r2, r1
 80041cc:	f043 0301 	orr.w	r3, r3, #1
 80041d0:	6013      	str	r3, [r2, #0]
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	08009c80 	.word	0x08009c80

080041e4 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80041f0:	4a0d      	ldr	r2, [pc, #52]	@ (8004228 <LL_DMA_SetDataTransferDirection+0x44>)
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	4413      	add	r3, r2
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	461a      	mov	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	4413      	add	r3, r2
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004204:	4908      	ldr	r1, [pc, #32]	@ (8004228 <LL_DMA_SetDataTransferDirection+0x44>)
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	440b      	add	r3, r1
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	4619      	mov	r1, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	440b      	add	r3, r1
 8004212:	4619      	mov	r1, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4313      	orrs	r3, r2
 8004218:	600b      	str	r3, [r1, #0]
}
 800421a:	bf00      	nop
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	08009c80 	.word	0x08009c80

0800422c <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8004238:	4a0d      	ldr	r2, [pc, #52]	@ (8004270 <LL_DMA_SetMode+0x44>)
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	4413      	add	r3, r2
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	461a      	mov	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	4413      	add	r3, r2
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 800424c:	4908      	ldr	r1, [pc, #32]	@ (8004270 <LL_DMA_SetMode+0x44>)
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	440b      	add	r3, r1
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	4619      	mov	r1, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	440b      	add	r3, r1
 800425a:	4619      	mov	r1, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4313      	orrs	r3, r2
 8004260:	600b      	str	r3, [r1, #0]
}
 8004262:	bf00      	nop
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	08009c80 	.word	0x08009c80

08004274 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8004280:	4a0d      	ldr	r2, [pc, #52]	@ (80042b8 <LL_DMA_SetPeriphIncMode+0x44>)
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	4413      	add	r3, r2
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	461a      	mov	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	4413      	add	r3, r2
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004294:	4908      	ldr	r1, [pc, #32]	@ (80042b8 <LL_DMA_SetPeriphIncMode+0x44>)
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	440b      	add	r3, r1
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	4619      	mov	r1, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	440b      	add	r3, r1
 80042a2:	4619      	mov	r1, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	600b      	str	r3, [r1, #0]
}
 80042aa:	bf00      	nop
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	08009c80 	.word	0x08009c80

080042bc <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80042c8:	4a0d      	ldr	r2, [pc, #52]	@ (8004300 <LL_DMA_SetMemoryIncMode+0x44>)
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	4413      	add	r3, r2
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	461a      	mov	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	4413      	add	r3, r2
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80042dc:	4908      	ldr	r1, [pc, #32]	@ (8004300 <LL_DMA_SetMemoryIncMode+0x44>)
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	440b      	add	r3, r1
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	4619      	mov	r1, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	440b      	add	r3, r1
 80042ea:	4619      	mov	r1, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	600b      	str	r3, [r1, #0]
}
 80042f2:	bf00      	nop
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	08009c80 	.word	0x08009c80

08004304 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8004310:	4a0d      	ldr	r2, [pc, #52]	@ (8004348 <LL_DMA_SetPeriphSize+0x44>)
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	4413      	add	r3, r2
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	461a      	mov	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	4413      	add	r3, r2
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8004324:	4908      	ldr	r1, [pc, #32]	@ (8004348 <LL_DMA_SetPeriphSize+0x44>)
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	440b      	add	r3, r1
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	4619      	mov	r1, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	440b      	add	r3, r1
 8004332:	4619      	mov	r1, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4313      	orrs	r3, r2
 8004338:	600b      	str	r3, [r1, #0]
}
 800433a:	bf00      	nop
 800433c:	3714      	adds	r7, #20
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	08009c80 	.word	0x08009c80

0800434c <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8004358:	4a0d      	ldr	r2, [pc, #52]	@ (8004390 <LL_DMA_SetMemorySize+0x44>)
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	4413      	add	r3, r2
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	461a      	mov	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4413      	add	r3, r2
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 800436c:	4908      	ldr	r1, [pc, #32]	@ (8004390 <LL_DMA_SetMemorySize+0x44>)
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	440b      	add	r3, r1
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	4619      	mov	r1, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	440b      	add	r3, r1
 800437a:	4619      	mov	r1, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4313      	orrs	r3, r2
 8004380:	600b      	str	r3, [r1, #0]
}
 8004382:	bf00      	nop
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	08009c80 	.word	0x08009c80

08004394 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 80043a0:	4a0d      	ldr	r2, [pc, #52]	@ (80043d8 <LL_DMA_SetDataLength+0x44>)
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	4413      	add	r3, r2
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	461a      	mov	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4413      	add	r3, r2
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	0c1b      	lsrs	r3, r3, #16
 80043b2:	041b      	lsls	r3, r3, #16
 80043b4:	4908      	ldr	r1, [pc, #32]	@ (80043d8 <LL_DMA_SetDataLength+0x44>)
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	440a      	add	r2, r1
 80043ba:	7812      	ldrb	r2, [r2, #0]
 80043bc:	4611      	mov	r1, r2
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	440a      	add	r2, r1
 80043c2:	4611      	mov	r1, r2
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	604b      	str	r3, [r1, #4]
}
 80043ca:	bf00      	nop
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	08009c80 	.word	0x08009c80

080043dc <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80043e8:	4a0d      	ldr	r2, [pc, #52]	@ (8004420 <LL_DMA_SetChannelSelection+0x44>)
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	4413      	add	r3, r2
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	461a      	mov	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	4413      	add	r3, r2
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80043fc:	4908      	ldr	r1, [pc, #32]	@ (8004420 <LL_DMA_SetChannelSelection+0x44>)
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	440b      	add	r3, r1
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	4619      	mov	r1, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	440b      	add	r3, r1
 800440a:	4619      	mov	r1, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4313      	orrs	r3, r2
 8004410:	600b      	str	r3, [r1, #0]
}
 8004412:	bf00      	nop
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	08009c80 	.word	0x08009c80

08004424 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8004430:	4a07      	ldr	r2, [pc, #28]	@ (8004450 <LL_DMA_SetMemoryAddress+0x2c>)
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	4413      	add	r3, r2
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	461a      	mov	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	4413      	add	r3, r2
 800443e:	461a      	mov	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	60d3      	str	r3, [r2, #12]
}
 8004444:	bf00      	nop
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	08009c80 	.word	0x08009c80

08004454 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8004460:	4a07      	ldr	r2, [pc, #28]	@ (8004480 <LL_DMA_SetPeriphAddress+0x2c>)
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	4413      	add	r3, r2
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	461a      	mov	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	4413      	add	r3, r2
 800446e:	461a      	mov	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6093      	str	r3, [r2, #8]
}
 8004474:	bf00      	nop
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	08009c80 	.word	0x08009c80

08004484 <NTC_DMA_ADC_init>:
  3143, 3307, 3521, 3819, 4292, 5279, 6266
};


void NTC_DMA_ADC_init(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
    // Cấu hình DMA
    LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_0, LL_DMA_CHANNEL_0);
 8004488:	2200      	movs	r2, #0
 800448a:	2100      	movs	r1, #0
 800448c:	4823      	ldr	r0, [pc, #140]	@ (800451c <NTC_DMA_ADC_init+0x98>)
 800448e:	f7ff ffa5 	bl	80043dc <LL_DMA_SetChannelSelection>
    LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8004492:	2200      	movs	r2, #0
 8004494:	2100      	movs	r1, #0
 8004496:	4821      	ldr	r0, [pc, #132]	@ (800451c <NTC_DMA_ADC_init+0x98>)
 8004498:	f7ff fea4 	bl	80041e4 <LL_DMA_SetDataTransferDirection>
    LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 800449c:	2200      	movs	r2, #0
 800449e:	2100      	movs	r1, #0
 80044a0:	481e      	ldr	r0, [pc, #120]	@ (800451c <NTC_DMA_ADC_init+0x98>)
 80044a2:	f7ff fee7 	bl	8004274 <LL_DMA_SetPeriphIncMode>
    LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 80044a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044aa:	2100      	movs	r1, #0
 80044ac:	481b      	ldr	r0, [pc, #108]	@ (800451c <NTC_DMA_ADC_init+0x98>)
 80044ae:	f7ff ff05 	bl	80042bc <LL_DMA_SetMemoryIncMode>
    LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_HALFWORD);
 80044b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80044b6:	2100      	movs	r1, #0
 80044b8:	4818      	ldr	r0, [pc, #96]	@ (800451c <NTC_DMA_ADC_init+0x98>)
 80044ba:	f7ff ff23 	bl	8004304 <LL_DMA_SetPeriphSize>
    LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_HALFWORD);
 80044be:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80044c2:	2100      	movs	r1, #0
 80044c4:	4815      	ldr	r0, [pc, #84]	@ (800451c <NTC_DMA_ADC_init+0x98>)
 80044c6:	f7ff ff41 	bl	800434c <LL_DMA_SetMemorySize>
    LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_0, 4); // 4 kênh
 80044ca:	2204      	movs	r2, #4
 80044cc:	2100      	movs	r1, #0
 80044ce:	4813      	ldr	r0, [pc, #76]	@ (800451c <NTC_DMA_ADC_init+0x98>)
 80044d0:	f7ff ff60 	bl	8004394 <LL_DMA_SetDataLength>

    // Địa chỉ của ADC data register
    LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_0, (uint32_t)&ADC1->DR);
 80044d4:	4a12      	ldr	r2, [pc, #72]	@ (8004520 <NTC_DMA_ADC_init+0x9c>)
 80044d6:	2100      	movs	r1, #0
 80044d8:	4810      	ldr	r0, [pc, #64]	@ (800451c <NTC_DMA_ADC_init+0x98>)
 80044da:	f7ff ffbb 	bl	8004454 <LL_DMA_SetPeriphAddress>

    // Địa chỉ bộ nhớ DMA
    LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_0, (uint32_t)NTC_ADC_value);
 80044de:	4b11      	ldr	r3, [pc, #68]	@ (8004524 <NTC_DMA_ADC_init+0xa0>)
 80044e0:	461a      	mov	r2, r3
 80044e2:	2100      	movs	r1, #0
 80044e4:	480d      	ldr	r0, [pc, #52]	@ (800451c <NTC_DMA_ADC_init+0x98>)
 80044e6:	f7ff ff9d 	bl	8004424 <LL_DMA_SetMemoryAddress>

    // Cấu hình DMA ở chế độ vòng lặp (Circular Mode)
    LL_DMA_SetMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
 80044ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044ee:	2100      	movs	r1, #0
 80044f0:	480a      	ldr	r0, [pc, #40]	@ (800451c <NTC_DMA_ADC_init+0x98>)
 80044f2:	f7ff fe9b 	bl	800422c <LL_DMA_SetMode>

    // Bật DMA stream
    LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_0);
 80044f6:	2100      	movs	r1, #0
 80044f8:	4808      	ldr	r0, [pc, #32]	@ (800451c <NTC_DMA_ADC_init+0x98>)
 80044fa:	f7ff fe53 	bl	80041a4 <LL_DMA_EnableStream>

    // Bật ADC
    LL_ADC_Enable(ADC1);
 80044fe:	480a      	ldr	r0, [pc, #40]	@ (8004528 <NTC_DMA_ADC_init+0xa4>)
 8004500:	f7ff fe1d 	bl	800413e <LL_ADC_Enable>
    while (!LL_ADC_IsEnabled(ADC1));
 8004504:	bf00      	nop
 8004506:	4808      	ldr	r0, [pc, #32]	@ (8004528 <NTC_DMA_ADC_init+0xa4>)
 8004508:	f7ff fe29 	bl	800415e <LL_ADC_IsEnabled>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0f9      	beq.n	8004506 <NTC_DMA_ADC_init+0x82>

    // Bắt đầu chuyển đổi ADC
    LL_ADC_REG_StartConversionSWStart(ADC1);
 8004512:	4805      	ldr	r0, [pc, #20]	@ (8004528 <NTC_DMA_ADC_init+0xa4>)
 8004514:	f7ff fe36 	bl	8004184 <LL_ADC_REG_StartConversionSWStart>
}
 8004518:	bf00      	nop
 800451a:	bd80      	pop	{r7, pc}
 800451c:	40026400 	.word	0x40026400
 8004520:	4001204c 	.word	0x4001204c
 8004524:	20002720 	.word	0x20002720
 8004528:	40012000 	.word	0x40012000

0800452c <NTC_get_temperature>:

void NTC_get_temperature(int16_t* temp)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < 4; i++)
 8004534:	2300      	movs	r3, #0
 8004536:	73fb      	strb	r3, [r7, #15]
 8004538:	e028      	b.n	800458c <NTC_get_temperature+0x60>
	{
		temp[i] = NTC_table[NTC_ADC_value[i]];
 800453a:	7bfb      	ldrb	r3, [r7, #15]
 800453c:	4a18      	ldr	r2, [pc, #96]	@ (80045a0 <NTC_get_temperature+0x74>)
 800453e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004542:	4619      	mov	r1, r3
 8004544:	7bfb      	ldrb	r3, [r7, #15]
 8004546:	005b      	lsls	r3, r3, #1
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	4413      	add	r3, r2
 800454c:	4a15      	ldr	r2, [pc, #84]	@ (80045a4 <NTC_get_temperature+0x78>)
 800454e:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8004552:	801a      	strh	r2, [r3, #0]
		if (temp[i] < -500 || temp[i] > 2000)  temp[i] = 0x7FFF;
 8004554:	7bfb      	ldrb	r3, [r7, #15]
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	4413      	add	r3, r2
 800455c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004560:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 8004564:	db08      	blt.n	8004578 <NTC_get_temperature+0x4c>
 8004566:	7bfb      	ldrb	r3, [r7, #15]
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	4413      	add	r3, r2
 800456e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004572:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004576:	dd06      	ble.n	8004586 <NTC_get_temperature+0x5a>
 8004578:	7bfb      	ldrb	r3, [r7, #15]
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	4413      	add	r3, r2
 8004580:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8004584:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++)
 8004586:	7bfb      	ldrb	r3, [r7, #15]
 8004588:	3301      	adds	r3, #1
 800458a:	73fb      	strb	r3, [r7, #15]
 800458c:	7bfb      	ldrb	r3, [r7, #15]
 800458e:	2b03      	cmp	r3, #3
 8004590:	d9d3      	bls.n	800453a <NTC_get_temperature+0xe>
	}
};
 8004592:	bf00      	nop
 8004594:	bf00      	nop
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	20002720 	.word	0x20002720
 80045a4:	20000200 	.word	0x20000200

080045a8 <LL_GPIO_SetOutputPin>:
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	619a      	str	r2, [r3, #24]
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <LL_GPIO_ResetOutputPin>:
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	041a      	lsls	r2, r3, #16
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	619a      	str	r2, [r3, #24]
}
 80045d6:	bf00      	nop
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
	...

080045e4 <status_led_init>:
		480									// taskTick
	},
};

void status_led_init(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
    s_led_display_status.led_green = 0;
 80045e8:	4a0a      	ldr	r2, [pc, #40]	@ (8004614 <status_led_init+0x30>)
 80045ea:	7813      	ldrb	r3, [r2, #0]
 80045ec:	f36f 0300 	bfc	r3, #0, #1
 80045f0:	7013      	strb	r3, [r2, #0]
    s_led_display_status.led_blue = 0;
 80045f2:	4a08      	ldr	r2, [pc, #32]	@ (8004614 <status_led_init+0x30>)
 80045f4:	7813      	ldrb	r3, [r2, #0]
 80045f6:	f36f 0341 	bfc	r3, #1, #1
 80045fa:	7013      	strb	r3, [r2, #0]
    s_led_display_status.state = EXP_POWERUP;
 80045fc:	4a05      	ldr	r2, [pc, #20]	@ (8004614 <status_led_init+0x30>)
 80045fe:	7813      	ldrb	r3, [r2, #0]
 8004600:	f36f 0387 	bfc	r3, #2, #6
 8004604:	7013      	strb	r3, [r2, #0]
	status_led_led_green_off();
 8004606:	f000 f8e1 	bl	80047cc <status_led_led_green_off>
	status_led_led_blue_off();
 800460a:	f000 f8f7 	bl	80047fc <status_led_led_blue_off>



}
 800460e:	bf00      	nop
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20002730 	.word	0x20002730

08004618 <status_led_update>:
#include "board.h"
#include "main.h"
#include "bmp390.h"

void	status_led_update(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
//	bmp390_temp_press_update();
//	UART_Printf(&EXP_UART, "%d %d \n", bmp390_get_press(), bmp390_get_temperature());



	switch (s_led_display_status.state) {
 800461c:	4b0c      	ldr	r3, [pc, #48]	@ (8004650 <status_led_update+0x38>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	f3c3 0385 	ubfx	r3, r3, #2, #6
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d00c      	beq.n	8004644 <status_led_update+0x2c>
 800462a:	2b02      	cmp	r3, #2
 800462c:	dc0d      	bgt.n	800464a <status_led_update+0x32>
 800462e:	2b00      	cmp	r3, #0
 8004630:	d002      	beq.n	8004638 <status_led_update+0x20>
 8004632:	2b01      	cmp	r3, #1
 8004634:	d003      	beq.n	800463e <status_led_update+0x26>
		break;
	case EXP_ERROR:
		status_led_error();
		break;
	default:
		break;
 8004636:	e008      	b.n	800464a <status_led_update+0x32>
		status_led_powerup();
 8004638:	f000 f80c 	bl	8004654 <status_led_powerup>
		break;
 800463c:	e006      	b.n	800464c <status_led_update+0x34>
		status_led_normal();
 800463e:	f000 f851 	bl	80046e4 <status_led_normal>
		break;
 8004642:	e003      	b.n	800464c <status_led_update+0x34>
		status_led_error();
 8004644:	f000 f870 	bl	8004728 <status_led_error>
		break;
 8004648:	e000      	b.n	800464c <status_led_update+0x34>
		break;
 800464a:	bf00      	nop
	}
}
 800464c:	bf00      	nop
 800464e:	bd80      	pop	{r7, pc}
 8004650:	20002730 	.word	0x20002730

08004654 <status_led_powerup>:

static void status_led_powerup(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0
	if (s_led_display_status.led_green && s_led_display_status.led_blue) {
 8004658:	4b21      	ldr	r3, [pc, #132]	@ (80046e0 <status_led_powerup+0x8c>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d020      	beq.n	80046a8 <status_led_powerup+0x54>
 8004666:	4b1e      	ldr	r3, [pc, #120]	@ (80046e0 <status_led_powerup+0x8c>)
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b00      	cmp	r3, #0
 8004672:	d019      	beq.n	80046a8 <status_led_powerup+0x54>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 8004674:	2000      	movs	r0, #0
 8004676:	f003 fd5d 	bl	8008134 <SCH_TIM_HasCompleted>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d02d      	beq.n	80046dc <status_led_powerup+0x88>
			s_led_display_status.led_green = 0;
 8004680:	4a17      	ldr	r2, [pc, #92]	@ (80046e0 <status_led_powerup+0x8c>)
 8004682:	7813      	ldrb	r3, [r2, #0]
 8004684:	f36f 0300 	bfc	r3, #0, #1
 8004688:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 0;
 800468a:	4a15      	ldr	r2, [pc, #84]	@ (80046e0 <status_led_powerup+0x8c>)
 800468c:	7813      	ldrb	r3, [r2, #0]
 800468e:	f36f 0341 	bfc	r3, #1, #1
 8004692:	7013      	strb	r3, [r2, #0]
			status_led_led_green_off();
 8004694:	f000 f89a 	bl	80047cc <status_led_led_green_off>
			status_led_led_blue_off();
 8004698:	f000 f8b0 	bl	80047fc <status_led_led_blue_off>
			SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD);
 800469c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80046a0:	2000      	movs	r0, #0
 80046a2:	f003 fd31 	bl	8008108 <SCH_TIM_Start>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 80046a6:	e019      	b.n	80046dc <status_led_powerup+0x88>
		}
	} else {
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 80046a8:	2000      	movs	r0, #0
 80046aa:	f003 fd43 	bl	8008134 <SCH_TIM_HasCompleted>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d013      	beq.n	80046dc <status_led_powerup+0x88>
			s_led_display_status.led_green = 1;
 80046b4:	4a0a      	ldr	r2, [pc, #40]	@ (80046e0 <status_led_powerup+0x8c>)
 80046b6:	7813      	ldrb	r3, [r2, #0]
 80046b8:	f043 0301 	orr.w	r3, r3, #1
 80046bc:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 1;
 80046be:	4a08      	ldr	r2, [pc, #32]	@ (80046e0 <status_led_powerup+0x8c>)
 80046c0:	7813      	ldrb	r3, [r2, #0]
 80046c2:	f043 0302 	orr.w	r3, r3, #2
 80046c6:	7013      	strb	r3, [r2, #0]
			status_led_led_green_on();
 80046c8:	f000 f874 	bl	80047b4 <status_led_led_green_on>
			status_led_led_blue_on();
 80046cc:	f000 f88a 	bl	80047e4 <status_led_led_blue_on>
			SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD);
 80046d0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80046d4:	2000      	movs	r0, #0
 80046d6:	f003 fd17 	bl	8008108 <SCH_TIM_Start>
		}
	}
}
 80046da:	e7ff      	b.n	80046dc <status_led_powerup+0x88>
 80046dc:	bf00      	nop
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	20002730 	.word	0x20002730

080046e4 <status_led_normal>:

static void status_led_normal(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	af00      	add	r7, sp, #0
	// viết tạm
	LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 80046e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80046ec:	480d      	ldr	r0, [pc, #52]	@ (8004724 <status_led_normal+0x40>)
 80046ee:	f7ff ff69 	bl	80045c4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 80046f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80046f6:	480b      	ldr	r0, [pc, #44]	@ (8004724 <status_led_normal+0x40>)
 80046f8:	f7ff ff56 	bl	80045a8 <LL_GPIO_SetOutputPin>
	LL_mDelay(500);
 80046fc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004700:	f003 fca2 	bl	8008048 <LL_mDelay>
	LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8004704:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004708:	4806      	ldr	r0, [pc, #24]	@ (8004724 <status_led_normal+0x40>)
 800470a:	f7ff ff5b 	bl	80045c4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 800470e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004712:	4804      	ldr	r0, [pc, #16]	@ (8004724 <status_led_normal+0x40>)
 8004714:	f7ff ff48 	bl	80045a8 <LL_GPIO_SetOutputPin>
	LL_mDelay(500);
 8004718:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800471c:	f003 fc94 	bl	8008048 <LL_mDelay>
}
 8004720:	bf00      	nop
 8004722:	bd80      	pop	{r7, pc}
 8004724:	40020c00 	.word	0x40020c00

08004728 <status_led_error>:

static void status_led_error(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
	if (s_led_display_status.led_green && s_led_display_status.led_blue) {
 800472c:	4b20      	ldr	r3, [pc, #128]	@ (80047b0 <status_led_error+0x88>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d01f      	beq.n	800477a <status_led_error+0x52>
 800473a:	4b1d      	ldr	r3, [pc, #116]	@ (80047b0 <status_led_error+0x88>)
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b00      	cmp	r3, #0
 8004746:	d018      	beq.n	800477a <status_led_error+0x52>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 8004748:	2000      	movs	r0, #0
 800474a:	f003 fcf3 	bl	8008134 <SCH_TIM_HasCompleted>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d02b      	beq.n	80047ac <status_led_error+0x84>
			s_led_display_status.led_green = 0;
 8004754:	4a16      	ldr	r2, [pc, #88]	@ (80047b0 <status_led_error+0x88>)
 8004756:	7813      	ldrb	r3, [r2, #0]
 8004758:	f36f 0300 	bfc	r3, #0, #1
 800475c:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 0;
 800475e:	4a14      	ldr	r2, [pc, #80]	@ (80047b0 <status_led_error+0x88>)
 8004760:	7813      	ldrb	r3, [r2, #0]
 8004762:	f36f 0341 	bfc	r3, #1, #1
 8004766:	7013      	strb	r3, [r2, #0]
			status_led_led_green_off();
 8004768:	f000 f830 	bl	80047cc <status_led_led_green_off>
			status_led_led_blue_off();
 800476c:	f000 f846 	bl	80047fc <status_led_led_blue_off>
			SCH_TIM_Start(SCH_TIM_LED, ERROR_PERIOD);
 8004770:	2132      	movs	r1, #50	@ 0x32
 8004772:	2000      	movs	r0, #0
 8004774:	f003 fcc8 	bl	8008108 <SCH_TIM_Start>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 8004778:	e018      	b.n	80047ac <status_led_error+0x84>
		}
	} else {
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 800477a:	2000      	movs	r0, #0
 800477c:	f003 fcda 	bl	8008134 <SCH_TIM_HasCompleted>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d012      	beq.n	80047ac <status_led_error+0x84>
			s_led_display_status.led_green = 1;
 8004786:	4a0a      	ldr	r2, [pc, #40]	@ (80047b0 <status_led_error+0x88>)
 8004788:	7813      	ldrb	r3, [r2, #0]
 800478a:	f043 0301 	orr.w	r3, r3, #1
 800478e:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 1;
 8004790:	4a07      	ldr	r2, [pc, #28]	@ (80047b0 <status_led_error+0x88>)
 8004792:	7813      	ldrb	r3, [r2, #0]
 8004794:	f043 0302 	orr.w	r3, r3, #2
 8004798:	7013      	strb	r3, [r2, #0]
			status_led_led_green_on();
 800479a:	f000 f80b 	bl	80047b4 <status_led_led_green_on>
			status_led_led_blue_on();
 800479e:	f000 f821 	bl	80047e4 <status_led_led_blue_on>
			SCH_TIM_Start(SCH_TIM_LED, ERROR_PERIOD);
 80047a2:	2132      	movs	r1, #50	@ 0x32
 80047a4:	2000      	movs	r0, #0
 80047a6:	f003 fcaf 	bl	8008108 <SCH_TIM_Start>
		}
	}
}
 80047aa:	e7ff      	b.n	80047ac <status_led_error+0x84>
 80047ac:	bf00      	nop
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	20002730 	.word	0x20002730

080047b4 <status_led_led_green_on>:

static void status_led_led_green_on(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 80047b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80047bc:	4802      	ldr	r0, [pc, #8]	@ (80047c8 <status_led_led_green_on+0x14>)
 80047be:	f7ff fef3 	bl	80045a8 <LL_GPIO_SetOutputPin>
}
 80047c2:	bf00      	nop
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40020c00 	.word	0x40020c00

080047cc <status_led_led_green_off>:
static void status_led_led_green_off(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 80047d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80047d4:	4802      	ldr	r0, [pc, #8]	@ (80047e0 <status_led_led_green_off+0x14>)
 80047d6:	f7ff fef5 	bl	80045c4 <LL_GPIO_ResetOutputPin>
}
 80047da:	bf00      	nop
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	40020c00 	.word	0x40020c00

080047e4 <status_led_led_blue_on>:
static void status_led_led_blue_on(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 80047e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80047ec:	4802      	ldr	r0, [pc, #8]	@ (80047f8 <status_led_led_blue_on+0x14>)
 80047ee:	f7ff fedb 	bl	80045a8 <LL_GPIO_SetOutputPin>
}
 80047f2:	bf00      	nop
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	40020c00 	.word	0x40020c00

080047fc <status_led_led_blue_off>:
static void status_led_led_blue_off(void)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8004800:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004804:	4802      	ldr	r0, [pc, #8]	@ (8004810 <status_led_led_blue_off+0x14>)
 8004806:	f7ff fedd 	bl	80045c4 <LL_GPIO_ResetOutputPin>
}
 800480a:	bf00      	nop
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	40020c00 	.word	0x40020c00

08004814 <status_led_create_task>:

void	status_led_create_task(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_task_context.taskHandle, &s_task_context.taskProperty);
 8004818:	4902      	ldr	r1, [pc, #8]	@ (8004824 <status_led_create_task+0x10>)
 800481a:	4803      	ldr	r0, [pc, #12]	@ (8004828 <status_led_create_task+0x14>)
 800481c:	f003 fca0 	bl	8008160 <SCH_TASK_CreateTask>
}
 8004820:	bf00      	nop
 8004822:	bd80      	pop	{r7, pc}
 8004824:	20002204 	.word	0x20002204
 8004828:	20002200 	.word	0x20002200

0800482c <__NVIC_SetPriorityGrouping>:
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f003 0307 	and.w	r3, r3, #7
 800483a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800483c:	4b0c      	ldr	r3, [pc, #48]	@ (8004870 <__NVIC_SetPriorityGrouping+0x44>)
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004848:	4013      	ands	r3, r2
 800484a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004854:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004858:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800485c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800485e:	4a04      	ldr	r2, [pc, #16]	@ (8004870 <__NVIC_SetPriorityGrouping+0x44>)
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	60d3      	str	r3, [r2, #12]
}
 8004864:	bf00      	nop
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	e000ed00 	.word	0xe000ed00

08004874 <__NVIC_GetPriorityGrouping>:
{
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004878:	4b04      	ldr	r3, [pc, #16]	@ (800488c <__NVIC_GetPriorityGrouping+0x18>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	0a1b      	lsrs	r3, r3, #8
 800487e:	f003 0307 	and.w	r3, r3, #7
}
 8004882:	4618      	mov	r0, r3
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	e000ed00 	.word	0xe000ed00

08004890 <__NVIC_EnableIRQ>:
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	4603      	mov	r3, r0
 8004898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800489a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	db0b      	blt.n	80048ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048a2:	79fb      	ldrb	r3, [r7, #7]
 80048a4:	f003 021f 	and.w	r2, r3, #31
 80048a8:	4907      	ldr	r1, [pc, #28]	@ (80048c8 <__NVIC_EnableIRQ+0x38>)
 80048aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ae:	095b      	lsrs	r3, r3, #5
 80048b0:	2001      	movs	r0, #1
 80048b2:	fa00 f202 	lsl.w	r2, r0, r2
 80048b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	e000e100 	.word	0xe000e100

080048cc <__NVIC_SetPriority>:
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	4603      	mov	r3, r0
 80048d4:	6039      	str	r1, [r7, #0]
 80048d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	db0a      	blt.n	80048f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	490c      	ldr	r1, [pc, #48]	@ (8004918 <__NVIC_SetPriority+0x4c>)
 80048e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ea:	0112      	lsls	r2, r2, #4
 80048ec:	b2d2      	uxtb	r2, r2
 80048ee:	440b      	add	r3, r1
 80048f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80048f4:	e00a      	b.n	800490c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	b2da      	uxtb	r2, r3
 80048fa:	4908      	ldr	r1, [pc, #32]	@ (800491c <__NVIC_SetPriority+0x50>)
 80048fc:	79fb      	ldrb	r3, [r7, #7]
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	3b04      	subs	r3, #4
 8004904:	0112      	lsls	r2, r2, #4
 8004906:	b2d2      	uxtb	r2, r2
 8004908:	440b      	add	r3, r1
 800490a:	761a      	strb	r2, [r3, #24]
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	e000e100 	.word	0xe000e100
 800491c:	e000ed00 	.word	0xe000ed00

08004920 <NVIC_EncodePriority>:
{
 8004920:	b480      	push	{r7}
 8004922:	b089      	sub	sp, #36	@ 0x24
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f003 0307 	and.w	r3, r3, #7
 8004932:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	f1c3 0307 	rsb	r3, r3, #7
 800493a:	2b04      	cmp	r3, #4
 800493c:	bf28      	it	cs
 800493e:	2304      	movcs	r3, #4
 8004940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	3304      	adds	r3, #4
 8004946:	2b06      	cmp	r3, #6
 8004948:	d902      	bls.n	8004950 <NVIC_EncodePriority+0x30>
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	3b03      	subs	r3, #3
 800494e:	e000      	b.n	8004952 <NVIC_EncodePriority+0x32>
 8004950:	2300      	movs	r3, #0
 8004952:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004954:	f04f 32ff 	mov.w	r2, #4294967295
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	fa02 f303 	lsl.w	r3, r2, r3
 800495e:	43da      	mvns	r2, r3
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	401a      	ands	r2, r3
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004968:	f04f 31ff 	mov.w	r1, #4294967295
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	fa01 f303 	lsl.w	r3, r1, r3
 8004972:	43d9      	mvns	r1, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004978:	4313      	orrs	r3, r2
}
 800497a:	4618      	mov	r0, r3
 800497c:	3724      	adds	r7, #36	@ 0x24
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <LL_ADC_REG_SetSequencerRanks>:
{
 8004986:	b480      	push	{r7}
 8004988:	b089      	sub	sp, #36	@ 0x24
 800498a:	af00      	add	r7, sp, #0
 800498c:	60f8      	str	r0, [r7, #12]
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	332c      	adds	r3, #44	@ 0x2c
 8004996:	4619      	mov	r1, r3
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800499e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80049a2:	617a      	str	r2, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	fa92 f2a2 	rbit	r2, r2
 80049aa:	613a      	str	r2, [r7, #16]
  return result;
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	61ba      	str	r2, [r7, #24]
  if (value == 0U)
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	2a00      	cmp	r2, #0
 80049b4:	d101      	bne.n	80049ba <LL_ADC_REG_SetSequencerRanks+0x34>
    return 32U;
 80049b6:	2220      	movs	r2, #32
 80049b8:	e003      	b.n	80049c2 <LL_ADC_REG_SetSequencerRanks+0x3c>
  return __builtin_clz(value);
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	fab2 f282 	clz	r2, r2
 80049c0:	b2d2      	uxtb	r2, r2
 80049c2:	40d3      	lsrs	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	440b      	add	r3, r1
 80049c8:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	f003 031f 	and.w	r3, r3, #31
 80049d4:	211f      	movs	r1, #31
 80049d6:	fa01 f303 	lsl.w	r3, r1, r3
 80049da:	43db      	mvns	r3, r3
 80049dc:	401a      	ands	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f003 011f 	and.w	r1, r3, #31
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f003 031f 	and.w	r3, r3, #31
 80049ea:	fa01 f303 	lsl.w	r3, r1, r3
 80049ee:	431a      	orrs	r2, r3
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	601a      	str	r2, [r3, #0]
}
 80049f4:	bf00      	nop
 80049f6:	3724      	adds	r7, #36	@ 0x24
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <LL_ADC_REG_SetFlagEndOfConversion>:
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	431a      	orrs	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	609a      	str	r2, [r3, #8]
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <LL_ADC_SetChannelSamplingTime>:
{
 8004a26:	b480      	push	{r7}
 8004a28:	b08f      	sub	sp, #60	@ 0x3c
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	60f8      	str	r0, [r7, #12]
 8004a2e:	60b9      	str	r1, [r7, #8]
 8004a30:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	330c      	adds	r3, #12
 8004a36:	4619      	mov	r1, r3
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a3e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a42:	617a      	str	r2, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	fa92 f2a2 	rbit	r2, r2
 8004a4a:	613a      	str	r2, [r7, #16]
  return result;
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	61ba      	str	r2, [r7, #24]
  if (value == 0U)
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	2a00      	cmp	r2, #0
 8004a54:	d101      	bne.n	8004a5a <LL_ADC_SetChannelSamplingTime+0x34>
    return 32U;
 8004a56:	2220      	movs	r2, #32
 8004a58:	e003      	b.n	8004a62 <LL_ADC_SetChannelSamplingTime+0x3c>
  return __builtin_clz(value);
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	fab2 f282 	clz	r2, r2
 8004a60:	b2d2      	uxtb	r2, r2
 8004a62:	40d3      	lsrs	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	440b      	add	r3, r1
 8004a68:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(*preg,
 8004a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8004a74:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8004a78:	6239      	str	r1, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7a:	6a39      	ldr	r1, [r7, #32]
 8004a7c:	fa91 f1a1 	rbit	r1, r1
 8004a80:	61f9      	str	r1, [r7, #28]
  return result;
 8004a82:	69f9      	ldr	r1, [r7, #28]
 8004a84:	6279      	str	r1, [r7, #36]	@ 0x24
  if (value == 0U)
 8004a86:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a88:	2900      	cmp	r1, #0
 8004a8a:	d101      	bne.n	8004a90 <LL_ADC_SetChannelSamplingTime+0x6a>
    return 32U;
 8004a8c:	2120      	movs	r1, #32
 8004a8e:	e003      	b.n	8004a98 <LL_ADC_SetChannelSamplingTime+0x72>
  return __builtin_clz(value);
 8004a90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a92:	fab1 f181 	clz	r1, r1
 8004a96:	b2c9      	uxtb	r1, r1
 8004a98:	40cb      	lsrs	r3, r1
 8004a9a:	2107      	movs	r1, #7
 8004a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa0:	43db      	mvns	r3, r3
 8004aa2:	401a      	ands	r2, r3
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8004aaa:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8004aae:	62f9      	str	r1, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ab2:	fa91 f1a1 	rbit	r1, r1
 8004ab6:	62b9      	str	r1, [r7, #40]	@ 0x28
  return result;
 8004ab8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004aba:	6339      	str	r1, [r7, #48]	@ 0x30
  if (value == 0U)
 8004abc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004abe:	2900      	cmp	r1, #0
 8004ac0:	d101      	bne.n	8004ac6 <LL_ADC_SetChannelSamplingTime+0xa0>
    return 32U;
 8004ac2:	2120      	movs	r1, #32
 8004ac4:	e003      	b.n	8004ace <LL_ADC_SetChannelSamplingTime+0xa8>
  return __builtin_clz(value);
 8004ac6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004ac8:	fab1 f181 	clz	r1, r1
 8004acc:	b2c9      	uxtb	r1, r1
 8004ace:	40cb      	lsrs	r3, r1
 8004ad0:	6879      	ldr	r1, [r7, #4]
 8004ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ada:	601a      	str	r2, [r3, #0]
}
 8004adc:	bf00      	nop
 8004ade:	373c      	adds	r7, #60	@ 0x3c
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <LL_DMA_SetDataTransferDirection>:
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8004af4:	4a0d      	ldr	r2, [pc, #52]	@ (8004b2c <LL_DMA_SetDataTransferDirection+0x44>)
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	4413      	add	r3, r2
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	461a      	mov	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	4413      	add	r3, r2
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004b08:	4908      	ldr	r1, [pc, #32]	@ (8004b2c <LL_DMA_SetDataTransferDirection+0x44>)
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	440b      	add	r3, r1
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	4619      	mov	r1, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	440b      	add	r3, r1
 8004b16:	4619      	mov	r1, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	600b      	str	r3, [r1, #0]
}
 8004b1e:	bf00      	nop
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	08009c88 	.word	0x08009c88

08004b30 <LL_DMA_SetMode>:
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8004b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8004b74 <LL_DMA_SetMode+0x44>)
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	4413      	add	r3, r2
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	461a      	mov	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	4413      	add	r3, r2
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 8004b50:	4908      	ldr	r1, [pc, #32]	@ (8004b74 <LL_DMA_SetMode+0x44>)
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	440b      	add	r3, r1
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	4619      	mov	r1, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	440b      	add	r3, r1
 8004b5e:	4619      	mov	r1, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	600b      	str	r3, [r1, #0]
}
 8004b66:	bf00      	nop
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	08009c88 	.word	0x08009c88

08004b78 <LL_DMA_SetPeriphIncMode>:
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8004b84:	4a0d      	ldr	r2, [pc, #52]	@ (8004bbc <LL_DMA_SetPeriphIncMode+0x44>)
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	4413      	add	r3, r2
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4413      	add	r3, r2
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004b98:	4908      	ldr	r1, [pc, #32]	@ (8004bbc <LL_DMA_SetPeriphIncMode+0x44>)
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	440b      	add	r3, r1
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	440b      	add	r3, r1
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	600b      	str	r3, [r1, #0]
}
 8004bae:	bf00      	nop
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	08009c88 	.word	0x08009c88

08004bc0 <LL_DMA_SetMemoryIncMode>:
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8004bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8004c04 <LL_DMA_SetMemoryIncMode+0x44>)
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	4413      	add	r3, r2
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004be0:	4908      	ldr	r1, [pc, #32]	@ (8004c04 <LL_DMA_SetMemoryIncMode+0x44>)
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	440b      	add	r3, r1
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	4619      	mov	r1, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	440b      	add	r3, r1
 8004bee:	4619      	mov	r1, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	600b      	str	r3, [r1, #0]
}
 8004bf6:	bf00      	nop
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	08009c88 	.word	0x08009c88

08004c08 <LL_DMA_SetPeriphSize>:
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8004c14:	4a0d      	ldr	r2, [pc, #52]	@ (8004c4c <LL_DMA_SetPeriphSize+0x44>)
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	4413      	add	r3, r2
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	4413      	add	r3, r2
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8004c28:	4908      	ldr	r1, [pc, #32]	@ (8004c4c <LL_DMA_SetPeriphSize+0x44>)
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	440b      	add	r3, r1
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	4619      	mov	r1, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	440b      	add	r3, r1
 8004c36:	4619      	mov	r1, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	600b      	str	r3, [r1, #0]
}
 8004c3e:	bf00      	nop
 8004c40:	3714      	adds	r7, #20
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	08009c88 	.word	0x08009c88

08004c50 <LL_DMA_SetMemorySize>:
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8004c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8004c94 <LL_DMA_SetMemorySize+0x44>)
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	4413      	add	r3, r2
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	461a      	mov	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4413      	add	r3, r2
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8004c70:	4908      	ldr	r1, [pc, #32]	@ (8004c94 <LL_DMA_SetMemorySize+0x44>)
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	440b      	add	r3, r1
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	4619      	mov	r1, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	440b      	add	r3, r1
 8004c7e:	4619      	mov	r1, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	600b      	str	r3, [r1, #0]
}
 8004c86:	bf00      	nop
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	08009c88 	.word	0x08009c88

08004c98 <LL_DMA_SetStreamPriorityLevel>:
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8004ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8004cdc <LL_DMA_SetStreamPriorityLevel+0x44>)
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	4413      	add	r3, r2
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	461a      	mov	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004cb8:	4908      	ldr	r1, [pc, #32]	@ (8004cdc <LL_DMA_SetStreamPriorityLevel+0x44>)
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	440b      	add	r3, r1
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	440b      	add	r3, r1
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	600b      	str	r3, [r1, #0]
}
 8004cce:	bf00      	nop
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	08009c88 	.word	0x08009c88

08004ce0 <LL_DMA_SetChannelSelection>:
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8004cec:	4a0d      	ldr	r2, [pc, #52]	@ (8004d24 <LL_DMA_SetChannelSelection+0x44>)
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8004d00:	4908      	ldr	r1, [pc, #32]	@ (8004d24 <LL_DMA_SetChannelSelection+0x44>)
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	440b      	add	r3, r1
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	4619      	mov	r1, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	440b      	add	r3, r1
 8004d0e:	4619      	mov	r1, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	600b      	str	r3, [r1, #0]
}
 8004d16:	bf00      	nop
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	08009c88 	.word	0x08009c88

08004d28 <LL_DMA_DisableFifoMode>:
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8004d32:	4a0c      	ldr	r2, [pc, #48]	@ (8004d64 <LL_DMA_DisableFifoMode+0x3c>)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	4413      	add	r3, r2
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4413      	add	r3, r2
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	4908      	ldr	r1, [pc, #32]	@ (8004d64 <LL_DMA_DisableFifoMode+0x3c>)
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	440a      	add	r2, r1
 8004d48:	7812      	ldrb	r2, [r2, #0]
 8004d4a:	4611      	mov	r1, r2
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	440a      	add	r2, r1
 8004d50:	f023 0304 	bic.w	r3, r3, #4
 8004d54:	6153      	str	r3, [r2, #20]
}
 8004d56:	bf00      	nop
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	08009c88 	.word	0x08009c88

08004d68 <LL_I2C_Enable>:
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f043 0201 	orr.w	r2, r3, #1
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	601a      	str	r2, [r3, #0]
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <LL_I2C_EnableClockStretching>:
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	601a      	str	r2, [r3, #0]
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <LL_I2C_DisableGeneralCall>:
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	601a      	str	r2, [r3, #0]
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <LL_I2C_SetOwnAddress2>:
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f023 02fe 	bic.w	r2, r3, #254	@ 0xfe
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	60da      	str	r2, [r3, #12]
}
 8004de2:	bf00      	nop
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <LL_I2C_DisableOwnAddress2>:
{
 8004dee:	b480      	push	{r7}
 8004df0:	b083      	sub	sp, #12
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	f023 0201 	bic.w	r2, r3, #1
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	60da      	str	r2, [r3, #12]
}
 8004e02:	bf00      	nop
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <LL_I2C_EnableIT_EVT>:
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b083      	sub	sp, #12
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	605a      	str	r2, [r3, #4]
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
	...

08004e30 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004e34:	4b05      	ldr	r3, [pc, #20]	@ (8004e4c <LL_RCC_HSE_Enable+0x1c>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a04      	ldr	r2, [pc, #16]	@ (8004e4c <LL_RCC_HSE_Enable+0x1c>)
 8004e3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e3e:	6013      	str	r3, [r2, #0]
}
 8004e40:	bf00      	nop
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	40023800 	.word	0x40023800

08004e50 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8004e50:	b480      	push	{r7}
 8004e52:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8004e54:	4b07      	ldr	r3, [pc, #28]	@ (8004e74 <LL_RCC_HSE_IsReady+0x24>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e60:	bf0c      	ite	eq
 8004e62:	2301      	moveq	r3, #1
 8004e64:	2300      	movne	r3, #0
 8004e66:	b2db      	uxtb	r3, r3
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	40023800 	.word	0x40023800

08004e78 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004e80:	4b06      	ldr	r3, [pc, #24]	@ (8004e9c <LL_RCC_SetSysClkSource+0x24>)
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f023 0203 	bic.w	r2, r3, #3
 8004e88:	4904      	ldr	r1, [pc, #16]	@ (8004e9c <LL_RCC_SetSysClkSource+0x24>)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	608b      	str	r3, [r1, #8]
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	40023800 	.word	0x40023800

08004ea0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004ea4:	4b04      	ldr	r3, [pc, #16]	@ (8004eb8 <LL_RCC_GetSysClkSource+0x18>)
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f003 030c 	and.w	r3, r3, #12
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40023800 	.word	0x40023800

08004ebc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004ec4:	4b06      	ldr	r3, [pc, #24]	@ (8004ee0 <LL_RCC_SetAHBPrescaler+0x24>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ecc:	4904      	ldr	r1, [pc, #16]	@ (8004ee0 <LL_RCC_SetAHBPrescaler+0x24>)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	608b      	str	r3, [r1, #8]
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	40023800 	.word	0x40023800

08004ee4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004eec:	4b06      	ldr	r3, [pc, #24]	@ (8004f08 <LL_RCC_SetAPB1Prescaler+0x24>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ef4:	4904      	ldr	r1, [pc, #16]	@ (8004f08 <LL_RCC_SetAPB1Prescaler+0x24>)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	608b      	str	r3, [r1, #8]
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	40023800 	.word	0x40023800

08004f0c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004f14:	4b06      	ldr	r3, [pc, #24]	@ (8004f30 <LL_RCC_SetAPB2Prescaler+0x24>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f1c:	4904      	ldr	r1, [pc, #16]	@ (8004f30 <LL_RCC_SetAPB2Prescaler+0x24>)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	608b      	str	r3, [r1, #8]
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr
 8004f30:	40023800 	.word	0x40023800

08004f34 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004f3c:	4b08      	ldr	r3, [pc, #32]	@ (8004f60 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004f3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f40:	4907      	ldr	r1, [pc, #28]	@ (8004f60 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004f48:	4b05      	ldr	r3, [pc, #20]	@ (8004f60 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004f4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004f52:	68fb      	ldr	r3, [r7, #12]
}
 8004f54:	bf00      	nop
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	40023800 	.word	0x40023800

08004f64 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8004f6c:	4b08      	ldr	r3, [pc, #32]	@ (8004f90 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004f6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f70:	4907      	ldr	r1, [pc, #28]	@ (8004f90 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004f78:	4b05      	ldr	r3, [pc, #20]	@ (8004f90 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004f7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004f82:	68fb      	ldr	r3, [r7, #12]
}
 8004f84:	bf00      	nop
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	40023800 	.word	0x40023800

08004f94 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004f9c:	4b08      	ldr	r3, [pc, #32]	@ (8004fc0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004f9e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fa0:	4907      	ldr	r1, [pc, #28]	@ (8004fc0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004fa8:	4b05      	ldr	r3, [pc, #20]	@ (8004fc0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004faa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4013      	ands	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
}
 8004fb4:	bf00      	nop
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	40023800 	.word	0x40023800

08004fc4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8004fcc:	4b06      	ldr	r3, [pc, #24]	@ (8004fe8 <LL_FLASH_SetLatency+0x24>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f023 0207 	bic.w	r2, r3, #7
 8004fd4:	4904      	ldr	r1, [pc, #16]	@ (8004fe8 <LL_FLASH_SetLatency+0x24>)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	600b      	str	r3, [r1, #0]
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	40023c00 	.word	0x40023c00

08004fec <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8004ff0:	4b04      	ldr	r3, [pc, #16]	@ (8005004 <LL_FLASH_GetLatency+0x18>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0307 	and.w	r3, r3, #7
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	40023c00 	.word	0x40023c00

08005008 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8005010:	4b06      	ldr	r3, [pc, #24]	@ (800502c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005018:	4904      	ldr	r1, [pc, #16]	@ (800502c <LL_PWR_SetRegulVoltageScaling+0x24>)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4313      	orrs	r3, r2
 800501e:	600b      	str	r3, [r1, #0]
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	40007000 	.word	0x40007000

08005030 <LL_SPI_Enable>:
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	601a      	str	r2, [r3, #0]
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <LL_SPI_SetStandard>:
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f023 0210 	bic.w	r2, r3, #16
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	431a      	orrs	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	605a      	str	r2, [r3, #4]
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <LL_TIM_DisableARRPreload>:
{
 8005076:	b480      	push	{r7}
 8005078:	b083      	sub	sp, #12
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	601a      	str	r2, [r3, #0]
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
	...

08005098 <LL_TIM_OC_DisableFast>:
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d01c      	beq.n	80050e2 <LL_TIM_OC_DisableFast+0x4a>
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	2b04      	cmp	r3, #4
 80050ac:	d017      	beq.n	80050de <LL_TIM_OC_DisableFast+0x46>
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b10      	cmp	r3, #16
 80050b2:	d012      	beq.n	80050da <LL_TIM_OC_DisableFast+0x42>
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	2b40      	cmp	r3, #64	@ 0x40
 80050b8:	d00d      	beq.n	80050d6 <LL_TIM_OC_DisableFast+0x3e>
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050c0:	d007      	beq.n	80050d2 <LL_TIM_OC_DisableFast+0x3a>
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050c8:	d101      	bne.n	80050ce <LL_TIM_OC_DisableFast+0x36>
 80050ca:	2305      	movs	r3, #5
 80050cc:	e00a      	b.n	80050e4 <LL_TIM_OC_DisableFast+0x4c>
 80050ce:	2306      	movs	r3, #6
 80050d0:	e008      	b.n	80050e4 <LL_TIM_OC_DisableFast+0x4c>
 80050d2:	2304      	movs	r3, #4
 80050d4:	e006      	b.n	80050e4 <LL_TIM_OC_DisableFast+0x4c>
 80050d6:	2303      	movs	r3, #3
 80050d8:	e004      	b.n	80050e4 <LL_TIM_OC_DisableFast+0x4c>
 80050da:	2302      	movs	r3, #2
 80050dc:	e002      	b.n	80050e4 <LL_TIM_OC_DisableFast+0x4c>
 80050de:	2301      	movs	r3, #1
 80050e0:	e000      	b.n	80050e4 <LL_TIM_OC_DisableFast+0x4c>
 80050e2:	2300      	movs	r3, #0
 80050e4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	3318      	adds	r3, #24
 80050ea:	4619      	mov	r1, r3
 80050ec:	7bfb      	ldrb	r3, [r7, #15]
 80050ee:	4a0b      	ldr	r2, [pc, #44]	@ (800511c <LL_TIM_OC_DisableFast+0x84>)
 80050f0:	5cd3      	ldrb	r3, [r2, r3]
 80050f2:	440b      	add	r3, r1
 80050f4:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	7bfb      	ldrb	r3, [r7, #15]
 80050fc:	4908      	ldr	r1, [pc, #32]	@ (8005120 <LL_TIM_OC_DisableFast+0x88>)
 80050fe:	5ccb      	ldrb	r3, [r1, r3]
 8005100:	4619      	mov	r1, r3
 8005102:	2304      	movs	r3, #4
 8005104:	408b      	lsls	r3, r1
 8005106:	43db      	mvns	r3, r3
 8005108:	401a      	ands	r2, r3
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	601a      	str	r2, [r3, #0]
}
 800510e:	bf00      	nop
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	08009c90 	.word	0x08009c90
 8005120:	08009c98 	.word	0x08009c98

08005124 <LL_TIM_OC_EnablePreload>:
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d01c      	beq.n	800516e <LL_TIM_OC_EnablePreload+0x4a>
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	2b04      	cmp	r3, #4
 8005138:	d017      	beq.n	800516a <LL_TIM_OC_EnablePreload+0x46>
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2b10      	cmp	r3, #16
 800513e:	d012      	beq.n	8005166 <LL_TIM_OC_EnablePreload+0x42>
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	2b40      	cmp	r3, #64	@ 0x40
 8005144:	d00d      	beq.n	8005162 <LL_TIM_OC_EnablePreload+0x3e>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800514c:	d007      	beq.n	800515e <LL_TIM_OC_EnablePreload+0x3a>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005154:	d101      	bne.n	800515a <LL_TIM_OC_EnablePreload+0x36>
 8005156:	2305      	movs	r3, #5
 8005158:	e00a      	b.n	8005170 <LL_TIM_OC_EnablePreload+0x4c>
 800515a:	2306      	movs	r3, #6
 800515c:	e008      	b.n	8005170 <LL_TIM_OC_EnablePreload+0x4c>
 800515e:	2304      	movs	r3, #4
 8005160:	e006      	b.n	8005170 <LL_TIM_OC_EnablePreload+0x4c>
 8005162:	2303      	movs	r3, #3
 8005164:	e004      	b.n	8005170 <LL_TIM_OC_EnablePreload+0x4c>
 8005166:	2302      	movs	r3, #2
 8005168:	e002      	b.n	8005170 <LL_TIM_OC_EnablePreload+0x4c>
 800516a:	2301      	movs	r3, #1
 800516c:	e000      	b.n	8005170 <LL_TIM_OC_EnablePreload+0x4c>
 800516e:	2300      	movs	r3, #0
 8005170:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	3318      	adds	r3, #24
 8005176:	4619      	mov	r1, r3
 8005178:	7bfb      	ldrb	r3, [r7, #15]
 800517a:	4a0a      	ldr	r2, [pc, #40]	@ (80051a4 <LL_TIM_OC_EnablePreload+0x80>)
 800517c:	5cd3      	ldrb	r3, [r2, r3]
 800517e:	440b      	add	r3, r1
 8005180:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	7bfb      	ldrb	r3, [r7, #15]
 8005188:	4907      	ldr	r1, [pc, #28]	@ (80051a8 <LL_TIM_OC_EnablePreload+0x84>)
 800518a:	5ccb      	ldrb	r3, [r1, r3]
 800518c:	4619      	mov	r1, r3
 800518e:	2308      	movs	r3, #8
 8005190:	408b      	lsls	r3, r1
 8005192:	431a      	orrs	r2, r3
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	601a      	str	r2, [r3, #0]
}
 8005198:	bf00      	nop
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	08009c90 	.word	0x08009c90
 80051a8:	08009c98 	.word	0x08009c98

080051ac <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051be:	f023 0307 	bic.w	r3, r3, #7
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	431a      	orrs	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	609a      	str	r2, [r3, #8]
}
 80051ca:	bf00      	nop
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b083      	sub	sp, #12
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	431a      	orrs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	605a      	str	r2, [r3, #4]
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	609a      	str	r2, [r3, #8]
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <LL_USART_Enable>:
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	60da      	str	r2, [r3, #12]
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <LL_USART_ConfigAsyncMode>:
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	615a      	str	r2, [r3, #20]
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <LL_GPIO_SetOutputPin>:
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	619a      	str	r2, [r3, #24]
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <LL_GPIO_ResetOutputPin>:
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	041a      	lsls	r2, r3, #16
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	619a      	str	r2, [r3, #24]
}
 8005296:	bf00      	nop
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
	...

080052a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80052a8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80052ac:	f7ff fe72 	bl	8004f94 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80052b0:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80052b4:	f7ff fe56 	bl	8004f64 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052b8:	2003      	movs	r0, #3
 80052ba:	f7ff fab7 	bl	800482c <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80052be:	f7ff fad9 	bl	8004874 <__NVIC_GetPriorityGrouping>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2200      	movs	r2, #0
 80052c6:	210f      	movs	r1, #15
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7ff fb29 	bl	8004920 <NVIC_EncodePriority>
 80052ce:	4603      	mov	r3, r0
 80052d0:	4619      	mov	r1, r3
 80052d2:	f04f 30ff 	mov.w	r0, #4294967295
 80052d6:	f7ff faf9 	bl	80048cc <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80052da:	f000 f845 	bl	8005368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80052de:	f000 fccf 	bl	8005c80 <MX_GPIO_Init>
  MX_DMA_Init();
 80052e2:	f000 fcb5 	bl	8005c50 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80052e6:	f000 fc51 	bl	8005b8c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80052ea:	f000 fa29 	bl	8005740 <MX_SPI1_Init>
  MX_ADC1_Init();
 80052ee:	f000 f86f 	bl	80053d0 <MX_ADC1_Init>
  MX_TIM1_Init();
 80052f2:	f000 fa7b 	bl	80057ec <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80052f6:	f000 fbe9 	bl	8005acc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80052fa:	f000 f949 	bl	8005590 <MX_I2C1_Init>
  MX_TIM3_Init();
 80052fe:	f000 fb41 	bl	8005984 <MX_TIM3_Init>
  MX_I2C2_Init();
 8005302:	f000 f99f 	bl	8005644 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
    WDT_init();
 8005306:	f001 fa33 	bl	8006770 <WDT_init>
    status_led_init();
 800530a:	f7ff f96b 	bl	80045e4 <status_led_init>
    command_init();
 800530e:	f7fc fb85 	bl	8001a1c <command_init>
    NTC_DMA_ADC_init();
 8005312:	f7ff f8b7 	bl	8004484 <NTC_DMA_ADC_init>
    temperature_init();
 8005316:	f001 f801 	bl	800631c <temperature_init>
    copc_init();
 800531a:	f7fd fbcf 	bl	8002abc <copc_init>


    SCH_Initialize();
 800531e:	f002 fec9 	bl	80080b4 <SCH_Initialize>
    WDT_create_task();
 8005322:	f001 fa31 	bl	8006788 <WDT_create_task>
    status_led_create_task();
 8005326:	f7ff fa75 	bl	8004814 <status_led_create_task>
    command_create_task();
 800532a:	f7fd fadd 	bl	80028e8 <command_create_task>
    temperature_create_task();
 800532e:	f000 fffb 	bl	8006328 <temperature_create_task>
    copc_create_task();
 8005332:	f7fd fbe1 	bl	8002af8 <copc_create_task>
    //sensor_i2c_create_task();

    SCH_StartSchedular();
 8005336:	f002 ffe7 	bl	8008308 <SCH_StartSchedular>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    register_init();
 800533a:	f7fb fd69 	bl	8000e10 <register_init>
    i2c_slave_init(I2C2);
 800533e:	4807      	ldr	r0, [pc, #28]	@ (800535c <main+0xb8>)
 8005340:	f7fb fbda 	bl	8000af8 <i2c_slave_init>

    uint8_t data;
    uint8_t reg_value;
	LL_GPIO_SetOutputPin(SENSOR1_EN_GPIO_Port, SENSOR1_EN_Pin);
 8005344:	2104      	movs	r1, #4
 8005346:	4806      	ldr	r0, [pc, #24]	@ (8005360 <main+0xbc>)
 8005348:	f7ff ff8e 	bl	8005268 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(SENSOR2_EN_GPIO_Port, SENSOR2_EN_Pin);
 800534c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005350:	4804      	ldr	r0, [pc, #16]	@ (8005364 <main+0xc0>)
 8005352:	f7ff ff89 	bl	8005268 <LL_GPIO_SetOutputPin>
  while (1)
  {
	SCH_HandleScheduledTask();
 8005356:	f002 ffdd 	bl	8008314 <SCH_HandleScheduledTask>
 800535a:	e7fc      	b.n	8005356 <main+0xb2>
 800535c:	40005800 	.word	0x40005800
 8005360:	40020400 	.word	0x40020400
 8005364:	40021000 	.word	0x40021000

08005368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800536c:	2000      	movs	r0, #0
 800536e:	f7ff fe29 	bl	8004fc4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8005372:	bf00      	nop
 8005374:	f7ff fe3a 	bl	8004fec <LL_FLASH_GetLatency>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1fa      	bne.n	8005374 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800537e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8005382:	f7ff fe41 	bl	8005008 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8005386:	f7ff fd53 	bl	8004e30 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800538a:	bf00      	nop
 800538c:	f7ff fd60 	bl	8004e50 <LL_RCC_HSE_IsReady>
 8005390:	4603      	mov	r3, r0
 8005392:	2b01      	cmp	r3, #1
 8005394:	d1fa      	bne.n	800538c <SystemClock_Config+0x24>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8005396:	2000      	movs	r0, #0
 8005398:	f7ff fd90 	bl	8004ebc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800539c:	2000      	movs	r0, #0
 800539e:	f7ff fda1 	bl	8004ee4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80053a2:	2000      	movs	r0, #0
 80053a4:	f7ff fdb2 	bl	8004f0c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 80053a8:	2001      	movs	r0, #1
 80053aa:	f7ff fd65 	bl	8004e78 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE)
 80053ae:	bf00      	nop
 80053b0:	f7ff fd76 	bl	8004ea0 <LL_RCC_GetSysClkSource>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b04      	cmp	r3, #4
 80053b8:	d1fa      	bne.n	80053b0 <SystemClock_Config+0x48>
  {

  }
  LL_Init1msTick(8000000);
 80053ba:	4804      	ldr	r0, [pc, #16]	@ (80053cc <SystemClock_Config+0x64>)
 80053bc:	f002 fe36 	bl	800802c <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 80053c0:	4802      	ldr	r0, [pc, #8]	@ (80053cc <SystemClock_Config+0x64>)
 80053c2:	f002 fe67 	bl	8008094 <LL_SetSystemCoreClock>
}
 80053c6:	bf00      	nop
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	007a1200 	.word	0x007a1200

080053d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b092      	sub	sp, #72	@ 0x48
 80053d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80053d6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80053da:	2200      	movs	r2, #0
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	605a      	str	r2, [r3, #4]
 80053e0:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80053e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80053e6:	2200      	movs	r2, #0
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	605a      	str	r2, [r3, #4]
 80053ec:	609a      	str	r2, [r3, #8]
 80053ee:	60da      	str	r2, [r3, #12]
 80053f0:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80053f2:	f107 0318 	add.w	r3, r7, #24
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	605a      	str	r2, [r3, #4]
 80053fc:	609a      	str	r2, [r3, #8]
 80053fe:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005400:	463b      	mov	r3, r7
 8005402:	2200      	movs	r2, #0
 8005404:	601a      	str	r2, [r3, #0]
 8005406:	605a      	str	r2, [r3, #4]
 8005408:	609a      	str	r2, [r3, #8]
 800540a:	60da      	str	r2, [r3, #12]
 800540c:	611a      	str	r2, [r3, #16]
 800540e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8005410:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005414:	f7ff fdbe 	bl	8004f94 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8005418:	2004      	movs	r0, #4
 800541a:	f7ff fd8b 	bl	8004f34 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800541e:	2002      	movs	r0, #2
 8005420:	f7ff fd88 	bl	8004f34 <LL_AHB1_GRP1_EnableClock>
  PC4   ------> ADC1_IN14
  PC5   ------> ADC1_IN15
  PB0   ------> ADC1_IN8
  PB1   ------> ADC1_IN9
  */
  GPIO_InitStruct.Pin = ADC_TEMP1_Pin|ADC_TEMP2_Pin;
 8005424:	2330      	movs	r3, #48	@ 0x30
 8005426:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8005428:	2303      	movs	r3, #3
 800542a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800542c:	2300      	movs	r3, #0
 800542e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005430:	463b      	mov	r3, r7
 8005432:	4619      	mov	r1, r3
 8005434:	484d      	ldr	r0, [pc, #308]	@ (800556c <MX_ADC1_Init+0x19c>)
 8005436:	f001 fc0a 	bl	8006c4e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ADC_TEMP3_Pin|ADC_TEMP4_Pin;
 800543a:	2303      	movs	r3, #3
 800543c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800543e:	2303      	movs	r3, #3
 8005440:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005442:	2300      	movs	r3, #0
 8005444:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005446:	463b      	mov	r3, r7
 8005448:	4619      	mov	r1, r3
 800544a:	4849      	ldr	r0, [pc, #292]	@ (8005570 <MX_ADC1_Init+0x1a0>)
 800544c:	f001 fbff 	bl	8006c4e <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_0, LL_DMA_CHANNEL_0);
 8005450:	2200      	movs	r2, #0
 8005452:	2100      	movs	r1, #0
 8005454:	4847      	ldr	r0, [pc, #284]	@ (8005574 <MX_ADC1_Init+0x1a4>)
 8005456:	f7ff fc43 	bl	8004ce0 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800545a:	2200      	movs	r2, #0
 800545c:	2100      	movs	r1, #0
 800545e:	4845      	ldr	r0, [pc, #276]	@ (8005574 <MX_ADC1_Init+0x1a4>)
 8005460:	f7ff fb42 	bl	8004ae8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_0, LL_DMA_PRIORITY_MEDIUM);
 8005464:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005468:	2100      	movs	r1, #0
 800546a:	4842      	ldr	r0, [pc, #264]	@ (8005574 <MX_ADC1_Init+0x1a4>)
 800546c:	f7ff fc14 	bl	8004c98 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
 8005470:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005474:	2100      	movs	r1, #0
 8005476:	483f      	ldr	r0, [pc, #252]	@ (8005574 <MX_ADC1_Init+0x1a4>)
 8005478:	f7ff fb5a 	bl	8004b30 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 800547c:	2200      	movs	r2, #0
 800547e:	2100      	movs	r1, #0
 8005480:	483c      	ldr	r0, [pc, #240]	@ (8005574 <MX_ADC1_Init+0x1a4>)
 8005482:	f7ff fb79 	bl	8004b78 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 8005486:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800548a:	2100      	movs	r1, #0
 800548c:	4839      	ldr	r0, [pc, #228]	@ (8005574 <MX_ADC1_Init+0x1a4>)
 800548e:	f7ff fb97 	bl	8004bc0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_HALFWORD);
 8005492:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005496:	2100      	movs	r1, #0
 8005498:	4836      	ldr	r0, [pc, #216]	@ (8005574 <MX_ADC1_Init+0x1a4>)
 800549a:	f7ff fbb5 	bl	8004c08 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_HALFWORD);
 800549e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80054a2:	2100      	movs	r1, #0
 80054a4:	4833      	ldr	r0, [pc, #204]	@ (8005574 <MX_ADC1_Init+0x1a4>)
 80054a6:	f7ff fbd3 	bl	8004c50 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_0);
 80054aa:	2100      	movs	r1, #0
 80054ac:	4831      	ldr	r0, [pc, #196]	@ (8005574 <MX_ADC1_Init+0x1a4>)
 80054ae:	f7ff fc3b 	bl	8004d28 <LL_DMA_DisableFifoMode>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80054b2:	2300      	movs	r3, #0
 80054b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80054b6:	2300      	movs	r3, #0
 80054b8:	643b      	str	r3, [r7, #64]	@ 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 80054ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80054be:	647b      	str	r3, [r7, #68]	@ 0x44
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80054c0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80054c4:	4619      	mov	r1, r3
 80054c6:	482c      	ldr	r0, [pc, #176]	@ (8005578 <MX_ADC1_Init+0x1a8>)
 80054c8:	f001 fa08 	bl	80068dc <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80054cc:	2300      	movs	r3, #0
 80054ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS;
 80054d0:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 80054d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80054d6:	2300      	movs	r3, #0
 80054d8:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 80054da:	2302      	movs	r3, #2
 80054dc:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 80054de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80054e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80054e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80054e8:	4619      	mov	r1, r3
 80054ea:	4823      	ldr	r0, [pc, #140]	@ (8005578 <MX_ADC1_Init+0x1a8>)
 80054ec:	f001 fa22 	bl	8006934 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV);
 80054f0:	2100      	movs	r1, #0
 80054f2:	4821      	ldr	r0, [pc, #132]	@ (8005578 <MX_ADC1_Init+0x1a8>)
 80054f4:	f7ff fa84 	bl	8004a00 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 80054f8:	2300      	movs	r3, #0
 80054fa:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80054fc:	2300      	movs	r3, #0
 80054fe:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8005500:	f107 0318 	add.w	r3, r7, #24
 8005504:	4619      	mov	r1, r3
 8005506:	481d      	ldr	r0, [pc, #116]	@ (800557c <MX_ADC1_Init+0x1ac>)
 8005508:	f001 f9a0 	bl	800684c <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_14);
 800550c:	4a1c      	ldr	r2, [pc, #112]	@ (8005580 <MX_ADC1_Init+0x1b0>)
 800550e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005512:	4819      	ldr	r0, [pc, #100]	@ (8005578 <MX_ADC1_Init+0x1a8>)
 8005514:	f7ff fa37 	bl	8004986 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_14, LL_ADC_SAMPLINGTIME_15CYCLES);
 8005518:	2201      	movs	r2, #1
 800551a:	4919      	ldr	r1, [pc, #100]	@ (8005580 <MX_ADC1_Init+0x1b0>)
 800551c:	4816      	ldr	r0, [pc, #88]	@ (8005578 <MX_ADC1_Init+0x1a8>)
 800551e:	f7ff fa82 	bl	8004a26 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_15);
 8005522:	4a18      	ldr	r2, [pc, #96]	@ (8005584 <MX_ADC1_Init+0x1b4>)
 8005524:	f240 2105 	movw	r1, #517	@ 0x205
 8005528:	4813      	ldr	r0, [pc, #76]	@ (8005578 <MX_ADC1_Init+0x1a8>)
 800552a:	f7ff fa2c 	bl	8004986 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_15, LL_ADC_SAMPLINGTIME_15CYCLES);
 800552e:	2201      	movs	r2, #1
 8005530:	4914      	ldr	r1, [pc, #80]	@ (8005584 <MX_ADC1_Init+0x1b4>)
 8005532:	4811      	ldr	r0, [pc, #68]	@ (8005578 <MX_ADC1_Init+0x1a8>)
 8005534:	f7ff fa77 	bl	8004a26 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_8);
 8005538:	4a13      	ldr	r2, [pc, #76]	@ (8005588 <MX_ADC1_Init+0x1b8>)
 800553a:	f240 210a 	movw	r1, #522	@ 0x20a
 800553e:	480e      	ldr	r0, [pc, #56]	@ (8005578 <MX_ADC1_Init+0x1a8>)
 8005540:	f7ff fa21 	bl	8004986 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_8, LL_ADC_SAMPLINGTIME_15CYCLES);
 8005544:	2201      	movs	r2, #1
 8005546:	4910      	ldr	r1, [pc, #64]	@ (8005588 <MX_ADC1_Init+0x1b8>)
 8005548:	480b      	ldr	r0, [pc, #44]	@ (8005578 <MX_ADC1_Init+0x1a8>)
 800554a:	f7ff fa6c 	bl	8004a26 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_9);
 800554e:	4a0f      	ldr	r2, [pc, #60]	@ (800558c <MX_ADC1_Init+0x1bc>)
 8005550:	f240 210f 	movw	r1, #527	@ 0x20f
 8005554:	4808      	ldr	r0, [pc, #32]	@ (8005578 <MX_ADC1_Init+0x1a8>)
 8005556:	f7ff fa16 	bl	8004986 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_15CYCLES);
 800555a:	2201      	movs	r2, #1
 800555c:	490b      	ldr	r1, [pc, #44]	@ (800558c <MX_ADC1_Init+0x1bc>)
 800555e:	4806      	ldr	r0, [pc, #24]	@ (8005578 <MX_ADC1_Init+0x1a8>)
 8005560:	f7ff fa61 	bl	8004a26 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005564:	bf00      	nop
 8005566:	3748      	adds	r7, #72	@ 0x48
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	40020800 	.word	0x40020800
 8005570:	40020400 	.word	0x40020400
 8005574:	40026400 	.word	0x40026400
 8005578:	40012000 	.word	0x40012000
 800557c:	40012300 	.word	0x40012300
 8005580:	00c0000e 	.word	0x00c0000e
 8005584:	00f0000f 	.word	0x00f0000f
 8005588:	03800008 	.word	0x03800008
 800558c:	03b00009 	.word	0x03b00009

08005590 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b08c      	sub	sp, #48	@ 0x30
 8005594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8005596:	f107 0318 	add.w	r3, r7, #24
 800559a:	2200      	movs	r2, #0
 800559c:	601a      	str	r2, [r3, #0]
 800559e:	605a      	str	r2, [r3, #4]
 80055a0:	609a      	str	r2, [r3, #8]
 80055a2:	60da      	str	r2, [r3, #12]
 80055a4:	611a      	str	r2, [r3, #16]
 80055a6:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055a8:	463b      	mov	r3, r7
 80055aa:	2200      	movs	r2, #0
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	605a      	str	r2, [r3, #4]
 80055b0:	609a      	str	r2, [r3, #8]
 80055b2:	60da      	str	r2, [r3, #12]
 80055b4:	611a      	str	r2, [r3, #16]
 80055b6:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80055b8:	2002      	movs	r0, #2
 80055ba:	f7ff fcbb 	bl	8004f34 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = SENSOR_SCL_Pin|SENSOR_SDA_Pin;
 80055be:	23c0      	movs	r3, #192	@ 0xc0
 80055c0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80055c2:	2302      	movs	r3, #2
 80055c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80055c6:	2303      	movs	r3, #3
 80055c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80055ca:	2301      	movs	r3, #1
 80055cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80055ce:	2300      	movs	r3, #0
 80055d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80055d2:	2304      	movs	r3, #4
 80055d4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055d6:	463b      	mov	r3, r7
 80055d8:	4619      	mov	r1, r3
 80055da:	4817      	ldr	r0, [pc, #92]	@ (8005638 <MX_I2C1_Init+0xa8>)
 80055dc:	f001 fb37 	bl	8006c4e <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80055e0:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80055e4:	f7ff fcbe 	bl	8004f64 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 80055e8:	4814      	ldr	r0, [pc, #80]	@ (800563c <MX_I2C1_Init+0xac>)
 80055ea:	f7ff fc00 	bl	8004dee <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80055ee:	4813      	ldr	r0, [pc, #76]	@ (800563c <MX_I2C1_Init+0xac>)
 80055f0:	f7ff fbda 	bl	8004da8 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80055f4:	4811      	ldr	r0, [pc, #68]	@ (800563c <MX_I2C1_Init+0xac>)
 80055f6:	f7ff fbc7 	bl	8004d88 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80055fa:	2300      	movs	r3, #0
 80055fc:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 80055fe:	4b10      	ldr	r3, [pc, #64]	@ (8005640 <MX_I2C1_Init+0xb0>)
 8005600:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8005602:	2300      	movs	r3, #0
 8005604:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8005606:	2300      	movs	r3, #0
 8005608:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800560a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800560e:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8005610:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005614:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8005616:	f107 0318 	add.w	r3, r7, #24
 800561a:	4619      	mov	r1, r3
 800561c:	4807      	ldr	r0, [pc, #28]	@ (800563c <MX_I2C1_Init+0xac>)
 800561e:	f001 fced 	bl	8006ffc <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8005622:	2100      	movs	r1, #0
 8005624:	4805      	ldr	r0, [pc, #20]	@ (800563c <MX_I2C1_Init+0xac>)
 8005626:	f7ff fbcf 	bl	8004dc8 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 800562a:	4804      	ldr	r0, [pc, #16]	@ (800563c <MX_I2C1_Init+0xac>)
 800562c:	f7ff fb9c 	bl	8004d68 <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 8005630:	bf00      	nop
 8005632:	3730      	adds	r7, #48	@ 0x30
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	40020400 	.word	0x40020400
 800563c:	40005400 	.word	0x40005400
 8005640:	000186a0 	.word	0x000186a0

08005644 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b08c      	sub	sp, #48	@ 0x30
 8005648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800564a:	f107 0318 	add.w	r3, r7, #24
 800564e:	2200      	movs	r2, #0
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	605a      	str	r2, [r3, #4]
 8005654:	609a      	str	r2, [r3, #8]
 8005656:	60da      	str	r2, [r3, #12]
 8005658:	611a      	str	r2, [r3, #16]
 800565a:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800565c:	463b      	mov	r3, r7
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]
 8005662:	605a      	str	r2, [r3, #4]
 8005664:	609a      	str	r2, [r3, #8]
 8005666:	60da      	str	r2, [r3, #12]
 8005668:	611a      	str	r2, [r3, #16]
 800566a:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800566c:	2002      	movs	r0, #2
 800566e:	f7ff fc61 	bl	8004f34 <LL_AHB1_GRP1_EnableClock>
  /**I2C2 GPIO Configuration
  PB10   ------> I2C2_SCL
  PB11   ------> I2C2_SDA
  */
  GPIO_InitStruct.Pin = EXP_SCL_Pin|EXP_SDA_Pin;
 8005672:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005676:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005678:	2302      	movs	r3, #2
 800567a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800567c:	2303      	movs	r3, #3
 800567e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8005680:	2301      	movs	r3, #1
 8005682:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005684:	2300      	movs	r3, #0
 8005686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8005688:	2304      	movs	r3, #4
 800568a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800568c:	463b      	mov	r3, r7
 800568e:	4619      	mov	r1, r3
 8005690:	4828      	ldr	r0, [pc, #160]	@ (8005734 <MX_I2C2_Init+0xf0>)
 8005692:	f001 fadc 	bl	8006c4e <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 8005696:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800569a:	f7ff fc63 	bl	8004f64 <LL_APB1_GRP1_EnableClock>

  /* I2C2 interrupt Init */
  NVIC_SetPriority(I2C2_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800569e:	f7ff f8e9 	bl	8004874 <__NVIC_GetPriorityGrouping>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2200      	movs	r2, #0
 80056a6:	2100      	movs	r1, #0
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7ff f939 	bl	8004920 <NVIC_EncodePriority>
 80056ae:	4603      	mov	r3, r0
 80056b0:	4619      	mov	r1, r3
 80056b2:	2021      	movs	r0, #33	@ 0x21
 80056b4:	f7ff f90a 	bl	80048cc <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C2_EV_IRQn);
 80056b8:	2021      	movs	r0, #33	@ 0x21
 80056ba:	f7ff f8e9 	bl	8004890 <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C2_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80056be:	f7ff f8d9 	bl	8004874 <__NVIC_GetPriorityGrouping>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2200      	movs	r2, #0
 80056c6:	2100      	movs	r1, #0
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7ff f929 	bl	8004920 <NVIC_EncodePriority>
 80056ce:	4603      	mov	r3, r0
 80056d0:	4619      	mov	r1, r3
 80056d2:	2022      	movs	r0, #34	@ 0x22
 80056d4:	f7ff f8fa 	bl	80048cc <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C2_ER_IRQn);
 80056d8:	2022      	movs	r0, #34	@ 0x22
 80056da:	f7ff f8d9 	bl	8004890 <__NVIC_EnableIRQ>

  /* USER CODE END I2C2_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C2);
 80056de:	4816      	ldr	r0, [pc, #88]	@ (8005738 <MX_I2C2_Init+0xf4>)
 80056e0:	f7ff fb85 	bl	8004dee <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 80056e4:	4814      	ldr	r0, [pc, #80]	@ (8005738 <MX_I2C2_Init+0xf4>)
 80056e6:	f7ff fb5f 	bl	8004da8 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 80056ea:	4813      	ldr	r0, [pc, #76]	@ (8005738 <MX_I2C2_Init+0xf4>)
 80056ec:	f7ff fb4c 	bl	8004d88 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80056f0:	2300      	movs	r3, #0
 80056f2:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 80056f4:	4b11      	ldr	r3, [pc, #68]	@ (800573c <MX_I2C2_Init+0xf8>)
 80056f6:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 80056f8:	2300      	movs	r3, #0
 80056fa:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 80056fc:	2300      	movs	r3, #0
 80056fe:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8005700:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005704:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8005706:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800570a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 800570c:	f107 0318 	add.w	r3, r7, #24
 8005710:	4619      	mov	r1, r3
 8005712:	4809      	ldr	r0, [pc, #36]	@ (8005738 <MX_I2C2_Init+0xf4>)
 8005714:	f001 fc72 	bl	8006ffc <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C2, 0);
 8005718:	2100      	movs	r1, #0
 800571a:	4807      	ldr	r0, [pc, #28]	@ (8005738 <MX_I2C2_Init+0xf4>)
 800571c:	f7ff fb54 	bl	8004dc8 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C2_Init 2 */
  LL_I2C_EnableIT_EVT(I2C2);
 8005720:	4805      	ldr	r0, [pc, #20]	@ (8005738 <MX_I2C2_Init+0xf4>)
 8005722:	f7ff fb74 	bl	8004e0e <LL_I2C_EnableIT_EVT>
//  LL_I2C_EnableIT_ERR(I2C2);
  LL_I2C_Enable(I2C2);
 8005726:	4804      	ldr	r0, [pc, #16]	@ (8005738 <MX_I2C2_Init+0xf4>)
 8005728:	f7ff fb1e 	bl	8004d68 <LL_I2C_Enable>
  /* USER CODE END I2C2_Init 2 */

}
 800572c:	bf00      	nop
 800572e:	3730      	adds	r7, #48	@ 0x30
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	40020400 	.word	0x40020400
 8005738:	40005800 	.word	0x40005800
 800573c:	000186a0 	.word	0x000186a0

08005740 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b090      	sub	sp, #64	@ 0x40
 8005744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8005746:	f107 0318 	add.w	r3, r7, #24
 800574a:	2228      	movs	r2, #40	@ 0x28
 800574c:	2100      	movs	r1, #0
 800574e:	4618      	mov	r0, r3
 8005750:	f003 f99e 	bl	8008a90 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005754:	463b      	mov	r3, r7
 8005756:	2200      	movs	r2, #0
 8005758:	601a      	str	r2, [r3, #0]
 800575a:	605a      	str	r2, [r3, #4]
 800575c:	609a      	str	r2, [r3, #8]
 800575e:	60da      	str	r2, [r3, #12]
 8005760:	611a      	str	r2, [r3, #16]
 8005762:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8005764:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005768:	f7ff fc14 	bl	8004f94 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800576c:	2002      	movs	r0, #2
 800576e:	f7ff fbe1 	bl	8004f34 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PB3   ------> SPI1_SCK
  PB4   ------> SPI1_MISO
  PB5   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = TEC_SCK_Pin|TEC_MISO_Pin|TEC_MOSI_Pin;
 8005772:	2338      	movs	r3, #56	@ 0x38
 8005774:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005776:	2302      	movs	r3, #2
 8005778:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800577a:	2303      	movs	r3, #3
 800577c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800577e:	2300      	movs	r3, #0
 8005780:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005782:	2300      	movs	r3, #0
 8005784:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8005786:	2305      	movs	r3, #5
 8005788:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800578a:	463b      	mov	r3, r7
 800578c:	4619      	mov	r1, r3
 800578e:	4815      	ldr	r0, [pc, #84]	@ (80057e4 <MX_SPI1_Init+0xa4>)
 8005790:	f001 fa5d 	bl	8006c4e <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8005794:	2300      	movs	r3, #0
 8005796:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8005798:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800579c:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800579e:	2300      	movs	r3, #0
 80057a0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80057a2:	2300      	movs	r3, #0
 80057a4:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80057a6:	2300      	movs	r3, #0
 80057a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80057aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80057ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80057b0:	2318      	movs	r3, #24
 80057b2:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80057b4:	2300      	movs	r3, #0
 80057b6:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80057b8:	2300      	movs	r3, #0
 80057ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 80057bc:	230a      	movs	r3, #10
 80057be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80057c0:	f107 0318 	add.w	r3, r7, #24
 80057c4:	4619      	mov	r1, r3
 80057c6:	4808      	ldr	r0, [pc, #32]	@ (80057e8 <MX_SPI1_Init+0xa8>)
 80057c8:	f001 fda7 	bl	800731a <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 80057cc:	2100      	movs	r1, #0
 80057ce:	4806      	ldr	r0, [pc, #24]	@ (80057e8 <MX_SPI1_Init+0xa8>)
 80057d0:	f7ff fc3e 	bl	8005050 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */
  LL_SPI_Enable(SPI1);
 80057d4:	4804      	ldr	r0, [pc, #16]	@ (80057e8 <MX_SPI1_Init+0xa8>)
 80057d6:	f7ff fc2b 	bl	8005030 <LL_SPI_Enable>
  /* USER CODE END SPI1_Init 2 */

}
 80057da:	bf00      	nop
 80057dc:	3740      	adds	r7, #64	@ 0x40
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	40020400 	.word	0x40020400
 80057e8:	40013000 	.word	0x40013000

080057ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b09a      	sub	sp, #104	@ 0x68
 80057f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80057f2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80057f6:	2200      	movs	r2, #0
 80057f8:	601a      	str	r2, [r3, #0]
 80057fa:	605a      	str	r2, [r3, #4]
 80057fc:	609a      	str	r2, [r3, #8]
 80057fe:	60da      	str	r2, [r3, #12]
 8005800:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8005802:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005806:	2220      	movs	r2, #32
 8005808:	2100      	movs	r1, #0
 800580a:	4618      	mov	r0, r3
 800580c:	f003 f940 	bl	8008a90 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8005810:	f107 031c 	add.w	r3, r7, #28
 8005814:	2200      	movs	r2, #0
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	605a      	str	r2, [r3, #4]
 800581a:	609a      	str	r2, [r3, #8]
 800581c:	60da      	str	r2, [r3, #12]
 800581e:	611a      	str	r2, [r3, #16]
 8005820:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005822:	1d3b      	adds	r3, r7, #4
 8005824:	2200      	movs	r2, #0
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	605a      	str	r2, [r3, #4]
 800582a:	609a      	str	r2, [r3, #8]
 800582c:	60da      	str	r2, [r3, #12]
 800582e:	611a      	str	r2, [r3, #16]
 8005830:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8005832:	2001      	movs	r0, #1
 8005834:	f7ff fbae 	bl	8004f94 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 8005838:	2353      	movs	r3, #83	@ 0x53
 800583a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800583e:	2300      	movs	r3, #0
 8005840:	65bb      	str	r3, [r7, #88]	@ 0x58
  TIM_InitStruct.Autoreload = 9999;
 8005842:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005846:	65fb      	str	r3, [r7, #92]	@ 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8005848:	2300      	movs	r3, #0
 800584a:	663b      	str	r3, [r7, #96]	@ 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 800584c:	2300      	movs	r3, #0
 800584e:	667b      	str	r3, [r7, #100]	@ 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8005850:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005854:	4619      	mov	r1, r3
 8005856:	4849      	ldr	r0, [pc, #292]	@ (800597c <MX_TIM1_Init+0x190>)
 8005858:	f001 fe24 	bl	80074a4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 800585c:	4847      	ldr	r0, [pc, #284]	@ (800597c <MX_TIM1_Init+0x190>)
 800585e:	f7ff fc0a 	bl	8005076 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8005862:	2100      	movs	r1, #0
 8005864:	4845      	ldr	r0, [pc, #276]	@ (800597c <MX_TIM1_Init+0x190>)
 8005866:	f7ff fca1 	bl	80051ac <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 800586a:	2101      	movs	r1, #1
 800586c:	4843      	ldr	r0, [pc, #268]	@ (800597c <MX_TIM1_Init+0x190>)
 800586e:	f7ff fc59 	bl	8005124 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8005872:	2360      	movs	r3, #96	@ 0x60
 8005874:	637b      	str	r3, [r7, #52]	@ 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005876:	2300      	movs	r3, #0
 8005878:	63bb      	str	r3, [r7, #56]	@ 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800587a:	2300      	movs	r3, #0
 800587c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 800587e:	2300      	movs	r3, #0
 8005880:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8005882:	2300      	movs	r3, #0
 8005884:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8005886:	2300      	movs	r3, #0
 8005888:	64bb      	str	r3, [r7, #72]	@ 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 800588a:	2300      	movs	r3, #0
 800588c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 800588e:	2300      	movs	r3, #0
 8005890:	653b      	str	r3, [r7, #80]	@ 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8005892:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005896:	461a      	mov	r2, r3
 8005898:	2101      	movs	r1, #1
 800589a:	4838      	ldr	r0, [pc, #224]	@ (800597c <MX_TIM1_Init+0x190>)
 800589c:	f001 fe9c 	bl	80075d8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 80058a0:	2101      	movs	r1, #1
 80058a2:	4836      	ldr	r0, [pc, #216]	@ (800597c <MX_TIM1_Init+0x190>)
 80058a4:	f7ff fbf8 	bl	8005098 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 80058a8:	2110      	movs	r1, #16
 80058aa:	4834      	ldr	r0, [pc, #208]	@ (800597c <MX_TIM1_Init+0x190>)
 80058ac:	f7ff fc3a 	bl	8005124 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80058b0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80058b4:	461a      	mov	r2, r3
 80058b6:	2110      	movs	r1, #16
 80058b8:	4830      	ldr	r0, [pc, #192]	@ (800597c <MX_TIM1_Init+0x190>)
 80058ba:	f001 fe8d 	bl	80075d8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 80058be:	2110      	movs	r1, #16
 80058c0:	482e      	ldr	r0, [pc, #184]	@ (800597c <MX_TIM1_Init+0x190>)
 80058c2:	f7ff fbe9 	bl	8005098 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 80058c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80058ca:	482c      	ldr	r0, [pc, #176]	@ (800597c <MX_TIM1_Init+0x190>)
 80058cc:	f7ff fc2a 	bl	8005124 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80058d0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80058d4:	461a      	mov	r2, r3
 80058d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80058da:	4828      	ldr	r0, [pc, #160]	@ (800597c <MX_TIM1_Init+0x190>)
 80058dc:	f001 fe7c 	bl	80075d8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 80058e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80058e4:	4825      	ldr	r0, [pc, #148]	@ (800597c <MX_TIM1_Init+0x190>)
 80058e6:	f7ff fbd7 	bl	8005098 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH4);
 80058ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80058ee:	4823      	ldr	r0, [pc, #140]	@ (800597c <MX_TIM1_Init+0x190>)
 80058f0:	f7ff fc18 	bl	8005124 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80058f4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80058f8:	461a      	mov	r2, r3
 80058fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80058fe:	481f      	ldr	r0, [pc, #124]	@ (800597c <MX_TIM1_Init+0x190>)
 8005900:	f001 fe6a 	bl	80075d8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 8005904:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005908:	481c      	ldr	r0, [pc, #112]	@ (800597c <MX_TIM1_Init+0x190>)
 800590a:	f7ff fbc5 	bl	8005098 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 800590e:	2100      	movs	r1, #0
 8005910:	481a      	ldr	r0, [pc, #104]	@ (800597c <MX_TIM1_Init+0x190>)
 8005912:	f7ff fc60 	bl	80051d6 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8005916:	4819      	ldr	r0, [pc, #100]	@ (800597c <MX_TIM1_Init+0x190>)
 8005918:	f7ff fc70 	bl	80051fc <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 800591c:	2300      	movs	r3, #0
 800591e:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8005920:	2300      	movs	r3, #0
 8005922:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8005924:	2300      	movs	r3, #0
 8005926:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8005928:	2300      	movs	r3, #0
 800592a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 800592e:	2300      	movs	r3, #0
 8005930:	857b      	strh	r3, [r7, #42]	@ 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8005932:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005936:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8005938:	2300      	movs	r3, #0
 800593a:	633b      	str	r3, [r7, #48]	@ 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 800593c:	f107 031c 	add.w	r3, r7, #28
 8005940:	4619      	mov	r1, r3
 8005942:	480e      	ldr	r0, [pc, #56]	@ (800597c <MX_TIM1_Init+0x190>)
 8005944:	f001 fe89 	bl	800765a <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8005948:	2010      	movs	r0, #16
 800594a:	f7ff faf3 	bl	8004f34 <LL_AHB1_GRP1_EnableClock>
  PE9   ------> TIM1_CH1
  PE11   ------> TIM1_CH2
  PE13   ------> TIM1_CH3
  PE14   ------> TIM1_CH4
  */
  GPIO_InitStruct.Pin = HEATER_PWM_1_Pin|HEATER_PWM_2_Pin|HEATER_PWM_3_Pin|HEATER_PWM_4_Pin;
 800594e:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8005952:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005954:	2302      	movs	r3, #2
 8005956:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005958:	2300      	movs	r3, #0
 800595a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800595c:	2300      	movs	r3, #0
 800595e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005960:	2300      	movs	r3, #0
 8005962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8005964:	2301      	movs	r3, #1
 8005966:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005968:	1d3b      	adds	r3, r7, #4
 800596a:	4619      	mov	r1, r3
 800596c:	4804      	ldr	r0, [pc, #16]	@ (8005980 <MX_TIM1_Init+0x194>)
 800596e:	f001 f96e 	bl	8006c4e <LL_GPIO_Init>

}
 8005972:	bf00      	nop
 8005974:	3768      	adds	r7, #104	@ 0x68
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	40010000 	.word	0x40010000
 8005980:	40021000 	.word	0x40021000

08005984 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b094      	sub	sp, #80	@ 0x50
 8005988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800598a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800598e:	2200      	movs	r2, #0
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	605a      	str	r2, [r3, #4]
 8005994:	609a      	str	r2, [r3, #8]
 8005996:	60da      	str	r2, [r3, #12]
 8005998:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800599a:	f107 031c 	add.w	r3, r7, #28
 800599e:	2220      	movs	r2, #32
 80059a0:	2100      	movs	r1, #0
 80059a2:	4618      	mov	r0, r3
 80059a4:	f003 f874 	bl	8008a90 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059a8:	1d3b      	adds	r3, r7, #4
 80059aa:	2200      	movs	r2, #0
 80059ac:	601a      	str	r2, [r3, #0]
 80059ae:	605a      	str	r2, [r3, #4]
 80059b0:	609a      	str	r2, [r3, #8]
 80059b2:	60da      	str	r2, [r3, #12]
 80059b4:	611a      	str	r2, [r3, #16]
 80059b6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80059b8:	2002      	movs	r0, #2
 80059ba:	f7ff fad3 	bl	8004f64 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 80059be:	2353      	movs	r3, #83	@ 0x53
 80059c0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80059c2:	2300      	movs	r3, #0
 80059c4:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 9999;
 80059c6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80059ca:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80059cc:	2300      	movs	r3, #0
 80059ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80059d0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80059d4:	4619      	mov	r1, r3
 80059d6:	483b      	ldr	r0, [pc, #236]	@ (8005ac4 <MX_TIM3_Init+0x140>)
 80059d8:	f001 fd64 	bl	80074a4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 80059dc:	4839      	ldr	r0, [pc, #228]	@ (8005ac4 <MX_TIM3_Init+0x140>)
 80059de:	f7ff fb4a 	bl	8005076 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80059e2:	2100      	movs	r1, #0
 80059e4:	4837      	ldr	r0, [pc, #220]	@ (8005ac4 <MX_TIM3_Init+0x140>)
 80059e6:	f7ff fbe1 	bl	80051ac <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 80059ea:	2101      	movs	r1, #1
 80059ec:	4835      	ldr	r0, [pc, #212]	@ (8005ac4 <MX_TIM3_Init+0x140>)
 80059ee:	f7ff fb99 	bl	8005124 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80059f2:	2360      	movs	r3, #96	@ 0x60
 80059f4:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80059f6:	2300      	movs	r3, #0
 80059f8:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80059fa:	2300      	movs	r3, #0
 80059fc:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80059fe:	2300      	movs	r3, #0
 8005a00:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8005a02:	2300      	movs	r3, #0
 8005a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8005a06:	f107 031c 	add.w	r3, r7, #28
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	482d      	ldr	r0, [pc, #180]	@ (8005ac4 <MX_TIM3_Init+0x140>)
 8005a10:	f001 fde2 	bl	80075d8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8005a14:	2101      	movs	r1, #1
 8005a16:	482b      	ldr	r0, [pc, #172]	@ (8005ac4 <MX_TIM3_Init+0x140>)
 8005a18:	f7ff fb3e 	bl	8005098 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH2);
 8005a1c:	2110      	movs	r1, #16
 8005a1e:	4829      	ldr	r0, [pc, #164]	@ (8005ac4 <MX_TIM3_Init+0x140>)
 8005a20:	f7ff fb80 	bl	8005124 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8005a24:	f107 031c 	add.w	r3, r7, #28
 8005a28:	461a      	mov	r2, r3
 8005a2a:	2110      	movs	r1, #16
 8005a2c:	4825      	ldr	r0, [pc, #148]	@ (8005ac4 <MX_TIM3_Init+0x140>)
 8005a2e:	f001 fdd3 	bl	80075d8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 8005a32:	2110      	movs	r1, #16
 8005a34:	4823      	ldr	r0, [pc, #140]	@ (8005ac4 <MX_TIM3_Init+0x140>)
 8005a36:	f7ff fb2f 	bl	8005098 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH3);
 8005a3a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005a3e:	4821      	ldr	r0, [pc, #132]	@ (8005ac4 <MX_TIM3_Init+0x140>)
 8005a40:	f7ff fb70 	bl	8005124 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8005a44:	f107 031c 	add.w	r3, r7, #28
 8005a48:	461a      	mov	r2, r3
 8005a4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005a4e:	481d      	ldr	r0, [pc, #116]	@ (8005ac4 <MX_TIM3_Init+0x140>)
 8005a50:	f001 fdc2 	bl	80075d8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH3);
 8005a54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005a58:	481a      	ldr	r0, [pc, #104]	@ (8005ac4 <MX_TIM3_Init+0x140>)
 8005a5a:	f7ff fb1d 	bl	8005098 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8005a5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005a62:	4818      	ldr	r0, [pc, #96]	@ (8005ac4 <MX_TIM3_Init+0x140>)
 8005a64:	f7ff fb5e 	bl	8005124 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8005a68:	f107 031c 	add.w	r3, r7, #28
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005a72:	4814      	ldr	r0, [pc, #80]	@ (8005ac4 <MX_TIM3_Init+0x140>)
 8005a74:	f001 fdb0 	bl	80075d8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8005a78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005a7c:	4811      	ldr	r0, [pc, #68]	@ (8005ac4 <MX_TIM3_Init+0x140>)
 8005a7e:	f7ff fb0b 	bl	8005098 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8005a82:	2100      	movs	r1, #0
 8005a84:	480f      	ldr	r0, [pc, #60]	@ (8005ac4 <MX_TIM3_Init+0x140>)
 8005a86:	f7ff fba6 	bl	80051d6 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8005a8a:	480e      	ldr	r0, [pc, #56]	@ (8005ac4 <MX_TIM3_Init+0x140>)
 8005a8c:	f7ff fbb6 	bl	80051fc <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8005a90:	2004      	movs	r0, #4
 8005a92:	f7ff fa4f 	bl	8004f34 <LL_AHB1_GRP1_EnableClock>
  PC6   ------> TIM3_CH1
  PC7   ------> TIM3_CH2
  PC8   ------> TIM3_CH3
  PC9   ------> TIM3_CH4
  */
  GPIO_InitStruct.Pin = IR_LED_1_PWM_Pin|IR_LED_2_PWM_Pin|IR_LED_3_PWM_Pin|IR_LED_4_PWM_Pin;
 8005a96:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8005a9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8005aac:	2302      	movs	r3, #2
 8005aae:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ab0:	1d3b      	adds	r3, r7, #4
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	4804      	ldr	r0, [pc, #16]	@ (8005ac8 <MX_TIM3_Init+0x144>)
 8005ab6:	f001 f8ca 	bl	8006c4e <LL_GPIO_Init>

}
 8005aba:	bf00      	nop
 8005abc:	3750      	adds	r7, #80	@ 0x50
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	40000400 	.word	0x40000400
 8005ac8:	40020800 	.word	0x40020800

08005acc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b08e      	sub	sp, #56	@ 0x38
 8005ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8005ad2:	f107 031c 	add.w	r3, r7, #28
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	605a      	str	r2, [r3, #4]
 8005adc:	609a      	str	r2, [r3, #8]
 8005ade:	60da      	str	r2, [r3, #12]
 8005ae0:	611a      	str	r2, [r3, #16]
 8005ae2:	615a      	str	r2, [r3, #20]
 8005ae4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ae6:	1d3b      	adds	r3, r7, #4
 8005ae8:	2200      	movs	r2, #0
 8005aea:	601a      	str	r2, [r3, #0]
 8005aec:	605a      	str	r2, [r3, #4]
 8005aee:	609a      	str	r2, [r3, #8]
 8005af0:	60da      	str	r2, [r3, #12]
 8005af2:	611a      	str	r2, [r3, #16]
 8005af4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8005af6:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8005afa:	f7ff fa33 	bl	8004f64 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005afe:	2001      	movs	r0, #1
 8005b00:	f7ff fa18 	bl	8004f34 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = EXP_RS485_DX_Pin|EXP_RS485_RX_Pin;
 8005b04:	230c      	movs	r3, #12
 8005b06:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005b08:	2302      	movs	r3, #2
 8005b0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005b10:	2300      	movs	r3, #0
 8005b12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005b14:	2300      	movs	r3, #0
 8005b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8005b18:	2307      	movs	r3, #7
 8005b1a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b1c:	1d3b      	adds	r3, r7, #4
 8005b1e:	4619      	mov	r1, r3
 8005b20:	4818      	ldr	r0, [pc, #96]	@ (8005b84 <MX_USART2_UART_Init+0xb8>)
 8005b22:	f001 f894 	bl	8006c4e <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005b26:	f7fe fea5 	bl	8004874 <__NVIC_GetPriorityGrouping>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	2100      	movs	r1, #0
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7fe fef5 	bl	8004920 <NVIC_EncodePriority>
 8005b36:	4603      	mov	r3, r0
 8005b38:	4619      	mov	r1, r3
 8005b3a:	2026      	movs	r0, #38	@ 0x26
 8005b3c:	f7fe fec6 	bl	80048cc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8005b40:	2026      	movs	r0, #38	@ 0x26
 8005b42:	f7fe fea5 	bl	8004890 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8005b46:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8005b4a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8005b50:	2300      	movs	r3, #0
 8005b52:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8005b54:	2300      	movs	r3, #0
 8005b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8005b58:	230c      	movs	r3, #12
 8005b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8005b60:	2300      	movs	r3, #0
 8005b62:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8005b64:	f107 031c 	add.w	r3, r7, #28
 8005b68:	4619      	mov	r1, r3
 8005b6a:	4807      	ldr	r0, [pc, #28]	@ (8005b88 <MX_USART2_UART_Init+0xbc>)
 8005b6c:	f002 f9c4 	bl	8007ef8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8005b70:	4805      	ldr	r0, [pc, #20]	@ (8005b88 <MX_USART2_UART_Init+0xbc>)
 8005b72:	f7ff fb63 	bl	800523c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8005b76:	4804      	ldr	r0, [pc, #16]	@ (8005b88 <MX_USART2_UART_Init+0xbc>)
 8005b78:	f7ff fb50 	bl	800521c <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005b7c:	bf00      	nop
 8005b7e:	3738      	adds	r7, #56	@ 0x38
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	40020000 	.word	0x40020000
 8005b88:	40004400 	.word	0x40004400

08005b8c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b08e      	sub	sp, #56	@ 0x38
 8005b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8005b92:	f107 031c 	add.w	r3, r7, #28
 8005b96:	2200      	movs	r2, #0
 8005b98:	601a      	str	r2, [r3, #0]
 8005b9a:	605a      	str	r2, [r3, #4]
 8005b9c:	609a      	str	r2, [r3, #8]
 8005b9e:	60da      	str	r2, [r3, #12]
 8005ba0:	611a      	str	r2, [r3, #16]
 8005ba2:	615a      	str	r2, [r3, #20]
 8005ba4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ba6:	1d3b      	adds	r3, r7, #4
 8005ba8:	2200      	movs	r2, #0
 8005baa:	601a      	str	r2, [r3, #0]
 8005bac:	605a      	str	r2, [r3, #4]
 8005bae:	609a      	str	r2, [r3, #8]
 8005bb0:	60da      	str	r2, [r3, #12]
 8005bb2:	611a      	str	r2, [r3, #16]
 8005bb4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8005bb6:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8005bba:	f7ff f9d3 	bl	8004f64 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8005bbe:	2008      	movs	r0, #8
 8005bc0:	f7ff f9b8 	bl	8004f34 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = EXP_URRT_TX_Pin|EXP_UART_RX_Pin;
 8005bc4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005bc8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005bca:	2302      	movs	r3, #2
 8005bcc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8005bda:	2307      	movs	r3, #7
 8005bdc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005bde:	1d3b      	adds	r3, r7, #4
 8005be0:	4619      	mov	r1, r3
 8005be2:	4819      	ldr	r0, [pc, #100]	@ (8005c48 <MX_USART3_UART_Init+0xbc>)
 8005be4:	f001 f833 	bl	8006c4e <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005be8:	f7fe fe44 	bl	8004874 <__NVIC_GetPriorityGrouping>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2200      	movs	r2, #0
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fe fe94 	bl	8004920 <NVIC_EncodePriority>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	2027      	movs	r0, #39	@ 0x27
 8005bfe:	f7fe fe65 	bl	80048cc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8005c02:	2027      	movs	r0, #39	@ 0x27
 8005c04:	f7fe fe44 	bl	8004890 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8005c08:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8005c0c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8005c12:	2300      	movs	r3, #0
 8005c14:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8005c16:	2300      	movs	r3, #0
 8005c18:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8005c1a:	230c      	movs	r3, #12
 8005c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8005c22:	2300      	movs	r3, #0
 8005c24:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8005c26:	f107 031c 	add.w	r3, r7, #28
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	4807      	ldr	r0, [pc, #28]	@ (8005c4c <MX_USART3_UART_Init+0xc0>)
 8005c2e:	f002 f963 	bl	8007ef8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8005c32:	4806      	ldr	r0, [pc, #24]	@ (8005c4c <MX_USART3_UART_Init+0xc0>)
 8005c34:	f7ff fb02 	bl	800523c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8005c38:	4804      	ldr	r0, [pc, #16]	@ (8005c4c <MX_USART3_UART_Init+0xc0>)
 8005c3a:	f7ff faef 	bl	800521c <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005c3e:	bf00      	nop
 8005c40:	3738      	adds	r7, #56	@ 0x38
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	40020c00 	.word	0x40020c00
 8005c4c:	40004800 	.word	0x40004800

08005c50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8005c54:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8005c58:	f7ff f96c 	bl	8004f34 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005c5c:	f7fe fe0a 	bl	8004874 <__NVIC_GetPriorityGrouping>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2200      	movs	r2, #0
 8005c64:	2100      	movs	r1, #0
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7fe fe5a 	bl	8004920 <NVIC_EncodePriority>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	4619      	mov	r1, r3
 8005c70:	2038      	movs	r0, #56	@ 0x38
 8005c72:	f7fe fe2b 	bl	80048cc <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8005c76:	2038      	movs	r0, #56	@ 0x38
 8005c78:	f7fe fe0a 	bl	8004890 <__NVIC_EnableIRQ>

}
 8005c7c:	bf00      	nop
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c86:	463b      	mov	r3, r7
 8005c88:	2200      	movs	r2, #0
 8005c8a:	601a      	str	r2, [r3, #0]
 8005c8c:	605a      	str	r2, [r3, #4]
 8005c8e:	609a      	str	r2, [r3, #8]
 8005c90:	60da      	str	r2, [r3, #12]
 8005c92:	611a      	str	r2, [r3, #16]
 8005c94:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8005c96:	2010      	movs	r0, #16
 8005c98:	f7ff f94c 	bl	8004f34 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8005c9c:	2004      	movs	r0, #4
 8005c9e:	f7ff f949 	bl	8004f34 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8005ca2:	2080      	movs	r0, #128	@ 0x80
 8005ca4:	f7ff f946 	bl	8004f34 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005ca8:	2001      	movs	r0, #1
 8005caa:	f7ff f943 	bl	8004f34 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8005cae:	2002      	movs	r0, #2
 8005cb0:	f7ff f940 	bl	8004f34 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8005cb4:	2008      	movs	r0, #8
 8005cb6:	f7ff f93d 	bl	8004f34 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, TEC_1_SWEN_Pin|TEC_1_EN_Pin|EF_HEATER_EN_Pin|SENSOR2_EN_Pin);
 8005cba:	f241 1124 	movw	r1, #4388	@ 0x1124
 8005cbe:	4855      	ldr	r0, [pc, #340]	@ (8005e14 <MX_GPIO_Init+0x194>)
 8005cc0:	f7ff fae0 	bl	8005284 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(EF_TEC_EN_GPIO_Port, EF_TEC_EN_Pin);
 8005cc4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005cc8:	4853      	ldr	r0, [pc, #332]	@ (8005e18 <MX_GPIO_Init+0x198>)
 8005cca:	f7ff fadb 	bl	8005284 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 8005cce:	2102      	movs	r1, #2
 8005cd0:	4852      	ldr	r0, [pc, #328]	@ (8005e1c <MX_GPIO_Init+0x19c>)
 8005cd2:	f7ff fad7 	bl	8005284 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, SENSOR1_EN_Pin|EF_LED_EN_Pin);
 8005cd6:	f248 0104 	movw	r1, #32772	@ 0x8004
 8005cda:	4851      	ldr	r0, [pc, #324]	@ (8005e20 <MX_GPIO_Init+0x1a0>)
 8005cdc:	f7ff fad2 	bl	8005284 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LED_B_Pin|LED_G_Pin|TEC_4_EN_Pin|TEC_4_SWEN_Pin);
 8005ce0:	f24c 0128 	movw	r1, #49192	@ 0xc028
 8005ce4:	484f      	ldr	r0, [pc, #316]	@ (8005e24 <MX_GPIO_Init+0x1a4>)
 8005ce6:	f7ff facd 	bl	8005284 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOB, TEC_4_CS_Pin|TEC_3_CS_Pin);
 8005cea:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8005cee:	484c      	ldr	r0, [pc, #304]	@ (8005e20 <MX_GPIO_Init+0x1a0>)
 8005cf0:	f7ff faba 	bl	8005268 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOE, TEC_2_CS_Pin|TEC_1_CS_Pin);
 8005cf4:	2103      	movs	r1, #3
 8005cf6:	4847      	ldr	r0, [pc, #284]	@ (8005e14 <MX_GPIO_Init+0x194>)
 8005cf8:	f7ff fab6 	bl	8005268 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = TEC_1_SWEN_Pin|TEC_1_EN_Pin;
 8005cfc:	2324      	movs	r3, #36	@ 0x24
 8005cfe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005d00:	2301      	movs	r3, #1
 8005d02:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005d04:	2300      	movs	r3, #0
 8005d06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005d10:	463b      	mov	r3, r7
 8005d12:	4619      	mov	r1, r3
 8005d14:	483f      	ldr	r0, [pc, #252]	@ (8005e14 <MX_GPIO_Init+0x194>)
 8005d16:	f000 ff9a 	bl	8006c4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EF_TEC_AUX_Pin|EF_HEATER_AUX_Pin;
 8005d1a:	23c0      	movs	r3, #192	@ 0xc0
 8005d1c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005d22:	2300      	movs	r3, #0
 8005d24:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005d26:	463b      	mov	r3, r7
 8005d28:	4619      	mov	r1, r3
 8005d2a:	483a      	ldr	r0, [pc, #232]	@ (8005e14 <MX_GPIO_Init+0x194>)
 8005d2c:	f000 ff8f 	bl	8006c4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EF_TEC_EN_Pin;
 8005d30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005d34:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005d36:	2301      	movs	r3, #1
 8005d38:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005d42:	2300      	movs	r3, #0
 8005d44:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(EF_TEC_EN_GPIO_Port, &GPIO_InitStruct);
 8005d46:	463b      	mov	r3, r7
 8005d48:	4619      	mov	r1, r3
 8005d4a:	4833      	ldr	r0, [pc, #204]	@ (8005e18 <MX_GPIO_Init+0x198>)
 8005d4c:	f000 ff7f 	bl	8006c4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = WD_DONE_Pin;
 8005d50:	2302      	movs	r3, #2
 8005d52:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005d54:	2301      	movs	r3, #1
 8005d56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005d60:	2300      	movs	r3, #0
 8005d62:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(WD_DONE_GPIO_Port, &GPIO_InitStruct);
 8005d64:	463b      	mov	r3, r7
 8005d66:	4619      	mov	r1, r3
 8005d68:	482c      	ldr	r0, [pc, #176]	@ (8005e1c <MX_GPIO_Init+0x19c>)
 8005d6a:	f000 ff70 	bl	8006c4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SENSOR1_EN_Pin|EF_LED_EN_Pin|TEC_4_CS_Pin|TEC_3_CS_Pin;
 8005d6e:	f248 3304 	movw	r3, #33540	@ 0x8304
 8005d72:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005d74:	2301      	movs	r3, #1
 8005d76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005d80:	2300      	movs	r3, #0
 8005d82:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d84:	463b      	mov	r3, r7
 8005d86:	4619      	mov	r1, r3
 8005d88:	4825      	ldr	r0, [pc, #148]	@ (8005e20 <MX_GPIO_Init+0x1a0>)
 8005d8a:	f000 ff60 	bl	8006c4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EF_HEATER_EN_Pin|SENSOR2_EN_Pin|TEC_2_CS_Pin|TEC_1_CS_Pin;
 8005d8e:	f241 1303 	movw	r3, #4355	@ 0x1103
 8005d92:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005d94:	2301      	movs	r3, #1
 8005d96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005da0:	2300      	movs	r3, #0
 8005da2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005da4:	463b      	mov	r3, r7
 8005da6:	4619      	mov	r1, r3
 8005da8:	481a      	ldr	r0, [pc, #104]	@ (8005e14 <MX_GPIO_Init+0x194>)
 8005daa:	f000 ff50 	bl	8006c4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EXP_CAN_RX_Pin|EXP_CAN_TX_Pin;
 8005dae:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8005db2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005db4:	2302      	movs	r3, #2
 8005db6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005db8:	2303      	movs	r3, #3
 8005dba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_9;
 8005dc4:	2309      	movs	r3, #9
 8005dc6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005dc8:	463b      	mov	r3, r7
 8005dca:	4619      	mov	r1, r3
 8005dcc:	4814      	ldr	r0, [pc, #80]	@ (8005e20 <MX_GPIO_Init+0x1a0>)
 8005dce:	f000 ff3e 	bl	8006c4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EF_LED_AUX_Pin;
 8005dd2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005dd6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(EF_LED_AUX_GPIO_Port, &GPIO_InitStruct);
 8005de0:	463b      	mov	r3, r7
 8005de2:	4619      	mov	r1, r3
 8005de4:	480e      	ldr	r0, [pc, #56]	@ (8005e20 <MX_GPIO_Init+0x1a0>)
 8005de6:	f000 ff32 	bl	8006c4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_B_Pin|LED_G_Pin|TEC_4_EN_Pin|TEC_4_SWEN_Pin;
 8005dea:	f24c 0328 	movw	r3, #49192	@ 0xc028
 8005dee:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005df0:	2301      	movs	r3, #1
 8005df2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005df4:	2300      	movs	r3, #0
 8005df6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005e00:	463b      	mov	r3, r7
 8005e02:	4619      	mov	r1, r3
 8005e04:	4807      	ldr	r0, [pc, #28]	@ (8005e24 <MX_GPIO_Init+0x1a4>)
 8005e06:	f000 ff22 	bl	8006c4e <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005e0a:	bf00      	nop
 8005e0c:	3718      	adds	r7, #24
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	40021000 	.word	0x40021000
 8005e18:	40020800 	.word	0x40020800
 8005e1c:	40020000 	.word	0x40020000
 8005e20:	40020400 	.word	0x40020400
 8005e24:	40020c00 	.word	0x40020c00

08005e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005e2c:	bf00      	nop
 8005e2e:	e7fd      	b.n	8005e2c <NMI_Handler+0x4>

08005e30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005e30:	b480      	push	{r7}
 8005e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005e34:	bf00      	nop
 8005e36:	e7fd      	b.n	8005e34 <HardFault_Handler+0x4>

08005e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005e3c:	bf00      	nop
 8005e3e:	e7fd      	b.n	8005e3c <MemManage_Handler+0x4>

08005e40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005e40:	b480      	push	{r7}
 8005e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005e44:	bf00      	nop
 8005e46:	e7fd      	b.n	8005e44 <BusFault_Handler+0x4>

08005e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005e4c:	bf00      	nop
 8005e4e:	e7fd      	b.n	8005e4c <UsageFault_Handler+0x4>

08005e50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005e50:	b480      	push	{r7}
 8005e52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005e54:	bf00      	nop
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005e62:	bf00      	nop
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005e70:	bf00      	nop
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
	...

08005e7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	g_systick_count++;
 8005e80:	4b04      	ldr	r3, [pc, #16]	@ (8005e94 <SysTick_Handler+0x18>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	3301      	adds	r3, #1
 8005e86:	4a03      	ldr	r2, [pc, #12]	@ (8005e94 <SysTick_Handler+0x18>)
 8005e88:	6013      	str	r3, [r2, #0]
	SCH_RunSystemTickTimer();
 8005e8a:	f002 f9a9 	bl	80081e0 <SCH_RunSystemTickTimer>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005e8e:	bf00      	nop
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	20002734 	.word	0x20002734

08005e98 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */
	I2C_event_IRQ();
 8005e9c:	f7fa fe4a 	bl	8000b34 <I2C_event_IRQ>
  /* USER CODE END I2C2_EV_IRQn 0 */

  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8005ea0:	bf00      	nop
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */
	I2C_error_IRQ();
 8005ea8:	f7fa ff64 	bl	8000d74 <I2C_error_IRQ>
  /* USER CODE END I2C2_ER_IRQn 0 */

  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8005eac:	bf00      	nop
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	COPC_UART_IRQHandler();
 8005eb4:	f7fd fb3e 	bl	8003534 <COPC_UART_IRQHandler>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005eb8:	bf00      	nop
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	CONSOLE_UART_IRQHandler();
 8005ec0:	f7fc fd1e 	bl	8002900 <CONSOLE_UART_IRQHandler>
  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005ec4:	bf00      	nop
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Stream0_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005ecc:	bf00      	nop
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
	...

08005ed8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b086      	sub	sp, #24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005ee0:	4a14      	ldr	r2, [pc, #80]	@ (8005f34 <_sbrk+0x5c>)
 8005ee2:	4b15      	ldr	r3, [pc, #84]	@ (8005f38 <_sbrk+0x60>)
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005eec:	4b13      	ldr	r3, [pc, #76]	@ (8005f3c <_sbrk+0x64>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d102      	bne.n	8005efa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ef4:	4b11      	ldr	r3, [pc, #68]	@ (8005f3c <_sbrk+0x64>)
 8005ef6:	4a12      	ldr	r2, [pc, #72]	@ (8005f40 <_sbrk+0x68>)
 8005ef8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005efa:	4b10      	ldr	r3, [pc, #64]	@ (8005f3c <_sbrk+0x64>)
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4413      	add	r3, r2
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d207      	bcs.n	8005f18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005f08:	f002 fdca 	bl	8008aa0 <__errno>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	220c      	movs	r2, #12
 8005f10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005f12:	f04f 33ff 	mov.w	r3, #4294967295
 8005f16:	e009      	b.n	8005f2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005f18:	4b08      	ldr	r3, [pc, #32]	@ (8005f3c <_sbrk+0x64>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005f1e:	4b07      	ldr	r3, [pc, #28]	@ (8005f3c <_sbrk+0x64>)
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4413      	add	r3, r2
 8005f26:	4a05      	ldr	r2, [pc, #20]	@ (8005f3c <_sbrk+0x64>)
 8005f28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3718      	adds	r7, #24
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	20020000 	.word	0x20020000
 8005f38:	00000400 	.word	0x00000400
 8005f3c:	20002738 	.word	0x20002738
 8005f40:	20002aa0 	.word	0x20002aa0

08005f44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005f44:	b480      	push	{r7}
 8005f46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005f48:	4b06      	ldr	r3, [pc, #24]	@ (8005f64 <SystemInit+0x20>)
 8005f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f4e:	4a05      	ldr	r2, [pc, #20]	@ (8005f64 <SystemInit+0x20>)
 8005f50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005f54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005f58:	bf00      	nop
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	e000ed00 	.word	0xe000ed00

08005f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005f68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005fa0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005f6c:	f7ff ffea 	bl	8005f44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005f70:	480c      	ldr	r0, [pc, #48]	@ (8005fa4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005f72:	490d      	ldr	r1, [pc, #52]	@ (8005fa8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005f74:	4a0d      	ldr	r2, [pc, #52]	@ (8005fac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005f78:	e002      	b.n	8005f80 <LoopCopyDataInit>

08005f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f7e:	3304      	adds	r3, #4

08005f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005f84:	d3f9      	bcc.n	8005f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005f86:	4a0a      	ldr	r2, [pc, #40]	@ (8005fb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005f88:	4c0a      	ldr	r4, [pc, #40]	@ (8005fb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f8c:	e001      	b.n	8005f92 <LoopFillZerobss>

08005f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f90:	3204      	adds	r2, #4

08005f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005f94:	d3fb      	bcc.n	8005f8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005f96:	f002 fd89 	bl	8008aac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005f9a:	f7ff f983 	bl	80052a4 <main>
  bx  lr    
 8005f9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005fa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005fa8:	200022e4 	.word	0x200022e4
  ldr r2, =_sidata
 8005fac:	08009dfc 	.word	0x08009dfc
  ldr r2, =_sbss
 8005fb0:	200022e4 	.word	0x200022e4
  ldr r4, =_ebss
 8005fb4:	20002aa0 	.word	0x20002aa0

08005fb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005fb8:	e7fe      	b.n	8005fb8 <ADC_IRQHandler>
	...

08005fbc <temperature_update>:
	 0,								// TEC_HEATER_status;	// heater3_on heater2_on heater1_on heater0_on tec3_on tec2_on tec1_on tec0_on
	{IDLE, IDLE, IDLE, IDLE}		//mode
};

static void temperature_update(void)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	af00      	add	r7, sp, #0
// update temperature from BMP390
 	s_Temperature_CurrentState.BMP390_temperature = bmp390_get_temperature();
 8005fc0:	f7fd fb06 	bl	80035d0 <bmp390_get_temperature>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	4b3f      	ldr	r3, [pc, #252]	@ (80060c8 <temperature_update+0x10c>)
 8005fca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
// update temperature from NTC
 	NTC_get_temperature(NTC_Temperature);
 8005fce:	483f      	ldr	r0, [pc, #252]	@ (80060cc <temperature_update+0x110>)
 8005fd0:	f7fe faac 	bl	800452c <NTC_get_temperature>
	s_Temperature_CurrentState.NTC_temperature[0] = NTC_Temperature[0];
 8005fd4:	4b3d      	ldr	r3, [pc, #244]	@ (80060cc <temperature_update+0x110>)
 8005fd6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005fda:	4b3b      	ldr	r3, [pc, #236]	@ (80060c8 <temperature_update+0x10c>)
 8005fdc:	871a      	strh	r2, [r3, #56]	@ 0x38
	s_Temperature_CurrentState.NTC_temperature[1] = NTC_Temperature[1];
 8005fde:	4b3b      	ldr	r3, [pc, #236]	@ (80060cc <temperature_update+0x110>)
 8005fe0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8005fe4:	4b38      	ldr	r3, [pc, #224]	@ (80060c8 <temperature_update+0x10c>)
 8005fe6:	875a      	strh	r2, [r3, #58]	@ 0x3a
	s_Temperature_CurrentState.NTC_temperature[2] = NTC_Temperature[2];
 8005fe8:	4b38      	ldr	r3, [pc, #224]	@ (80060cc <temperature_update+0x110>)
 8005fea:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8005fee:	4b36      	ldr	r3, [pc, #216]	@ (80060c8 <temperature_update+0x10c>)
 8005ff0:	879a      	strh	r2, [r3, #60]	@ 0x3c
	s_Temperature_CurrentState.NTC_temperature[3] = NTC_Temperature[3];
 8005ff2:	4b36      	ldr	r3, [pc, #216]	@ (80060cc <temperature_update+0x110>)
 8005ff4:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8005ff8:	4b33      	ldr	r3, [pc, #204]	@ (80060c8 <temperature_update+0x10c>)
 8005ffa:	87da      	strh	r2, [r3, #62]	@ 0x3e
//	{
//		temperature_enable_auto_control_TEC(2);
//		temperature_enable_auto_control_TEC(3);
//	}

	if ((s_Temperature_CurrentState.Temp_status & (1 << TEMP0_AUTO)) == (1 << TEMP0_AUTO))	 //channel 0 is auto
 8005ffc:	4b32      	ldr	r3, [pc, #200]	@ (80060c8 <temperature_update+0x10c>)
 8005ffe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b00      	cmp	r3, #0
 8006008:	d007      	beq.n	800601a <temperature_update+0x5e>
		temperature_auto_ctrl(s_Temperature_CurrentState.NTC_temperature[0], 0);
 800600a:	4b2f      	ldr	r3, [pc, #188]	@ (80060c8 <temperature_update+0x10c>)
 800600c:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
 8006010:	2100      	movs	r1, #0
 8006012:	4618      	mov	r0, r3
 8006014:	f000 f85c 	bl	80060d0 <temperature_auto_ctrl>
 8006018:	e009      	b.n	800602e <temperature_update+0x72>
	else if ((s_Temperature_CurrentState.Temp_status & (1 << TEMP0_ENA)) == (1 << TEMP0_ENA)) //channel 0 isn't auto but it is enable
 800601a:	4b2b      	ldr	r3, [pc, #172]	@ (80060c8 <temperature_update+0x10c>)
 800601c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006020:	f003 0301 	and.w	r3, r3, #1
 8006024:	2b00      	cmp	r3, #0
 8006026:	d002      	beq.n	800602e <temperature_update+0x72>
		temperature_manual_ctrl(0);
 8006028:	2000      	movs	r0, #0
 800602a:	f000 f919 	bl	8006260 <temperature_manual_ctrl>

	if ((s_Temperature_CurrentState.Temp_status & (1 << TEMP1_AUTO)) == (1 << TEMP1_AUTO))	 //channel 1 is auto
 800602e:	4b26      	ldr	r3, [pc, #152]	@ (80060c8 <temperature_update+0x10c>)
 8006030:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006034:	f003 0308 	and.w	r3, r3, #8
 8006038:	2b00      	cmp	r3, #0
 800603a:	d007      	beq.n	800604c <temperature_update+0x90>
		temperature_auto_ctrl(s_Temperature_CurrentState.NTC_temperature[1], 1);
 800603c:	4b22      	ldr	r3, [pc, #136]	@ (80060c8 <temperature_update+0x10c>)
 800603e:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	@ 0x3a
 8006042:	2101      	movs	r1, #1
 8006044:	4618      	mov	r0, r3
 8006046:	f000 f843 	bl	80060d0 <temperature_auto_ctrl>
 800604a:	e009      	b.n	8006060 <temperature_update+0xa4>
	else if ((s_Temperature_CurrentState.Temp_status & (1 << TEMP1_ENA)) == (1 << TEMP1_ENA)) //channel 1 isn't auto but it is enable
 800604c:	4b1e      	ldr	r3, [pc, #120]	@ (80060c8 <temperature_update+0x10c>)
 800604e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006052:	f003 0304 	and.w	r3, r3, #4
 8006056:	2b00      	cmp	r3, #0
 8006058:	d002      	beq.n	8006060 <temperature_update+0xa4>
		temperature_manual_ctrl(1);
 800605a:	2001      	movs	r0, #1
 800605c:	f000 f900 	bl	8006260 <temperature_manual_ctrl>

	if ((s_Temperature_CurrentState.Temp_status & (1 << TEMP2_AUTO)) == (1 << TEMP2_AUTO))	 //channel 2 is auto
 8006060:	4b19      	ldr	r3, [pc, #100]	@ (80060c8 <temperature_update+0x10c>)
 8006062:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006066:	f003 0320 	and.w	r3, r3, #32
 800606a:	2b00      	cmp	r3, #0
 800606c:	d007      	beq.n	800607e <temperature_update+0xc2>
		temperature_auto_ctrl(s_Temperature_CurrentState.NTC_temperature[2], 2);
 800606e:	4b16      	ldr	r3, [pc, #88]	@ (80060c8 <temperature_update+0x10c>)
 8006070:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8006074:	2102      	movs	r1, #2
 8006076:	4618      	mov	r0, r3
 8006078:	f000 f82a 	bl	80060d0 <temperature_auto_ctrl>
 800607c:	e009      	b.n	8006092 <temperature_update+0xd6>
	else if ((s_Temperature_CurrentState.Temp_status & (1 << TEMP2_ENA)) == (1 << TEMP2_ENA)) //channel 2 isn't auto but it is enable
 800607e:	4b12      	ldr	r3, [pc, #72]	@ (80060c8 <temperature_update+0x10c>)
 8006080:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006084:	f003 0310 	and.w	r3, r3, #16
 8006088:	2b00      	cmp	r3, #0
 800608a:	d002      	beq.n	8006092 <temperature_update+0xd6>
		temperature_manual_ctrl(2);
 800608c:	2002      	movs	r0, #2
 800608e:	f000 f8e7 	bl	8006260 <temperature_manual_ctrl>

	if ((s_Temperature_CurrentState.Temp_status & (1 << TEMP3_AUTO)) == (1 << TEMP3_AUTO))	 //channel 3 is auto
 8006092:	4b0d      	ldr	r3, [pc, #52]	@ (80060c8 <temperature_update+0x10c>)
 8006094:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006098:	b25b      	sxtb	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	da07      	bge.n	80060ae <temperature_update+0xf2>
		temperature_auto_ctrl(s_Temperature_CurrentState.NTC_temperature[3], 3);
 800609e:	4b0a      	ldr	r3, [pc, #40]	@ (80060c8 <temperature_update+0x10c>)
 80060a0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80060a4:	2103      	movs	r1, #3
 80060a6:	4618      	mov	r0, r3
 80060a8:	f000 f812 	bl	80060d0 <temperature_auto_ctrl>
	else if ((s_Temperature_CurrentState.Temp_status & (1 << TEMP3_ENA)) == (1 << TEMP3_ENA)) //channel 3 isn't auto but it is enable
		temperature_manual_ctrl(3);
	return;
 80060ac:	e00a      	b.n	80060c4 <temperature_update+0x108>
	else if ((s_Temperature_CurrentState.Temp_status & (1 << TEMP3_ENA)) == (1 << TEMP3_ENA)) //channel 3 isn't auto but it is enable
 80060ae:	4b06      	ldr	r3, [pc, #24]	@ (80060c8 <temperature_update+0x10c>)
 80060b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d003      	beq.n	80060c4 <temperature_update+0x108>
		temperature_manual_ctrl(3);
 80060bc:	2003      	movs	r0, #3
 80060be:	f000 f8cf 	bl	8006260 <temperature_manual_ctrl>
	return;
 80060c2:	bf00      	nop
 80060c4:	bf00      	nop
}
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	20002238 	.word	0x20002238
 80060cc:	20002728 	.word	0x20002728

080060d0 <temperature_auto_ctrl>:

void temperature_auto_ctrl(int16_t temperature_now, uint8_t channel)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	4603      	mov	r3, r0
 80060d8:	460a      	mov	r2, r1
 80060da:	80fb      	strh	r3, [r7, #6]
 80060dc:	4613      	mov	r3, r2
 80060de:	717b      	strb	r3, [r7, #5]
	// Case: temperature is higher than expected temperature
	// Using: TEC
	if (temperature_now > s_Temperature_CurrentState.Temperature_setpoint[channel] + s_Temperature_CurrentState.High_Threshold)
 80060e0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80060e4:	797b      	ldrb	r3, [r7, #5]
 80060e6:	495d      	ldr	r1, [pc, #372]	@ (800625c <temperature_auto_ctrl+0x18c>)
 80060e8:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80060ec:	4619      	mov	r1, r3
 80060ee:	4b5b      	ldr	r3, [pc, #364]	@ (800625c <temperature_auto_ctrl+0x18c>)
 80060f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80060f4:	440b      	add	r3, r1
 80060f6:	429a      	cmp	r2, r3
 80060f8:	dd37      	ble.n	800616a <temperature_auto_ctrl+0x9a>
	{
		// turn off heater
		heater_set_duty_pwm_channel(channel, 0);
 80060fa:	797b      	ldrb	r3, [r7, #5]
 80060fc:	2100      	movs	r1, #0
 80060fe:	4618      	mov	r0, r3
 8006100:	f7fd fabc 	bl	800367c <heater_set_duty_pwm_channel>
		// turn on tec
		lt8722_set_output_voltage_channel(channel, s_Temperature_CurrentState.Tec_voltage[channel]);
 8006104:	797b      	ldrb	r3, [r7, #5]
 8006106:	4a55      	ldr	r2, [pc, #340]	@ (800625c <temperature_auto_ctrl+0x18c>)
 8006108:	3302      	adds	r3, #2
 800610a:	00db      	lsls	r3, r3, #3
 800610c:	4413      	add	r3, r2
 800610e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006112:	7979      	ldrb	r1, [r7, #5]
 8006114:	4608      	mov	r0, r1
 8006116:	f7fd ff45 	bl	8003fa4 <lt8722_set_output_voltage_channel>
		// update status
		s_Temperature_CurrentState.mode[channel] = COOLING;
 800611a:	797b      	ldrb	r3, [r7, #5]
 800611c:	4a4f      	ldr	r2, [pc, #316]	@ (800625c <temperature_auto_ctrl+0x18c>)
 800611e:	4413      	add	r3, r2
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		s_Temperature_CurrentState.TEC_HEATER_status |= (1 << channel);
 8006126:	4b4d      	ldr	r3, [pc, #308]	@ (800625c <temperature_auto_ctrl+0x18c>)
 8006128:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800612c:	b25a      	sxtb	r2, r3
 800612e:	797b      	ldrb	r3, [r7, #5]
 8006130:	2101      	movs	r1, #1
 8006132:	fa01 f303 	lsl.w	r3, r1, r3
 8006136:	b25b      	sxtb	r3, r3
 8006138:	4313      	orrs	r3, r2
 800613a:	b25b      	sxtb	r3, r3
 800613c:	b2da      	uxtb	r2, r3
 800613e:	4b47      	ldr	r3, [pc, #284]	@ (800625c <temperature_auto_ctrl+0x18c>)
 8006140:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << (channel+4));
 8006144:	4b45      	ldr	r3, [pc, #276]	@ (800625c <temperature_auto_ctrl+0x18c>)
 8006146:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800614a:	b25a      	sxtb	r2, r3
 800614c:	797b      	ldrb	r3, [r7, #5]
 800614e:	3304      	adds	r3, #4
 8006150:	2101      	movs	r1, #1
 8006152:	fa01 f303 	lsl.w	r3, r1, r3
 8006156:	b25b      	sxtb	r3, r3
 8006158:	43db      	mvns	r3, r3
 800615a:	b25b      	sxtb	r3, r3
 800615c:	4013      	ands	r3, r2
 800615e:	b25b      	sxtb	r3, r3
 8006160:	b2da      	uxtb	r2, r3
 8006162:	4b3e      	ldr	r3, [pc, #248]	@ (800625c <temperature_auto_ctrl+0x18c>)
 8006164:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
		heater_set_duty_pwm_channel(channel, 0);
		// update status
		s_Temperature_CurrentState.mode[channel] = IDLE;
		s_Temperature_CurrentState.TEC_HEATER_status &= ~((1 << (channel+4)) | (1 << channel));
	}
	return;
 8006168:	e074      	b.n	8006254 <temperature_auto_ctrl+0x184>
	else if (temperature_now < s_Temperature_CurrentState.Temperature_setpoint[channel] - s_Temperature_CurrentState.Low_Threshold)
 800616a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800616e:	797b      	ldrb	r3, [r7, #5]
 8006170:	493a      	ldr	r1, [pc, #232]	@ (800625c <temperature_auto_ctrl+0x18c>)
 8006172:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8006176:	4619      	mov	r1, r3
 8006178:	4b38      	ldr	r3, [pc, #224]	@ (800625c <temperature_auto_ctrl+0x18c>)
 800617a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800617e:	1acb      	subs	r3, r1, r3
 8006180:	429a      	cmp	r2, r3
 8006182:	da3a      	bge.n	80061fa <temperature_auto_ctrl+0x12a>
		lt8722_set_output_voltage_channel(channel, 0);
 8006184:	7979      	ldrb	r1, [r7, #5]
 8006186:	f04f 0200 	mov.w	r2, #0
 800618a:	f04f 0300 	mov.w	r3, #0
 800618e:	4608      	mov	r0, r1
 8006190:	f7fd ff08 	bl	8003fa4 <lt8722_set_output_voltage_channel>
		heater_set_duty_pwm_channel(channel, s_Temperature_CurrentState.Heater_duty[channel]);
 8006194:	797b      	ldrb	r3, [r7, #5]
 8006196:	4a31      	ldr	r2, [pc, #196]	@ (800625c <temperature_auto_ctrl+0x18c>)
 8006198:	3318      	adds	r3, #24
 800619a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800619e:	b29a      	uxth	r2, r3
 80061a0:	797b      	ldrb	r3, [r7, #5]
 80061a2:	4611      	mov	r1, r2
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7fd fa69 	bl	800367c <heater_set_duty_pwm_channel>
		s_Temperature_CurrentState.mode[channel] = HEATING;
 80061aa:	797b      	ldrb	r3, [r7, #5]
 80061ac:	4a2b      	ldr	r2, [pc, #172]	@ (800625c <temperature_auto_ctrl+0x18c>)
 80061ae:	4413      	add	r3, r2
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		s_Temperature_CurrentState.TEC_HEATER_status |= (1 << (channel+4));
 80061b6:	4b29      	ldr	r3, [pc, #164]	@ (800625c <temperature_auto_ctrl+0x18c>)
 80061b8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80061bc:	b25a      	sxtb	r2, r3
 80061be:	797b      	ldrb	r3, [r7, #5]
 80061c0:	3304      	adds	r3, #4
 80061c2:	2101      	movs	r1, #1
 80061c4:	fa01 f303 	lsl.w	r3, r1, r3
 80061c8:	b25b      	sxtb	r3, r3
 80061ca:	4313      	orrs	r3, r2
 80061cc:	b25b      	sxtb	r3, r3
 80061ce:	b2da      	uxtb	r2, r3
 80061d0:	4b22      	ldr	r3, [pc, #136]	@ (800625c <temperature_auto_ctrl+0x18c>)
 80061d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << channel);
 80061d6:	4b21      	ldr	r3, [pc, #132]	@ (800625c <temperature_auto_ctrl+0x18c>)
 80061d8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80061dc:	b25a      	sxtb	r2, r3
 80061de:	797b      	ldrb	r3, [r7, #5]
 80061e0:	2101      	movs	r1, #1
 80061e2:	fa01 f303 	lsl.w	r3, r1, r3
 80061e6:	b25b      	sxtb	r3, r3
 80061e8:	43db      	mvns	r3, r3
 80061ea:	b25b      	sxtb	r3, r3
 80061ec:	4013      	ands	r3, r2
 80061ee:	b25b      	sxtb	r3, r3
 80061f0:	b2da      	uxtb	r2, r3
 80061f2:	4b1a      	ldr	r3, [pc, #104]	@ (800625c <temperature_auto_ctrl+0x18c>)
 80061f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	return;
 80061f8:	e02c      	b.n	8006254 <temperature_auto_ctrl+0x184>
		lt8722_set_output_voltage_channel(channel, 0);
 80061fa:	7979      	ldrb	r1, [r7, #5]
 80061fc:	f04f 0200 	mov.w	r2, #0
 8006200:	f04f 0300 	mov.w	r3, #0
 8006204:	4608      	mov	r0, r1
 8006206:	f7fd fecd 	bl	8003fa4 <lt8722_set_output_voltage_channel>
		heater_set_duty_pwm_channel(channel, 0);
 800620a:	797b      	ldrb	r3, [r7, #5]
 800620c:	2100      	movs	r1, #0
 800620e:	4618      	mov	r0, r3
 8006210:	f7fd fa34 	bl	800367c <heater_set_duty_pwm_channel>
		s_Temperature_CurrentState.mode[channel] = IDLE;
 8006214:	797b      	ldrb	r3, [r7, #5]
 8006216:	4a11      	ldr	r2, [pc, #68]	@ (800625c <temperature_auto_ctrl+0x18c>)
 8006218:	4413      	add	r3, r2
 800621a:	2202      	movs	r2, #2
 800621c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		s_Temperature_CurrentState.TEC_HEATER_status &= ~((1 << (channel+4)) | (1 << channel));
 8006220:	4b0e      	ldr	r3, [pc, #56]	@ (800625c <temperature_auto_ctrl+0x18c>)
 8006222:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006226:	b25a      	sxtb	r2, r3
 8006228:	797b      	ldrb	r3, [r7, #5]
 800622a:	3304      	adds	r3, #4
 800622c:	2101      	movs	r1, #1
 800622e:	fa01 f303 	lsl.w	r3, r1, r3
 8006232:	b259      	sxtb	r1, r3
 8006234:	797b      	ldrb	r3, [r7, #5]
 8006236:	2001      	movs	r0, #1
 8006238:	fa00 f303 	lsl.w	r3, r0, r3
 800623c:	b25b      	sxtb	r3, r3
 800623e:	430b      	orrs	r3, r1
 8006240:	b25b      	sxtb	r3, r3
 8006242:	43db      	mvns	r3, r3
 8006244:	b25b      	sxtb	r3, r3
 8006246:	4013      	ands	r3, r2
 8006248:	b25b      	sxtb	r3, r3
 800624a:	b2da      	uxtb	r2, r3
 800624c:	4b03      	ldr	r3, [pc, #12]	@ (800625c <temperature_auto_ctrl+0x18c>)
 800624e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	return;
 8006252:	bf00      	nop
}
 8006254:	3708      	adds	r7, #8
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	20002238 	.word	0x20002238

08006260 <temperature_manual_ctrl>:

void temperature_manual_ctrl(uint8_t channel)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	4603      	mov	r3, r0
 8006268:	71fb      	strb	r3, [r7, #7]
	if ((s_Temperature_CurrentState.TEC_HEATER_status & (1 << channel)) == (1 << channel))
 800626a:	4b2b      	ldr	r3, [pc, #172]	@ (8006318 <temperature_manual_ctrl+0xb8>)
 800626c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006270:	4619      	mov	r1, r3
 8006272:	79fb      	ldrb	r3, [r7, #7]
 8006274:	2201      	movs	r2, #1
 8006276:	fa02 f303 	lsl.w	r3, r2, r3
 800627a:	ea01 0203 	and.w	r2, r1, r3
 800627e:	79fb      	ldrb	r3, [r7, #7]
 8006280:	2101      	movs	r1, #1
 8006282:	fa01 f303 	lsl.w	r3, r1, r3
 8006286:	429a      	cmp	r2, r3
 8006288:	d116      	bne.n	80062b8 <temperature_manual_ctrl+0x58>
	{
		// Turn off Heater
		heater_set_duty_pwm_channel(channel, 0);
 800628a:	79fb      	ldrb	r3, [r7, #7]
 800628c:	2100      	movs	r1, #0
 800628e:	4618      	mov	r0, r3
 8006290:	f7fd f9f4 	bl	800367c <heater_set_duty_pwm_channel>
		// Turn on TEC
		lt8722_set_output_voltage_channel(channel, s_Temperature_CurrentState.Tec_voltage[channel]);
 8006294:	79fb      	ldrb	r3, [r7, #7]
 8006296:	4a20      	ldr	r2, [pc, #128]	@ (8006318 <temperature_manual_ctrl+0xb8>)
 8006298:	3302      	adds	r3, #2
 800629a:	00db      	lsls	r3, r3, #3
 800629c:	4413      	add	r3, r2
 800629e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a2:	79f9      	ldrb	r1, [r7, #7]
 80062a4:	4608      	mov	r0, r1
 80062a6:	f7fd fe7d 	bl	8003fa4 <lt8722_set_output_voltage_channel>
		s_Temperature_CurrentState.mode[channel] = COOLING;
 80062aa:	79fb      	ldrb	r3, [r7, #7]
 80062ac:	4a1a      	ldr	r2, [pc, #104]	@ (8006318 <temperature_manual_ctrl+0xb8>)
 80062ae:	4413      	add	r3, r2
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		lt8722_set_output_voltage_channel(channel, 0);
		// Turn on Heater
		heater_set_duty_pwm_channel(channel, s_Temperature_CurrentState.Heater_duty[channel]);
		s_Temperature_CurrentState.mode[channel] = HEATING;
	}
	return;
 80062b6:	e02b      	b.n	8006310 <temperature_manual_ctrl+0xb0>
	else if ((s_Temperature_CurrentState.TEC_HEATER_status & (1 << (channel + 4))) == (1 << (channel + 4)))
 80062b8:	4b17      	ldr	r3, [pc, #92]	@ (8006318 <temperature_manual_ctrl+0xb8>)
 80062ba:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80062be:	4619      	mov	r1, r3
 80062c0:	79fb      	ldrb	r3, [r7, #7]
 80062c2:	3304      	adds	r3, #4
 80062c4:	2201      	movs	r2, #1
 80062c6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ca:	ea01 0203 	and.w	r2, r1, r3
 80062ce:	79fb      	ldrb	r3, [r7, #7]
 80062d0:	3304      	adds	r3, #4
 80062d2:	2101      	movs	r1, #1
 80062d4:	fa01 f303 	lsl.w	r3, r1, r3
 80062d8:	429a      	cmp	r2, r3
 80062da:	d119      	bne.n	8006310 <temperature_manual_ctrl+0xb0>
		lt8722_set_output_voltage_channel(channel, 0);
 80062dc:	79f9      	ldrb	r1, [r7, #7]
 80062de:	f04f 0200 	mov.w	r2, #0
 80062e2:	f04f 0300 	mov.w	r3, #0
 80062e6:	4608      	mov	r0, r1
 80062e8:	f7fd fe5c 	bl	8003fa4 <lt8722_set_output_voltage_channel>
		heater_set_duty_pwm_channel(channel, s_Temperature_CurrentState.Heater_duty[channel]);
 80062ec:	79fb      	ldrb	r3, [r7, #7]
 80062ee:	4a0a      	ldr	r2, [pc, #40]	@ (8006318 <temperature_manual_ctrl+0xb8>)
 80062f0:	3318      	adds	r3, #24
 80062f2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	79fb      	ldrb	r3, [r7, #7]
 80062fa:	4611      	mov	r1, r2
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7fd f9bd 	bl	800367c <heater_set_duty_pwm_channel>
		s_Temperature_CurrentState.mode[channel] = HEATING;
 8006302:	79fb      	ldrb	r3, [r7, #7]
 8006304:	4a04      	ldr	r2, [pc, #16]	@ (8006318 <temperature_manual_ctrl+0xb8>)
 8006306:	4413      	add	r3, r2
 8006308:	2201      	movs	r2, #1
 800630a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	return;
 800630e:	bf00      	nop
 8006310:	bf00      	nop
}
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	20002238 	.word	0x20002238

0800631c <temperature_init>:

void temperature_init(void)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	af00      	add	r7, sp, #0
	lt8722_init();
 8006320:	f7fd fd4c 	bl	8003dbc <lt8722_init>
	return;
 8006324:	bf00      	nop
}
 8006326:	bd80      	pop	{r7, pc}

08006328 <temperature_create_task>:

void temperature_create_task(void)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_task_context.taskHandle, &s_task_context.taskProperty);
 800632c:	4902      	ldr	r1, [pc, #8]	@ (8006338 <temperature_create_task+0x10>)
 800632e:	4803      	ldr	r0, [pc, #12]	@ (800633c <temperature_create_task+0x14>)
 8006330:	f001 ff16 	bl	8008160 <SCH_TASK_CreateTask>
	return;
 8006334:	bf00      	nop
}
 8006336:	bd80      	pop	{r7, pc}
 8006338:	20002220 	.word	0x20002220
 800633c:	2000221c 	.word	0x2000221c

08006340 <temperature_set_setpoint>:

void temperature_set_setpoint(uint8_t channel, int16_t setpoint)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	4603      	mov	r3, r0
 8006348:	460a      	mov	r2, r1
 800634a:	71fb      	strb	r3, [r7, #7]
 800634c:	4613      	mov	r3, r2
 800634e:	80bb      	strh	r3, [r7, #4]
	s_Temperature_CurrentState.Temperature_setpoint[channel] = setpoint;
 8006350:	79fb      	ldrb	r3, [r7, #7]
 8006352:	4905      	ldr	r1, [pc, #20]	@ (8006368 <temperature_set_setpoint+0x28>)
 8006354:	88ba      	ldrh	r2, [r7, #4]
 8006356:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	return;
 800635a:	bf00      	nop
}
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	20002238 	.word	0x20002238

0800636c <temperature_get_setpoint>:

int16_t temperature_get_setpoint(uint8_t channel)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	4603      	mov	r3, r0
 8006374:	71fb      	strb	r3, [r7, #7]
	return s_Temperature_CurrentState.Temperature_setpoint[channel];
 8006376:	79fb      	ldrb	r3, [r7, #7]
 8006378:	4a04      	ldr	r2, [pc, #16]	@ (800638c <temperature_get_setpoint+0x20>)
 800637a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
}
 800637e:	4618      	mov	r0, r3
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	20002238 	.word	0x20002238

08006390 <temperature_get_temp_NTC>:

int16_t temperature_get_temp_NTC(uint8_t channel)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	4603      	mov	r3, r0
 8006398:	71fb      	strb	r3, [r7, #7]
	return s_Temperature_CurrentState.NTC_temperature[channel];
 800639a:	79fb      	ldrb	r3, [r7, #7]
 800639c:	4a04      	ldr	r2, [pc, #16]	@ (80063b0 <temperature_get_temp_NTC+0x20>)
 800639e:	331c      	adds	r3, #28
 80063a0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	20002238 	.word	0x20002238

080063b4 <temperature_set_tec_vol>:

void temperature_set_tec_vol(uint8_t channel, uint16_t voltage)
{
 80063b4:	b490      	push	{r4, r7}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	4604      	mov	r4, r0
 80063bc:	4608      	mov	r0, r1
 80063be:	4621      	mov	r1, r4
 80063c0:	71f9      	strb	r1, [r7, #7]
 80063c2:	4601      	mov	r1, r0
 80063c4:	80b9      	strh	r1, [r7, #4]
	s_Temperature_CurrentState.Tec_voltage[channel] = voltage*1000000;
 80063c6:	88b9      	ldrh	r1, [r7, #4]
 80063c8:	4808      	ldr	r0, [pc, #32]	@ (80063ec <temperature_set_tec_vol+0x38>)
 80063ca:	fb00 f101 	mul.w	r1, r0, r1
 80063ce:	79f8      	ldrb	r0, [r7, #7]
 80063d0:	17cc      	asrs	r4, r1, #31
 80063d2:	460a      	mov	r2, r1
 80063d4:	4623      	mov	r3, r4
 80063d6:	4c06      	ldr	r4, [pc, #24]	@ (80063f0 <temperature_set_tec_vol+0x3c>)
 80063d8:	1c81      	adds	r1, r0, #2
 80063da:	00c9      	lsls	r1, r1, #3
 80063dc:	4421      	add	r1, r4
 80063de:	e9c1 2300 	strd	r2, r3, [r1]
}
 80063e2:	bf00      	nop
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bc90      	pop	{r4, r7}
 80063ea:	4770      	bx	lr
 80063ec:	000f4240 	.word	0x000f4240
 80063f0:	20002238 	.word	0x20002238

080063f4 <temperature_get_tec_vol>:

uint16_t temperature_get_tec_vol(uint8_t channel)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	4603      	mov	r3, r0
 80063fc:	71fb      	strb	r3, [r7, #7]
	return (s_Temperature_CurrentState.Tec_voltage[channel]/1000000);
 80063fe:	79fb      	ldrb	r3, [r7, #7]
 8006400:	4a08      	ldr	r2, [pc, #32]	@ (8006424 <temperature_get_tec_vol+0x30>)
 8006402:	3302      	adds	r3, #2
 8006404:	00db      	lsls	r3, r3, #3
 8006406:	4413      	add	r3, r2
 8006408:	e9d3 0100 	ldrd	r0, r1, [r3]
 800640c:	4a06      	ldr	r2, [pc, #24]	@ (8006428 <temperature_get_tec_vol+0x34>)
 800640e:	f04f 0300 	mov.w	r3, #0
 8006412:	f7f9 ff45 	bl	80002a0 <__aeabi_ldivmod>
 8006416:	4602      	mov	r2, r0
 8006418:	460b      	mov	r3, r1
 800641a:	b293      	uxth	r3, r2
}
 800641c:	4618      	mov	r0, r3
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	20002238 	.word	0x20002238
 8006428:	000f4240 	.word	0x000f4240

0800642c <temperature_set_heater_duty>:

void temperature_set_heater_duty(uint8_t channel, uint8_t duty)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	4603      	mov	r3, r0
 8006434:	460a      	mov	r2, r1
 8006436:	71fb      	strb	r3, [r7, #7]
 8006438:	4613      	mov	r3, r2
 800643a:	71bb      	strb	r3, [r7, #6]
	s_Temperature_CurrentState.Heater_duty[channel] = duty*9999/100;
 800643c:	79bb      	ldrb	r3, [r7, #6]
 800643e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8006442:	fb02 f303 	mul.w	r3, r2, r3
 8006446:	4a09      	ldr	r2, [pc, #36]	@ (800646c <temperature_set_heater_duty+0x40>)
 8006448:	fb82 1203 	smull	r1, r2, r2, r3
 800644c:	1152      	asrs	r2, r2, #5
 800644e:	17db      	asrs	r3, r3, #31
 8006450:	1ad2      	subs	r2, r2, r3
 8006452:	79fb      	ldrb	r3, [r7, #7]
 8006454:	b211      	sxth	r1, r2
 8006456:	4a06      	ldr	r2, [pc, #24]	@ (8006470 <temperature_set_heater_duty+0x44>)
 8006458:	3318      	adds	r3, #24
 800645a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 800645e:	bf00      	nop
 8006460:	370c      	adds	r7, #12
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	51eb851f 	.word	0x51eb851f
 8006470:	20002238 	.word	0x20002238

08006474 <temperature_get_heater_duty>:
uint8_t temperature_get_heater_duty(uint8_t channel)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	4603      	mov	r3, r0
 800647c:	71fb      	strb	r3, [r7, #7]
	return (s_Temperature_CurrentState.Heater_duty[channel]*100/9999);
 800647e:	79fb      	ldrb	r3, [r7, #7]
 8006480:	4a0a      	ldr	r2, [pc, #40]	@ (80064ac <temperature_get_heater_duty+0x38>)
 8006482:	3318      	adds	r3, #24
 8006484:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8006488:	461a      	mov	r2, r3
 800648a:	2364      	movs	r3, #100	@ 0x64
 800648c:	fb02 f303 	mul.w	r3, r2, r3
 8006490:	4a07      	ldr	r2, [pc, #28]	@ (80064b0 <temperature_get_heater_duty+0x3c>)
 8006492:	fb82 1203 	smull	r1, r2, r2, r3
 8006496:	1212      	asrs	r2, r2, #8
 8006498:	17db      	asrs	r3, r3, #31
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	b2db      	uxtb	r3, r3
}
 800649e:	4618      	mov	r0, r3
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	20002238 	.word	0x20002238
 80064b0:	068de3af 	.word	0x068de3af

080064b4 <temperature_set_auto_ctrl>:

void temperature_set_auto_ctrl(uint8_t auto_0, uint8_t auto_1, uint8_t auto_2, uint8_t auto_3)
{
 80064b4:	b490      	push	{r4, r7}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	4604      	mov	r4, r0
 80064bc:	4608      	mov	r0, r1
 80064be:	4611      	mov	r1, r2
 80064c0:	461a      	mov	r2, r3
 80064c2:	4623      	mov	r3, r4
 80064c4:	71fb      	strb	r3, [r7, #7]
 80064c6:	4603      	mov	r3, r0
 80064c8:	71bb      	strb	r3, [r7, #6]
 80064ca:	460b      	mov	r3, r1
 80064cc:	717b      	strb	r3, [r7, #5]
 80064ce:	4613      	mov	r3, r2
 80064d0:	713b      	strb	r3, [r7, #4]
	s_Temperature_CurrentState.Temp_status |= (auto_0 << 1) | (auto_1 << 3) | (auto_2 << 5) | (auto_3 << 7);
 80064d2:	4b10      	ldr	r3, [pc, #64]	@ (8006514 <temperature_set_auto_ctrl+0x60>)
 80064d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064d8:	b25a      	sxtb	r2, r3
 80064da:	79fb      	ldrb	r3, [r7, #7]
 80064dc:	005b      	lsls	r3, r3, #1
 80064de:	b259      	sxtb	r1, r3
 80064e0:	79bb      	ldrb	r3, [r7, #6]
 80064e2:	00db      	lsls	r3, r3, #3
 80064e4:	b25b      	sxtb	r3, r3
 80064e6:	430b      	orrs	r3, r1
 80064e8:	b259      	sxtb	r1, r3
 80064ea:	797b      	ldrb	r3, [r7, #5]
 80064ec:	015b      	lsls	r3, r3, #5
 80064ee:	b25b      	sxtb	r3, r3
 80064f0:	430b      	orrs	r3, r1
 80064f2:	b259      	sxtb	r1, r3
 80064f4:	793b      	ldrb	r3, [r7, #4]
 80064f6:	01db      	lsls	r3, r3, #7
 80064f8:	b25b      	sxtb	r3, r3
 80064fa:	430b      	orrs	r3, r1
 80064fc:	b25b      	sxtb	r3, r3
 80064fe:	4313      	orrs	r3, r2
 8006500:	b25b      	sxtb	r3, r3
 8006502:	b2da      	uxtb	r2, r3
 8006504:	4b03      	ldr	r3, [pc, #12]	@ (8006514 <temperature_set_auto_ctrl+0x60>)
 8006506:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	return;
 800650a:	bf00      	nop
}
 800650c:	3708      	adds	r7, #8
 800650e:	46bd      	mov	sp, r7
 8006510:	bc90      	pop	{r4, r7}
 8006512:	4770      	bx	lr
 8006514:	20002238 	.word	0x20002238

08006518 <temperature_set_ctrl>:

void temperature_set_ctrl(mode_ctrl_temp_t mode_0, mode_ctrl_temp_t mode_1, mode_ctrl_temp_t mode_2, mode_ctrl_temp_t mode_3)
{
 8006518:	b490      	push	{r4, r7}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	4604      	mov	r4, r0
 8006520:	4608      	mov	r0, r1
 8006522:	4611      	mov	r1, r2
 8006524:	461a      	mov	r2, r3
 8006526:	4623      	mov	r3, r4
 8006528:	71fb      	strb	r3, [r7, #7]
 800652a:	4603      	mov	r3, r0
 800652c:	71bb      	strb	r3, [r7, #6]
 800652e:	460b      	mov	r3, r1
 8006530:	717b      	strb	r3, [r7, #5]
 8006532:	4613      	mov	r3, r2
 8006534:	713b      	strb	r3, [r7, #4]
	if (mode_0 == HEAT)
 8006536:	79fb      	ldrb	r3, [r7, #7]
 8006538:	2b02      	cmp	r3, #2
 800653a:	d112      	bne.n	8006562 <temperature_set_ctrl+0x4a>
	{
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << TEC0_ON);
 800653c:	4b7c      	ldr	r3, [pc, #496]	@ (8006730 <temperature_set_ctrl+0x218>)
 800653e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006542:	f023 0301 	bic.w	r3, r3, #1
 8006546:	b2da      	uxtb	r2, r3
 8006548:	4b79      	ldr	r3, [pc, #484]	@ (8006730 <temperature_set_ctrl+0x218>)
 800654a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
		s_Temperature_CurrentState.TEC_HEATER_status |= (1 << HEATER0_ON);
 800654e:	4b78      	ldr	r3, [pc, #480]	@ (8006730 <temperature_set_ctrl+0x218>)
 8006550:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006554:	f043 0310 	orr.w	r3, r3, #16
 8006558:	b2da      	uxtb	r2, r3
 800655a:	4b75      	ldr	r3, [pc, #468]	@ (8006730 <temperature_set_ctrl+0x218>)
 800655c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006560:	e027      	b.n	80065b2 <temperature_set_ctrl+0x9a>
	}
	else if (mode_0 == COOL)
 8006562:	79fb      	ldrb	r3, [r7, #7]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d112      	bne.n	800658e <temperature_set_ctrl+0x76>
	{
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << HEATER0_ON);
 8006568:	4b71      	ldr	r3, [pc, #452]	@ (8006730 <temperature_set_ctrl+0x218>)
 800656a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800656e:	f023 0310 	bic.w	r3, r3, #16
 8006572:	b2da      	uxtb	r2, r3
 8006574:	4b6e      	ldr	r3, [pc, #440]	@ (8006730 <temperature_set_ctrl+0x218>)
 8006576:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
		s_Temperature_CurrentState.TEC_HEATER_status |= (1 << TEC0_ON);
 800657a:	4b6d      	ldr	r3, [pc, #436]	@ (8006730 <temperature_set_ctrl+0x218>)
 800657c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006580:	f043 0301 	orr.w	r3, r3, #1
 8006584:	b2da      	uxtb	r2, r3
 8006586:	4b6a      	ldr	r3, [pc, #424]	@ (8006730 <temperature_set_ctrl+0x218>)
 8006588:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800658c:	e011      	b.n	80065b2 <temperature_set_ctrl+0x9a>

	}
	else
	{
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << TEC0_ON);
 800658e:	4b68      	ldr	r3, [pc, #416]	@ (8006730 <temperature_set_ctrl+0x218>)
 8006590:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006594:	f023 0301 	bic.w	r3, r3, #1
 8006598:	b2da      	uxtb	r2, r3
 800659a:	4b65      	ldr	r3, [pc, #404]	@ (8006730 <temperature_set_ctrl+0x218>)
 800659c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << HEATER0_ON);
 80065a0:	4b63      	ldr	r3, [pc, #396]	@ (8006730 <temperature_set_ctrl+0x218>)
 80065a2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80065a6:	f023 0310 	bic.w	r3, r3, #16
 80065aa:	b2da      	uxtb	r2, r3
 80065ac:	4b60      	ldr	r3, [pc, #384]	@ (8006730 <temperature_set_ctrl+0x218>)
 80065ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	}
	if (mode_1 == HEAT)
 80065b2:	79bb      	ldrb	r3, [r7, #6]
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d112      	bne.n	80065de <temperature_set_ctrl+0xc6>
	{
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << TEC1_ON);
 80065b8:	4b5d      	ldr	r3, [pc, #372]	@ (8006730 <temperature_set_ctrl+0x218>)
 80065ba:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80065be:	f023 0302 	bic.w	r3, r3, #2
 80065c2:	b2da      	uxtb	r2, r3
 80065c4:	4b5a      	ldr	r3, [pc, #360]	@ (8006730 <temperature_set_ctrl+0x218>)
 80065c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
		s_Temperature_CurrentState.TEC_HEATER_status |= (1 << HEATER1_ON);
 80065ca:	4b59      	ldr	r3, [pc, #356]	@ (8006730 <temperature_set_ctrl+0x218>)
 80065cc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80065d0:	f043 0320 	orr.w	r3, r3, #32
 80065d4:	b2da      	uxtb	r2, r3
 80065d6:	4b56      	ldr	r3, [pc, #344]	@ (8006730 <temperature_set_ctrl+0x218>)
 80065d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80065dc:	e027      	b.n	800662e <temperature_set_ctrl+0x116>
	}
	else if (mode_1 == COOL)
 80065de:	79bb      	ldrb	r3, [r7, #6]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d112      	bne.n	800660a <temperature_set_ctrl+0xf2>
	{
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << HEATER1_ON);
 80065e4:	4b52      	ldr	r3, [pc, #328]	@ (8006730 <temperature_set_ctrl+0x218>)
 80065e6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80065ea:	f023 0320 	bic.w	r3, r3, #32
 80065ee:	b2da      	uxtb	r2, r3
 80065f0:	4b4f      	ldr	r3, [pc, #316]	@ (8006730 <temperature_set_ctrl+0x218>)
 80065f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
		s_Temperature_CurrentState.TEC_HEATER_status |= (1 << TEC1_ON);
 80065f6:	4b4e      	ldr	r3, [pc, #312]	@ (8006730 <temperature_set_ctrl+0x218>)
 80065f8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80065fc:	f043 0302 	orr.w	r3, r3, #2
 8006600:	b2da      	uxtb	r2, r3
 8006602:	4b4b      	ldr	r3, [pc, #300]	@ (8006730 <temperature_set_ctrl+0x218>)
 8006604:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006608:	e011      	b.n	800662e <temperature_set_ctrl+0x116>

	}
	else
	{
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << TEC1_ON);
 800660a:	4b49      	ldr	r3, [pc, #292]	@ (8006730 <temperature_set_ctrl+0x218>)
 800660c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006610:	f023 0302 	bic.w	r3, r3, #2
 8006614:	b2da      	uxtb	r2, r3
 8006616:	4b46      	ldr	r3, [pc, #280]	@ (8006730 <temperature_set_ctrl+0x218>)
 8006618:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << HEATER1_ON);
 800661c:	4b44      	ldr	r3, [pc, #272]	@ (8006730 <temperature_set_ctrl+0x218>)
 800661e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006622:	f023 0320 	bic.w	r3, r3, #32
 8006626:	b2da      	uxtb	r2, r3
 8006628:	4b41      	ldr	r3, [pc, #260]	@ (8006730 <temperature_set_ctrl+0x218>)
 800662a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	}
	if (mode_2 == HEAT)
 800662e:	797b      	ldrb	r3, [r7, #5]
 8006630:	2b02      	cmp	r3, #2
 8006632:	d112      	bne.n	800665a <temperature_set_ctrl+0x142>
	{
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << TEC2_ON);
 8006634:	4b3e      	ldr	r3, [pc, #248]	@ (8006730 <temperature_set_ctrl+0x218>)
 8006636:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800663a:	f023 0304 	bic.w	r3, r3, #4
 800663e:	b2da      	uxtb	r2, r3
 8006640:	4b3b      	ldr	r3, [pc, #236]	@ (8006730 <temperature_set_ctrl+0x218>)
 8006642:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
		s_Temperature_CurrentState.TEC_HEATER_status |= (1 << HEATER2_ON);
 8006646:	4b3a      	ldr	r3, [pc, #232]	@ (8006730 <temperature_set_ctrl+0x218>)
 8006648:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800664c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006650:	b2da      	uxtb	r2, r3
 8006652:	4b37      	ldr	r3, [pc, #220]	@ (8006730 <temperature_set_ctrl+0x218>)
 8006654:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006658:	e027      	b.n	80066aa <temperature_set_ctrl+0x192>
	}
	else if (mode_2 == COOL)
 800665a:	797b      	ldrb	r3, [r7, #5]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d112      	bne.n	8006686 <temperature_set_ctrl+0x16e>
	{
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << HEATER2_ON);
 8006660:	4b33      	ldr	r3, [pc, #204]	@ (8006730 <temperature_set_ctrl+0x218>)
 8006662:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006666:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800666a:	b2da      	uxtb	r2, r3
 800666c:	4b30      	ldr	r3, [pc, #192]	@ (8006730 <temperature_set_ctrl+0x218>)
 800666e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
		s_Temperature_CurrentState.TEC_HEATER_status |= (1 << TEC2_ON);
 8006672:	4b2f      	ldr	r3, [pc, #188]	@ (8006730 <temperature_set_ctrl+0x218>)
 8006674:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006678:	f043 0304 	orr.w	r3, r3, #4
 800667c:	b2da      	uxtb	r2, r3
 800667e:	4b2c      	ldr	r3, [pc, #176]	@ (8006730 <temperature_set_ctrl+0x218>)
 8006680:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006684:	e011      	b.n	80066aa <temperature_set_ctrl+0x192>

	}
	else
	{
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << TEC2_ON);
 8006686:	4b2a      	ldr	r3, [pc, #168]	@ (8006730 <temperature_set_ctrl+0x218>)
 8006688:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800668c:	f023 0304 	bic.w	r3, r3, #4
 8006690:	b2da      	uxtb	r2, r3
 8006692:	4b27      	ldr	r3, [pc, #156]	@ (8006730 <temperature_set_ctrl+0x218>)
 8006694:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << HEATER2_ON);
 8006698:	4b25      	ldr	r3, [pc, #148]	@ (8006730 <temperature_set_ctrl+0x218>)
 800669a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800669e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	4b22      	ldr	r3, [pc, #136]	@ (8006730 <temperature_set_ctrl+0x218>)
 80066a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	}
	if (mode_3 == HEAT)
 80066aa:	793b      	ldrb	r3, [r7, #4]
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d112      	bne.n	80066d6 <temperature_set_ctrl+0x1be>
	{
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << TEC3_ON);
 80066b0:	4b1f      	ldr	r3, [pc, #124]	@ (8006730 <temperature_set_ctrl+0x218>)
 80066b2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80066b6:	f023 0308 	bic.w	r3, r3, #8
 80066ba:	b2da      	uxtb	r2, r3
 80066bc:	4b1c      	ldr	r3, [pc, #112]	@ (8006730 <temperature_set_ctrl+0x218>)
 80066be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
		s_Temperature_CurrentState.TEC_HEATER_status |= (1 << HEATER3_ON);
 80066c2:	4b1b      	ldr	r3, [pc, #108]	@ (8006730 <temperature_set_ctrl+0x218>)
 80066c4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80066c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80066cc:	b2da      	uxtb	r2, r3
 80066ce:	4b18      	ldr	r3, [pc, #96]	@ (8006730 <temperature_set_ctrl+0x218>)
 80066d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	else
	{
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << TEC3_ON);
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << HEATER3_ON);
	}
	return;
 80066d4:	e028      	b.n	8006728 <temperature_set_ctrl+0x210>
	else if (mode_3 == COOL)
 80066d6:	793b      	ldrb	r3, [r7, #4]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d112      	bne.n	8006702 <temperature_set_ctrl+0x1ea>
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << HEATER3_ON);
 80066dc:	4b14      	ldr	r3, [pc, #80]	@ (8006730 <temperature_set_ctrl+0x218>)
 80066de:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80066e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	4b11      	ldr	r3, [pc, #68]	@ (8006730 <temperature_set_ctrl+0x218>)
 80066ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
		s_Temperature_CurrentState.TEC_HEATER_status |= (1 << TEC3_ON);
 80066ee:	4b10      	ldr	r3, [pc, #64]	@ (8006730 <temperature_set_ctrl+0x218>)
 80066f0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80066f4:	f043 0308 	orr.w	r3, r3, #8
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006730 <temperature_set_ctrl+0x218>)
 80066fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	return;
 8006700:	e012      	b.n	8006728 <temperature_set_ctrl+0x210>
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << TEC3_ON);
 8006702:	4b0b      	ldr	r3, [pc, #44]	@ (8006730 <temperature_set_ctrl+0x218>)
 8006704:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006708:	f023 0308 	bic.w	r3, r3, #8
 800670c:	b2da      	uxtb	r2, r3
 800670e:	4b08      	ldr	r3, [pc, #32]	@ (8006730 <temperature_set_ctrl+0x218>)
 8006710:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
		s_Temperature_CurrentState.TEC_HEATER_status &= ~(1 << HEATER3_ON);
 8006714:	4b06      	ldr	r3, [pc, #24]	@ (8006730 <temperature_set_ctrl+0x218>)
 8006716:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800671a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800671e:	b2da      	uxtb	r2, r3
 8006720:	4b03      	ldr	r3, [pc, #12]	@ (8006730 <temperature_set_ctrl+0x218>)
 8006722:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	return;
 8006726:	bf00      	nop
}
 8006728:	3708      	adds	r7, #8
 800672a:	46bd      	mov	sp, r7
 800672c:	bc90      	pop	{r4, r7}
 800672e:	4770      	bx	lr
 8006730:	20002238 	.word	0x20002238

08006734 <LL_GPIO_SetOutputPin>:
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	683a      	ldr	r2, [r7, #0]
 8006742:	619a      	str	r2, [r3, #24]
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <LL_GPIO_ResetOutputPin>:
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	041a      	lsls	r2, r3, #16
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	619a      	str	r2, [r3, #24]
}
 8006762:	bf00      	nop
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
	...

08006770 <WDT_init>:
		181
	}
};

void WDT_init(void)
{
 8006770:	b480      	push	{r7}
 8006772:	af00      	add	r7, sp, #0
	WDT_Current = 0;
 8006774:	4b03      	ldr	r3, [pc, #12]	@ (8006784 <WDT_init+0x14>)
 8006776:	2200      	movs	r2, #0
 8006778:	701a      	strb	r2, [r3, #0]
}
 800677a:	bf00      	nop
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr
 8006784:	2000273c 	.word	0x2000273c

08006788 <WDT_create_task>:

void WDT_create_task(void)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&wdt_task_context.taskHandle, &wdt_task_context.taskProperty);
 800678c:	4902      	ldr	r1, [pc, #8]	@ (8006798 <WDT_create_task+0x10>)
 800678e:	4803      	ldr	r0, [pc, #12]	@ (800679c <WDT_create_task+0x14>)
 8006790:	f001 fce6 	bl	8008160 <SCH_TASK_CreateTask>
}
 8006794:	bf00      	nop
 8006796:	bd80      	pop	{r7, pc}
 8006798:	20002284 	.word	0x20002284
 800679c:	20002280 	.word	0x20002280

080067a0 <status_wdt_update>:

void status_wdt_update(void)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	af00      	add	r7, sp, #0
	if (WDT_Current)
 80067a4:	4b14      	ldr	r3, [pc, #80]	@ (80067f8 <status_wdt_update+0x58>)
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d012      	beq.n	80067d2 <status_wdt_update+0x32>
	{
		if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 80067ac:	2001      	movs	r0, #1
 80067ae:	f001 fcc1 	bl	8008134 <SCH_TIM_HasCompleted>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d01d      	beq.n	80067f4 <status_wdt_update+0x54>
		{
			WDT_Current = 0;
 80067b8:	4b0f      	ldr	r3, [pc, #60]	@ (80067f8 <status_wdt_update+0x58>)
 80067ba:	2200      	movs	r2, #0
 80067bc:	701a      	strb	r2, [r3, #0]
			LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 80067be:	2102      	movs	r1, #2
 80067c0:	480e      	ldr	r0, [pc, #56]	@ (80067fc <status_wdt_update+0x5c>)
 80067c2:	f7ff ffc5 	bl	8006750 <LL_GPIO_ResetOutputPin>
			SCH_TIM_Start(SCH_TIM_WDT,LOW_PERIOD);	//restart
 80067c6:	f44f 7116 	mov.w	r1, #600	@ 0x258
 80067ca:	2001      	movs	r0, #1
 80067cc:	f001 fc9c 	bl	8008108 <SCH_TIM_Start>
			WDT_Current = 1;
			LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
			SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
		}
	}
}
 80067d0:	e010      	b.n	80067f4 <status_wdt_update+0x54>
		if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 80067d2:	2001      	movs	r0, #1
 80067d4:	f001 fcae 	bl	8008134 <SCH_TIM_HasCompleted>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00a      	beq.n	80067f4 <status_wdt_update+0x54>
			WDT_Current = 1;
 80067de:	4b06      	ldr	r3, [pc, #24]	@ (80067f8 <status_wdt_update+0x58>)
 80067e0:	2201      	movs	r2, #1
 80067e2:	701a      	strb	r2, [r3, #0]
			LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 80067e4:	2102      	movs	r1, #2
 80067e6:	4805      	ldr	r0, [pc, #20]	@ (80067fc <status_wdt_update+0x5c>)
 80067e8:	f7ff ffa4 	bl	8006734 <LL_GPIO_SetOutputPin>
			SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
 80067ec:	21c8      	movs	r1, #200	@ 0xc8
 80067ee:	2001      	movs	r0, #1
 80067f0:	f001 fc8a 	bl	8008108 <SCH_TIM_Start>
}
 80067f4:	bf00      	nop
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	2000273c 	.word	0x2000273c
 80067fc:	40020000 	.word	0x40020000

08006800 <LL_ADC_REG_SetSequencerLength>:
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800680e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	431a      	orrs	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800681a:	bf00      	nop
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <LL_ADC_IsEnabled>:
{
 8006826:	b480      	push	{r7}
 8006828:	b083      	sub	sp, #12
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b01      	cmp	r3, #1
 8006838:	bf0c      	ite	eq
 800683a:	2301      	moveq	r3, #1
 800683c:	2300      	movne	r3, #0
 800683e:	b2db      	uxtb	r3, r3
}
 8006840:	4618      	mov	r0, r3
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 800684c:	b590      	push	{r4, r7, lr}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8006856:	2300      	movs	r3, #0
 8006858:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 800685a:	481c      	ldr	r0, [pc, #112]	@ (80068cc <LL_ADC_CommonInit+0x80>)
 800685c:	f7ff ffe3 	bl	8006826 <LL_ADC_IsEnabled>
 8006860:	4604      	mov	r4, r0
 8006862:	481b      	ldr	r0, [pc, #108]	@ (80068d0 <LL_ADC_CommonInit+0x84>)
 8006864:	f7ff ffdf 	bl	8006826 <LL_ADC_IsEnabled>
 8006868:	4603      	mov	r3, r0
 800686a:	431c      	orrs	r4, r3
 800686c:	4819      	ldr	r0, [pc, #100]	@ (80068d4 <LL_ADC_CommonInit+0x88>)
 800686e:	f7ff ffda 	bl	8006826 <LL_ADC_IsEnabled>
 8006872:	4603      	mov	r3, r0
 8006874:	4323      	orrs	r3, r4
 8006876:	2b00      	cmp	r3, #0
 8006878:	d120      	bne.n	80068bc <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d012      	beq.n	80068a8 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	4b14      	ldr	r3, [pc, #80]	@ (80068d8 <LL_ADC_CommonInit+0x8c>)
 8006888:	4013      	ands	r3, r2
 800688a:	683a      	ldr	r2, [r7, #0]
 800688c:	6811      	ldr	r1, [r2, #0]
 800688e:	683a      	ldr	r2, [r7, #0]
 8006890:	6852      	ldr	r2, [r2, #4]
 8006892:	4311      	orrs	r1, r2
 8006894:	683a      	ldr	r2, [r7, #0]
 8006896:	6892      	ldr	r2, [r2, #8]
 8006898:	4311      	orrs	r1, r2
 800689a:	683a      	ldr	r2, [r7, #0]
 800689c:	68d2      	ldr	r2, [r2, #12]
 800689e:	430a      	orrs	r2, r1
 80068a0:	431a      	orrs	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	605a      	str	r2, [r3, #4]
 80068a6:	e00b      	b.n	80068c0 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685a      	ldr	r2, [r3, #4]
 80068ac:	4b0a      	ldr	r3, [pc, #40]	@ (80068d8 <LL_ADC_CommonInit+0x8c>)
 80068ae:	4013      	ands	r3, r2
 80068b0:	683a      	ldr	r2, [r7, #0]
 80068b2:	6812      	ldr	r2, [r2, #0]
 80068b4:	431a      	orrs	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	605a      	str	r2, [r3, #4]
 80068ba:	e001      	b.n	80068c0 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80068c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd90      	pop	{r4, r7, pc}
 80068ca:	bf00      	nop
 80068cc:	40012000 	.word	0x40012000
 80068d0:	40012100 	.word	0x40012100
 80068d4:	40012200 	.word	0x40012200
 80068d8:	fffc10e0 	.word	0xfffc10e0

080068dc <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80068e6:	2300      	movs	r3, #0
 80068e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f7ff ff9b 	bl	8006826 <LL_ADC_IsEnabled>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d117      	bne.n	8006926 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80068fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006902:	683a      	ldr	r2, [r7, #0]
 8006904:	6811      	ldr	r1, [r2, #0]
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	6892      	ldr	r2, [r2, #8]
 800690a:	430a      	orrs	r2, r1
 800690c:	431a      	orrs	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	605a      	str	r2, [r3, #4]
               ,
               ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );

    MODIFY_REG(ADCx->CR2,
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	431a      	orrs	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	609a      	str	r2, [r3, #8]
 8006924:	e001      	b.n	800692a <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800692a:	7bfb      	ldrb	r3, [r7, #15]
}
 800692c:	4618      	mov	r0, r3
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800693e:	2300      	movs	r3, #0
 8006940:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7ff ff6f 	bl	8006826 <LL_ADC_IsEnabled>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d12b      	bne.n	80069a6 <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d009      	beq.n	800696a <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	431a      	orrs	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	605a      	str	r2, [r3, #4]
 8006968:	e005      	b.n	8006976 <LL_ADC_REG_Init+0x42>
                 ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	605a      	str	r2, [r3, #4]
                 ,
                 LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }

    MODIFY_REG(ADCx->CR2,
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	689a      	ldr	r2, [r3, #8]
 800697a:	4b0e      	ldr	r3, [pc, #56]	@ (80069b4 <LL_ADC_REG_Init+0x80>)
 800697c:	4013      	ands	r3, r2
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	6812      	ldr	r2, [r2, #0]
 8006982:	f002 6170 	and.w	r1, r2, #251658240	@ 0xf000000
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	68d2      	ldr	r2, [r2, #12]
 800698a:	4311      	orrs	r1, r2
 800698c:	683a      	ldr	r2, [r7, #0]
 800698e:	6912      	ldr	r2, [r2, #16]
 8006990:	430a      	orrs	r2, r1
 8006992:	431a      	orrs	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	4619      	mov	r1, r3
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f7ff ff2e 	bl	8006800 <LL_ADC_REG_SetSequencerLength>
 80069a4:	e001      	b.n	80069aa <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80069aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	c0fffcfd 	.word	0xc0fffcfd

080069b8 <LL_GPIO_SetPinMode>:
{
 80069b8:	b480      	push	{r7}
 80069ba:	b08b      	sub	sp, #44	@ 0x2c
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	fa93 f3a3 	rbit	r3, r3
 80069d2:	613b      	str	r3, [r7, #16]
  return result;
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80069de:	2320      	movs	r3, #32
 80069e0:	e003      	b.n	80069ea <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	fab3 f383 	clz	r3, r3
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	005b      	lsls	r3, r3, #1
 80069ec:	2103      	movs	r1, #3
 80069ee:	fa01 f303 	lsl.w	r3, r1, r3
 80069f2:	43db      	mvns	r3, r3
 80069f4:	401a      	ands	r2, r3
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069fa:	6a3b      	ldr	r3, [r7, #32]
 80069fc:	fa93 f3a3 	rbit	r3, r3
 8006a00:	61fb      	str	r3, [r7, #28]
  return result;
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006a0c:	2320      	movs	r3, #32
 8006a0e:	e003      	b.n	8006a18 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8006a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a12:	fab3 f383 	clz	r3, r3
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	6879      	ldr	r1, [r7, #4]
 8006a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a20:	431a      	orrs	r2, r3
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	601a      	str	r2, [r3, #0]
}
 8006a26:	bf00      	nop
 8006a28:	372c      	adds	r7, #44	@ 0x2c
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <LL_GPIO_SetPinOutputType>:
{
 8006a32:	b480      	push	{r7}
 8006a34:	b085      	sub	sp, #20
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	60f8      	str	r0, [r7, #12]
 8006a3a:	60b9      	str	r1, [r7, #8]
 8006a3c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	685a      	ldr	r2, [r3, #4]
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	43db      	mvns	r3, r3
 8006a46:	401a      	ands	r2, r3
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	6879      	ldr	r1, [r7, #4]
 8006a4c:	fb01 f303 	mul.w	r3, r1, r3
 8006a50:	431a      	orrs	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	605a      	str	r2, [r3, #4]
}
 8006a56:	bf00      	nop
 8006a58:	3714      	adds	r7, #20
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <LL_GPIO_SetPinSpeed>:
{
 8006a62:	b480      	push	{r7}
 8006a64:	b08b      	sub	sp, #44	@ 0x2c
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	60f8      	str	r0, [r7, #12]
 8006a6a:	60b9      	str	r1, [r7, #8]
 8006a6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	689a      	ldr	r2, [r3, #8]
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	fa93 f3a3 	rbit	r3, r3
 8006a7c:	613b      	str	r3, [r7, #16]
  return result;
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d101      	bne.n	8006a8c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8006a88:	2320      	movs	r3, #32
 8006a8a:	e003      	b.n	8006a94 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	fab3 f383 	clz	r3, r3
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	005b      	lsls	r3, r3, #1
 8006a96:	2103      	movs	r1, #3
 8006a98:	fa01 f303 	lsl.w	r3, r1, r3
 8006a9c:	43db      	mvns	r3, r3
 8006a9e:	401a      	ands	r2, r3
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aa4:	6a3b      	ldr	r3, [r7, #32]
 8006aa6:	fa93 f3a3 	rbit	r3, r3
 8006aaa:	61fb      	str	r3, [r7, #28]
  return result;
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d101      	bne.n	8006aba <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8006ab6:	2320      	movs	r3, #32
 8006ab8:	e003      	b.n	8006ac2 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8006aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abc:	fab3 f383 	clz	r3, r3
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	005b      	lsls	r3, r3, #1
 8006ac4:	6879      	ldr	r1, [r7, #4]
 8006ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8006aca:	431a      	orrs	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	609a      	str	r2, [r3, #8]
}
 8006ad0:	bf00      	nop
 8006ad2:	372c      	adds	r7, #44	@ 0x2c
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <LL_GPIO_SetPinPull>:
{
 8006adc:	b480      	push	{r7}
 8006ade:	b08b      	sub	sp, #44	@ 0x2c
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	68da      	ldr	r2, [r3, #12]
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	fa93 f3a3 	rbit	r3, r3
 8006af6:	613b      	str	r3, [r7, #16]
  return result;
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8006b02:	2320      	movs	r3, #32
 8006b04:	e003      	b.n	8006b0e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	fab3 f383 	clz	r3, r3
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	005b      	lsls	r3, r3, #1
 8006b10:	2103      	movs	r1, #3
 8006b12:	fa01 f303 	lsl.w	r3, r1, r3
 8006b16:	43db      	mvns	r3, r3
 8006b18:	401a      	ands	r2, r3
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b1e:	6a3b      	ldr	r3, [r7, #32]
 8006b20:	fa93 f3a3 	rbit	r3, r3
 8006b24:	61fb      	str	r3, [r7, #28]
  return result;
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8006b30:	2320      	movs	r3, #32
 8006b32:	e003      	b.n	8006b3c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8006b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b36:	fab3 f383 	clz	r3, r3
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	005b      	lsls	r3, r3, #1
 8006b3e:	6879      	ldr	r1, [r7, #4]
 8006b40:	fa01 f303 	lsl.w	r3, r1, r3
 8006b44:	431a      	orrs	r2, r3
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	60da      	str	r2, [r3, #12]
}
 8006b4a:	bf00      	nop
 8006b4c:	372c      	adds	r7, #44	@ 0x2c
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <LL_GPIO_SetAFPin_0_7>:
{
 8006b56:	b480      	push	{r7}
 8006b58:	b08b      	sub	sp, #44	@ 0x2c
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	60f8      	str	r0, [r7, #12]
 8006b5e:	60b9      	str	r1, [r7, #8]
 8006b60:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6a1a      	ldr	r2, [r3, #32]
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	fa93 f3a3 	rbit	r3, r3
 8006b70:	613b      	str	r3, [r7, #16]
  return result;
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d101      	bne.n	8006b80 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8006b7c:	2320      	movs	r3, #32
 8006b7e:	e003      	b.n	8006b88 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	fab3 f383 	clz	r3, r3
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	210f      	movs	r1, #15
 8006b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b90:	43db      	mvns	r3, r3
 8006b92:	401a      	ands	r2, r3
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b98:	6a3b      	ldr	r3, [r7, #32]
 8006b9a:	fa93 f3a3 	rbit	r3, r3
 8006b9e:	61fb      	str	r3, [r7, #28]
  return result;
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d101      	bne.n	8006bae <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8006baa:	2320      	movs	r3, #32
 8006bac:	e003      	b.n	8006bb6 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8006bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb0:	fab3 f383 	clz	r3, r3
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	6879      	ldr	r1, [r7, #4]
 8006bba:	fa01 f303 	lsl.w	r3, r1, r3
 8006bbe:	431a      	orrs	r2, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	621a      	str	r2, [r3, #32]
}
 8006bc4:	bf00      	nop
 8006bc6:	372c      	adds	r7, #44	@ 0x2c
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <LL_GPIO_SetAFPin_8_15>:
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b08b      	sub	sp, #44	@ 0x2c
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	0a1b      	lsrs	r3, r3, #8
 8006be4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	fa93 f3a3 	rbit	r3, r3
 8006bec:	613b      	str	r3, [r7, #16]
  return result;
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d101      	bne.n	8006bfc <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8006bf8:	2320      	movs	r3, #32
 8006bfa:	e003      	b.n	8006c04 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	fab3 f383 	clz	r3, r3
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	210f      	movs	r1, #15
 8006c08:	fa01 f303 	lsl.w	r3, r1, r3
 8006c0c:	43db      	mvns	r3, r3
 8006c0e:	401a      	ands	r2, r3
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	0a1b      	lsrs	r3, r3, #8
 8006c14:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c16:	6a3b      	ldr	r3, [r7, #32]
 8006c18:	fa93 f3a3 	rbit	r3, r3
 8006c1c:	61fb      	str	r3, [r7, #28]
  return result;
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d101      	bne.n	8006c2c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8006c28:	2320      	movs	r3, #32
 8006c2a:	e003      	b.n	8006c34 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2e:	fab3 f383 	clz	r3, r3
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	6879      	ldr	r1, [r7, #4]
 8006c38:	fa01 f303 	lsl.w	r3, r1, r3
 8006c3c:	431a      	orrs	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8006c42:	bf00      	nop
 8006c44:	372c      	adds	r7, #44	@ 0x2c
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b08a      	sub	sp, #40	@ 0x28
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
 8006c56:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	fa93 f3a3 	rbit	r3, r3
 8006c6c:	617b      	str	r3, [r7, #20]
  return result;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <LL_GPIO_Init+0x2e>
    return 32U;
 8006c78:	2320      	movs	r3, #32
 8006c7a:	e003      	b.n	8006c84 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	fab3 f383 	clz	r3, r3
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006c86:	e057      	b.n	8006d38 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	2101      	movs	r1, #1
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c90:	fa01 f303 	lsl.w	r3, r1, r3
 8006c94:	4013      	ands	r3, r2
 8006c96:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8006c98:	6a3b      	ldr	r3, [r7, #32]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d049      	beq.n	8006d32 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d003      	beq.n	8006cae <LL_GPIO_Init+0x60>
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d10d      	bne.n	8006cca <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	6a39      	ldr	r1, [r7, #32]
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7ff fed3 	bl	8006a62 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	6a39      	ldr	r1, [r7, #32]
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f7ff feb4 	bl	8006a32 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	461a      	mov	r2, r3
 8006cd0:	6a39      	ldr	r1, [r7, #32]
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7ff ff02 	bl	8006adc <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d121      	bne.n	8006d24 <LL_GPIO_Init+0xd6>
 8006ce0:	6a3b      	ldr	r3, [r7, #32]
 8006ce2:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	fa93 f3a3 	rbit	r3, r3
 8006cea:	60bb      	str	r3, [r7, #8]
  return result;
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <LL_GPIO_Init+0xac>
    return 32U;
 8006cf6:	2320      	movs	r3, #32
 8006cf8:	e003      	b.n	8006d02 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	fab3 f383 	clz	r3, r3
 8006d00:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8006d02:	2b07      	cmp	r3, #7
 8006d04:	d807      	bhi.n	8006d16 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	6a39      	ldr	r1, [r7, #32]
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7ff ff21 	bl	8006b56 <LL_GPIO_SetAFPin_0_7>
 8006d14:	e006      	b.n	8006d24 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	6a39      	ldr	r1, [r7, #32]
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f7ff ff56 	bl	8006bd0 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	461a      	mov	r2, r3
 8006d2a:	6a39      	ldr	r1, [r7, #32]
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f7ff fe43 	bl	80069b8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d34:	3301      	adds	r3, #1
 8006d36:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1a0      	bne.n	8006c88 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3728      	adds	r7, #40	@ 0x28
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <LL_I2C_Enable>:
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f043 0201 	orr.w	r2, r3, #1
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	601a      	str	r2, [r3, #0]
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <LL_I2C_Disable>:
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f023 0201 	bic.w	r2, r3, #1
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	601a      	str	r2, [r3, #0]
}
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <LL_I2C_SetOwnAddress1>:
{
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006da4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006da8:	68b9      	ldr	r1, [r7, #8]
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	430a      	orrs	r2, r1
 8006dae:	431a      	orrs	r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	609a      	str	r2, [r3, #8]
}
 8006db4:	bf00      	nop
 8006db6:	3714      	adds	r7, #20
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <LL_I2C_ConfigSpeed>:
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b087      	sub	sp, #28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
 8006dcc:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	4a42      	ldr	r2, [pc, #264]	@ (8006ee4 <LL_I2C_ConfigSpeed+0x124>)
 8006dda:	fba2 2303 	umull	r2, r3, r2, r3
 8006dde:	0c9b      	lsrs	r3, r3, #18
 8006de0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	431a      	orrs	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	493a      	ldr	r1, [pc, #232]	@ (8006ee8 <LL_I2C_ConfigSpeed+0x128>)
 8006dfe:	428b      	cmp	r3, r1
 8006e00:	d802      	bhi.n	8006e08 <LL_I2C_ConfigSpeed+0x48>
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	3301      	adds	r3, #1
 8006e06:	e009      	b.n	8006e1c <LL_I2C_ConfigSpeed+0x5c>
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8006e0e:	fb01 f303 	mul.w	r3, r1, r3
 8006e12:	4936      	ldr	r1, [pc, #216]	@ (8006eec <LL_I2C_ConfigSpeed+0x12c>)
 8006e14:	fba1 1303 	umull	r1, r3, r1, r3
 8006e18:	099b      	lsrs	r3, r3, #6
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	431a      	orrs	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a30      	ldr	r2, [pc, #192]	@ (8006ee8 <LL_I2C_ConfigSpeed+0x128>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d939      	bls.n	8006e9e <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d117      	bne.n	8006e60 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	4613      	mov	r3, r2
 8006e34:	005b      	lsls	r3, r3, #1
 8006e36:	4413      	add	r3, r2
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d009      	beq.n	8006e5a <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	005b      	lsls	r3, r3, #1
 8006e4c:	4413      	add	r3, r2
 8006e4e:	68ba      	ldr	r2, [r7, #8]
 8006e50:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8006e54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e58:	e01d      	b.n	8006e96 <LL_I2C_ConfigSpeed+0xd6>
 8006e5a:	f248 0301 	movw	r3, #32769	@ 0x8001
 8006e5e:	e01a      	b.n	8006e96 <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	4613      	mov	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	4413      	add	r3, r2
 8006e68:	009a      	lsls	r2, r3, #2
 8006e6a:	4413      	add	r3, r2
 8006e6c:	68ba      	ldr	r2, [r7, #8]
 8006e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00b      	beq.n	8006e92 <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	009a      	lsls	r2, r3, #2
 8006e84:	4413      	add	r3, r2
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8006e8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e90:	e001      	b.n	8006e96 <LL_I2C_ConfigSpeed+0xd6>
 8006e92:	f248 0301 	movw	r3, #32769	@ 0x8001
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	617b      	str	r3, [r7, #20]
 8006e9c:	e011      	b.n	8006ec2 <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	005b      	lsls	r3, r3, #1
 8006ea2:	68ba      	ldr	r2, [r7, #8]
 8006ea4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ea8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006eac:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d005      	beq.n	8006ebe <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ebc:	e000      	b.n	8006ec0 <LL_I2C_ConfigSpeed+0x100>
 8006ebe:	2304      	movs	r3, #4
 8006ec0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	f423 434f 	bic.w	r3, r3, #52992	@ 0xcf00
 8006eca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006ece:	697a      	ldr	r2, [r7, #20]
 8006ed0:	431a      	orrs	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	61da      	str	r2, [r3, #28]
}
 8006ed6:	bf00      	nop
 8006ed8:	371c      	adds	r7, #28
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	431bde83 	.word	0x431bde83
 8006ee8:	000186a0 	.word	0x000186a0
 8006eec:	10624dd3 	.word	0x10624dd3

08006ef0 <LL_I2C_SetMode>:
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f023 021a 	bic.w	r2, r3, #26
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	431a      	orrs	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	601a      	str	r2, [r3, #0]
}
 8006f0a:	bf00      	nop
 8006f0c:	370c      	adds	r7, #12
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr

08006f16 <LL_I2C_AcknowledgeNextData>:
{
 8006f16:	b480      	push	{r7}
 8006f18:	b083      	sub	sp, #12
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
 8006f1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	431a      	orrs	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	601a      	str	r2, [r3, #0]
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <LL_APB1_GRP1_ForceReset>:
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR, Periphs);
 8006f44:	4b05      	ldr	r3, [pc, #20]	@ (8006f5c <LL_APB1_GRP1_ForceReset+0x20>)
 8006f46:	6a1a      	ldr	r2, [r3, #32]
 8006f48:	4904      	ldr	r1, [pc, #16]	@ (8006f5c <LL_APB1_GRP1_ForceReset+0x20>)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	620b      	str	r3, [r1, #32]
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr
 8006f5c:	40023800 	.word	0x40023800

08006f60 <LL_APB1_GRP1_ReleaseReset>:
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR, Periphs);
 8006f68:	4b06      	ldr	r3, [pc, #24]	@ (8006f84 <LL_APB1_GRP1_ReleaseReset+0x24>)
 8006f6a:	6a1a      	ldr	r2, [r3, #32]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	43db      	mvns	r3, r3
 8006f70:	4904      	ldr	r1, [pc, #16]	@ (8006f84 <LL_APB1_GRP1_ReleaseReset+0x24>)
 8006f72:	4013      	ands	r3, r2
 8006f74:	620b      	str	r3, [r1, #32]
}
 8006f76:	bf00      	nop
 8006f78:	370c      	adds	r7, #12
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	40023800 	.word	0x40023800

08006f88 <LL_I2C_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are de-initialized
  *          - ERROR  I2C registers are not de-initialized
  */
uint32_t LL_I2C_DeInit(I2C_TypeDef *I2Cx)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8006f90:	2300      	movs	r3, #0
 8006f92:	73fb      	strb	r3, [r7, #15]

  /* Check the I2C Instance I2Cx */
  assert_param(IS_I2C_ALL_INSTANCE(I2Cx));

  if (I2Cx == I2C1)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a16      	ldr	r2, [pc, #88]	@ (8006ff0 <LL_I2C_DeInit+0x68>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d108      	bne.n	8006fae <LL_I2C_DeInit+0x26>
  {
    /* Force reset of I2C clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_I2C1);
 8006f9c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8006fa0:	f7ff ffcc 	bl	8006f3c <LL_APB1_GRP1_ForceReset>

    /* Release reset of I2C clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C1);
 8006fa4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8006fa8:	f7ff ffda 	bl	8006f60 <LL_APB1_GRP1_ReleaseReset>
 8006fac:	e01b      	b.n	8006fe6 <LL_I2C_DeInit+0x5e>
  }
  else if (I2Cx == I2C2)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a10      	ldr	r2, [pc, #64]	@ (8006ff4 <LL_I2C_DeInit+0x6c>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d108      	bne.n	8006fc8 <LL_I2C_DeInit+0x40>
  {
    /* Force reset of I2C clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_I2C2);
 8006fb6:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8006fba:	f7ff ffbf 	bl	8006f3c <LL_APB1_GRP1_ForceReset>

    /* Release reset of I2C clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C2);
 8006fbe:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8006fc2:	f7ff ffcd 	bl	8006f60 <LL_APB1_GRP1_ReleaseReset>
 8006fc6:	e00e      	b.n	8006fe6 <LL_I2C_DeInit+0x5e>

  }
#if defined(I2C3)
  else if (I2Cx == I2C3)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a0b      	ldr	r2, [pc, #44]	@ (8006ff8 <LL_I2C_DeInit+0x70>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d108      	bne.n	8006fe2 <LL_I2C_DeInit+0x5a>
  {
    /* Force reset of I2C clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_I2C3);
 8006fd0:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8006fd4:	f7ff ffb2 	bl	8006f3c <LL_APB1_GRP1_ForceReset>

    /* Release reset of I2C clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C3);
 8006fd8:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8006fdc:	f7ff ffc0 	bl	8006f60 <LL_APB1_GRP1_ReleaseReset>
 8006fe0:	e001      	b.n	8006fe6 <LL_I2C_DeInit+0x5e>
  }
#endif
  else
  {
    status = ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	40005400 	.word	0x40005400
 8006ff4:	40005800 	.word	0x40005800
 8006ff8:	40005c00 	.word	0x40005c00

08006ffc <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b086      	sub	sp, #24
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f7ff feb2 	bl	8006d70 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800700c:	f107 0308 	add.w	r3, r7, #8
 8007010:	4618      	mov	r0, r3
 8007012:	f000 f895 	bl	8007140 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8007016:	6939      	ldr	r1, [r7, #16]
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	685a      	ldr	r2, [r3, #4]
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f7ff fecd 	bl	8006dc0 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	68d9      	ldr	r1, [r3, #12]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	461a      	mov	r2, r3
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f7ff fead 	bl	8006d90 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4619      	mov	r1, r3
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f7ff ff57 	bl	8006ef0 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f7ff fe84 	bl	8006d50 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	4619      	mov	r1, r3
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f7ff ff61 	bl	8006f16 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3718      	adds	r7, #24
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
	...

08007060 <LL_RCC_GetSysClkSource>:
{
 8007060:	b480      	push	{r7}
 8007062:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007064:	4b04      	ldr	r3, [pc, #16]	@ (8007078 <LL_RCC_GetSysClkSource+0x18>)
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	f003 030c 	and.w	r3, r3, #12
}
 800706c:	4618      	mov	r0, r3
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	40023800 	.word	0x40023800

0800707c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800707c:	b480      	push	{r7}
 800707e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007080:	4b04      	ldr	r3, [pc, #16]	@ (8007094 <LL_RCC_GetAHBPrescaler+0x18>)
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8007088:	4618      	mov	r0, r3
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	40023800 	.word	0x40023800

08007098 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007098:	b480      	push	{r7}
 800709a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800709c:	4b04      	ldr	r3, [pc, #16]	@ (80070b0 <LL_RCC_GetAPB1Prescaler+0x18>)
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	40023800 	.word	0x40023800

080070b4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80070b4:	b480      	push	{r7}
 80070b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80070b8:	4b04      	ldr	r3, [pc, #16]	@ (80070cc <LL_RCC_GetAPB2Prescaler+0x18>)
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	40023800 	.word	0x40023800

080070d0 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80070d0:	b480      	push	{r7}
 80070d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80070d4:	4b04      	ldr	r3, [pc, #16]	@ (80070e8 <LL_RCC_PLL_GetMainSource+0x18>)
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 80070dc:	4618      	mov	r0, r3
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	40023800 	.word	0x40023800

080070ec <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80070ec:	b480      	push	{r7}
 80070ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80070f0:	4b04      	ldr	r3, [pc, #16]	@ (8007104 <LL_RCC_PLL_GetN+0x18>)
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	099b      	lsrs	r3, r3, #6
 80070f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr
 8007104:	40023800 	.word	0x40023800

08007108 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8007108:	b480      	push	{r7}
 800710a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800710c:	4b04      	ldr	r3, [pc, #16]	@ (8007120 <LL_RCC_PLL_GetP+0x18>)
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8007114:	4618      	mov	r0, r3
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	40023800 	.word	0x40023800

08007124 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007124:	b480      	push	{r7}
 8007126:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007128:	4b04      	ldr	r3, [pc, #16]	@ (800713c <LL_RCC_PLL_GetDivider+0x18>)
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8007130:	4618      	mov	r0, r3
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	40023800 	.word	0x40023800

08007140 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8007148:	f000 f820 	bl	800718c <RCC_GetSystemClockFreq>
 800714c:	4602      	mov	r2, r0
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4618      	mov	r0, r3
 8007158:	f000 f840 	bl	80071dc <RCC_GetHCLKClockFreq>
 800715c:	4602      	mov	r2, r0
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	4618      	mov	r0, r3
 8007168:	f000 f84e 	bl	8007208 <RCC_GetPCLK1ClockFreq>
 800716c:	4602      	mov	r2, r0
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	4618      	mov	r0, r3
 8007178:	f000 f85a 	bl	8007230 <RCC_GetPCLK2ClockFreq>
 800717c:	4602      	mov	r2, r0
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	60da      	str	r2, [r3, #12]
}
 8007182:	bf00      	nop
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
	...

0800718c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8007192:	2300      	movs	r3, #0
 8007194:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8007196:	f7ff ff63 	bl	8007060 <LL_RCC_GetSysClkSource>
 800719a:	4603      	mov	r3, r0
 800719c:	2b08      	cmp	r3, #8
 800719e:	d00c      	beq.n	80071ba <RCC_GetSystemClockFreq+0x2e>
 80071a0:	2b08      	cmp	r3, #8
 80071a2:	d80f      	bhi.n	80071c4 <RCC_GetSystemClockFreq+0x38>
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d002      	beq.n	80071ae <RCC_GetSystemClockFreq+0x22>
 80071a8:	2b04      	cmp	r3, #4
 80071aa:	d003      	beq.n	80071b4 <RCC_GetSystemClockFreq+0x28>
 80071ac:	e00a      	b.n	80071c4 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80071ae:	4b09      	ldr	r3, [pc, #36]	@ (80071d4 <RCC_GetSystemClockFreq+0x48>)
 80071b0:	607b      	str	r3, [r7, #4]
      break;
 80071b2:	e00a      	b.n	80071ca <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80071b4:	4b08      	ldr	r3, [pc, #32]	@ (80071d8 <RCC_GetSystemClockFreq+0x4c>)
 80071b6:	607b      	str	r3, [r7, #4]
      break;
 80071b8:	e007      	b.n	80071ca <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80071ba:	2008      	movs	r0, #8
 80071bc:	f000 f84c 	bl	8007258 <RCC_PLL_GetFreqDomain_SYS>
 80071c0:	6078      	str	r0, [r7, #4]
      break;
 80071c2:	e002      	b.n	80071ca <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80071c4:	4b03      	ldr	r3, [pc, #12]	@ (80071d4 <RCC_GetSystemClockFreq+0x48>)
 80071c6:	607b      	str	r3, [r7, #4]
      break;
 80071c8:	bf00      	nop
  }

  return frequency;
 80071ca:	687b      	ldr	r3, [r7, #4]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3708      	adds	r7, #8
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	00f42400 	.word	0x00f42400
 80071d8:	007a1200 	.word	0x007a1200

080071dc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80071e4:	f7ff ff4a 	bl	800707c <LL_RCC_GetAHBPrescaler>
 80071e8:	4603      	mov	r3, r0
 80071ea:	091b      	lsrs	r3, r3, #4
 80071ec:	f003 030f 	and.w	r3, r3, #15
 80071f0:	4a04      	ldr	r2, [pc, #16]	@ (8007204 <RCC_GetHCLKClockFreq+0x28>)
 80071f2:	5cd3      	ldrb	r3, [r2, r3]
 80071f4:	461a      	mov	r2, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	40d3      	lsrs	r3, r2
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	08009ca0 	.word	0x08009ca0

08007208 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8007210:	f7ff ff42 	bl	8007098 <LL_RCC_GetAPB1Prescaler>
 8007214:	4603      	mov	r3, r0
 8007216:	0a9b      	lsrs	r3, r3, #10
 8007218:	4a04      	ldr	r2, [pc, #16]	@ (800722c <RCC_GetPCLK1ClockFreq+0x24>)
 800721a:	5cd3      	ldrb	r3, [r2, r3]
 800721c:	461a      	mov	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	40d3      	lsrs	r3, r2
}
 8007222:	4618      	mov	r0, r3
 8007224:	3708      	adds	r7, #8
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	08009cb0 	.word	0x08009cb0

08007230 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8007238:	f7ff ff3c 	bl	80070b4 <LL_RCC_GetAPB2Prescaler>
 800723c:	4603      	mov	r3, r0
 800723e:	0b5b      	lsrs	r3, r3, #13
 8007240:	4a04      	ldr	r2, [pc, #16]	@ (8007254 <RCC_GetPCLK2ClockFreq+0x24>)
 8007242:	5cd3      	ldrb	r3, [r2, r3]
 8007244:	461a      	mov	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	40d3      	lsrs	r3, r2
}
 800724a:	4618      	mov	r0, r3
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	08009cb0 	.word	0x08009cb0

08007258 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8007258:	b590      	push	{r4, r7, lr}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8007260:	2300      	movs	r3, #0
 8007262:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8007264:	2300      	movs	r3, #0
 8007266:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800726c:	f7ff ff30 	bl	80070d0 <LL_RCC_PLL_GetMainSource>
 8007270:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d004      	beq.n	8007282 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800727e:	d003      	beq.n	8007288 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8007280:	e005      	b.n	800728e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8007282:	4b12      	ldr	r3, [pc, #72]	@ (80072cc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8007284:	617b      	str	r3, [r7, #20]
      break;
 8007286:	e005      	b.n	8007294 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8007288:	4b11      	ldr	r3, [pc, #68]	@ (80072d0 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800728a:	617b      	str	r3, [r7, #20]
      break;
 800728c:	e002      	b.n	8007294 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800728e:	4b0f      	ldr	r3, [pc, #60]	@ (80072cc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8007290:	617b      	str	r3, [r7, #20]
      break;
 8007292:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b08      	cmp	r3, #8
 8007298:	d113      	bne.n	80072c2 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800729a:	f7ff ff43 	bl	8007124 <LL_RCC_PLL_GetDivider>
 800729e:	4602      	mov	r2, r0
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	fbb3 f4f2 	udiv	r4, r3, r2
 80072a6:	f7ff ff21 	bl	80070ec <LL_RCC_PLL_GetN>
 80072aa:	4603      	mov	r3, r0
 80072ac:	fb03 f404 	mul.w	r4, r3, r4
 80072b0:	f7ff ff2a 	bl	8007108 <LL_RCC_PLL_GetP>
 80072b4:	4603      	mov	r3, r0
 80072b6:	0c1b      	lsrs	r3, r3, #16
 80072b8:	3301      	adds	r3, #1
 80072ba:	005b      	lsls	r3, r3, #1
 80072bc:	fbb4 f3f3 	udiv	r3, r4, r3
 80072c0:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80072c2:	693b      	ldr	r3, [r7, #16]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	371c      	adds	r7, #28
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd90      	pop	{r4, r7, pc}
 80072cc:	00f42400 	.word	0x00f42400
 80072d0:	007a1200 	.word	0x007a1200

080072d4 <LL_SPI_IsEnabled>:
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072e4:	2b40      	cmp	r3, #64	@ 0x40
 80072e6:	d101      	bne.n	80072ec <LL_SPI_IsEnabled+0x18>
 80072e8:	2301      	movs	r3, #1
 80072ea:	e000      	b.n	80072ee <LL_SPI_IsEnabled+0x1a>
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	370c      	adds	r7, #12
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr

080072fa <LL_SPI_SetCRCPolynomial>:
{
 80072fa:	b480      	push	{r7}
 80072fc:	b083      	sub	sp, #12
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
 8007302:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	b29b      	uxth	r3, r3
 8007308:	461a      	mov	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	611a      	str	r2, [r3, #16]
}
 800730e:	bf00      	nop
 8007310:	370c      	adds	r7, #12
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr

0800731a <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b084      	sub	sp, #16
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
 8007322:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f7ff ffd3 	bl	80072d4 <LL_SPI_IsEnabled>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d139      	bne.n	80073a8 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800733c:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8007340:	683a      	ldr	r2, [r7, #0]
 8007342:	6811      	ldr	r1, [r2, #0]
 8007344:	683a      	ldr	r2, [r7, #0]
 8007346:	6852      	ldr	r2, [r2, #4]
 8007348:	4311      	orrs	r1, r2
 800734a:	683a      	ldr	r2, [r7, #0]
 800734c:	6892      	ldr	r2, [r2, #8]
 800734e:	4311      	orrs	r1, r2
 8007350:	683a      	ldr	r2, [r7, #0]
 8007352:	68d2      	ldr	r2, [r2, #12]
 8007354:	4311      	orrs	r1, r2
 8007356:	683a      	ldr	r2, [r7, #0]
 8007358:	6912      	ldr	r2, [r2, #16]
 800735a:	4311      	orrs	r1, r2
 800735c:	683a      	ldr	r2, [r7, #0]
 800735e:	6952      	ldr	r2, [r2, #20]
 8007360:	4311      	orrs	r1, r2
 8007362:	683a      	ldr	r2, [r7, #0]
 8007364:	6992      	ldr	r2, [r2, #24]
 8007366:	4311      	orrs	r1, r2
 8007368:	683a      	ldr	r2, [r7, #0]
 800736a:	69d2      	ldr	r2, [r2, #28]
 800736c:	4311      	orrs	r1, r2
 800736e:	683a      	ldr	r2, [r7, #0]
 8007370:	6a12      	ldr	r2, [r2, #32]
 8007372:	430a      	orrs	r2, r1
 8007374:	431a      	orrs	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	f023 0204 	bic.w	r2, r3, #4
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	695b      	ldr	r3, [r3, #20]
 8007386:	0c1b      	lsrs	r3, r3, #16
 8007388:	431a      	orrs	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007396:	d105      	bne.n	80073a4 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800739c:	4619      	mov	r1, r3
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f7ff ffab 	bl	80072fa <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80073a4:	2300      	movs	r3, #0
 80073a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	69db      	ldr	r3, [r3, #28]
 80073ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	61da      	str	r2, [r3, #28]
  return status;
 80073b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <LL_TIM_SetPrescaler>:
{
 80073be:	b480      	push	{r7}
 80073c0:	b083      	sub	sp, #12
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
 80073c6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	683a      	ldr	r2, [r7, #0]
 80073cc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80073ce:	bf00      	nop
 80073d0:	370c      	adds	r7, #12
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr

080073da <LL_TIM_SetAutoReload>:
{
 80073da:	b480      	push	{r7}
 80073dc:	b083      	sub	sp, #12
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
 80073e2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	683a      	ldr	r2, [r7, #0]
 80073e8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80073ea:	bf00      	nop
 80073ec:	370c      	adds	r7, #12
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <LL_TIM_SetRepetitionCounter>:
{
 80073f6:	b480      	push	{r7}
 80073f8:	b083      	sub	sp, #12
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
 80073fe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	683a      	ldr	r2, [r7, #0]
 8007404:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007406:	bf00      	nop
 8007408:	370c      	adds	r7, #12
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <LL_TIM_OC_SetCompareCH1>:
{
 8007412:	b480      	push	{r7}
 8007414:	b083      	sub	sp, #12
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
 800741a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8007422:	bf00      	nop
 8007424:	370c      	adds	r7, #12
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <LL_TIM_OC_SetCompareCH2>:
{
 800742e:	b480      	push	{r7}
 8007430:	b083      	sub	sp, #12
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
 8007436:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800743e:	bf00      	nop
 8007440:	370c      	adds	r7, #12
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <LL_TIM_OC_SetCompareCH3>:
{
 800744a:	b480      	push	{r7}
 800744c:	b083      	sub	sp, #12
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
 8007452:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	683a      	ldr	r2, [r7, #0]
 8007458:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800745a:	bf00      	nop
 800745c:	370c      	adds	r7, #12
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr

08007466 <LL_TIM_OC_SetCompareCH4>:
{
 8007466:	b480      	push	{r7}
 8007468:	b083      	sub	sp, #12
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	683a      	ldr	r2, [r7, #0]
 8007474:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007476:	bf00      	nop
 8007478:	370c      	adds	r7, #12
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr

08007482 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8007482:	b480      	push	{r7}
 8007484:	b083      	sub	sp, #12
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	f043 0201 	orr.w	r2, r3, #1
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	615a      	str	r2, [r3, #20]
}
 8007496:	bf00      	nop
 8007498:	370c      	adds	r7, #12
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
	...

080074a4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a3d      	ldr	r2, [pc, #244]	@ (80075ac <LL_TIM_Init+0x108>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d013      	beq.n	80074e4 <LL_TIM_Init+0x40>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074c2:	d00f      	beq.n	80074e4 <LL_TIM_Init+0x40>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a3a      	ldr	r2, [pc, #232]	@ (80075b0 <LL_TIM_Init+0x10c>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d00b      	beq.n	80074e4 <LL_TIM_Init+0x40>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a39      	ldr	r2, [pc, #228]	@ (80075b4 <LL_TIM_Init+0x110>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d007      	beq.n	80074e4 <LL_TIM_Init+0x40>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a38      	ldr	r2, [pc, #224]	@ (80075b8 <LL_TIM_Init+0x114>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d003      	beq.n	80074e4 <LL_TIM_Init+0x40>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a37      	ldr	r2, [pc, #220]	@ (80075bc <LL_TIM_Init+0x118>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d106      	bne.n	80074f2 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a2d      	ldr	r2, [pc, #180]	@ (80075ac <LL_TIM_Init+0x108>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d02b      	beq.n	8007552 <LL_TIM_Init+0xae>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007500:	d027      	beq.n	8007552 <LL_TIM_Init+0xae>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a2a      	ldr	r2, [pc, #168]	@ (80075b0 <LL_TIM_Init+0x10c>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d023      	beq.n	8007552 <LL_TIM_Init+0xae>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a29      	ldr	r2, [pc, #164]	@ (80075b4 <LL_TIM_Init+0x110>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d01f      	beq.n	8007552 <LL_TIM_Init+0xae>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a28      	ldr	r2, [pc, #160]	@ (80075b8 <LL_TIM_Init+0x114>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d01b      	beq.n	8007552 <LL_TIM_Init+0xae>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a27      	ldr	r2, [pc, #156]	@ (80075bc <LL_TIM_Init+0x118>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d017      	beq.n	8007552 <LL_TIM_Init+0xae>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a26      	ldr	r2, [pc, #152]	@ (80075c0 <LL_TIM_Init+0x11c>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d013      	beq.n	8007552 <LL_TIM_Init+0xae>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a25      	ldr	r2, [pc, #148]	@ (80075c4 <LL_TIM_Init+0x120>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d00f      	beq.n	8007552 <LL_TIM_Init+0xae>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a24      	ldr	r2, [pc, #144]	@ (80075c8 <LL_TIM_Init+0x124>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d00b      	beq.n	8007552 <LL_TIM_Init+0xae>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a23      	ldr	r2, [pc, #140]	@ (80075cc <LL_TIM_Init+0x128>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d007      	beq.n	8007552 <LL_TIM_Init+0xae>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a22      	ldr	r2, [pc, #136]	@ (80075d0 <LL_TIM_Init+0x12c>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d003      	beq.n	8007552 <LL_TIM_Init+0xae>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a21      	ldr	r2, [pc, #132]	@ (80075d4 <LL_TIM_Init+0x130>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d106      	bne.n	8007560 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	4313      	orrs	r3, r2
 800755e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	4619      	mov	r1, r3
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f7ff ff34 	bl	80073da <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	881b      	ldrh	r3, [r3, #0]
 8007576:	4619      	mov	r1, r3
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f7ff ff20 	bl	80073be <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a0a      	ldr	r2, [pc, #40]	@ (80075ac <LL_TIM_Init+0x108>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d003      	beq.n	800758e <LL_TIM_Init+0xea>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a0c      	ldr	r2, [pc, #48]	@ (80075bc <LL_TIM_Init+0x118>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d105      	bne.n	800759a <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	4619      	mov	r1, r3
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f7ff ff2e 	bl	80073f6 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f7ff ff71 	bl	8007482 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	40010000 	.word	0x40010000
 80075b0:	40000400 	.word	0x40000400
 80075b4:	40000800 	.word	0x40000800
 80075b8:	40000c00 	.word	0x40000c00
 80075bc:	40010400 	.word	0x40010400
 80075c0:	40014000 	.word	0x40014000
 80075c4:	40014400 	.word	0x40014400
 80075c8:	40014800 	.word	0x40014800
 80075cc:	40001800 	.word	0x40001800
 80075d0:	40001c00 	.word	0x40001c00
 80075d4:	40002000 	.word	0x40002000

080075d8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b086      	sub	sp, #24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075ee:	d027      	beq.n	8007640 <LL_TIM_OC_Init+0x68>
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075f6:	d82a      	bhi.n	800764e <LL_TIM_OC_Init+0x76>
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075fe:	d018      	beq.n	8007632 <LL_TIM_OC_Init+0x5a>
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007606:	d822      	bhi.n	800764e <LL_TIM_OC_Init+0x76>
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d003      	beq.n	8007616 <LL_TIM_OC_Init+0x3e>
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	2b10      	cmp	r3, #16
 8007612:	d007      	beq.n	8007624 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8007614:	e01b      	b.n	800764e <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8007616:	6879      	ldr	r1, [r7, #4]
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f000 f861 	bl	80076e0 <OC1Config>
 800761e:	4603      	mov	r3, r0
 8007620:	75fb      	strb	r3, [r7, #23]
      break;
 8007622:	e015      	b.n	8007650 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8007624:	6879      	ldr	r1, [r7, #4]
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f000 f8c6 	bl	80077b8 <OC2Config>
 800762c:	4603      	mov	r3, r0
 800762e:	75fb      	strb	r3, [r7, #23]
      break;
 8007630:	e00e      	b.n	8007650 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8007632:	6879      	ldr	r1, [r7, #4]
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f000 f92f 	bl	8007898 <OC3Config>
 800763a:	4603      	mov	r3, r0
 800763c:	75fb      	strb	r3, [r7, #23]
      break;
 800763e:	e007      	b.n	8007650 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8007640:	6879      	ldr	r1, [r7, #4]
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f000 f998 	bl	8007978 <OC4Config>
 8007648:	4603      	mov	r3, r0
 800764a:	75fb      	strb	r3, [r7, #23]
      break;
 800764c:	e000      	b.n	8007650 <LL_TIM_OC_Init+0x78>
      break;
 800764e:	bf00      	nop
  }

  return result;
 8007650:	7dfb      	ldrb	r3, [r7, #23]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3718      	adds	r7, #24
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, const LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 800765a:	b480      	push	{r7}
 800765c:	b085      	sub	sp, #20
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
 8007662:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8007664:	2300      	movs	r3, #0
 8007666:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800766e:	683a      	ldr	r2, [r7, #0]
 8007670:	7b12      	ldrb	r2, [r2, #12]
 8007672:	4313      	orrs	r3, r2
 8007674:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	4313      	orrs	r3, r2
 8007682:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	4313      	orrs	r3, r2
 8007690:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4313      	orrs	r3, r2
 800769e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80076a6:	683a      	ldr	r2, [r7, #0]
 80076a8:	89d2      	ldrh	r2, [r2, #14]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	645a      	str	r2, [r3, #68]	@ 0x44

  return SUCCESS;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3714      	adds	r7, #20
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
	...

080076e0 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b086      	sub	sp, #24
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a1b      	ldr	r3, [r3, #32]
 80076ee:	f023 0201 	bic.w	r2, r3, #1
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f023 0303 	bic.w	r3, r3, #3
 800770e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4313      	orrs	r3, r2
 800771c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	f023 0202 	bic.w	r2, r3, #2
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	4313      	orrs	r3, r2
 800772a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	f023 0201 	bic.w	r2, r3, #1
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	4313      	orrs	r3, r2
 8007738:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a1c      	ldr	r2, [pc, #112]	@ (80077b0 <OC1Config+0xd0>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d003      	beq.n	800774a <OC1Config+0x6a>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a1b      	ldr	r2, [pc, #108]	@ (80077b4 <OC1Config+0xd4>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d11e      	bne.n	8007788 <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	f023 0208 	bic.w	r2, r3, #8
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	695b      	ldr	r3, [r3, #20]
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4313      	orrs	r3, r2
 8007758:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	f023 0204 	bic.w	r2, r3, #4
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	4313      	orrs	r3, r2
 8007768:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	699b      	ldr	r3, [r3, #24]
 8007774:	4313      	orrs	r3, r2
 8007776:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	69db      	ldr	r3, [r3, #28]
 8007782:	005b      	lsls	r3, r3, #1
 8007784:	4313      	orrs	r3, r2
 8007786:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	693a      	ldr	r2, [r7, #16]
 800778c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	4619      	mov	r1, r3
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f7ff fe39 	bl	8007412 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	697a      	ldr	r2, [r7, #20]
 80077a4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3718      	adds	r7, #24
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	40010000 	.word	0x40010000
 80077b4:	40010400 	.word	0x40010400

080077b8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a1b      	ldr	r3, [r3, #32]
 80077c6:	f023 0210 	bic.w	r2, r3, #16
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a1b      	ldr	r3, [r3, #32]
 80077d2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	021b      	lsls	r3, r3, #8
 80077f4:	4313      	orrs	r3, r2
 80077f6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	f023 0220 	bic.w	r2, r3, #32
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	011b      	lsls	r3, r3, #4
 8007804:	4313      	orrs	r3, r2
 8007806:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	f023 0210 	bic.w	r2, r3, #16
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	011b      	lsls	r3, r3, #4
 8007814:	4313      	orrs	r3, r2
 8007816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a1d      	ldr	r2, [pc, #116]	@ (8007890 <OC2Config+0xd8>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d003      	beq.n	8007828 <OC2Config+0x70>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a1c      	ldr	r2, [pc, #112]	@ (8007894 <OC2Config+0xdc>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d11f      	bne.n	8007868 <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	695b      	ldr	r3, [r3, #20]
 8007832:	019b      	lsls	r3, r3, #6
 8007834:	4313      	orrs	r3, r2
 8007836:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	019b      	lsls	r3, r3, #6
 8007844:	4313      	orrs	r3, r2
 8007846:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	4313      	orrs	r3, r2
 8007856:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	69db      	ldr	r3, [r3, #28]
 8007862:	00db      	lsls	r3, r3, #3
 8007864:	4313      	orrs	r3, r2
 8007866:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	693a      	ldr	r2, [r7, #16]
 800786c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	4619      	mov	r1, r3
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7ff fdd7 	bl	800742e <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	3718      	adds	r7, #24
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	40010000 	.word	0x40010000
 8007894:	40010400 	.word	0x40010400

08007898 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b086      	sub	sp, #24
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a1b      	ldr	r3, [r3, #32]
 80078a6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a1b      	ldr	r3, [r3, #32]
 80078b2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	69db      	ldr	r3, [r3, #28]
 80078be:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f023 0303 	bic.w	r3, r3, #3
 80078c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	691b      	ldr	r3, [r3, #16]
 80078e0:	021b      	lsls	r3, r3, #8
 80078e2:	4313      	orrs	r3, r2
 80078e4:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	021b      	lsls	r3, r3, #8
 80078f2:	4313      	orrs	r3, r2
 80078f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a1d      	ldr	r2, [pc, #116]	@ (8007970 <OC3Config+0xd8>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d003      	beq.n	8007906 <OC3Config+0x6e>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a1c      	ldr	r2, [pc, #112]	@ (8007974 <OC3Config+0xdc>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d11f      	bne.n	8007946 <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	695b      	ldr	r3, [r3, #20]
 8007910:	029b      	lsls	r3, r3, #10
 8007912:	4313      	orrs	r3, r2
 8007914:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	029b      	lsls	r3, r3, #10
 8007922:	4313      	orrs	r3, r2
 8007924:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	699b      	ldr	r3, [r3, #24]
 8007930:	011b      	lsls	r3, r3, #4
 8007932:	4313      	orrs	r3, r2
 8007934:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	69db      	ldr	r3, [r3, #28]
 8007940:	015b      	lsls	r3, r3, #5
 8007942:	4313      	orrs	r3, r2
 8007944:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	4619      	mov	r1, r3
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f7ff fd76 	bl	800744a <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	697a      	ldr	r2, [r7, #20]
 8007962:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3718      	adds	r7, #24
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	40010000 	.word	0x40010000
 8007974:	40010400 	.word	0x40010400

08007978 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b086      	sub	sp, #24
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a1b      	ldr	r3, [r3, #32]
 8007986:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	69db      	ldr	r3, [r3, #28]
 800799e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	021b      	lsls	r3, r3, #8
 80079b4:	4313      	orrs	r3, r2
 80079b6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	031b      	lsls	r3, r3, #12
 80079c4:	4313      	orrs	r3, r2
 80079c6:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	031b      	lsls	r3, r3, #12
 80079d4:	4313      	orrs	r3, r2
 80079d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a11      	ldr	r2, [pc, #68]	@ (8007a20 <OC4Config+0xa8>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d003      	beq.n	80079e8 <OC4Config+0x70>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a10      	ldr	r2, [pc, #64]	@ (8007a24 <OC4Config+0xac>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d107      	bne.n	80079f8 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	699b      	ldr	r3, [r3, #24]
 80079f2:	019b      	lsls	r3, r3, #6
 80079f4:	4313      	orrs	r3, r2
 80079f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	4619      	mov	r1, r3
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f7ff fd2b 	bl	8007466 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3718      	adds	r7, #24
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	40010000 	.word	0x40010000
 8007a24:	40010400 	.word	0x40010400

08007a28 <LL_USART_IsEnabled>:
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a3c:	bf0c      	ite	eq
 8007a3e:	2301      	moveq	r3, #1
 8007a40:	2300      	movne	r3, #0
 8007a42:	b2db      	uxtb	r3, r3
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <LL_USART_SetStopBitsLength>:
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	431a      	orrs	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	611a      	str	r2, [r3, #16]
}
 8007a6a:	bf00      	nop
 8007a6c:	370c      	adds	r7, #12
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr

08007a76 <LL_USART_SetHWFlowCtrl>:
{
 8007a76:	b480      	push	{r7}
 8007a78:	b083      	sub	sp, #12
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
 8007a7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	695b      	ldr	r3, [r3, #20]
 8007a84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	431a      	orrs	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	615a      	str	r2, [r3, #20]
}
 8007a90:	bf00      	nop
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <LL_USART_SetBaudRate>:
{
 8007a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007aa0:	b0c0      	sub	sp, #256	@ 0x100
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007aa8:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8007aac:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8007ab0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8007ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ab8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007abc:	f040 810c 	bne.w	8007cd8 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8007ac0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007aca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007ace:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007ad2:	4622      	mov	r2, r4
 8007ad4:	462b      	mov	r3, r5
 8007ad6:	1891      	adds	r1, r2, r2
 8007ad8:	6639      	str	r1, [r7, #96]	@ 0x60
 8007ada:	415b      	adcs	r3, r3
 8007adc:	667b      	str	r3, [r7, #100]	@ 0x64
 8007ade:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8007ae2:	4621      	mov	r1, r4
 8007ae4:	eb12 0801 	adds.w	r8, r2, r1
 8007ae8:	4629      	mov	r1, r5
 8007aea:	eb43 0901 	adc.w	r9, r3, r1
 8007aee:	f04f 0200 	mov.w	r2, #0
 8007af2:	f04f 0300 	mov.w	r3, #0
 8007af6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007afa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007afe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b02:	4690      	mov	r8, r2
 8007b04:	4699      	mov	r9, r3
 8007b06:	4623      	mov	r3, r4
 8007b08:	eb18 0303 	adds.w	r3, r8, r3
 8007b0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007b10:	462b      	mov	r3, r5
 8007b12:	eb49 0303 	adc.w	r3, r9, r3
 8007b16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007b1a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007b1e:	2200      	movs	r2, #0
 8007b20:	469a      	mov	sl, r3
 8007b22:	4693      	mov	fp, r2
 8007b24:	eb1a 030a 	adds.w	r3, sl, sl
 8007b28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b2a:	eb4b 030b 	adc.w	r3, fp, fp
 8007b2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b30:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007b34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007b38:	f7f8 fc02 	bl	8000340 <__aeabi_uldivmod>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	460b      	mov	r3, r1
 8007b40:	4b64      	ldr	r3, [pc, #400]	@ (8007cd4 <LL_USART_SetBaudRate+0x238>)
 8007b42:	fba3 2302 	umull	r2, r3, r3, r2
 8007b46:	095b      	lsrs	r3, r3, #5
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	011b      	lsls	r3, r3, #4
 8007b4c:	b29c      	uxth	r4, r3
 8007b4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007b52:	2200      	movs	r2, #0
 8007b54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007b58:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007b5c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8007b60:	4642      	mov	r2, r8
 8007b62:	464b      	mov	r3, r9
 8007b64:	1891      	adds	r1, r2, r2
 8007b66:	6539      	str	r1, [r7, #80]	@ 0x50
 8007b68:	415b      	adcs	r3, r3
 8007b6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007b70:	4641      	mov	r1, r8
 8007b72:	1851      	adds	r1, r2, r1
 8007b74:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007b76:	4649      	mov	r1, r9
 8007b78:	414b      	adcs	r3, r1
 8007b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b7c:	f04f 0200 	mov.w	r2, #0
 8007b80:	f04f 0300 	mov.w	r3, #0
 8007b84:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8007b88:	4659      	mov	r1, fp
 8007b8a:	00cb      	lsls	r3, r1, #3
 8007b8c:	4651      	mov	r1, sl
 8007b8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b92:	4651      	mov	r1, sl
 8007b94:	00ca      	lsls	r2, r1, #3
 8007b96:	4610      	mov	r0, r2
 8007b98:	4619      	mov	r1, r3
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	4642      	mov	r2, r8
 8007b9e:	189b      	adds	r3, r3, r2
 8007ba0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007ba4:	464b      	mov	r3, r9
 8007ba6:	460a      	mov	r2, r1
 8007ba8:	eb42 0303 	adc.w	r3, r2, r3
 8007bac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007bb0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007bba:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8007bbe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	18db      	adds	r3, r3, r3
 8007bc6:	643b      	str	r3, [r7, #64]	@ 0x40
 8007bc8:	4613      	mov	r3, r2
 8007bca:	eb42 0303 	adc.w	r3, r2, r3
 8007bce:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bd0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007bd4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8007bd8:	f7f8 fbb2 	bl	8000340 <__aeabi_uldivmod>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	460b      	mov	r3, r1
 8007be0:	4611      	mov	r1, r2
 8007be2:	4b3c      	ldr	r3, [pc, #240]	@ (8007cd4 <LL_USART_SetBaudRate+0x238>)
 8007be4:	fba3 2301 	umull	r2, r3, r3, r1
 8007be8:	095b      	lsrs	r3, r3, #5
 8007bea:	2264      	movs	r2, #100	@ 0x64
 8007bec:	fb02 f303 	mul.w	r3, r2, r3
 8007bf0:	1acb      	subs	r3, r1, r3
 8007bf2:	00db      	lsls	r3, r3, #3
 8007bf4:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007bf8:	4b36      	ldr	r3, [pc, #216]	@ (8007cd4 <LL_USART_SetBaudRate+0x238>)
 8007bfa:	fba3 2302 	umull	r2, r3, r3, r2
 8007bfe:	095b      	lsrs	r3, r3, #5
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	005b      	lsls	r3, r3, #1
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	4423      	add	r3, r4
 8007c0e:	b29c      	uxth	r4, r3
 8007c10:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007c14:	2200      	movs	r2, #0
 8007c16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c1a:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007c1e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8007c22:	4642      	mov	r2, r8
 8007c24:	464b      	mov	r3, r9
 8007c26:	1891      	adds	r1, r2, r2
 8007c28:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007c2a:	415b      	adcs	r3, r3
 8007c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c2e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007c32:	4641      	mov	r1, r8
 8007c34:	1851      	adds	r1, r2, r1
 8007c36:	6339      	str	r1, [r7, #48]	@ 0x30
 8007c38:	4649      	mov	r1, r9
 8007c3a:	414b      	adcs	r3, r1
 8007c3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c3e:	f04f 0200 	mov.w	r2, #0
 8007c42:	f04f 0300 	mov.w	r3, #0
 8007c46:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007c4a:	4659      	mov	r1, fp
 8007c4c:	00cb      	lsls	r3, r1, #3
 8007c4e:	4651      	mov	r1, sl
 8007c50:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c54:	4651      	mov	r1, sl
 8007c56:	00ca      	lsls	r2, r1, #3
 8007c58:	4610      	mov	r0, r2
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	4642      	mov	r2, r8
 8007c60:	189b      	adds	r3, r3, r2
 8007c62:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c66:	464b      	mov	r3, r9
 8007c68:	460a      	mov	r2, r1
 8007c6a:	eb42 0303 	adc.w	r3, r2, r3
 8007c6e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007c72:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007c76:	2200      	movs	r2, #0
 8007c78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c7c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8007c80:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007c84:	460b      	mov	r3, r1
 8007c86:	18db      	adds	r3, r3, r3
 8007c88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	eb42 0303 	adc.w	r3, r2, r3
 8007c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007c96:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8007c9a:	f7f8 fb51 	bl	8000340 <__aeabi_uldivmod>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8007cd4 <LL_USART_SetBaudRate+0x238>)
 8007ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ca8:	095b      	lsrs	r3, r3, #5
 8007caa:	2164      	movs	r1, #100	@ 0x64
 8007cac:	fb01 f303 	mul.w	r3, r1, r3
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	00db      	lsls	r3, r3, #3
 8007cb4:	3332      	adds	r3, #50	@ 0x32
 8007cb6:	4a07      	ldr	r2, [pc, #28]	@ (8007cd4 <LL_USART_SetBaudRate+0x238>)
 8007cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8007cbc:	095b      	lsrs	r3, r3, #5
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	f003 0307 	and.w	r3, r3, #7
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	4423      	add	r3, r4
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	461a      	mov	r2, r3
 8007ccc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cd0:	609a      	str	r2, [r3, #8]
}
 8007cd2:	e108      	b.n	8007ee6 <LL_USART_SetBaudRate+0x44a>
 8007cd4:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007cd8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007ce2:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007ce6:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8007cea:	4642      	mov	r2, r8
 8007cec:	464b      	mov	r3, r9
 8007cee:	1891      	adds	r1, r2, r2
 8007cf0:	6239      	str	r1, [r7, #32]
 8007cf2:	415b      	adcs	r3, r3
 8007cf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cf6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007cfa:	4641      	mov	r1, r8
 8007cfc:	1854      	adds	r4, r2, r1
 8007cfe:	4649      	mov	r1, r9
 8007d00:	eb43 0501 	adc.w	r5, r3, r1
 8007d04:	f04f 0200 	mov.w	r2, #0
 8007d08:	f04f 0300 	mov.w	r3, #0
 8007d0c:	00eb      	lsls	r3, r5, #3
 8007d0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d12:	00e2      	lsls	r2, r4, #3
 8007d14:	4614      	mov	r4, r2
 8007d16:	461d      	mov	r5, r3
 8007d18:	4643      	mov	r3, r8
 8007d1a:	18e3      	adds	r3, r4, r3
 8007d1c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007d20:	464b      	mov	r3, r9
 8007d22:	eb45 0303 	adc.w	r3, r5, r3
 8007d26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007d2a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007d34:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8007d38:	f04f 0200 	mov.w	r2, #0
 8007d3c:	f04f 0300 	mov.w	r3, #0
 8007d40:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8007d44:	4629      	mov	r1, r5
 8007d46:	008b      	lsls	r3, r1, #2
 8007d48:	4621      	mov	r1, r4
 8007d4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d4e:	4621      	mov	r1, r4
 8007d50:	008a      	lsls	r2, r1, #2
 8007d52:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8007d56:	f7f8 faf3 	bl	8000340 <__aeabi_uldivmod>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	4b65      	ldr	r3, [pc, #404]	@ (8007ef4 <LL_USART_SetBaudRate+0x458>)
 8007d60:	fba3 2302 	umull	r2, r3, r3, r2
 8007d64:	095b      	lsrs	r3, r3, #5
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	011b      	lsls	r3, r3, #4
 8007d6a:	b29c      	uxth	r4, r3
 8007d6c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007d70:	2200      	movs	r2, #0
 8007d72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d76:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007d7a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8007d7e:	4642      	mov	r2, r8
 8007d80:	464b      	mov	r3, r9
 8007d82:	1891      	adds	r1, r2, r2
 8007d84:	61b9      	str	r1, [r7, #24]
 8007d86:	415b      	adcs	r3, r3
 8007d88:	61fb      	str	r3, [r7, #28]
 8007d8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d8e:	4641      	mov	r1, r8
 8007d90:	1851      	adds	r1, r2, r1
 8007d92:	6139      	str	r1, [r7, #16]
 8007d94:	4649      	mov	r1, r9
 8007d96:	414b      	adcs	r3, r1
 8007d98:	617b      	str	r3, [r7, #20]
 8007d9a:	f04f 0200 	mov.w	r2, #0
 8007d9e:	f04f 0300 	mov.w	r3, #0
 8007da2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007da6:	4659      	mov	r1, fp
 8007da8:	00cb      	lsls	r3, r1, #3
 8007daa:	4651      	mov	r1, sl
 8007dac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007db0:	4651      	mov	r1, sl
 8007db2:	00ca      	lsls	r2, r1, #3
 8007db4:	4610      	mov	r0, r2
 8007db6:	4619      	mov	r1, r3
 8007db8:	4603      	mov	r3, r0
 8007dba:	4642      	mov	r2, r8
 8007dbc:	189b      	adds	r3, r3, r2
 8007dbe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007dc2:	464b      	mov	r3, r9
 8007dc4:	460a      	mov	r2, r1
 8007dc6:	eb42 0303 	adc.w	r3, r2, r3
 8007dca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007dce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007dd8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8007ddc:	f04f 0200 	mov.w	r2, #0
 8007de0:	f04f 0300 	mov.w	r3, #0
 8007de4:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8007de8:	4649      	mov	r1, r9
 8007dea:	008b      	lsls	r3, r1, #2
 8007dec:	4641      	mov	r1, r8
 8007dee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007df2:	4641      	mov	r1, r8
 8007df4:	008a      	lsls	r2, r1, #2
 8007df6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8007dfa:	f7f8 faa1 	bl	8000340 <__aeabi_uldivmod>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	460b      	mov	r3, r1
 8007e02:	4611      	mov	r1, r2
 8007e04:	4b3b      	ldr	r3, [pc, #236]	@ (8007ef4 <LL_USART_SetBaudRate+0x458>)
 8007e06:	fba3 2301 	umull	r2, r3, r3, r1
 8007e0a:	095b      	lsrs	r3, r3, #5
 8007e0c:	2264      	movs	r2, #100	@ 0x64
 8007e0e:	fb02 f303 	mul.w	r3, r2, r3
 8007e12:	1acb      	subs	r3, r1, r3
 8007e14:	011b      	lsls	r3, r3, #4
 8007e16:	3332      	adds	r3, #50	@ 0x32
 8007e18:	4a36      	ldr	r2, [pc, #216]	@ (8007ef4 <LL_USART_SetBaudRate+0x458>)
 8007e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e1e:	095b      	lsrs	r3, r3, #5
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	4423      	add	r3, r4
 8007e2a:	b29c      	uxth	r4, r3
 8007e2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007e30:	2200      	movs	r2, #0
 8007e32:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007e34:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007e36:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007e3a:	4642      	mov	r2, r8
 8007e3c:	464b      	mov	r3, r9
 8007e3e:	1891      	adds	r1, r2, r2
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	415b      	adcs	r3, r3
 8007e44:	60fb      	str	r3, [r7, #12]
 8007e46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e4a:	4641      	mov	r1, r8
 8007e4c:	1851      	adds	r1, r2, r1
 8007e4e:	6039      	str	r1, [r7, #0]
 8007e50:	4649      	mov	r1, r9
 8007e52:	414b      	adcs	r3, r1
 8007e54:	607b      	str	r3, [r7, #4]
 8007e56:	f04f 0200 	mov.w	r2, #0
 8007e5a:	f04f 0300 	mov.w	r3, #0
 8007e5e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007e62:	4659      	mov	r1, fp
 8007e64:	00cb      	lsls	r3, r1, #3
 8007e66:	4651      	mov	r1, sl
 8007e68:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e6c:	4651      	mov	r1, sl
 8007e6e:	00ca      	lsls	r2, r1, #3
 8007e70:	4610      	mov	r0, r2
 8007e72:	4619      	mov	r1, r3
 8007e74:	4603      	mov	r3, r0
 8007e76:	4642      	mov	r2, r8
 8007e78:	189b      	adds	r3, r3, r2
 8007e7a:	673b      	str	r3, [r7, #112]	@ 0x70
 8007e7c:	464b      	mov	r3, r9
 8007e7e:	460a      	mov	r2, r1
 8007e80:	eb42 0303 	adc.w	r3, r2, r3
 8007e84:	677b      	str	r3, [r7, #116]	@ 0x74
 8007e86:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e8e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007e90:	f04f 0200 	mov.w	r2, #0
 8007e94:	f04f 0300 	mov.w	r3, #0
 8007e98:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8007e9c:	4649      	mov	r1, r9
 8007e9e:	008b      	lsls	r3, r1, #2
 8007ea0:	4641      	mov	r1, r8
 8007ea2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ea6:	4641      	mov	r1, r8
 8007ea8:	008a      	lsls	r2, r1, #2
 8007eaa:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8007eae:	f7f8 fa47 	bl	8000340 <__aeabi_uldivmod>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8007ef4 <LL_USART_SetBaudRate+0x458>)
 8007eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8007ebc:	095b      	lsrs	r3, r3, #5
 8007ebe:	2164      	movs	r1, #100	@ 0x64
 8007ec0:	fb01 f303 	mul.w	r3, r1, r3
 8007ec4:	1ad3      	subs	r3, r2, r3
 8007ec6:	011b      	lsls	r3, r3, #4
 8007ec8:	3332      	adds	r3, #50	@ 0x32
 8007eca:	4a0a      	ldr	r2, [pc, #40]	@ (8007ef4 <LL_USART_SetBaudRate+0x458>)
 8007ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ed0:	095b      	lsrs	r3, r3, #5
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	f003 030f 	and.w	r3, r3, #15
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	4423      	add	r3, r4
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	461a      	mov	r2, r3
 8007ee0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ee4:	609a      	str	r2, [r3, #8]
}
 8007ee6:	bf00      	nop
 8007ee8:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007eec:	46bd      	mov	sp, r7
 8007eee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ef2:	bf00      	nop
 8007ef4:	51eb851f 	.word	0x51eb851f

08007ef8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b088      	sub	sp, #32
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8007f06:	2300      	movs	r3, #0
 8007f08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f7ff fd8c 	bl	8007a28 <LL_USART_IsEnabled>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d15e      	bne.n	8007fd4 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8007f1e:	f023 030c 	bic.w	r3, r3, #12
 8007f22:	683a      	ldr	r2, [r7, #0]
 8007f24:	6851      	ldr	r1, [r2, #4]
 8007f26:	683a      	ldr	r2, [r7, #0]
 8007f28:	68d2      	ldr	r2, [r2, #12]
 8007f2a:	4311      	orrs	r1, r2
 8007f2c:	683a      	ldr	r2, [r7, #0]
 8007f2e:	6912      	ldr	r2, [r2, #16]
 8007f30:	4311      	orrs	r1, r2
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	6992      	ldr	r2, [r2, #24]
 8007f36:	430a      	orrs	r2, r1
 8007f38:	431a      	orrs	r2, r3
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	4619      	mov	r1, r3
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f7ff fd83 	bl	8007a50 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	695b      	ldr	r3, [r3, #20]
 8007f4e:	4619      	mov	r1, r3
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f7ff fd90 	bl	8007a76 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8007f56:	f107 0308 	add.w	r3, r7, #8
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7ff f8f0 	bl	8007140 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4a1f      	ldr	r2, [pc, #124]	@ (8007fe0 <LL_USART_Init+0xe8>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d102      	bne.n	8007f6e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	61bb      	str	r3, [r7, #24]
 8007f6c:	e021      	b.n	8007fb2 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a1c      	ldr	r2, [pc, #112]	@ (8007fe4 <LL_USART_Init+0xec>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d102      	bne.n	8007f7c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	61bb      	str	r3, [r7, #24]
 8007f7a:	e01a      	b.n	8007fb2 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a1a      	ldr	r2, [pc, #104]	@ (8007fe8 <LL_USART_Init+0xf0>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d102      	bne.n	8007f8a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	61bb      	str	r3, [r7, #24]
 8007f88:	e013      	b.n	8007fb2 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a17      	ldr	r2, [pc, #92]	@ (8007fec <LL_USART_Init+0xf4>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d102      	bne.n	8007f98 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	61bb      	str	r3, [r7, #24]
 8007f96:	e00c      	b.n	8007fb2 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4a15      	ldr	r2, [pc, #84]	@ (8007ff0 <LL_USART_Init+0xf8>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d102      	bne.n	8007fa6 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	61bb      	str	r3, [r7, #24]
 8007fa4:	e005      	b.n	8007fb2 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a12      	ldr	r2, [pc, #72]	@ (8007ff4 <LL_USART_Init+0xfc>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d101      	bne.n	8007fb2 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00d      	beq.n	8007fd4 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d009      	beq.n	8007fd4 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8007fcc:	69b9      	ldr	r1, [r7, #24]
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f7ff fd64 	bl	8007a9c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8007fd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3720      	adds	r7, #32
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	40011000 	.word	0x40011000
 8007fe4:	40004400 	.word	0x40004400
 8007fe8:	40004800 	.word	0x40004800
 8007fec:	40011400 	.word	0x40011400
 8007ff0:	40004c00 	.word	0x40004c00
 8007ff4:	40005000 	.word	0x40005000

08007ff8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	fbb2 f3f3 	udiv	r3, r2, r3
 800800a:	4a07      	ldr	r2, [pc, #28]	@ (8008028 <LL_InitTick+0x30>)
 800800c:	3b01      	subs	r3, #1
 800800e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8008010:	4b05      	ldr	r3, [pc, #20]	@ (8008028 <LL_InitTick+0x30>)
 8008012:	2200      	movs	r2, #0
 8008014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008016:	4b04      	ldr	r3, [pc, #16]	@ (8008028 <LL_InitTick+0x30>)
 8008018:	2205      	movs	r2, #5
 800801a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800801c:	bf00      	nop
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr
 8008028:	e000e010 	.word	0xe000e010

0800802c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8008034:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f7ff ffdd 	bl	8007ff8 <LL_InitTick>
}
 800803e:	bf00      	nop
 8008040:	3708      	adds	r7, #8
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
	...

08008048 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8008050:	4b0f      	ldr	r3, [pc, #60]	@ (8008090 <LL_mDelay+0x48>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8008056:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800805e:	d00c      	beq.n	800807a <LL_mDelay+0x32>
  {
    Delay++;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	3301      	adds	r3, #1
 8008064:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8008066:	e008      	b.n	800807a <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8008068:	4b09      	ldr	r3, [pc, #36]	@ (8008090 <LL_mDelay+0x48>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008070:	2b00      	cmp	r3, #0
 8008072:	d002      	beq.n	800807a <LL_mDelay+0x32>
    {
      Delay--;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	3b01      	subs	r3, #1
 8008078:	607b      	str	r3, [r7, #4]
  while (Delay)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1f3      	bne.n	8008068 <LL_mDelay+0x20>
    }
  }
}
 8008080:	bf00      	nop
 8008082:	bf00      	nop
 8008084:	3714      	adds	r7, #20
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	e000e010 	.word	0xe000e010

08008094 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800809c:	4a04      	ldr	r2, [pc, #16]	@ (80080b0 <LL_SetSystemCoreClock+0x1c>)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6013      	str	r3, [r2, #0]
}
 80080a2:	bf00      	nop
 80080a4:	370c      	adds	r7, #12
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop
 80080b0:	20002218 	.word	0x20002218

080080b4 <SCH_Initialize>:
  * @param  None
  * @retval None
  *****************************************************************************/

void SCH_Initialize(void)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	af00      	add	r7, sp, #0
  s_SystemTick = RESET;
 80080b8:	4b0d      	ldr	r3, [pc, #52]	@ (80080f0 <SCH_Initialize+0x3c>)
 80080ba:	2200      	movs	r2, #0
 80080bc:	601a      	str	r2, [r3, #0]
  s_NumOfTaskScheduled = RESET;
 80080be:	4b0d      	ldr	r3, [pc, #52]	@ (80080f4 <SCH_Initialize+0x40>)
 80080c0:	2200      	movs	r2, #0
 80080c2:	701a      	strb	r2, [r3, #0]
  s_NumOfTimers = RESET;
 80080c4:	4b0c      	ldr	r3, [pc, #48]	@ (80080f8 <SCH_Initialize+0x44>)
 80080c6:	2200      	movs	r2, #0
 80080c8:	701a      	strb	r2, [r3, #0]

  // Initial Scheduler Context
  memset((uint8_t*)&s_TaskContext[0], RESET, (sizeof(SCH_TaskContextTypedef) * MAX_TASK));
 80080ca:	22f0      	movs	r2, #240	@ 0xf0
 80080cc:	2100      	movs	r1, #0
 80080ce:	480b      	ldr	r0, [pc, #44]	@ (80080fc <SCH_Initialize+0x48>)
 80080d0:	f000 fcde 	bl	8008a90 <memset>
  memset((uint8_t*)&s_TimerContext[0], RESET, (sizeof(SCH_TimerContextTypedef) * MAX_TIMERS));
 80080d4:	22f0      	movs	r2, #240	@ 0xf0
 80080d6:	2100      	movs	r1, #0
 80080d8:	4809      	ldr	r0, [pc, #36]	@ (8008100 <SCH_Initialize+0x4c>)
 80080da:	f000 fcd9 	bl	8008a90 <memset>
  memset((uint8_t*)&s_SoftTimers[0], RESET, (sizeof(uint32_t) * SCH_TIM_LAST));
 80080de:	2228      	movs	r2, #40	@ 0x28
 80080e0:	2100      	movs	r1, #0
 80080e2:	4808      	ldr	r0, [pc, #32]	@ (8008104 <SCH_Initialize+0x50>)
 80080e4:	f000 fcd4 	bl	8008a90 <memset>

    // Initialize Scheduler context
  systick_timer_init();
 80080e8:	f7f8 ff46 	bl	8000f78 <systick_timer_init>
}
 80080ec:	bf00      	nop
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	20002928 	.word	0x20002928
 80080f4:	20002830 	.word	0x20002830
 80080f8:	20002924 	.word	0x20002924
 80080fc:	20002740 	.word	0x20002740
 8008100:	20002834 	.word	0x20002834
 8008104:	2000292c 	.word	0x2000292c

08008108 <SCH_TIM_Start>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  *         const uint32_t timeInMs - time in mSec
  * @retval None
  *****************************************************************************/
void SCH_TIM_Start(const SCH_SoftTimerTypedef timer, const uint32_t timeInMs)
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	4603      	mov	r3, r0
 8008110:	6039      	str	r1, [r7, #0]
 8008112:	71fb      	strb	r3, [r7, #7]
  if(timer < SCH_TIM_LAST)
 8008114:	79fb      	ldrb	r3, [r7, #7]
 8008116:	2b09      	cmp	r3, #9
 8008118:	d804      	bhi.n	8008124 <SCH_TIM_Start+0x1c>
  {
	//s_SoftTimers[timer] = timeInMs + s_SystemTick;
    s_SoftTimers[timer] = timeInMs;
 800811a:	79fb      	ldrb	r3, [r7, #7]
 800811c:	4904      	ldr	r1, [pc, #16]	@ (8008130 <SCH_TIM_Start+0x28>)
 800811e:	683a      	ldr	r2, [r7, #0]
 8008120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008124:	bf00      	nop
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr
 8008130:	2000292c 	.word	0x2000292c

08008134 <SCH_TIM_HasCompleted>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  * @retval TRUE / FALSE
  *****************************************************************************/

uint16_t SCH_TIM_HasCompleted(const SCH_SoftTimerTypedef timer)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	4603      	mov	r3, r0
 800813c:	71fb      	strb	r3, [r7, #7]
  return (s_SoftTimers[timer] == 0 ? 1:0 ) ;
 800813e:	79fb      	ldrb	r3, [r7, #7]
 8008140:	4a06      	ldr	r2, [pc, #24]	@ (800815c <SCH_TIM_HasCompleted+0x28>)
 8008142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008146:	2b00      	cmp	r3, #0
 8008148:	bf0c      	ite	eq
 800814a:	2301      	moveq	r3, #1
 800814c:	2300      	movne	r3, #0
 800814e:	b2db      	uxtb	r3, r3
}
 8008150:	4618      	mov	r0, r3
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr
 800815c:	2000292c 	.word	0x2000292c

08008160 <SCH_TASK_CreateTask>:
  * @param  SCH_TASK_HANDLE* pHandle - pointer to task handle
  *         SCH_TaskPropertyTypedef* pTaskProperty - pointer to task property
  * @retval status
  *****************************************************************************/
t_Status SCH_TASK_CreateTask(SCH_TASK_HANDLE* pHandle, SCH_TaskPropertyTypedef* pTaskProperty)
{
 8008160:	b480      	push	{r7}
 8008162:	b085      	sub	sp, #20
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  t_Status                      status = STS_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	73fb      	strb	r3, [r7, #15]

  // make sure that we have valid parameters
  if((pHandle) && (pTaskProperty))
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d029      	beq.n	80081c8 <SCH_TASK_CreateTask+0x68>
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d026      	beq.n	80081c8 <SCH_TASK_CreateTask+0x68>
  {
    // Check for number of task defined
    if(s_NumOfTaskScheduled < (MAX_TASK - 1))
 800817a:	4b17      	ldr	r3, [pc, #92]	@ (80081d8 <SCH_TASK_CreateTask+0x78>)
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	2b12      	cmp	r3, #18
 8008180:	d822      	bhi.n	80081c8 <SCH_TASK_CreateTask+0x68>
    {
      SCH_TaskContextTypedef* pTaskContext = &s_TaskContext[s_NumOfTaskScheduled];
 8008182:	4b15      	ldr	r3, [pc, #84]	@ (80081d8 <SCH_TASK_CreateTask+0x78>)
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	461a      	mov	r2, r3
 8008188:	4613      	mov	r3, r2
 800818a:	005b      	lsls	r3, r3, #1
 800818c:	4413      	add	r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	4a12      	ldr	r2, [pc, #72]	@ (80081dc <SCH_TASK_CreateTask+0x7c>)
 8008192:	4413      	add	r3, r2
 8008194:	60bb      	str	r3, [r7, #8]
      // get task context
      // memcpy((uint8_t*)pTaskContext->pTaskProperty, (uint8_t*)pTaskProperty, sizeof(SCH_TaskPropertyTypedef));
      pTaskContext->pTaskProperty = pTaskProperty;
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	683a      	ldr	r2, [r7, #0]
 800819a:	609a      	str	r2, [r3, #8]
      // Make sure we are initializing other members of task context
      pTaskContext->taskFlag = FALSE;
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	2200      	movs	r2, #0
 80081a0:	805a      	strh	r2, [r3, #2]
      pTaskContext->taskTick = pTaskProperty->taskTick;;
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	68da      	ldr	r2, [r3, #12]
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	605a      	str	r2, [r3, #4]
      // Put task in Ready State
      pTaskContext->taskState = TASK_StateReady;
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	2201      	movs	r2, #1
 80081ae:	701a      	strb	r2, [r3, #0]

      // Give Task Handle back to caller
      *pHandle = s_NumOfTaskScheduled;
 80081b0:	4b09      	ldr	r3, [pc, #36]	@ (80081d8 <SCH_TASK_CreateTask+0x78>)
 80081b2:	781a      	ldrb	r2, [r3, #0]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	701a      	strb	r2, [r3, #0]

      s_NumOfTaskScheduled++;
 80081b8:	4b07      	ldr	r3, [pc, #28]	@ (80081d8 <SCH_TASK_CreateTask+0x78>)
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	3301      	adds	r3, #1
 80081be:	b2da      	uxtb	r2, r3
 80081c0:	4b05      	ldr	r3, [pc, #20]	@ (80081d8 <SCH_TASK_CreateTask+0x78>)
 80081c2:	701a      	strb	r2, [r3, #0]
      // We were able to register task with schedular
      status = STS_DONE;
 80081c4:	2300      	movs	r3, #0
 80081c6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80081c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3714      	adds	r7, #20
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr
 80081d6:	bf00      	nop
 80081d8:	20002830 	.word	0x20002830
 80081dc:	20002740 	.word	0x20002740

080081e0 <SCH_RunSystemTickTimer>:
  * @brief  Function handles system tick timer
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_RunSystemTickTimer(void)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b085      	sub	sp, #20
 80081e4:	af00      	add	r7, sp, #0
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // Increment System Tick counter

  s_SystemTick++;
 80081e6:	4b42      	ldr	r3, [pc, #264]	@ (80082f0 <SCH_RunSystemTickTimer+0x110>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	3301      	adds	r3, #1
 80081ec:	4a40      	ldr	r2, [pc, #256]	@ (80082f0 <SCH_RunSystemTickTimer+0x110>)
 80081ee:	6013      	str	r3, [r2, #0]
//  if(s_SystemTick > 100000){
//	  LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_15);
//  }
  // Check Status of other Periodic Task
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 80081f0:	2300      	movs	r3, #0
 80081f2:	73fb      	strb	r3, [r7, #15]
 80081f4:	e025      	b.n	8008242 <SCH_RunSystemTickTimer+0x62>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 80081f6:	7bfa      	ldrb	r2, [r7, #15]
 80081f8:	4613      	mov	r3, r2
 80081fa:	005b      	lsls	r3, r3, #1
 80081fc:	4413      	add	r3, r2
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	4a3c      	ldr	r2, [pc, #240]	@ (80082f4 <SCH_RunSystemTickTimer+0x114>)
 8008202:	4413      	add	r3, r2
 8008204:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((SCH_TASK_SYNC == pTaskContext->pTaskProperty->taskType) && (TASK_StateReady == pTaskContext->taskState))
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	2b01      	cmp	r3, #1
 800820e:	d115      	bne.n	800823c <SCH_RunSystemTickTimer+0x5c>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d111      	bne.n	800823c <SCH_RunSystemTickTimer+0x5c>
    {
      // Increment task tick
      pTaskContext->taskTick += 1;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	1c5a      	adds	r2, r3, #1
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTaskContext->taskTick >= pTaskContext->pTaskProperty->taskPeriodInMS)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	685a      	ldr	r2, [r3, #4]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	429a      	cmp	r2, r3
 800822e:	d305      	bcc.n	800823c <SCH_RunSystemTickTimer+0x5c>
      {
        // Yes
        // Reset Task tick timer
        pTaskContext->taskTick = RESET;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	605a      	str	r2, [r3, #4]
        // Enable Flag
        pTaskContext->taskFlag = TRUE;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2201      	movs	r2, #1
 800823a:	805a      	strh	r2, [r3, #2]
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800823c:	7bfb      	ldrb	r3, [r7, #15]
 800823e:	3301      	adds	r3, #1
 8008240:	73fb      	strb	r3, [r7, #15]
 8008242:	4b2d      	ldr	r3, [pc, #180]	@ (80082f8 <SCH_RunSystemTickTimer+0x118>)
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	7bfa      	ldrb	r2, [r7, #15]
 8008248:	429a      	cmp	r2, r3
 800824a:	d3d4      	bcc.n	80081f6 <SCH_RunSystemTickTimer+0x16>
      }
    }
  }

  // Check Status of other Periodic Task
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800824c:	2300      	movs	r3, #0
 800824e:	73bb      	strb	r3, [r7, #14]
 8008250:	e02b      	b.n	80082aa <SCH_RunSystemTickTimer+0xca>
  {
    // Get Task Context
    pTimerContext = &s_TimerContext[timerIndex];
 8008252:	7bba      	ldrb	r2, [r7, #14]
 8008254:	4613      	mov	r3, r2
 8008256:	005b      	lsls	r3, r3, #1
 8008258:	4413      	add	r3, r2
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	4a27      	ldr	r2, [pc, #156]	@ (80082fc <SCH_RunSystemTickTimer+0x11c>)
 800825e:	4413      	add	r3, r2
 8008260:	60bb      	str	r3, [r7, #8]

    // Check type and State of the task
    if(TIM_StateRun == pTimerContext->timerState)
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d11c      	bne.n	80082a4 <SCH_RunSystemTickTimer+0xc4>
    {
      // Increment task tick
      pTimerContext->timerTick += 1;
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	1c5a      	adds	r2, r3, #1
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTimerContext->timerTick >= pTimerContext->pTimerProperty->timerPeriodInMS)
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	685a      	ldr	r2, [r3, #4]
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	429a      	cmp	r2, r3
 8008280:	d310      	bcc.n	80082a4 <SCH_RunSystemTickTimer+0xc4>
      {
        // Yes
        // Enable Flag
        pTimerContext->timerFlag = TRUE;
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	2201      	movs	r2, #1
 8008286:	805a      	strh	r2, [r3, #2]
        // Reset tick timer
        pTimerContext->timerTick = RESET;
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	2200      	movs	r2, #0
 800828c:	605a      	str	r2, [r3, #4]
        // Check timer type and change the state
        pTimerContext->timerState = (SCH_TIMER_PERIODIC == pTimerContext->pTimerProperty->timerType)?TIM_StateRun:TIM_StateStop;
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	2b02      	cmp	r3, #2
 8008296:	bf0c      	ite	eq
 8008298:	2301      	moveq	r3, #1
 800829a:	2300      	movne	r3, #0
 800829c:	b2db      	uxtb	r3, r3
 800829e:	461a      	mov	r2, r3
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	701a      	strb	r2, [r3, #0]
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 80082a4:	7bbb      	ldrb	r3, [r7, #14]
 80082a6:	3301      	adds	r3, #1
 80082a8:	73bb      	strb	r3, [r7, #14]
 80082aa:	4b15      	ldr	r3, [pc, #84]	@ (8008300 <SCH_RunSystemTickTimer+0x120>)
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	7bba      	ldrb	r2, [r7, #14]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d3ce      	bcc.n	8008252 <SCH_RunSystemTickTimer+0x72>
      }
    }
  }
  // Update software timer
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 80082b4:	2300      	movs	r3, #0
 80082b6:	73bb      	strb	r3, [r7, #14]
 80082b8:	e010      	b.n	80082dc <SCH_RunSystemTickTimer+0xfc>
 	if (s_SoftTimers[timerIndex] > 0)	s_SoftTimers[timerIndex] --;
 80082ba:	7bbb      	ldrb	r3, [r7, #14]
 80082bc:	4a11      	ldr	r2, [pc, #68]	@ (8008304 <SCH_RunSystemTickTimer+0x124>)
 80082be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d007      	beq.n	80082d6 <SCH_RunSystemTickTimer+0xf6>
 80082c6:	7bbb      	ldrb	r3, [r7, #14]
 80082c8:	4a0e      	ldr	r2, [pc, #56]	@ (8008304 <SCH_RunSystemTickTimer+0x124>)
 80082ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80082ce:	3a01      	subs	r2, #1
 80082d0:	490c      	ldr	r1, [pc, #48]	@ (8008304 <SCH_RunSystemTickTimer+0x124>)
 80082d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 80082d6:	7bbb      	ldrb	r3, [r7, #14]
 80082d8:	3301      	adds	r3, #1
 80082da:	73bb      	strb	r3, [r7, #14]
 80082dc:	7bbb      	ldrb	r3, [r7, #14]
 80082de:	2b09      	cmp	r3, #9
 80082e0:	d9eb      	bls.n	80082ba <SCH_RunSystemTickTimer+0xda>
}
 80082e2:	bf00      	nop
 80082e4:	bf00      	nop
 80082e6:	3714      	adds	r7, #20
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr
 80082f0:	20002928 	.word	0x20002928
 80082f4:	20002740 	.word	0x20002740
 80082f8:	20002830 	.word	0x20002830
 80082fc:	20002834 	.word	0x20002834
 8008300:	20002924 	.word	0x20002924
 8008304:	2000292c 	.word	0x2000292c

08008308 <SCH_StartSchedular>:
  * @brief  Start schedular
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_StartSchedular(void)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	af00      	add	r7, sp, #0
  // Start Schedular..i.e. start system tick timer
  SCH_START;
 800830c:	f7f8 fe24 	bl	8000f58 <systick_timer_start>
}
 8008310:	bf00      	nop
 8008312:	bd80      	pop	{r7, pc}

08008314 <SCH_HandleScheduledTask>:
  * @brief  Function handles scheduled task and timer events
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_HandleScheduledTask(void)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
  SCH_TaskContextTypedef*       pTaskContext;
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // check for schedule flag
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800831a:	2300      	movs	r3, #0
 800831c:	73fb      	strb	r3, [r7, #15]
 800831e:	e01e      	b.n	800835e <SCH_HandleScheduledTask+0x4a>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 8008320:	7bfa      	ldrb	r2, [r7, #15]
 8008322:	4613      	mov	r3, r2
 8008324:	005b      	lsls	r3, r3, #1
 8008326:	4413      	add	r3, r2
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	4a23      	ldr	r2, [pc, #140]	@ (80083b8 <SCH_HandleScheduledTask+0xa4>)
 800832c:	4413      	add	r3, r2
 800832e:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((TRUE == pTaskContext->taskFlag) && (TASK_StateReady == pTaskContext->taskState))
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	885b      	ldrh	r3, [r3, #2]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d10f      	bne.n	8008358 <SCH_HandleScheduledTask+0x44>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d10b      	bne.n	8008358 <SCH_HandleScheduledTask+0x44>
    {
      pTaskContext->taskFlag = FALSE;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	805a      	strh	r2, [r3, #2]
      if(pTaskContext->pTaskProperty->taskFunction)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d003      	beq.n	8008358 <SCH_HandleScheduledTask+0x44>
      {
        pTaskContext->pTaskProperty->taskFunction();
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	4798      	blx	r3
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8008358:	7bfb      	ldrb	r3, [r7, #15]
 800835a:	3301      	adds	r3, #1
 800835c:	73fb      	strb	r3, [r7, #15]
 800835e:	4b17      	ldr	r3, [pc, #92]	@ (80083bc <SCH_HandleScheduledTask+0xa8>)
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	7bfa      	ldrb	r2, [r7, #15]
 8008364:	429a      	cmp	r2, r3
 8008366:	d3db      	bcc.n	8008320 <SCH_HandleScheduledTask+0xc>
      }
    }
  }

  // check for timer flag
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8008368:	2300      	movs	r3, #0
 800836a:	73bb      	strb	r3, [r7, #14]
 800836c:	e01a      	b.n	80083a4 <SCH_HandleScheduledTask+0x90>
  {
    // Get Timer Context
    pTimerContext = &s_TimerContext[timerIndex];
 800836e:	7bba      	ldrb	r2, [r7, #14]
 8008370:	4613      	mov	r3, r2
 8008372:	005b      	lsls	r3, r3, #1
 8008374:	4413      	add	r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	4a11      	ldr	r2, [pc, #68]	@ (80083c0 <SCH_HandleScheduledTask+0xac>)
 800837a:	4413      	add	r3, r2
 800837c:	60bb      	str	r3, [r7, #8]

    // Check timer flag
    if(TRUE == pTimerContext->timerFlag)
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	885b      	ldrh	r3, [r3, #2]
 8008382:	2b01      	cmp	r3, #1
 8008384:	d10b      	bne.n	800839e <SCH_HandleScheduledTask+0x8a>
    {
      pTimerContext->timerFlag = FALSE;
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	2200      	movs	r2, #0
 800838a:	805a      	strh	r2, [r3, #2]
      if(pTimerContext->pTimerProperty->timerCallbackFunction)
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d003      	beq.n	800839e <SCH_HandleScheduledTask+0x8a>
      {
        pTimerContext->pTimerProperty->timerCallbackFunction();
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	4798      	blx	r3
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800839e:	7bbb      	ldrb	r3, [r7, #14]
 80083a0:	3301      	adds	r3, #1
 80083a2:	73bb      	strb	r3, [r7, #14]
 80083a4:	4b07      	ldr	r3, [pc, #28]	@ (80083c4 <SCH_HandleScheduledTask+0xb0>)
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	7bba      	ldrb	r2, [r7, #14]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d3df      	bcc.n	800836e <SCH_HandleScheduledTask+0x5a>
      }
    }
  }
}
 80083ae:	bf00      	nop
 80083b0:	bf00      	nop
 80083b2:	3710      	adds	r7, #16
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	20002740 	.word	0x20002740
 80083bc:	20002830 	.word	0x20002830
 80083c0:	20002834 	.word	0x20002834
 80083c4:	20002924 	.word	0x20002924

080083c8 <crc16_CCITT>:


#include "crc.h"

uint16_t crc16_CCITT(uint16_t initial_value, uint8_t* data, uint16_t size)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	4603      	mov	r3, r0
 80083d0:	6039      	str	r1, [r7, #0]
 80083d2:	80fb      	strh	r3, [r7, #6]
 80083d4:	4613      	mov	r3, r2
 80083d6:	80bb      	strh	r3, [r7, #4]
    uint8_t x;
    uint16_t crc = initial_value;
 80083d8:	88fb      	ldrh	r3, [r7, #6]
 80083da:	81fb      	strh	r3, [r7, #14]

    while(size--)
 80083dc:	e023      	b.n	8008426 <crc16_CCITT+0x5e>
    {
        x = crc >> 8 ^ *data++;
 80083de:	89fb      	ldrh	r3, [r7, #14]
 80083e0:	0a1b      	lsrs	r3, r3, #8
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	b2da      	uxtb	r2, r3
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	1c59      	adds	r1, r3, #1
 80083ea:	6039      	str	r1, [r7, #0]
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	4053      	eors	r3, r2
 80083f0:	737b      	strb	r3, [r7, #13]
        x ^= x >> 4;
 80083f2:	7b7b      	ldrb	r3, [r7, #13]
 80083f4:	091b      	lsrs	r3, r3, #4
 80083f6:	b2da      	uxtb	r2, r3
 80083f8:	7b7b      	ldrb	r3, [r7, #13]
 80083fa:	4053      	eors	r3, r2
 80083fc:	737b      	strb	r3, [r7, #13]
        crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x << 5)) ^ ((uint16_t)x);
 80083fe:	89fb      	ldrh	r3, [r7, #14]
 8008400:	021b      	lsls	r3, r3, #8
 8008402:	b21a      	sxth	r2, r3
 8008404:	7b7b      	ldrb	r3, [r7, #13]
 8008406:	b21b      	sxth	r3, r3
 8008408:	031b      	lsls	r3, r3, #12
 800840a:	b21b      	sxth	r3, r3
 800840c:	4053      	eors	r3, r2
 800840e:	b21a      	sxth	r2, r3
 8008410:	7b7b      	ldrb	r3, [r7, #13]
 8008412:	b21b      	sxth	r3, r3
 8008414:	015b      	lsls	r3, r3, #5
 8008416:	b21b      	sxth	r3, r3
 8008418:	4053      	eors	r3, r2
 800841a:	b21a      	sxth	r2, r3
 800841c:	7b7b      	ldrb	r3, [r7, #13]
 800841e:	b21b      	sxth	r3, r3
 8008420:	4053      	eors	r3, r2
 8008422:	b21b      	sxth	r3, r3
 8008424:	81fb      	strh	r3, [r7, #14]
    while(size--)
 8008426:	88bb      	ldrh	r3, [r7, #4]
 8008428:	1e5a      	subs	r2, r3, #1
 800842a:	80ba      	strh	r2, [r7, #4]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d1d6      	bne.n	80083de <crc16_CCITT+0x16>
    }

    return crc;
 8008430:	89fb      	ldrh	r3, [r7, #14]
}
 8008432:	4618      	mov	r0, r3
 8008434:	3714      	adds	r7, #20
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr
	...

08008440 <fsp_init>:
uint8_t fsp_my_adr;

uint8_t fsp_decode_pos = 0;

void fsp_init(uint8_t module_adr)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	4603      	mov	r3, r0
 8008448:	71fb      	strb	r3, [r7, #7]
    fsp_my_adr = module_adr;
 800844a:	4a06      	ldr	r2, [pc, #24]	@ (8008464 <fsp_init+0x24>)
 800844c:	79fb      	ldrb	r3, [r7, #7]
 800844e:	7013      	strb	r3, [r2, #0]
    fsp_decode_pos = 0;
 8008450:	4b05      	ldr	r3, [pc, #20]	@ (8008468 <fsp_init+0x28>)
 8008452:	2200      	movs	r2, #0
 8008454:	701a      	strb	r2, [r3, #0]
}
 8008456:	bf00      	nop
 8008458:	370c      	adds	r7, #12
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	20002954 	.word	0x20002954
 8008468:	20002955 	.word	0x20002955

0800846c <fsp_gen_cmd_w_data_pkt>:
		fsp_gen_pkt(&cmd,(void*)0,  0, dst_adr, FSP_PKT_TYPE_CMD, fsp);
	}
}

void fsp_gen_cmd_w_data_pkt(uint8_t cmd, uint8_t *data, uint8_t data_len, uint8_t dst_adr, uint8_t ack, fsp_packet_t *fsp)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af02      	add	r7, sp, #8
 8008472:	6039      	str	r1, [r7, #0]
 8008474:	4611      	mov	r1, r2
 8008476:	461a      	mov	r2, r3
 8008478:	4603      	mov	r3, r0
 800847a:	71fb      	strb	r3, [r7, #7]
 800847c:	460b      	mov	r3, r1
 800847e:	71bb      	strb	r3, [r7, #6]
 8008480:	4613      	mov	r3, r2
 8008482:	717b      	strb	r3, [r7, #5]
	if (ack == FSP_PKT_WITH_ACK)
 8008484:	7c3b      	ldrb	r3, [r7, #16]
 8008486:	2b01      	cmp	r3, #1
 8008488:	d10b      	bne.n	80084a2 <fsp_gen_cmd_w_data_pkt+0x36>
	{
		fsp_gen_pkt(&cmd, data, data_len, dst_adr, FSP_PKT_TYPE_CMD_W_DATA_ACK, fsp);
 800848a:	7979      	ldrb	r1, [r7, #5]
 800848c:	79ba      	ldrb	r2, [r7, #6]
 800848e:	1df8      	adds	r0, r7, #7
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	9301      	str	r3, [sp, #4]
 8008494:	2308      	movs	r3, #8
 8008496:	9300      	str	r3, [sp, #0]
 8008498:	460b      	mov	r3, r1
 800849a:	6839      	ldr	r1, [r7, #0]
 800849c:	f000 f810 	bl	80084c0 <fsp_gen_pkt>
	}
	else
	{
		fsp_gen_pkt(&cmd, data, data_len, dst_adr, FSP_PKT_TYPE_CMD_W_DATA, fsp);
	}
}
 80084a0:	e00a      	b.n	80084b8 <fsp_gen_cmd_w_data_pkt+0x4c>
		fsp_gen_pkt(&cmd, data, data_len, dst_adr, FSP_PKT_TYPE_CMD_W_DATA, fsp);
 80084a2:	7979      	ldrb	r1, [r7, #5]
 80084a4:	79ba      	ldrb	r2, [r7, #6]
 80084a6:	1df8      	adds	r0, r7, #7
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	9301      	str	r3, [sp, #4]
 80084ac:	2307      	movs	r3, #7
 80084ae:	9300      	str	r3, [sp, #0]
 80084b0:	460b      	mov	r3, r1
 80084b2:	6839      	ldr	r1, [r7, #0]
 80084b4:	f000 f804 	bl	80084c0 <fsp_gen_pkt>
}
 80084b8:	bf00      	nop
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <fsp_gen_pkt>:
{
	fsp_gen_pkt((void*)0, (void*)0, 0, dst_adr, FSP_PKT_TYPE_NACK, fsp);
}

void fsp_gen_pkt(uint8_t *cmd, uint8_t *payload, uint8_t payload_len, uint8_t dst_adr, uint8_t type, fsp_packet_t *fsp)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	4611      	mov	r1, r2
 80084cc:	461a      	mov	r2, r3
 80084ce:	460b      	mov	r3, r1
 80084d0:	71fb      	strb	r3, [r7, #7]
 80084d2:	4613      	mov	r3, r2
 80084d4:	71bb      	strb	r3, [r7, #6]
	fsp->sod        = FSP_PKT_SOD;
 80084d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d8:	22ca      	movs	r2, #202	@ 0xca
 80084da:	701a      	strb	r2, [r3, #0]
	fsp->src_adr    = fsp_my_adr;
 80084dc:	4b27      	ldr	r3, [pc, #156]	@ (800857c <fsp_gen_pkt+0xbc>)
 80084de:	781a      	ldrb	r2, [r3, #0]
 80084e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e2:	705a      	strb	r2, [r3, #1]
	fsp->dst_adr    = dst_adr;
 80084e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e6:	79ba      	ldrb	r2, [r7, #6]
 80084e8:	709a      	strb	r2, [r3, #2]
	fsp->length     = payload_len;
 80084ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ec:	79fa      	ldrb	r2, [r7, #7]
 80084ee:	70da      	strb	r2, [r3, #3]
	fsp->type       = type;
 80084f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80084f6:	711a      	strb	r2, [r3, #4]
	fsp->eof		= FSP_PKT_EOF;
 80084f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084fa:	22ef      	movs	r2, #239	@ 0xef
 80084fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

	uint8_t i = 0;
 8008500:	2300      	movs	r3, #0
 8008502:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 8008504:	2300      	movs	r3, #0
 8008506:	75bb      	strb	r3, [r7, #22]

	// Copy cmd payload
	if (cmd != 0) {
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00e      	beq.n	800852c <fsp_gen_pkt+0x6c>
		fsp->length++; // length + byte cmd
 800850e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008510:	78db      	ldrb	r3, [r3, #3]
 8008512:	3301      	adds	r3, #1
 8008514:	b2da      	uxtb	r2, r3
 8008516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008518:	70da      	strb	r2, [r3, #3]
		fsp->payload[j++] = *cmd;
 800851a:	7dbb      	ldrb	r3, [r7, #22]
 800851c:	1c5a      	adds	r2, r3, #1
 800851e:	75ba      	strb	r2, [r7, #22]
 8008520:	4619      	mov	r1, r3
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	781a      	ldrb	r2, [r3, #0]
 8008526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008528:	440b      	add	r3, r1
 800852a:	715a      	strb	r2, [r3, #5]
	}

	// Copy payload fsp->payload
	for(i=0; i<payload_len; i++)
 800852c:	2300      	movs	r3, #0
 800852e:	75fb      	strb	r3, [r7, #23]
 8008530:	e00d      	b.n	800854e <fsp_gen_pkt+0x8e>
	{
		fsp->payload[j++] = payload[i];
 8008532:	7dfb      	ldrb	r3, [r7, #23]
 8008534:	68ba      	ldr	r2, [r7, #8]
 8008536:	441a      	add	r2, r3
 8008538:	7dbb      	ldrb	r3, [r7, #22]
 800853a:	1c59      	adds	r1, r3, #1
 800853c:	75b9      	strb	r1, [r7, #22]
 800853e:	4619      	mov	r1, r3
 8008540:	7812      	ldrb	r2, [r2, #0]
 8008542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008544:	440b      	add	r3, r1
 8008546:	715a      	strb	r2, [r3, #5]
	for(i=0; i<payload_len; i++)
 8008548:	7dfb      	ldrb	r3, [r7, #23]
 800854a:	3301      	adds	r3, #1
 800854c:	75fb      	strb	r3, [r7, #23]
 800854e:	7dfa      	ldrb	r2, [r7, #23]
 8008550:	79fb      	ldrb	r3, [r7, #7]
 8008552:	429a      	cmp	r2, r3
 8008554:	d3ed      	bcc.n	8008532 <fsp_gen_pkt+0x72>
	}

	fsp->crc16 = crc16_CCITT(FSP_CRC16_INITIAL_VALUE, &fsp->src_adr, fsp->length + 4);
 8008556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008558:	1c59      	adds	r1, r3, #1
 800855a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800855c:	78db      	ldrb	r3, [r3, #3]
 800855e:	3304      	adds	r3, #4
 8008560:	b29b      	uxth	r3, r3
 8008562:	461a      	mov	r2, r3
 8008564:	2000      	movs	r0, #0
 8008566:	f7ff ff2f 	bl	80083c8 <crc16_CCITT>
 800856a:	4603      	mov	r3, r0
 800856c:	461a      	mov	r2, r3
 800856e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008570:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

}
 8008574:	bf00      	nop
 8008576:	3718      	adds	r7, #24
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}
 800857c:	20002954 	.word	0x20002954

08008580 <fsp_encode>:

void fsp_encode(fsp_packet_t *fsp, uint8_t *pkt, uint8_t *pkt_len)
{
 8008580:	b480      	push	{r7}
 8008582:	b087      	sub	sp, #28
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	607a      	str	r2, [r7, #4]
	uint8_t i = 0;
 800858c:	2300      	movs	r3, #0
 800858e:	75fb      	strb	r3, [r7, #23]
	uint8_t crc_msb = (uint8_t)(fsp->crc16 >> 8);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8008596:	0a1b      	lsrs	r3, r3, #8
 8008598:	b29b      	uxth	r3, r3
 800859a:	757b      	strb	r3, [r7, #21]
	uint8_t crc_lsb = (uint8_t)(fsp->crc16 & 0xFF);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80085a2:	753b      	strb	r3, [r7, #20]
	pkt[i++] = fsp->sod;
 80085a4:	7dfb      	ldrb	r3, [r7, #23]
 80085a6:	1c5a      	adds	r2, r3, #1
 80085a8:	75fa      	strb	r2, [r7, #23]
 80085aa:	461a      	mov	r2, r3
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	4413      	add	r3, r2
 80085b0:	68fa      	ldr	r2, [r7, #12]
 80085b2:	7812      	ldrb	r2, [r2, #0]
 80085b4:	701a      	strb	r2, [r3, #0]
	pkt[i++] = fsp->src_adr;
 80085b6:	7dfb      	ldrb	r3, [r7, #23]
 80085b8:	1c5a      	adds	r2, r3, #1
 80085ba:	75fa      	strb	r2, [r7, #23]
 80085bc:	461a      	mov	r2, r3
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	4413      	add	r3, r2
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	7852      	ldrb	r2, [r2, #1]
 80085c6:	701a      	strb	r2, [r3, #0]
	pkt[i++] = fsp->dst_adr;
 80085c8:	7dfb      	ldrb	r3, [r7, #23]
 80085ca:	1c5a      	adds	r2, r3, #1
 80085cc:	75fa      	strb	r2, [r7, #23]
 80085ce:	461a      	mov	r2, r3
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	4413      	add	r3, r2
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	7892      	ldrb	r2, [r2, #2]
 80085d8:	701a      	strb	r2, [r3, #0]
	pkt[i++] = fsp->length;
 80085da:	7dfb      	ldrb	r3, [r7, #23]
 80085dc:	1c5a      	adds	r2, r3, #1
 80085de:	75fa      	strb	r2, [r7, #23]
 80085e0:	461a      	mov	r2, r3
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	4413      	add	r3, r2
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	78d2      	ldrb	r2, [r2, #3]
 80085ea:	701a      	strb	r2, [r3, #0]
	pkt[i++] = fsp->type;
 80085ec:	7dfb      	ldrb	r3, [r7, #23]
 80085ee:	1c5a      	adds	r2, r3, #1
 80085f0:	75fa      	strb	r2, [r7, #23]
 80085f2:	461a      	mov	r2, r3
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	4413      	add	r3, r2
 80085f8:	68fa      	ldr	r2, [r7, #12]
 80085fa:	7912      	ldrb	r2, [r2, #4]
 80085fc:	701a      	strb	r2, [r3, #0]

	uint8_t j = 0;
 80085fe:	2300      	movs	r3, #0
 8008600:	75bb      	strb	r3, [r7, #22]
	for(j=0; j<fsp->length; j++)
 8008602:	2300      	movs	r3, #0
 8008604:	75bb      	strb	r3, [r7, #22]
 8008606:	e052      	b.n	80086ae <fsp_encode+0x12e>
	{
		if (fsp->payload[j] == FSP_PKT_SOD) {
 8008608:	7dbb      	ldrb	r3, [r7, #22]
 800860a:	68fa      	ldr	r2, [r7, #12]
 800860c:	4413      	add	r3, r2
 800860e:	795b      	ldrb	r3, [r3, #5]
 8008610:	2bca      	cmp	r3, #202	@ 0xca
 8008612:	d110      	bne.n	8008636 <fsp_encode+0xb6>
			pkt[i++] = FSP_PKT_ESC;
 8008614:	7dfb      	ldrb	r3, [r7, #23]
 8008616:	1c5a      	adds	r2, r3, #1
 8008618:	75fa      	strb	r2, [r7, #23]
 800861a:	461a      	mov	r2, r3
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	4413      	add	r3, r2
 8008620:	22bd      	movs	r2, #189	@ 0xbd
 8008622:	701a      	strb	r2, [r3, #0]
			pkt[i++] = FSP_PKT_TSOD;
 8008624:	7dfb      	ldrb	r3, [r7, #23]
 8008626:	1c5a      	adds	r2, r3, #1
 8008628:	75fa      	strb	r2, [r7, #23]
 800862a:	461a      	mov	r2, r3
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	4413      	add	r3, r2
 8008630:	22dc      	movs	r2, #220	@ 0xdc
 8008632:	701a      	strb	r2, [r3, #0]
 8008634:	e038      	b.n	80086a8 <fsp_encode+0x128>
			} else if (fsp->payload[j] == FSP_PKT_EOF) {
 8008636:	7dbb      	ldrb	r3, [r7, #22]
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	4413      	add	r3, r2
 800863c:	795b      	ldrb	r3, [r3, #5]
 800863e:	2bef      	cmp	r3, #239	@ 0xef
 8008640:	d110      	bne.n	8008664 <fsp_encode+0xe4>
			pkt[i++] = FSP_PKT_ESC;
 8008642:	7dfb      	ldrb	r3, [r7, #23]
 8008644:	1c5a      	adds	r2, r3, #1
 8008646:	75fa      	strb	r2, [r7, #23]
 8008648:	461a      	mov	r2, r3
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	4413      	add	r3, r2
 800864e:	22bd      	movs	r2, #189	@ 0xbd
 8008650:	701a      	strb	r2, [r3, #0]
			pkt[i++] = FSP_PKT_TEOF;
 8008652:	7dfb      	ldrb	r3, [r7, #23]
 8008654:	1c5a      	adds	r2, r3, #1
 8008656:	75fa      	strb	r2, [r7, #23]
 8008658:	461a      	mov	r2, r3
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	4413      	add	r3, r2
 800865e:	22de      	movs	r2, #222	@ 0xde
 8008660:	701a      	strb	r2, [r3, #0]
 8008662:	e021      	b.n	80086a8 <fsp_encode+0x128>
			} else if (fsp->payload[j] == FSP_PKT_ESC) {
 8008664:	7dbb      	ldrb	r3, [r7, #22]
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	4413      	add	r3, r2
 800866a:	795b      	ldrb	r3, [r3, #5]
 800866c:	2bbd      	cmp	r3, #189	@ 0xbd
 800866e:	d110      	bne.n	8008692 <fsp_encode+0x112>
			pkt[i++] = FSP_PKT_ESC;
 8008670:	7dfb      	ldrb	r3, [r7, #23]
 8008672:	1c5a      	adds	r2, r3, #1
 8008674:	75fa      	strb	r2, [r7, #23]
 8008676:	461a      	mov	r2, r3
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	4413      	add	r3, r2
 800867c:	22bd      	movs	r2, #189	@ 0xbd
 800867e:	701a      	strb	r2, [r3, #0]
			pkt[i++] = FSP_PKT_TESC;
 8008680:	7dfb      	ldrb	r3, [r7, #23]
 8008682:	1c5a      	adds	r2, r3, #1
 8008684:	75fa      	strb	r2, [r7, #23]
 8008686:	461a      	mov	r2, r3
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	4413      	add	r3, r2
 800868c:	22db      	movs	r2, #219	@ 0xdb
 800868e:	701a      	strb	r2, [r3, #0]
 8008690:	e00a      	b.n	80086a8 <fsp_encode+0x128>
		} else
		pkt[i++] = fsp->payload[j];
 8008692:	7dba      	ldrb	r2, [r7, #22]
 8008694:	7dfb      	ldrb	r3, [r7, #23]
 8008696:	1c59      	adds	r1, r3, #1
 8008698:	75f9      	strb	r1, [r7, #23]
 800869a:	4619      	mov	r1, r3
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	440b      	add	r3, r1
 80086a0:	68f9      	ldr	r1, [r7, #12]
 80086a2:	440a      	add	r2, r1
 80086a4:	7952      	ldrb	r2, [r2, #5]
 80086a6:	701a      	strb	r2, [r3, #0]
	for(j=0; j<fsp->length; j++)
 80086a8:	7dbb      	ldrb	r3, [r7, #22]
 80086aa:	3301      	adds	r3, #1
 80086ac:	75bb      	strb	r3, [r7, #22]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	78db      	ldrb	r3, [r3, #3]
 80086b2:	7dba      	ldrb	r2, [r7, #22]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d3a7      	bcc.n	8008608 <fsp_encode+0x88>
	}

	if (crc_msb == FSP_PKT_SOD) {
 80086b8:	7d7b      	ldrb	r3, [r7, #21]
 80086ba:	2bca      	cmp	r3, #202	@ 0xca
 80086bc:	d110      	bne.n	80086e0 <fsp_encode+0x160>
		pkt[i++] = FSP_PKT_ESC;
 80086be:	7dfb      	ldrb	r3, [r7, #23]
 80086c0:	1c5a      	adds	r2, r3, #1
 80086c2:	75fa      	strb	r2, [r7, #23]
 80086c4:	461a      	mov	r2, r3
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	4413      	add	r3, r2
 80086ca:	22bd      	movs	r2, #189	@ 0xbd
 80086cc:	701a      	strb	r2, [r3, #0]
		pkt[i++] = FSP_PKT_TSOD;
 80086ce:	7dfb      	ldrb	r3, [r7, #23]
 80086d0:	1c5a      	adds	r2, r3, #1
 80086d2:	75fa      	strb	r2, [r7, #23]
 80086d4:	461a      	mov	r2, r3
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	4413      	add	r3, r2
 80086da:	22dc      	movs	r2, #220	@ 0xdc
 80086dc:	701a      	strb	r2, [r3, #0]
 80086de:	e02f      	b.n	8008740 <fsp_encode+0x1c0>
		} else if (crc_msb == FSP_PKT_EOF) {
 80086e0:	7d7b      	ldrb	r3, [r7, #21]
 80086e2:	2bef      	cmp	r3, #239	@ 0xef
 80086e4:	d110      	bne.n	8008708 <fsp_encode+0x188>
		pkt[i++] = FSP_PKT_ESC;
 80086e6:	7dfb      	ldrb	r3, [r7, #23]
 80086e8:	1c5a      	adds	r2, r3, #1
 80086ea:	75fa      	strb	r2, [r7, #23]
 80086ec:	461a      	mov	r2, r3
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	4413      	add	r3, r2
 80086f2:	22bd      	movs	r2, #189	@ 0xbd
 80086f4:	701a      	strb	r2, [r3, #0]
		pkt[i++] = FSP_PKT_TEOF;
 80086f6:	7dfb      	ldrb	r3, [r7, #23]
 80086f8:	1c5a      	adds	r2, r3, #1
 80086fa:	75fa      	strb	r2, [r7, #23]
 80086fc:	461a      	mov	r2, r3
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	4413      	add	r3, r2
 8008702:	22de      	movs	r2, #222	@ 0xde
 8008704:	701a      	strb	r2, [r3, #0]
 8008706:	e01b      	b.n	8008740 <fsp_encode+0x1c0>
		} else if (crc_msb == FSP_PKT_ESC) {
 8008708:	7d7b      	ldrb	r3, [r7, #21]
 800870a:	2bbd      	cmp	r3, #189	@ 0xbd
 800870c:	d110      	bne.n	8008730 <fsp_encode+0x1b0>
		pkt[i++] = FSP_PKT_ESC;
 800870e:	7dfb      	ldrb	r3, [r7, #23]
 8008710:	1c5a      	adds	r2, r3, #1
 8008712:	75fa      	strb	r2, [r7, #23]
 8008714:	461a      	mov	r2, r3
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	4413      	add	r3, r2
 800871a:	22bd      	movs	r2, #189	@ 0xbd
 800871c:	701a      	strb	r2, [r3, #0]
		pkt[i++] = FSP_PKT_TESC;
 800871e:	7dfb      	ldrb	r3, [r7, #23]
 8008720:	1c5a      	adds	r2, r3, #1
 8008722:	75fa      	strb	r2, [r7, #23]
 8008724:	461a      	mov	r2, r3
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	4413      	add	r3, r2
 800872a:	22db      	movs	r2, #219	@ 0xdb
 800872c:	701a      	strb	r2, [r3, #0]
 800872e:	e007      	b.n	8008740 <fsp_encode+0x1c0>
	} else
	pkt[i++] = crc_msb;
 8008730:	7dfb      	ldrb	r3, [r7, #23]
 8008732:	1c5a      	adds	r2, r3, #1
 8008734:	75fa      	strb	r2, [r7, #23]
 8008736:	461a      	mov	r2, r3
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	4413      	add	r3, r2
 800873c:	7d7a      	ldrb	r2, [r7, #21]
 800873e:	701a      	strb	r2, [r3, #0]

	if (crc_lsb == FSP_PKT_SOD) {
 8008740:	7d3b      	ldrb	r3, [r7, #20]
 8008742:	2bca      	cmp	r3, #202	@ 0xca
 8008744:	d110      	bne.n	8008768 <fsp_encode+0x1e8>
		pkt[i++] = FSP_PKT_ESC;
 8008746:	7dfb      	ldrb	r3, [r7, #23]
 8008748:	1c5a      	adds	r2, r3, #1
 800874a:	75fa      	strb	r2, [r7, #23]
 800874c:	461a      	mov	r2, r3
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	4413      	add	r3, r2
 8008752:	22bd      	movs	r2, #189	@ 0xbd
 8008754:	701a      	strb	r2, [r3, #0]
		pkt[i++] = FSP_PKT_TSOD;
 8008756:	7dfb      	ldrb	r3, [r7, #23]
 8008758:	1c5a      	adds	r2, r3, #1
 800875a:	75fa      	strb	r2, [r7, #23]
 800875c:	461a      	mov	r2, r3
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	4413      	add	r3, r2
 8008762:	22dc      	movs	r2, #220	@ 0xdc
 8008764:	701a      	strb	r2, [r3, #0]
 8008766:	e02f      	b.n	80087c8 <fsp_encode+0x248>
		} else if (crc_lsb == FSP_PKT_EOF) {
 8008768:	7d3b      	ldrb	r3, [r7, #20]
 800876a:	2bef      	cmp	r3, #239	@ 0xef
 800876c:	d110      	bne.n	8008790 <fsp_encode+0x210>
		pkt[i++] = FSP_PKT_ESC;
 800876e:	7dfb      	ldrb	r3, [r7, #23]
 8008770:	1c5a      	adds	r2, r3, #1
 8008772:	75fa      	strb	r2, [r7, #23]
 8008774:	461a      	mov	r2, r3
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	4413      	add	r3, r2
 800877a:	22bd      	movs	r2, #189	@ 0xbd
 800877c:	701a      	strb	r2, [r3, #0]
		pkt[i++] = FSP_PKT_TEOF;
 800877e:	7dfb      	ldrb	r3, [r7, #23]
 8008780:	1c5a      	adds	r2, r3, #1
 8008782:	75fa      	strb	r2, [r7, #23]
 8008784:	461a      	mov	r2, r3
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	4413      	add	r3, r2
 800878a:	22de      	movs	r2, #222	@ 0xde
 800878c:	701a      	strb	r2, [r3, #0]
 800878e:	e01b      	b.n	80087c8 <fsp_encode+0x248>
		} else if (crc_lsb == FSP_PKT_ESC) {
 8008790:	7d3b      	ldrb	r3, [r7, #20]
 8008792:	2bbd      	cmp	r3, #189	@ 0xbd
 8008794:	d110      	bne.n	80087b8 <fsp_encode+0x238>
		pkt[i++] = FSP_PKT_ESC;
 8008796:	7dfb      	ldrb	r3, [r7, #23]
 8008798:	1c5a      	adds	r2, r3, #1
 800879a:	75fa      	strb	r2, [r7, #23]
 800879c:	461a      	mov	r2, r3
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	4413      	add	r3, r2
 80087a2:	22bd      	movs	r2, #189	@ 0xbd
 80087a4:	701a      	strb	r2, [r3, #0]
		pkt[i++] = FSP_PKT_TESC;
 80087a6:	7dfb      	ldrb	r3, [r7, #23]
 80087a8:	1c5a      	adds	r2, r3, #1
 80087aa:	75fa      	strb	r2, [r7, #23]
 80087ac:	461a      	mov	r2, r3
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	4413      	add	r3, r2
 80087b2:	22db      	movs	r2, #219	@ 0xdb
 80087b4:	701a      	strb	r2, [r3, #0]
 80087b6:	e007      	b.n	80087c8 <fsp_encode+0x248>
	} else
	pkt[i++] = crc_lsb;
 80087b8:	7dfb      	ldrb	r3, [r7, #23]
 80087ba:	1c5a      	adds	r2, r3, #1
 80087bc:	75fa      	strb	r2, [r7, #23]
 80087be:	461a      	mov	r2, r3
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	4413      	add	r3, r2
 80087c4:	7d3a      	ldrb	r2, [r7, #20]
 80087c6:	701a      	strb	r2, [r3, #0]

	pkt[i++] = FSP_PKT_EOF;
 80087c8:	7dfb      	ldrb	r3, [r7, #23]
 80087ca:	1c5a      	adds	r2, r3, #1
 80087cc:	75fa      	strb	r2, [r7, #23]
 80087ce:	461a      	mov	r2, r3
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	4413      	add	r3, r2
 80087d4:	22ef      	movs	r2, #239	@ 0xef
 80087d6:	701a      	strb	r2, [r3, #0]
	*pkt_len = i;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	7dfa      	ldrb	r2, [r7, #23]
 80087dc:	701a      	strb	r2, [r3, #0]
}
 80087de:	bf00      	nop
 80087e0:	371c      	adds	r7, #28
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr
	...

080087ec <frame_decode>:
			return FSP_PKT_ERROR;
		}
    }
}

int frame_decode(uint8_t *buffer, uint8_t length, fsp_packet_t *pkt){
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b086      	sub	sp, #24
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	460b      	mov	r3, r1
 80087f6:	607a      	str	r2, [r7, #4]
 80087f8:	72fb      	strb	r3, [r7, #11]

	//	fsp_packet_t fsp_pkt;
	uint8_t i = 0;
 80087fa:	2300      	movs	r3, #0
 80087fc:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 80087fe:	2300      	movs	r3, #0
 8008800:	75bb      	strb	r3, [r7, #22]
	//	uint8_t escape = 0;
	//	uint8_t decoded_payload[FSP_PAYLOAD_MAX_LENGTH];

	if (length < FSP_PKT_MIN_LENGTH - 2) {
 8008802:	7afb      	ldrb	r3, [r7, #11]
 8008804:	2b04      	cmp	r3, #4
 8008806:	d801      	bhi.n	800880c <frame_decode+0x20>
		return FSP_PKT_INVALID;
 8008808:	2302      	movs	r3, #2
 800880a:	e07e      	b.n	800890a <frame_decode+0x11e>
	}

	i = 0;
 800880c:	2300      	movs	r3, #0
 800880e:	75fb      	strb	r3, [r7, #23]
	pkt->src_adr = buffer[i++];
 8008810:	7dfb      	ldrb	r3, [r7, #23]
 8008812:	1c5a      	adds	r2, r3, #1
 8008814:	75fa      	strb	r2, [r7, #23]
 8008816:	461a      	mov	r2, r3
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	4413      	add	r3, r2
 800881c:	781a      	ldrb	r2, [r3, #0]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	705a      	strb	r2, [r3, #1]
	pkt->dst_adr = buffer[i++];
 8008822:	7dfb      	ldrb	r3, [r7, #23]
 8008824:	1c5a      	adds	r2, r3, #1
 8008826:	75fa      	strb	r2, [r7, #23]
 8008828:	461a      	mov	r2, r3
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	4413      	add	r3, r2
 800882e:	781a      	ldrb	r2, [r3, #0]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	709a      	strb	r2, [r3, #2]
	pkt->length = buffer[i++];
 8008834:	7dfb      	ldrb	r3, [r7, #23]
 8008836:	1c5a      	adds	r2, r3, #1
 8008838:	75fa      	strb	r2, [r7, #23]
 800883a:	461a      	mov	r2, r3
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	4413      	add	r3, r2
 8008840:	781a      	ldrb	r2, [r3, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	70da      	strb	r2, [r3, #3]
	pkt->type = buffer[i++];
 8008846:	7dfb      	ldrb	r3, [r7, #23]
 8008848:	1c5a      	adds	r2, r3, #1
 800884a:	75fa      	strb	r2, [r7, #23]
 800884c:	461a      	mov	r2, r3
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	4413      	add	r3, r2
 8008852:	781a      	ldrb	r2, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	711a      	strb	r2, [r3, #4]

	while(i < length - FSP_PKT_CRC_LENGTH)
 8008858:	e00d      	b.n	8008876 <frame_decode+0x8a>
	pkt->payload[j++] = buffer[i++];
 800885a:	7dfb      	ldrb	r3, [r7, #23]
 800885c:	1c5a      	adds	r2, r3, #1
 800885e:	75fa      	strb	r2, [r7, #23]
 8008860:	461a      	mov	r2, r3
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	441a      	add	r2, r3
 8008866:	7dbb      	ldrb	r3, [r7, #22]
 8008868:	1c59      	adds	r1, r3, #1
 800886a:	75b9      	strb	r1, [r7, #22]
 800886c:	4619      	mov	r1, r3
 800886e:	7812      	ldrb	r2, [r2, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	440b      	add	r3, r1
 8008874:	715a      	strb	r2, [r3, #5]
	while(i < length - FSP_PKT_CRC_LENGTH)
 8008876:	7dfa      	ldrb	r2, [r7, #23]
 8008878:	7afb      	ldrb	r3, [r7, #11]
 800887a:	3b02      	subs	r3, #2
 800887c:	429a      	cmp	r2, r3
 800887e:	dbec      	blt.n	800885a <frame_decode+0x6e>
	j = length;
 8008880:	7afb      	ldrb	r3, [r7, #11]
 8008882:	75bb      	strb	r3, [r7, #22]
	if (pkt->length > FSP_PAYLOAD_MAX_LENGTH || pkt->length != j - FSP_PKT_HEADER_LENGTH  - FSP_PKT_CRC_LENGTH) {
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	78db      	ldrb	r3, [r3, #3]
 8008888:	2b3c      	cmp	r3, #60	@ 0x3c
 800888a:	d806      	bhi.n	800889a <frame_decode+0xae>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	78db      	ldrb	r3, [r3, #3]
 8008890:	461a      	mov	r2, r3
 8008892:	7dbb      	ldrb	r3, [r7, #22]
 8008894:	3b06      	subs	r3, #6
 8008896:	429a      	cmp	r2, r3
 8008898:	d001      	beq.n	800889e <frame_decode+0xb2>
		return FSP_PKT_WRONG_LENGTH;
 800889a:	2306      	movs	r3, #6
 800889c:	e035      	b.n	800890a <frame_decode+0x11e>
	}

	//	memcpy(fsp_pkt.payload, &decoded_payload[i], fsp_pkt.length);
	i = 4;
 800889e:	2304      	movs	r3, #4
 80088a0:	75fb      	strb	r3, [r7, #23]
	i += pkt->length;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	78da      	ldrb	r2, [r3, #3]
 80088a6:	7dfb      	ldrb	r3, [r7, #23]
 80088a8:	4413      	add	r3, r2
 80088aa:	75fb      	strb	r3, [r7, #23]
	//CRC
	uint16_t crc_received = (uint16_t)(buffer[i++] << 8);
 80088ac:	7dfb      	ldrb	r3, [r7, #23]
 80088ae:	1c5a      	adds	r2, r3, #1
 80088b0:	75fa      	strb	r2, [r7, #23]
 80088b2:	461a      	mov	r2, r3
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	4413      	add	r3, r2
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	021b      	lsls	r3, r3, #8
 80088bc:	82bb      	strh	r3, [r7, #20]
	crc_received |= (uint16_t)(buffer[i++]);
 80088be:	7dfb      	ldrb	r3, [r7, #23]
 80088c0:	1c5a      	adds	r2, r3, #1
 80088c2:	75fa      	strb	r2, [r7, #23]
 80088c4:	461a      	mov	r2, r3
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	4413      	add	r3, r2
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	461a      	mov	r2, r3
 80088ce:	8abb      	ldrh	r3, [r7, #20]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	82bb      	strh	r3, [r7, #20]


	// CAL CRC
	uint16_t crc_calculated = crc16_CCITT(FSP_CRC16_INITIAL_VALUE, &pkt->src_adr, pkt->length + 4);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	1c59      	adds	r1, r3, #1
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	78db      	ldrb	r3, [r3, #3]
 80088dc:	3304      	adds	r3, #4
 80088de:	b29b      	uxth	r3, r3
 80088e0:	461a      	mov	r2, r3
 80088e2:	2000      	movs	r0, #0
 80088e4:	f7ff fd70 	bl	80083c8 <crc16_CCITT>
 80088e8:	4603      	mov	r3, r0
 80088ea:	827b      	strh	r3, [r7, #18]

	// CHECK CRC
	if (crc_received != crc_calculated) {
 80088ec:	8aba      	ldrh	r2, [r7, #20]
 80088ee:	8a7b      	ldrh	r3, [r7, #18]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d001      	beq.n	80088f8 <frame_decode+0x10c>
		return FSP_PKT_CRC_FAIL;
 80088f4:	2305      	movs	r3, #5
 80088f6:	e008      	b.n	800890a <frame_decode+0x11e>
	}

	// Address
	if (pkt->dst_adr != fsp_my_adr) {
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	789a      	ldrb	r2, [r3, #2]
 80088fc:	4b05      	ldr	r3, [pc, #20]	@ (8008914 <frame_decode+0x128>)
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	429a      	cmp	r2, r3
 8008902:	d001      	beq.n	8008908 <frame_decode+0x11c>
		return FSP_PKT_WRONG_ADR;
 8008904:	2303      	movs	r3, #3
 8008906:	e000      	b.n	800890a <frame_decode+0x11e>
	}

	//	*pkt = fsp_pkt;

	//	frame_processing(&fsp_pkt);
	return FSP_PKT_READY;
 8008908:	2301      	movs	r3, #1
}
 800890a:	4618      	mov	r0, r3
 800890c:	3718      	adds	r7, #24
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	20002954 	.word	0x20002954

08008918 <atoi>:
 8008918:	220a      	movs	r2, #10
 800891a:	2100      	movs	r1, #0
 800891c:	f000 b87a 	b.w	8008a14 <strtol>

08008920 <_strtol_l.constprop.0>:
 8008920:	2b24      	cmp	r3, #36	@ 0x24
 8008922:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008926:	4686      	mov	lr, r0
 8008928:	4690      	mov	r8, r2
 800892a:	d801      	bhi.n	8008930 <_strtol_l.constprop.0+0x10>
 800892c:	2b01      	cmp	r3, #1
 800892e:	d106      	bne.n	800893e <_strtol_l.constprop.0+0x1e>
 8008930:	f000 f8b6 	bl	8008aa0 <__errno>
 8008934:	2316      	movs	r3, #22
 8008936:	6003      	str	r3, [r0, #0]
 8008938:	2000      	movs	r0, #0
 800893a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800893e:	4834      	ldr	r0, [pc, #208]	@ (8008a10 <_strtol_l.constprop.0+0xf0>)
 8008940:	460d      	mov	r5, r1
 8008942:	462a      	mov	r2, r5
 8008944:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008948:	5d06      	ldrb	r6, [r0, r4]
 800894a:	f016 0608 	ands.w	r6, r6, #8
 800894e:	d1f8      	bne.n	8008942 <_strtol_l.constprop.0+0x22>
 8008950:	2c2d      	cmp	r4, #45	@ 0x2d
 8008952:	d12d      	bne.n	80089b0 <_strtol_l.constprop.0+0x90>
 8008954:	782c      	ldrb	r4, [r5, #0]
 8008956:	2601      	movs	r6, #1
 8008958:	1c95      	adds	r5, r2, #2
 800895a:	f033 0210 	bics.w	r2, r3, #16
 800895e:	d109      	bne.n	8008974 <_strtol_l.constprop.0+0x54>
 8008960:	2c30      	cmp	r4, #48	@ 0x30
 8008962:	d12a      	bne.n	80089ba <_strtol_l.constprop.0+0x9a>
 8008964:	782a      	ldrb	r2, [r5, #0]
 8008966:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800896a:	2a58      	cmp	r2, #88	@ 0x58
 800896c:	d125      	bne.n	80089ba <_strtol_l.constprop.0+0x9a>
 800896e:	786c      	ldrb	r4, [r5, #1]
 8008970:	2310      	movs	r3, #16
 8008972:	3502      	adds	r5, #2
 8008974:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008978:	f10c 3cff 	add.w	ip, ip, #4294967295
 800897c:	2200      	movs	r2, #0
 800897e:	fbbc f9f3 	udiv	r9, ip, r3
 8008982:	4610      	mov	r0, r2
 8008984:	fb03 ca19 	mls	sl, r3, r9, ip
 8008988:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800898c:	2f09      	cmp	r7, #9
 800898e:	d81b      	bhi.n	80089c8 <_strtol_l.constprop.0+0xa8>
 8008990:	463c      	mov	r4, r7
 8008992:	42a3      	cmp	r3, r4
 8008994:	dd27      	ble.n	80089e6 <_strtol_l.constprop.0+0xc6>
 8008996:	1c57      	adds	r7, r2, #1
 8008998:	d007      	beq.n	80089aa <_strtol_l.constprop.0+0x8a>
 800899a:	4581      	cmp	r9, r0
 800899c:	d320      	bcc.n	80089e0 <_strtol_l.constprop.0+0xc0>
 800899e:	d101      	bne.n	80089a4 <_strtol_l.constprop.0+0x84>
 80089a0:	45a2      	cmp	sl, r4
 80089a2:	db1d      	blt.n	80089e0 <_strtol_l.constprop.0+0xc0>
 80089a4:	fb00 4003 	mla	r0, r0, r3, r4
 80089a8:	2201      	movs	r2, #1
 80089aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80089ae:	e7eb      	b.n	8008988 <_strtol_l.constprop.0+0x68>
 80089b0:	2c2b      	cmp	r4, #43	@ 0x2b
 80089b2:	bf04      	itt	eq
 80089b4:	782c      	ldrbeq	r4, [r5, #0]
 80089b6:	1c95      	addeq	r5, r2, #2
 80089b8:	e7cf      	b.n	800895a <_strtol_l.constprop.0+0x3a>
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d1da      	bne.n	8008974 <_strtol_l.constprop.0+0x54>
 80089be:	2c30      	cmp	r4, #48	@ 0x30
 80089c0:	bf0c      	ite	eq
 80089c2:	2308      	moveq	r3, #8
 80089c4:	230a      	movne	r3, #10
 80089c6:	e7d5      	b.n	8008974 <_strtol_l.constprop.0+0x54>
 80089c8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80089cc:	2f19      	cmp	r7, #25
 80089ce:	d801      	bhi.n	80089d4 <_strtol_l.constprop.0+0xb4>
 80089d0:	3c37      	subs	r4, #55	@ 0x37
 80089d2:	e7de      	b.n	8008992 <_strtol_l.constprop.0+0x72>
 80089d4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80089d8:	2f19      	cmp	r7, #25
 80089da:	d804      	bhi.n	80089e6 <_strtol_l.constprop.0+0xc6>
 80089dc:	3c57      	subs	r4, #87	@ 0x57
 80089de:	e7d8      	b.n	8008992 <_strtol_l.constprop.0+0x72>
 80089e0:	f04f 32ff 	mov.w	r2, #4294967295
 80089e4:	e7e1      	b.n	80089aa <_strtol_l.constprop.0+0x8a>
 80089e6:	1c53      	adds	r3, r2, #1
 80089e8:	d108      	bne.n	80089fc <_strtol_l.constprop.0+0xdc>
 80089ea:	2322      	movs	r3, #34	@ 0x22
 80089ec:	f8ce 3000 	str.w	r3, [lr]
 80089f0:	4660      	mov	r0, ip
 80089f2:	f1b8 0f00 	cmp.w	r8, #0
 80089f6:	d0a0      	beq.n	800893a <_strtol_l.constprop.0+0x1a>
 80089f8:	1e69      	subs	r1, r5, #1
 80089fa:	e006      	b.n	8008a0a <_strtol_l.constprop.0+0xea>
 80089fc:	b106      	cbz	r6, 8008a00 <_strtol_l.constprop.0+0xe0>
 80089fe:	4240      	negs	r0, r0
 8008a00:	f1b8 0f00 	cmp.w	r8, #0
 8008a04:	d099      	beq.n	800893a <_strtol_l.constprop.0+0x1a>
 8008a06:	2a00      	cmp	r2, #0
 8008a08:	d1f6      	bne.n	80089f8 <_strtol_l.constprop.0+0xd8>
 8008a0a:	f8c8 1000 	str.w	r1, [r8]
 8008a0e:	e794      	b.n	800893a <_strtol_l.constprop.0+0x1a>
 8008a10:	08009cb9 	.word	0x08009cb9

08008a14 <strtol>:
 8008a14:	4613      	mov	r3, r2
 8008a16:	460a      	mov	r2, r1
 8008a18:	4601      	mov	r1, r0
 8008a1a:	4802      	ldr	r0, [pc, #8]	@ (8008a24 <strtol+0x10>)
 8008a1c:	6800      	ldr	r0, [r0, #0]
 8008a1e:	f7ff bf7f 	b.w	8008920 <_strtol_l.constprop.0>
 8008a22:	bf00      	nop
 8008a24:	20002294 	.word	0x20002294

08008a28 <sniprintf>:
 8008a28:	b40c      	push	{r2, r3}
 8008a2a:	b530      	push	{r4, r5, lr}
 8008a2c:	4b17      	ldr	r3, [pc, #92]	@ (8008a8c <sniprintf+0x64>)
 8008a2e:	1e0c      	subs	r4, r1, #0
 8008a30:	681d      	ldr	r5, [r3, #0]
 8008a32:	b09d      	sub	sp, #116	@ 0x74
 8008a34:	da08      	bge.n	8008a48 <sniprintf+0x20>
 8008a36:	238b      	movs	r3, #139	@ 0x8b
 8008a38:	602b      	str	r3, [r5, #0]
 8008a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a3e:	b01d      	add	sp, #116	@ 0x74
 8008a40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a44:	b002      	add	sp, #8
 8008a46:	4770      	bx	lr
 8008a48:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008a4c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008a50:	bf14      	ite	ne
 8008a52:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008a56:	4623      	moveq	r3, r4
 8008a58:	9304      	str	r3, [sp, #16]
 8008a5a:	9307      	str	r3, [sp, #28]
 8008a5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008a60:	9002      	str	r0, [sp, #8]
 8008a62:	9006      	str	r0, [sp, #24]
 8008a64:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008a68:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008a6a:	ab21      	add	r3, sp, #132	@ 0x84
 8008a6c:	a902      	add	r1, sp, #8
 8008a6e:	4628      	mov	r0, r5
 8008a70:	9301      	str	r3, [sp, #4]
 8008a72:	f000 f995 	bl	8008da0 <_svfiprintf_r>
 8008a76:	1c43      	adds	r3, r0, #1
 8008a78:	bfbc      	itt	lt
 8008a7a:	238b      	movlt	r3, #139	@ 0x8b
 8008a7c:	602b      	strlt	r3, [r5, #0]
 8008a7e:	2c00      	cmp	r4, #0
 8008a80:	d0dd      	beq.n	8008a3e <sniprintf+0x16>
 8008a82:	9b02      	ldr	r3, [sp, #8]
 8008a84:	2200      	movs	r2, #0
 8008a86:	701a      	strb	r2, [r3, #0]
 8008a88:	e7d9      	b.n	8008a3e <sniprintf+0x16>
 8008a8a:	bf00      	nop
 8008a8c:	20002294 	.word	0x20002294

08008a90 <memset>:
 8008a90:	4402      	add	r2, r0
 8008a92:	4603      	mov	r3, r0
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d100      	bne.n	8008a9a <memset+0xa>
 8008a98:	4770      	bx	lr
 8008a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8008a9e:	e7f9      	b.n	8008a94 <memset+0x4>

08008aa0 <__errno>:
 8008aa0:	4b01      	ldr	r3, [pc, #4]	@ (8008aa8 <__errno+0x8>)
 8008aa2:	6818      	ldr	r0, [r3, #0]
 8008aa4:	4770      	bx	lr
 8008aa6:	bf00      	nop
 8008aa8:	20002294 	.word	0x20002294

08008aac <__libc_init_array>:
 8008aac:	b570      	push	{r4, r5, r6, lr}
 8008aae:	4d0d      	ldr	r5, [pc, #52]	@ (8008ae4 <__libc_init_array+0x38>)
 8008ab0:	4c0d      	ldr	r4, [pc, #52]	@ (8008ae8 <__libc_init_array+0x3c>)
 8008ab2:	1b64      	subs	r4, r4, r5
 8008ab4:	10a4      	asrs	r4, r4, #2
 8008ab6:	2600      	movs	r6, #0
 8008ab8:	42a6      	cmp	r6, r4
 8008aba:	d109      	bne.n	8008ad0 <__libc_init_array+0x24>
 8008abc:	4d0b      	ldr	r5, [pc, #44]	@ (8008aec <__libc_init_array+0x40>)
 8008abe:	4c0c      	ldr	r4, [pc, #48]	@ (8008af0 <__libc_init_array+0x44>)
 8008ac0:	f000 fc66 	bl	8009390 <_init>
 8008ac4:	1b64      	subs	r4, r4, r5
 8008ac6:	10a4      	asrs	r4, r4, #2
 8008ac8:	2600      	movs	r6, #0
 8008aca:	42a6      	cmp	r6, r4
 8008acc:	d105      	bne.n	8008ada <__libc_init_array+0x2e>
 8008ace:	bd70      	pop	{r4, r5, r6, pc}
 8008ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ad4:	4798      	blx	r3
 8008ad6:	3601      	adds	r6, #1
 8008ad8:	e7ee      	b.n	8008ab8 <__libc_init_array+0xc>
 8008ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ade:	4798      	blx	r3
 8008ae0:	3601      	adds	r6, #1
 8008ae2:	e7f2      	b.n	8008aca <__libc_init_array+0x1e>
 8008ae4:	08009df4 	.word	0x08009df4
 8008ae8:	08009df4 	.word	0x08009df4
 8008aec:	08009df4 	.word	0x08009df4
 8008af0:	08009df8 	.word	0x08009df8

08008af4 <__retarget_lock_acquire_recursive>:
 8008af4:	4770      	bx	lr

08008af6 <__retarget_lock_release_recursive>:
 8008af6:	4770      	bx	lr

08008af8 <_free_r>:
 8008af8:	b538      	push	{r3, r4, r5, lr}
 8008afa:	4605      	mov	r5, r0
 8008afc:	2900      	cmp	r1, #0
 8008afe:	d041      	beq.n	8008b84 <_free_r+0x8c>
 8008b00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b04:	1f0c      	subs	r4, r1, #4
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	bfb8      	it	lt
 8008b0a:	18e4      	addlt	r4, r4, r3
 8008b0c:	f000 f8e0 	bl	8008cd0 <__malloc_lock>
 8008b10:	4a1d      	ldr	r2, [pc, #116]	@ (8008b88 <_free_r+0x90>)
 8008b12:	6813      	ldr	r3, [r2, #0]
 8008b14:	b933      	cbnz	r3, 8008b24 <_free_r+0x2c>
 8008b16:	6063      	str	r3, [r4, #4]
 8008b18:	6014      	str	r4, [r2, #0]
 8008b1a:	4628      	mov	r0, r5
 8008b1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b20:	f000 b8dc 	b.w	8008cdc <__malloc_unlock>
 8008b24:	42a3      	cmp	r3, r4
 8008b26:	d908      	bls.n	8008b3a <_free_r+0x42>
 8008b28:	6820      	ldr	r0, [r4, #0]
 8008b2a:	1821      	adds	r1, r4, r0
 8008b2c:	428b      	cmp	r3, r1
 8008b2e:	bf01      	itttt	eq
 8008b30:	6819      	ldreq	r1, [r3, #0]
 8008b32:	685b      	ldreq	r3, [r3, #4]
 8008b34:	1809      	addeq	r1, r1, r0
 8008b36:	6021      	streq	r1, [r4, #0]
 8008b38:	e7ed      	b.n	8008b16 <_free_r+0x1e>
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	b10b      	cbz	r3, 8008b44 <_free_r+0x4c>
 8008b40:	42a3      	cmp	r3, r4
 8008b42:	d9fa      	bls.n	8008b3a <_free_r+0x42>
 8008b44:	6811      	ldr	r1, [r2, #0]
 8008b46:	1850      	adds	r0, r2, r1
 8008b48:	42a0      	cmp	r0, r4
 8008b4a:	d10b      	bne.n	8008b64 <_free_r+0x6c>
 8008b4c:	6820      	ldr	r0, [r4, #0]
 8008b4e:	4401      	add	r1, r0
 8008b50:	1850      	adds	r0, r2, r1
 8008b52:	4283      	cmp	r3, r0
 8008b54:	6011      	str	r1, [r2, #0]
 8008b56:	d1e0      	bne.n	8008b1a <_free_r+0x22>
 8008b58:	6818      	ldr	r0, [r3, #0]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	6053      	str	r3, [r2, #4]
 8008b5e:	4408      	add	r0, r1
 8008b60:	6010      	str	r0, [r2, #0]
 8008b62:	e7da      	b.n	8008b1a <_free_r+0x22>
 8008b64:	d902      	bls.n	8008b6c <_free_r+0x74>
 8008b66:	230c      	movs	r3, #12
 8008b68:	602b      	str	r3, [r5, #0]
 8008b6a:	e7d6      	b.n	8008b1a <_free_r+0x22>
 8008b6c:	6820      	ldr	r0, [r4, #0]
 8008b6e:	1821      	adds	r1, r4, r0
 8008b70:	428b      	cmp	r3, r1
 8008b72:	bf04      	itt	eq
 8008b74:	6819      	ldreq	r1, [r3, #0]
 8008b76:	685b      	ldreq	r3, [r3, #4]
 8008b78:	6063      	str	r3, [r4, #4]
 8008b7a:	bf04      	itt	eq
 8008b7c:	1809      	addeq	r1, r1, r0
 8008b7e:	6021      	streq	r1, [r4, #0]
 8008b80:	6054      	str	r4, [r2, #4]
 8008b82:	e7ca      	b.n	8008b1a <_free_r+0x22>
 8008b84:	bd38      	pop	{r3, r4, r5, pc}
 8008b86:	bf00      	nop
 8008b88:	20002a9c 	.word	0x20002a9c

08008b8c <sbrk_aligned>:
 8008b8c:	b570      	push	{r4, r5, r6, lr}
 8008b8e:	4e0f      	ldr	r6, [pc, #60]	@ (8008bcc <sbrk_aligned+0x40>)
 8008b90:	460c      	mov	r4, r1
 8008b92:	6831      	ldr	r1, [r6, #0]
 8008b94:	4605      	mov	r5, r0
 8008b96:	b911      	cbnz	r1, 8008b9e <sbrk_aligned+0x12>
 8008b98:	f000 fba6 	bl	80092e8 <_sbrk_r>
 8008b9c:	6030      	str	r0, [r6, #0]
 8008b9e:	4621      	mov	r1, r4
 8008ba0:	4628      	mov	r0, r5
 8008ba2:	f000 fba1 	bl	80092e8 <_sbrk_r>
 8008ba6:	1c43      	adds	r3, r0, #1
 8008ba8:	d103      	bne.n	8008bb2 <sbrk_aligned+0x26>
 8008baa:	f04f 34ff 	mov.w	r4, #4294967295
 8008bae:	4620      	mov	r0, r4
 8008bb0:	bd70      	pop	{r4, r5, r6, pc}
 8008bb2:	1cc4      	adds	r4, r0, #3
 8008bb4:	f024 0403 	bic.w	r4, r4, #3
 8008bb8:	42a0      	cmp	r0, r4
 8008bba:	d0f8      	beq.n	8008bae <sbrk_aligned+0x22>
 8008bbc:	1a21      	subs	r1, r4, r0
 8008bbe:	4628      	mov	r0, r5
 8008bc0:	f000 fb92 	bl	80092e8 <_sbrk_r>
 8008bc4:	3001      	adds	r0, #1
 8008bc6:	d1f2      	bne.n	8008bae <sbrk_aligned+0x22>
 8008bc8:	e7ef      	b.n	8008baa <sbrk_aligned+0x1e>
 8008bca:	bf00      	nop
 8008bcc:	20002a98 	.word	0x20002a98

08008bd0 <_malloc_r>:
 8008bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bd4:	1ccd      	adds	r5, r1, #3
 8008bd6:	f025 0503 	bic.w	r5, r5, #3
 8008bda:	3508      	adds	r5, #8
 8008bdc:	2d0c      	cmp	r5, #12
 8008bde:	bf38      	it	cc
 8008be0:	250c      	movcc	r5, #12
 8008be2:	2d00      	cmp	r5, #0
 8008be4:	4606      	mov	r6, r0
 8008be6:	db01      	blt.n	8008bec <_malloc_r+0x1c>
 8008be8:	42a9      	cmp	r1, r5
 8008bea:	d904      	bls.n	8008bf6 <_malloc_r+0x26>
 8008bec:	230c      	movs	r3, #12
 8008bee:	6033      	str	r3, [r6, #0]
 8008bf0:	2000      	movs	r0, #0
 8008bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ccc <_malloc_r+0xfc>
 8008bfa:	f000 f869 	bl	8008cd0 <__malloc_lock>
 8008bfe:	f8d8 3000 	ldr.w	r3, [r8]
 8008c02:	461c      	mov	r4, r3
 8008c04:	bb44      	cbnz	r4, 8008c58 <_malloc_r+0x88>
 8008c06:	4629      	mov	r1, r5
 8008c08:	4630      	mov	r0, r6
 8008c0a:	f7ff ffbf 	bl	8008b8c <sbrk_aligned>
 8008c0e:	1c43      	adds	r3, r0, #1
 8008c10:	4604      	mov	r4, r0
 8008c12:	d158      	bne.n	8008cc6 <_malloc_r+0xf6>
 8008c14:	f8d8 4000 	ldr.w	r4, [r8]
 8008c18:	4627      	mov	r7, r4
 8008c1a:	2f00      	cmp	r7, #0
 8008c1c:	d143      	bne.n	8008ca6 <_malloc_r+0xd6>
 8008c1e:	2c00      	cmp	r4, #0
 8008c20:	d04b      	beq.n	8008cba <_malloc_r+0xea>
 8008c22:	6823      	ldr	r3, [r4, #0]
 8008c24:	4639      	mov	r1, r7
 8008c26:	4630      	mov	r0, r6
 8008c28:	eb04 0903 	add.w	r9, r4, r3
 8008c2c:	f000 fb5c 	bl	80092e8 <_sbrk_r>
 8008c30:	4581      	cmp	r9, r0
 8008c32:	d142      	bne.n	8008cba <_malloc_r+0xea>
 8008c34:	6821      	ldr	r1, [r4, #0]
 8008c36:	1a6d      	subs	r5, r5, r1
 8008c38:	4629      	mov	r1, r5
 8008c3a:	4630      	mov	r0, r6
 8008c3c:	f7ff ffa6 	bl	8008b8c <sbrk_aligned>
 8008c40:	3001      	adds	r0, #1
 8008c42:	d03a      	beq.n	8008cba <_malloc_r+0xea>
 8008c44:	6823      	ldr	r3, [r4, #0]
 8008c46:	442b      	add	r3, r5
 8008c48:	6023      	str	r3, [r4, #0]
 8008c4a:	f8d8 3000 	ldr.w	r3, [r8]
 8008c4e:	685a      	ldr	r2, [r3, #4]
 8008c50:	bb62      	cbnz	r2, 8008cac <_malloc_r+0xdc>
 8008c52:	f8c8 7000 	str.w	r7, [r8]
 8008c56:	e00f      	b.n	8008c78 <_malloc_r+0xa8>
 8008c58:	6822      	ldr	r2, [r4, #0]
 8008c5a:	1b52      	subs	r2, r2, r5
 8008c5c:	d420      	bmi.n	8008ca0 <_malloc_r+0xd0>
 8008c5e:	2a0b      	cmp	r2, #11
 8008c60:	d917      	bls.n	8008c92 <_malloc_r+0xc2>
 8008c62:	1961      	adds	r1, r4, r5
 8008c64:	42a3      	cmp	r3, r4
 8008c66:	6025      	str	r5, [r4, #0]
 8008c68:	bf18      	it	ne
 8008c6a:	6059      	strne	r1, [r3, #4]
 8008c6c:	6863      	ldr	r3, [r4, #4]
 8008c6e:	bf08      	it	eq
 8008c70:	f8c8 1000 	streq.w	r1, [r8]
 8008c74:	5162      	str	r2, [r4, r5]
 8008c76:	604b      	str	r3, [r1, #4]
 8008c78:	4630      	mov	r0, r6
 8008c7a:	f000 f82f 	bl	8008cdc <__malloc_unlock>
 8008c7e:	f104 000b 	add.w	r0, r4, #11
 8008c82:	1d23      	adds	r3, r4, #4
 8008c84:	f020 0007 	bic.w	r0, r0, #7
 8008c88:	1ac2      	subs	r2, r0, r3
 8008c8a:	bf1c      	itt	ne
 8008c8c:	1a1b      	subne	r3, r3, r0
 8008c8e:	50a3      	strne	r3, [r4, r2]
 8008c90:	e7af      	b.n	8008bf2 <_malloc_r+0x22>
 8008c92:	6862      	ldr	r2, [r4, #4]
 8008c94:	42a3      	cmp	r3, r4
 8008c96:	bf0c      	ite	eq
 8008c98:	f8c8 2000 	streq.w	r2, [r8]
 8008c9c:	605a      	strne	r2, [r3, #4]
 8008c9e:	e7eb      	b.n	8008c78 <_malloc_r+0xa8>
 8008ca0:	4623      	mov	r3, r4
 8008ca2:	6864      	ldr	r4, [r4, #4]
 8008ca4:	e7ae      	b.n	8008c04 <_malloc_r+0x34>
 8008ca6:	463c      	mov	r4, r7
 8008ca8:	687f      	ldr	r7, [r7, #4]
 8008caa:	e7b6      	b.n	8008c1a <_malloc_r+0x4a>
 8008cac:	461a      	mov	r2, r3
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	42a3      	cmp	r3, r4
 8008cb2:	d1fb      	bne.n	8008cac <_malloc_r+0xdc>
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	6053      	str	r3, [r2, #4]
 8008cb8:	e7de      	b.n	8008c78 <_malloc_r+0xa8>
 8008cba:	230c      	movs	r3, #12
 8008cbc:	6033      	str	r3, [r6, #0]
 8008cbe:	4630      	mov	r0, r6
 8008cc0:	f000 f80c 	bl	8008cdc <__malloc_unlock>
 8008cc4:	e794      	b.n	8008bf0 <_malloc_r+0x20>
 8008cc6:	6005      	str	r5, [r0, #0]
 8008cc8:	e7d6      	b.n	8008c78 <_malloc_r+0xa8>
 8008cca:	bf00      	nop
 8008ccc:	20002a9c 	.word	0x20002a9c

08008cd0 <__malloc_lock>:
 8008cd0:	4801      	ldr	r0, [pc, #4]	@ (8008cd8 <__malloc_lock+0x8>)
 8008cd2:	f7ff bf0f 	b.w	8008af4 <__retarget_lock_acquire_recursive>
 8008cd6:	bf00      	nop
 8008cd8:	20002a94 	.word	0x20002a94

08008cdc <__malloc_unlock>:
 8008cdc:	4801      	ldr	r0, [pc, #4]	@ (8008ce4 <__malloc_unlock+0x8>)
 8008cde:	f7ff bf0a 	b.w	8008af6 <__retarget_lock_release_recursive>
 8008ce2:	bf00      	nop
 8008ce4:	20002a94 	.word	0x20002a94

08008ce8 <__ssputs_r>:
 8008ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cec:	688e      	ldr	r6, [r1, #8]
 8008cee:	461f      	mov	r7, r3
 8008cf0:	42be      	cmp	r6, r7
 8008cf2:	680b      	ldr	r3, [r1, #0]
 8008cf4:	4682      	mov	sl, r0
 8008cf6:	460c      	mov	r4, r1
 8008cf8:	4690      	mov	r8, r2
 8008cfa:	d82d      	bhi.n	8008d58 <__ssputs_r+0x70>
 8008cfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008d04:	d026      	beq.n	8008d54 <__ssputs_r+0x6c>
 8008d06:	6965      	ldr	r5, [r4, #20]
 8008d08:	6909      	ldr	r1, [r1, #16]
 8008d0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d0e:	eba3 0901 	sub.w	r9, r3, r1
 8008d12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d16:	1c7b      	adds	r3, r7, #1
 8008d18:	444b      	add	r3, r9
 8008d1a:	106d      	asrs	r5, r5, #1
 8008d1c:	429d      	cmp	r5, r3
 8008d1e:	bf38      	it	cc
 8008d20:	461d      	movcc	r5, r3
 8008d22:	0553      	lsls	r3, r2, #21
 8008d24:	d527      	bpl.n	8008d76 <__ssputs_r+0x8e>
 8008d26:	4629      	mov	r1, r5
 8008d28:	f7ff ff52 	bl	8008bd0 <_malloc_r>
 8008d2c:	4606      	mov	r6, r0
 8008d2e:	b360      	cbz	r0, 8008d8a <__ssputs_r+0xa2>
 8008d30:	6921      	ldr	r1, [r4, #16]
 8008d32:	464a      	mov	r2, r9
 8008d34:	f000 fae8 	bl	8009308 <memcpy>
 8008d38:	89a3      	ldrh	r3, [r4, #12]
 8008d3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d42:	81a3      	strh	r3, [r4, #12]
 8008d44:	6126      	str	r6, [r4, #16]
 8008d46:	6165      	str	r5, [r4, #20]
 8008d48:	444e      	add	r6, r9
 8008d4a:	eba5 0509 	sub.w	r5, r5, r9
 8008d4e:	6026      	str	r6, [r4, #0]
 8008d50:	60a5      	str	r5, [r4, #8]
 8008d52:	463e      	mov	r6, r7
 8008d54:	42be      	cmp	r6, r7
 8008d56:	d900      	bls.n	8008d5a <__ssputs_r+0x72>
 8008d58:	463e      	mov	r6, r7
 8008d5a:	6820      	ldr	r0, [r4, #0]
 8008d5c:	4632      	mov	r2, r6
 8008d5e:	4641      	mov	r1, r8
 8008d60:	f000 faa8 	bl	80092b4 <memmove>
 8008d64:	68a3      	ldr	r3, [r4, #8]
 8008d66:	1b9b      	subs	r3, r3, r6
 8008d68:	60a3      	str	r3, [r4, #8]
 8008d6a:	6823      	ldr	r3, [r4, #0]
 8008d6c:	4433      	add	r3, r6
 8008d6e:	6023      	str	r3, [r4, #0]
 8008d70:	2000      	movs	r0, #0
 8008d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d76:	462a      	mov	r2, r5
 8008d78:	f000 fad4 	bl	8009324 <_realloc_r>
 8008d7c:	4606      	mov	r6, r0
 8008d7e:	2800      	cmp	r0, #0
 8008d80:	d1e0      	bne.n	8008d44 <__ssputs_r+0x5c>
 8008d82:	6921      	ldr	r1, [r4, #16]
 8008d84:	4650      	mov	r0, sl
 8008d86:	f7ff feb7 	bl	8008af8 <_free_r>
 8008d8a:	230c      	movs	r3, #12
 8008d8c:	f8ca 3000 	str.w	r3, [sl]
 8008d90:	89a3      	ldrh	r3, [r4, #12]
 8008d92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d96:	81a3      	strh	r3, [r4, #12]
 8008d98:	f04f 30ff 	mov.w	r0, #4294967295
 8008d9c:	e7e9      	b.n	8008d72 <__ssputs_r+0x8a>
	...

08008da0 <_svfiprintf_r>:
 8008da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008da4:	4698      	mov	r8, r3
 8008da6:	898b      	ldrh	r3, [r1, #12]
 8008da8:	061b      	lsls	r3, r3, #24
 8008daa:	b09d      	sub	sp, #116	@ 0x74
 8008dac:	4607      	mov	r7, r0
 8008dae:	460d      	mov	r5, r1
 8008db0:	4614      	mov	r4, r2
 8008db2:	d510      	bpl.n	8008dd6 <_svfiprintf_r+0x36>
 8008db4:	690b      	ldr	r3, [r1, #16]
 8008db6:	b973      	cbnz	r3, 8008dd6 <_svfiprintf_r+0x36>
 8008db8:	2140      	movs	r1, #64	@ 0x40
 8008dba:	f7ff ff09 	bl	8008bd0 <_malloc_r>
 8008dbe:	6028      	str	r0, [r5, #0]
 8008dc0:	6128      	str	r0, [r5, #16]
 8008dc2:	b930      	cbnz	r0, 8008dd2 <_svfiprintf_r+0x32>
 8008dc4:	230c      	movs	r3, #12
 8008dc6:	603b      	str	r3, [r7, #0]
 8008dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dcc:	b01d      	add	sp, #116	@ 0x74
 8008dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dd2:	2340      	movs	r3, #64	@ 0x40
 8008dd4:	616b      	str	r3, [r5, #20]
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dda:	2320      	movs	r3, #32
 8008ddc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008de0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008de4:	2330      	movs	r3, #48	@ 0x30
 8008de6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008f84 <_svfiprintf_r+0x1e4>
 8008dea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008dee:	f04f 0901 	mov.w	r9, #1
 8008df2:	4623      	mov	r3, r4
 8008df4:	469a      	mov	sl, r3
 8008df6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dfa:	b10a      	cbz	r2, 8008e00 <_svfiprintf_r+0x60>
 8008dfc:	2a25      	cmp	r2, #37	@ 0x25
 8008dfe:	d1f9      	bne.n	8008df4 <_svfiprintf_r+0x54>
 8008e00:	ebba 0b04 	subs.w	fp, sl, r4
 8008e04:	d00b      	beq.n	8008e1e <_svfiprintf_r+0x7e>
 8008e06:	465b      	mov	r3, fp
 8008e08:	4622      	mov	r2, r4
 8008e0a:	4629      	mov	r1, r5
 8008e0c:	4638      	mov	r0, r7
 8008e0e:	f7ff ff6b 	bl	8008ce8 <__ssputs_r>
 8008e12:	3001      	adds	r0, #1
 8008e14:	f000 80a7 	beq.w	8008f66 <_svfiprintf_r+0x1c6>
 8008e18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e1a:	445a      	add	r2, fp
 8008e1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e1e:	f89a 3000 	ldrb.w	r3, [sl]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f000 809f 	beq.w	8008f66 <_svfiprintf_r+0x1c6>
 8008e28:	2300      	movs	r3, #0
 8008e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e32:	f10a 0a01 	add.w	sl, sl, #1
 8008e36:	9304      	str	r3, [sp, #16]
 8008e38:	9307      	str	r3, [sp, #28]
 8008e3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e3e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e40:	4654      	mov	r4, sl
 8008e42:	2205      	movs	r2, #5
 8008e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e48:	484e      	ldr	r0, [pc, #312]	@ (8008f84 <_svfiprintf_r+0x1e4>)
 8008e4a:	f7f7 f9d9 	bl	8000200 <memchr>
 8008e4e:	9a04      	ldr	r2, [sp, #16]
 8008e50:	b9d8      	cbnz	r0, 8008e8a <_svfiprintf_r+0xea>
 8008e52:	06d0      	lsls	r0, r2, #27
 8008e54:	bf44      	itt	mi
 8008e56:	2320      	movmi	r3, #32
 8008e58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e5c:	0711      	lsls	r1, r2, #28
 8008e5e:	bf44      	itt	mi
 8008e60:	232b      	movmi	r3, #43	@ 0x2b
 8008e62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e66:	f89a 3000 	ldrb.w	r3, [sl]
 8008e6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e6c:	d015      	beq.n	8008e9a <_svfiprintf_r+0xfa>
 8008e6e:	9a07      	ldr	r2, [sp, #28]
 8008e70:	4654      	mov	r4, sl
 8008e72:	2000      	movs	r0, #0
 8008e74:	f04f 0c0a 	mov.w	ip, #10
 8008e78:	4621      	mov	r1, r4
 8008e7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e7e:	3b30      	subs	r3, #48	@ 0x30
 8008e80:	2b09      	cmp	r3, #9
 8008e82:	d94b      	bls.n	8008f1c <_svfiprintf_r+0x17c>
 8008e84:	b1b0      	cbz	r0, 8008eb4 <_svfiprintf_r+0x114>
 8008e86:	9207      	str	r2, [sp, #28]
 8008e88:	e014      	b.n	8008eb4 <_svfiprintf_r+0x114>
 8008e8a:	eba0 0308 	sub.w	r3, r0, r8
 8008e8e:	fa09 f303 	lsl.w	r3, r9, r3
 8008e92:	4313      	orrs	r3, r2
 8008e94:	9304      	str	r3, [sp, #16]
 8008e96:	46a2      	mov	sl, r4
 8008e98:	e7d2      	b.n	8008e40 <_svfiprintf_r+0xa0>
 8008e9a:	9b03      	ldr	r3, [sp, #12]
 8008e9c:	1d19      	adds	r1, r3, #4
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	9103      	str	r1, [sp, #12]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	bfbb      	ittet	lt
 8008ea6:	425b      	neglt	r3, r3
 8008ea8:	f042 0202 	orrlt.w	r2, r2, #2
 8008eac:	9307      	strge	r3, [sp, #28]
 8008eae:	9307      	strlt	r3, [sp, #28]
 8008eb0:	bfb8      	it	lt
 8008eb2:	9204      	strlt	r2, [sp, #16]
 8008eb4:	7823      	ldrb	r3, [r4, #0]
 8008eb6:	2b2e      	cmp	r3, #46	@ 0x2e
 8008eb8:	d10a      	bne.n	8008ed0 <_svfiprintf_r+0x130>
 8008eba:	7863      	ldrb	r3, [r4, #1]
 8008ebc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ebe:	d132      	bne.n	8008f26 <_svfiprintf_r+0x186>
 8008ec0:	9b03      	ldr	r3, [sp, #12]
 8008ec2:	1d1a      	adds	r2, r3, #4
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	9203      	str	r2, [sp, #12]
 8008ec8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ecc:	3402      	adds	r4, #2
 8008ece:	9305      	str	r3, [sp, #20]
 8008ed0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008f94 <_svfiprintf_r+0x1f4>
 8008ed4:	7821      	ldrb	r1, [r4, #0]
 8008ed6:	2203      	movs	r2, #3
 8008ed8:	4650      	mov	r0, sl
 8008eda:	f7f7 f991 	bl	8000200 <memchr>
 8008ede:	b138      	cbz	r0, 8008ef0 <_svfiprintf_r+0x150>
 8008ee0:	9b04      	ldr	r3, [sp, #16]
 8008ee2:	eba0 000a 	sub.w	r0, r0, sl
 8008ee6:	2240      	movs	r2, #64	@ 0x40
 8008ee8:	4082      	lsls	r2, r0
 8008eea:	4313      	orrs	r3, r2
 8008eec:	3401      	adds	r4, #1
 8008eee:	9304      	str	r3, [sp, #16]
 8008ef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ef4:	4824      	ldr	r0, [pc, #144]	@ (8008f88 <_svfiprintf_r+0x1e8>)
 8008ef6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008efa:	2206      	movs	r2, #6
 8008efc:	f7f7 f980 	bl	8000200 <memchr>
 8008f00:	2800      	cmp	r0, #0
 8008f02:	d036      	beq.n	8008f72 <_svfiprintf_r+0x1d2>
 8008f04:	4b21      	ldr	r3, [pc, #132]	@ (8008f8c <_svfiprintf_r+0x1ec>)
 8008f06:	bb1b      	cbnz	r3, 8008f50 <_svfiprintf_r+0x1b0>
 8008f08:	9b03      	ldr	r3, [sp, #12]
 8008f0a:	3307      	adds	r3, #7
 8008f0c:	f023 0307 	bic.w	r3, r3, #7
 8008f10:	3308      	adds	r3, #8
 8008f12:	9303      	str	r3, [sp, #12]
 8008f14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f16:	4433      	add	r3, r6
 8008f18:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f1a:	e76a      	b.n	8008df2 <_svfiprintf_r+0x52>
 8008f1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f20:	460c      	mov	r4, r1
 8008f22:	2001      	movs	r0, #1
 8008f24:	e7a8      	b.n	8008e78 <_svfiprintf_r+0xd8>
 8008f26:	2300      	movs	r3, #0
 8008f28:	3401      	adds	r4, #1
 8008f2a:	9305      	str	r3, [sp, #20]
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	f04f 0c0a 	mov.w	ip, #10
 8008f32:	4620      	mov	r0, r4
 8008f34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f38:	3a30      	subs	r2, #48	@ 0x30
 8008f3a:	2a09      	cmp	r2, #9
 8008f3c:	d903      	bls.n	8008f46 <_svfiprintf_r+0x1a6>
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d0c6      	beq.n	8008ed0 <_svfiprintf_r+0x130>
 8008f42:	9105      	str	r1, [sp, #20]
 8008f44:	e7c4      	b.n	8008ed0 <_svfiprintf_r+0x130>
 8008f46:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f4a:	4604      	mov	r4, r0
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e7f0      	b.n	8008f32 <_svfiprintf_r+0x192>
 8008f50:	ab03      	add	r3, sp, #12
 8008f52:	9300      	str	r3, [sp, #0]
 8008f54:	462a      	mov	r2, r5
 8008f56:	4b0e      	ldr	r3, [pc, #56]	@ (8008f90 <_svfiprintf_r+0x1f0>)
 8008f58:	a904      	add	r1, sp, #16
 8008f5a:	4638      	mov	r0, r7
 8008f5c:	f3af 8000 	nop.w
 8008f60:	1c42      	adds	r2, r0, #1
 8008f62:	4606      	mov	r6, r0
 8008f64:	d1d6      	bne.n	8008f14 <_svfiprintf_r+0x174>
 8008f66:	89ab      	ldrh	r3, [r5, #12]
 8008f68:	065b      	lsls	r3, r3, #25
 8008f6a:	f53f af2d 	bmi.w	8008dc8 <_svfiprintf_r+0x28>
 8008f6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f70:	e72c      	b.n	8008dcc <_svfiprintf_r+0x2c>
 8008f72:	ab03      	add	r3, sp, #12
 8008f74:	9300      	str	r3, [sp, #0]
 8008f76:	462a      	mov	r2, r5
 8008f78:	4b05      	ldr	r3, [pc, #20]	@ (8008f90 <_svfiprintf_r+0x1f0>)
 8008f7a:	a904      	add	r1, sp, #16
 8008f7c:	4638      	mov	r0, r7
 8008f7e:	f000 f879 	bl	8009074 <_printf_i>
 8008f82:	e7ed      	b.n	8008f60 <_svfiprintf_r+0x1c0>
 8008f84:	08009db9 	.word	0x08009db9
 8008f88:	08009dc3 	.word	0x08009dc3
 8008f8c:	00000000 	.word	0x00000000
 8008f90:	08008ce9 	.word	0x08008ce9
 8008f94:	08009dbf 	.word	0x08009dbf

08008f98 <_printf_common>:
 8008f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f9c:	4616      	mov	r6, r2
 8008f9e:	4698      	mov	r8, r3
 8008fa0:	688a      	ldr	r2, [r1, #8]
 8008fa2:	690b      	ldr	r3, [r1, #16]
 8008fa4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	bfb8      	it	lt
 8008fac:	4613      	movlt	r3, r2
 8008fae:	6033      	str	r3, [r6, #0]
 8008fb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008fb4:	4607      	mov	r7, r0
 8008fb6:	460c      	mov	r4, r1
 8008fb8:	b10a      	cbz	r2, 8008fbe <_printf_common+0x26>
 8008fba:	3301      	adds	r3, #1
 8008fbc:	6033      	str	r3, [r6, #0]
 8008fbe:	6823      	ldr	r3, [r4, #0]
 8008fc0:	0699      	lsls	r1, r3, #26
 8008fc2:	bf42      	ittt	mi
 8008fc4:	6833      	ldrmi	r3, [r6, #0]
 8008fc6:	3302      	addmi	r3, #2
 8008fc8:	6033      	strmi	r3, [r6, #0]
 8008fca:	6825      	ldr	r5, [r4, #0]
 8008fcc:	f015 0506 	ands.w	r5, r5, #6
 8008fd0:	d106      	bne.n	8008fe0 <_printf_common+0x48>
 8008fd2:	f104 0a19 	add.w	sl, r4, #25
 8008fd6:	68e3      	ldr	r3, [r4, #12]
 8008fd8:	6832      	ldr	r2, [r6, #0]
 8008fda:	1a9b      	subs	r3, r3, r2
 8008fdc:	42ab      	cmp	r3, r5
 8008fde:	dc26      	bgt.n	800902e <_printf_common+0x96>
 8008fe0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008fe4:	6822      	ldr	r2, [r4, #0]
 8008fe6:	3b00      	subs	r3, #0
 8008fe8:	bf18      	it	ne
 8008fea:	2301      	movne	r3, #1
 8008fec:	0692      	lsls	r2, r2, #26
 8008fee:	d42b      	bmi.n	8009048 <_printf_common+0xb0>
 8008ff0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008ff4:	4641      	mov	r1, r8
 8008ff6:	4638      	mov	r0, r7
 8008ff8:	47c8      	blx	r9
 8008ffa:	3001      	adds	r0, #1
 8008ffc:	d01e      	beq.n	800903c <_printf_common+0xa4>
 8008ffe:	6823      	ldr	r3, [r4, #0]
 8009000:	6922      	ldr	r2, [r4, #16]
 8009002:	f003 0306 	and.w	r3, r3, #6
 8009006:	2b04      	cmp	r3, #4
 8009008:	bf02      	ittt	eq
 800900a:	68e5      	ldreq	r5, [r4, #12]
 800900c:	6833      	ldreq	r3, [r6, #0]
 800900e:	1aed      	subeq	r5, r5, r3
 8009010:	68a3      	ldr	r3, [r4, #8]
 8009012:	bf0c      	ite	eq
 8009014:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009018:	2500      	movne	r5, #0
 800901a:	4293      	cmp	r3, r2
 800901c:	bfc4      	itt	gt
 800901e:	1a9b      	subgt	r3, r3, r2
 8009020:	18ed      	addgt	r5, r5, r3
 8009022:	2600      	movs	r6, #0
 8009024:	341a      	adds	r4, #26
 8009026:	42b5      	cmp	r5, r6
 8009028:	d11a      	bne.n	8009060 <_printf_common+0xc8>
 800902a:	2000      	movs	r0, #0
 800902c:	e008      	b.n	8009040 <_printf_common+0xa8>
 800902e:	2301      	movs	r3, #1
 8009030:	4652      	mov	r2, sl
 8009032:	4641      	mov	r1, r8
 8009034:	4638      	mov	r0, r7
 8009036:	47c8      	blx	r9
 8009038:	3001      	adds	r0, #1
 800903a:	d103      	bne.n	8009044 <_printf_common+0xac>
 800903c:	f04f 30ff 	mov.w	r0, #4294967295
 8009040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009044:	3501      	adds	r5, #1
 8009046:	e7c6      	b.n	8008fd6 <_printf_common+0x3e>
 8009048:	18e1      	adds	r1, r4, r3
 800904a:	1c5a      	adds	r2, r3, #1
 800904c:	2030      	movs	r0, #48	@ 0x30
 800904e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009052:	4422      	add	r2, r4
 8009054:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009058:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800905c:	3302      	adds	r3, #2
 800905e:	e7c7      	b.n	8008ff0 <_printf_common+0x58>
 8009060:	2301      	movs	r3, #1
 8009062:	4622      	mov	r2, r4
 8009064:	4641      	mov	r1, r8
 8009066:	4638      	mov	r0, r7
 8009068:	47c8      	blx	r9
 800906a:	3001      	adds	r0, #1
 800906c:	d0e6      	beq.n	800903c <_printf_common+0xa4>
 800906e:	3601      	adds	r6, #1
 8009070:	e7d9      	b.n	8009026 <_printf_common+0x8e>
	...

08009074 <_printf_i>:
 8009074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009078:	7e0f      	ldrb	r7, [r1, #24]
 800907a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800907c:	2f78      	cmp	r7, #120	@ 0x78
 800907e:	4691      	mov	r9, r2
 8009080:	4680      	mov	r8, r0
 8009082:	460c      	mov	r4, r1
 8009084:	469a      	mov	sl, r3
 8009086:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800908a:	d807      	bhi.n	800909c <_printf_i+0x28>
 800908c:	2f62      	cmp	r7, #98	@ 0x62
 800908e:	d80a      	bhi.n	80090a6 <_printf_i+0x32>
 8009090:	2f00      	cmp	r7, #0
 8009092:	f000 80d2 	beq.w	800923a <_printf_i+0x1c6>
 8009096:	2f58      	cmp	r7, #88	@ 0x58
 8009098:	f000 80b9 	beq.w	800920e <_printf_i+0x19a>
 800909c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80090a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80090a4:	e03a      	b.n	800911c <_printf_i+0xa8>
 80090a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80090aa:	2b15      	cmp	r3, #21
 80090ac:	d8f6      	bhi.n	800909c <_printf_i+0x28>
 80090ae:	a101      	add	r1, pc, #4	@ (adr r1, 80090b4 <_printf_i+0x40>)
 80090b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80090b4:	0800910d 	.word	0x0800910d
 80090b8:	08009121 	.word	0x08009121
 80090bc:	0800909d 	.word	0x0800909d
 80090c0:	0800909d 	.word	0x0800909d
 80090c4:	0800909d 	.word	0x0800909d
 80090c8:	0800909d 	.word	0x0800909d
 80090cc:	08009121 	.word	0x08009121
 80090d0:	0800909d 	.word	0x0800909d
 80090d4:	0800909d 	.word	0x0800909d
 80090d8:	0800909d 	.word	0x0800909d
 80090dc:	0800909d 	.word	0x0800909d
 80090e0:	08009221 	.word	0x08009221
 80090e4:	0800914b 	.word	0x0800914b
 80090e8:	080091db 	.word	0x080091db
 80090ec:	0800909d 	.word	0x0800909d
 80090f0:	0800909d 	.word	0x0800909d
 80090f4:	08009243 	.word	0x08009243
 80090f8:	0800909d 	.word	0x0800909d
 80090fc:	0800914b 	.word	0x0800914b
 8009100:	0800909d 	.word	0x0800909d
 8009104:	0800909d 	.word	0x0800909d
 8009108:	080091e3 	.word	0x080091e3
 800910c:	6833      	ldr	r3, [r6, #0]
 800910e:	1d1a      	adds	r2, r3, #4
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	6032      	str	r2, [r6, #0]
 8009114:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009118:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800911c:	2301      	movs	r3, #1
 800911e:	e09d      	b.n	800925c <_printf_i+0x1e8>
 8009120:	6833      	ldr	r3, [r6, #0]
 8009122:	6820      	ldr	r0, [r4, #0]
 8009124:	1d19      	adds	r1, r3, #4
 8009126:	6031      	str	r1, [r6, #0]
 8009128:	0606      	lsls	r6, r0, #24
 800912a:	d501      	bpl.n	8009130 <_printf_i+0xbc>
 800912c:	681d      	ldr	r5, [r3, #0]
 800912e:	e003      	b.n	8009138 <_printf_i+0xc4>
 8009130:	0645      	lsls	r5, r0, #25
 8009132:	d5fb      	bpl.n	800912c <_printf_i+0xb8>
 8009134:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009138:	2d00      	cmp	r5, #0
 800913a:	da03      	bge.n	8009144 <_printf_i+0xd0>
 800913c:	232d      	movs	r3, #45	@ 0x2d
 800913e:	426d      	negs	r5, r5
 8009140:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009144:	4859      	ldr	r0, [pc, #356]	@ (80092ac <_printf_i+0x238>)
 8009146:	230a      	movs	r3, #10
 8009148:	e011      	b.n	800916e <_printf_i+0xfa>
 800914a:	6821      	ldr	r1, [r4, #0]
 800914c:	6833      	ldr	r3, [r6, #0]
 800914e:	0608      	lsls	r0, r1, #24
 8009150:	f853 5b04 	ldr.w	r5, [r3], #4
 8009154:	d402      	bmi.n	800915c <_printf_i+0xe8>
 8009156:	0649      	lsls	r1, r1, #25
 8009158:	bf48      	it	mi
 800915a:	b2ad      	uxthmi	r5, r5
 800915c:	2f6f      	cmp	r7, #111	@ 0x6f
 800915e:	4853      	ldr	r0, [pc, #332]	@ (80092ac <_printf_i+0x238>)
 8009160:	6033      	str	r3, [r6, #0]
 8009162:	bf14      	ite	ne
 8009164:	230a      	movne	r3, #10
 8009166:	2308      	moveq	r3, #8
 8009168:	2100      	movs	r1, #0
 800916a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800916e:	6866      	ldr	r6, [r4, #4]
 8009170:	60a6      	str	r6, [r4, #8]
 8009172:	2e00      	cmp	r6, #0
 8009174:	bfa2      	ittt	ge
 8009176:	6821      	ldrge	r1, [r4, #0]
 8009178:	f021 0104 	bicge.w	r1, r1, #4
 800917c:	6021      	strge	r1, [r4, #0]
 800917e:	b90d      	cbnz	r5, 8009184 <_printf_i+0x110>
 8009180:	2e00      	cmp	r6, #0
 8009182:	d04b      	beq.n	800921c <_printf_i+0x1a8>
 8009184:	4616      	mov	r6, r2
 8009186:	fbb5 f1f3 	udiv	r1, r5, r3
 800918a:	fb03 5711 	mls	r7, r3, r1, r5
 800918e:	5dc7      	ldrb	r7, [r0, r7]
 8009190:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009194:	462f      	mov	r7, r5
 8009196:	42bb      	cmp	r3, r7
 8009198:	460d      	mov	r5, r1
 800919a:	d9f4      	bls.n	8009186 <_printf_i+0x112>
 800919c:	2b08      	cmp	r3, #8
 800919e:	d10b      	bne.n	80091b8 <_printf_i+0x144>
 80091a0:	6823      	ldr	r3, [r4, #0]
 80091a2:	07df      	lsls	r7, r3, #31
 80091a4:	d508      	bpl.n	80091b8 <_printf_i+0x144>
 80091a6:	6923      	ldr	r3, [r4, #16]
 80091a8:	6861      	ldr	r1, [r4, #4]
 80091aa:	4299      	cmp	r1, r3
 80091ac:	bfde      	ittt	le
 80091ae:	2330      	movle	r3, #48	@ 0x30
 80091b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80091b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80091b8:	1b92      	subs	r2, r2, r6
 80091ba:	6122      	str	r2, [r4, #16]
 80091bc:	f8cd a000 	str.w	sl, [sp]
 80091c0:	464b      	mov	r3, r9
 80091c2:	aa03      	add	r2, sp, #12
 80091c4:	4621      	mov	r1, r4
 80091c6:	4640      	mov	r0, r8
 80091c8:	f7ff fee6 	bl	8008f98 <_printf_common>
 80091cc:	3001      	adds	r0, #1
 80091ce:	d14a      	bne.n	8009266 <_printf_i+0x1f2>
 80091d0:	f04f 30ff 	mov.w	r0, #4294967295
 80091d4:	b004      	add	sp, #16
 80091d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091da:	6823      	ldr	r3, [r4, #0]
 80091dc:	f043 0320 	orr.w	r3, r3, #32
 80091e0:	6023      	str	r3, [r4, #0]
 80091e2:	4833      	ldr	r0, [pc, #204]	@ (80092b0 <_printf_i+0x23c>)
 80091e4:	2778      	movs	r7, #120	@ 0x78
 80091e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80091ea:	6823      	ldr	r3, [r4, #0]
 80091ec:	6831      	ldr	r1, [r6, #0]
 80091ee:	061f      	lsls	r7, r3, #24
 80091f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80091f4:	d402      	bmi.n	80091fc <_printf_i+0x188>
 80091f6:	065f      	lsls	r7, r3, #25
 80091f8:	bf48      	it	mi
 80091fa:	b2ad      	uxthmi	r5, r5
 80091fc:	6031      	str	r1, [r6, #0]
 80091fe:	07d9      	lsls	r1, r3, #31
 8009200:	bf44      	itt	mi
 8009202:	f043 0320 	orrmi.w	r3, r3, #32
 8009206:	6023      	strmi	r3, [r4, #0]
 8009208:	b11d      	cbz	r5, 8009212 <_printf_i+0x19e>
 800920a:	2310      	movs	r3, #16
 800920c:	e7ac      	b.n	8009168 <_printf_i+0xf4>
 800920e:	4827      	ldr	r0, [pc, #156]	@ (80092ac <_printf_i+0x238>)
 8009210:	e7e9      	b.n	80091e6 <_printf_i+0x172>
 8009212:	6823      	ldr	r3, [r4, #0]
 8009214:	f023 0320 	bic.w	r3, r3, #32
 8009218:	6023      	str	r3, [r4, #0]
 800921a:	e7f6      	b.n	800920a <_printf_i+0x196>
 800921c:	4616      	mov	r6, r2
 800921e:	e7bd      	b.n	800919c <_printf_i+0x128>
 8009220:	6833      	ldr	r3, [r6, #0]
 8009222:	6825      	ldr	r5, [r4, #0]
 8009224:	6961      	ldr	r1, [r4, #20]
 8009226:	1d18      	adds	r0, r3, #4
 8009228:	6030      	str	r0, [r6, #0]
 800922a:	062e      	lsls	r6, r5, #24
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	d501      	bpl.n	8009234 <_printf_i+0x1c0>
 8009230:	6019      	str	r1, [r3, #0]
 8009232:	e002      	b.n	800923a <_printf_i+0x1c6>
 8009234:	0668      	lsls	r0, r5, #25
 8009236:	d5fb      	bpl.n	8009230 <_printf_i+0x1bc>
 8009238:	8019      	strh	r1, [r3, #0]
 800923a:	2300      	movs	r3, #0
 800923c:	6123      	str	r3, [r4, #16]
 800923e:	4616      	mov	r6, r2
 8009240:	e7bc      	b.n	80091bc <_printf_i+0x148>
 8009242:	6833      	ldr	r3, [r6, #0]
 8009244:	1d1a      	adds	r2, r3, #4
 8009246:	6032      	str	r2, [r6, #0]
 8009248:	681e      	ldr	r6, [r3, #0]
 800924a:	6862      	ldr	r2, [r4, #4]
 800924c:	2100      	movs	r1, #0
 800924e:	4630      	mov	r0, r6
 8009250:	f7f6 ffd6 	bl	8000200 <memchr>
 8009254:	b108      	cbz	r0, 800925a <_printf_i+0x1e6>
 8009256:	1b80      	subs	r0, r0, r6
 8009258:	6060      	str	r0, [r4, #4]
 800925a:	6863      	ldr	r3, [r4, #4]
 800925c:	6123      	str	r3, [r4, #16]
 800925e:	2300      	movs	r3, #0
 8009260:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009264:	e7aa      	b.n	80091bc <_printf_i+0x148>
 8009266:	6923      	ldr	r3, [r4, #16]
 8009268:	4632      	mov	r2, r6
 800926a:	4649      	mov	r1, r9
 800926c:	4640      	mov	r0, r8
 800926e:	47d0      	blx	sl
 8009270:	3001      	adds	r0, #1
 8009272:	d0ad      	beq.n	80091d0 <_printf_i+0x15c>
 8009274:	6823      	ldr	r3, [r4, #0]
 8009276:	079b      	lsls	r3, r3, #30
 8009278:	d413      	bmi.n	80092a2 <_printf_i+0x22e>
 800927a:	68e0      	ldr	r0, [r4, #12]
 800927c:	9b03      	ldr	r3, [sp, #12]
 800927e:	4298      	cmp	r0, r3
 8009280:	bfb8      	it	lt
 8009282:	4618      	movlt	r0, r3
 8009284:	e7a6      	b.n	80091d4 <_printf_i+0x160>
 8009286:	2301      	movs	r3, #1
 8009288:	4632      	mov	r2, r6
 800928a:	4649      	mov	r1, r9
 800928c:	4640      	mov	r0, r8
 800928e:	47d0      	blx	sl
 8009290:	3001      	adds	r0, #1
 8009292:	d09d      	beq.n	80091d0 <_printf_i+0x15c>
 8009294:	3501      	adds	r5, #1
 8009296:	68e3      	ldr	r3, [r4, #12]
 8009298:	9903      	ldr	r1, [sp, #12]
 800929a:	1a5b      	subs	r3, r3, r1
 800929c:	42ab      	cmp	r3, r5
 800929e:	dcf2      	bgt.n	8009286 <_printf_i+0x212>
 80092a0:	e7eb      	b.n	800927a <_printf_i+0x206>
 80092a2:	2500      	movs	r5, #0
 80092a4:	f104 0619 	add.w	r6, r4, #25
 80092a8:	e7f5      	b.n	8009296 <_printf_i+0x222>
 80092aa:	bf00      	nop
 80092ac:	08009dca 	.word	0x08009dca
 80092b0:	08009ddb 	.word	0x08009ddb

080092b4 <memmove>:
 80092b4:	4288      	cmp	r0, r1
 80092b6:	b510      	push	{r4, lr}
 80092b8:	eb01 0402 	add.w	r4, r1, r2
 80092bc:	d902      	bls.n	80092c4 <memmove+0x10>
 80092be:	4284      	cmp	r4, r0
 80092c0:	4623      	mov	r3, r4
 80092c2:	d807      	bhi.n	80092d4 <memmove+0x20>
 80092c4:	1e43      	subs	r3, r0, #1
 80092c6:	42a1      	cmp	r1, r4
 80092c8:	d008      	beq.n	80092dc <memmove+0x28>
 80092ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80092d2:	e7f8      	b.n	80092c6 <memmove+0x12>
 80092d4:	4402      	add	r2, r0
 80092d6:	4601      	mov	r1, r0
 80092d8:	428a      	cmp	r2, r1
 80092da:	d100      	bne.n	80092de <memmove+0x2a>
 80092dc:	bd10      	pop	{r4, pc}
 80092de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092e6:	e7f7      	b.n	80092d8 <memmove+0x24>

080092e8 <_sbrk_r>:
 80092e8:	b538      	push	{r3, r4, r5, lr}
 80092ea:	4d06      	ldr	r5, [pc, #24]	@ (8009304 <_sbrk_r+0x1c>)
 80092ec:	2300      	movs	r3, #0
 80092ee:	4604      	mov	r4, r0
 80092f0:	4608      	mov	r0, r1
 80092f2:	602b      	str	r3, [r5, #0]
 80092f4:	f7fc fdf0 	bl	8005ed8 <_sbrk>
 80092f8:	1c43      	adds	r3, r0, #1
 80092fa:	d102      	bne.n	8009302 <_sbrk_r+0x1a>
 80092fc:	682b      	ldr	r3, [r5, #0]
 80092fe:	b103      	cbz	r3, 8009302 <_sbrk_r+0x1a>
 8009300:	6023      	str	r3, [r4, #0]
 8009302:	bd38      	pop	{r3, r4, r5, pc}
 8009304:	20002a90 	.word	0x20002a90

08009308 <memcpy>:
 8009308:	440a      	add	r2, r1
 800930a:	4291      	cmp	r1, r2
 800930c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009310:	d100      	bne.n	8009314 <memcpy+0xc>
 8009312:	4770      	bx	lr
 8009314:	b510      	push	{r4, lr}
 8009316:	f811 4b01 	ldrb.w	r4, [r1], #1
 800931a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800931e:	4291      	cmp	r1, r2
 8009320:	d1f9      	bne.n	8009316 <memcpy+0xe>
 8009322:	bd10      	pop	{r4, pc}

08009324 <_realloc_r>:
 8009324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009328:	4680      	mov	r8, r0
 800932a:	4615      	mov	r5, r2
 800932c:	460c      	mov	r4, r1
 800932e:	b921      	cbnz	r1, 800933a <_realloc_r+0x16>
 8009330:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009334:	4611      	mov	r1, r2
 8009336:	f7ff bc4b 	b.w	8008bd0 <_malloc_r>
 800933a:	b92a      	cbnz	r2, 8009348 <_realloc_r+0x24>
 800933c:	f7ff fbdc 	bl	8008af8 <_free_r>
 8009340:	2400      	movs	r4, #0
 8009342:	4620      	mov	r0, r4
 8009344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009348:	f000 f81a 	bl	8009380 <_malloc_usable_size_r>
 800934c:	4285      	cmp	r5, r0
 800934e:	4606      	mov	r6, r0
 8009350:	d802      	bhi.n	8009358 <_realloc_r+0x34>
 8009352:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009356:	d8f4      	bhi.n	8009342 <_realloc_r+0x1e>
 8009358:	4629      	mov	r1, r5
 800935a:	4640      	mov	r0, r8
 800935c:	f7ff fc38 	bl	8008bd0 <_malloc_r>
 8009360:	4607      	mov	r7, r0
 8009362:	2800      	cmp	r0, #0
 8009364:	d0ec      	beq.n	8009340 <_realloc_r+0x1c>
 8009366:	42b5      	cmp	r5, r6
 8009368:	462a      	mov	r2, r5
 800936a:	4621      	mov	r1, r4
 800936c:	bf28      	it	cs
 800936e:	4632      	movcs	r2, r6
 8009370:	f7ff ffca 	bl	8009308 <memcpy>
 8009374:	4621      	mov	r1, r4
 8009376:	4640      	mov	r0, r8
 8009378:	f7ff fbbe 	bl	8008af8 <_free_r>
 800937c:	463c      	mov	r4, r7
 800937e:	e7e0      	b.n	8009342 <_realloc_r+0x1e>

08009380 <_malloc_usable_size_r>:
 8009380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009384:	1f18      	subs	r0, r3, #4
 8009386:	2b00      	cmp	r3, #0
 8009388:	bfbc      	itt	lt
 800938a:	580b      	ldrlt	r3, [r1, r0]
 800938c:	18c0      	addlt	r0, r0, r3
 800938e:	4770      	bx	lr

08009390 <_init>:
 8009390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009392:	bf00      	nop
 8009394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009396:	bc08      	pop	{r3}
 8009398:	469e      	mov	lr, r3
 800939a:	4770      	bx	lr

0800939c <_fini>:
 800939c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800939e:	bf00      	nop
 80093a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093a2:	bc08      	pop	{r3}
 80093a4:	469e      	mov	lr, r3
 80093a6:	4770      	bx	lr
